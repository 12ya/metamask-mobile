def getPassword(String currentUser, String keyChain) {
	def stdout = new ByteArrayOutputStream()
	def stderr = new ByteArrayOutputStream()
	if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
		exec {
			commandLine 'security', '-q', 'find-generic-password', '-a', currentUser, '-s', keyChain, '-w'
			standardOutput = stdout
			errorOutput = stderr
			ignoreExitValue true
		}
	} else if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
		exec {
			// In order for this to work you need to store it:
			// secret-tool store --label='mm' server mm user mm key mm-upload-key
			commandLine 'secret-tool', 'lookup', 'server', currentUser, 'user', currentUser, 'key', keyChain
			standardOutput = stdout
			errorOutput = stderr
			ignoreExitValue true
		}
	} else {
		throw new GradleException('Unsupported OS! Only MacOSx and Linux are supported')
	}
	//noinspection GroovyAssignabilityCheck
	stdout.toString().trim()
}

apply plugin: "com.android.application"

import com.android.build.OutputFile
import org.apache.tools.ant.taskdefs.condition.Os

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation. If none specified and
 *   // "index.android.js" exists, it will be used. Otherwise "index.js" is
 *   // default. Can be overridden with ENTRY_FILE environment variable.
 *   entryFile: "index.android.js",
 *
 *   // https://reactnative.dev/docs/performance#enable-the-ram-format
 *   bundleCommand: "ram-bundle",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //	   'bundleIn${productFlavor}${buildType}'
 *   //	   'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //	   'devDisabledIn${productFlavor}${buildType}'
 *   //	   'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
	entryFile: "index.js",
	enableHermes: true //System.getenv('METAMASK_ENVIRONMENT') == 'production'
]

apply from: "../../node_modules/react-native/react.gradle"
 project.ext.sentryCli = [
	logLevel: "debug",
	sentryProperties: System.getenv('SENTRY_PROPERTIES') ? System.getenv('SENTRY_PROPERTIES') : '../../sentry.properties'
]

apply from: "../../node_modules/@sentry/react-native/sentry.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = true

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc-intl:+'
/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and that value will be read here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false)

/**
 * Architectures to build native code for.
 */
def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

	defaultConfig {
		applicationId "io.metamask"
		minSdkVersion rootProject.ext.minSdkVersion
		targetSdkVersion rootProject.ext.targetSdkVersion
		versionCode 1028
		versionName "5.12.1"
		 buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
        if (isNewArchitectureEnabled()) {
            // We configure the CMake build only if you decide to opt-in for the New Architecture.
            externalNativeBuild {
                cmake {
                    arguments "-DPROJECT_BUILD_DIR=$buildDir",
                        "-DREACT_ANDROID_DIR=$rootDir/../node_modules/react-native/ReactAndroid",
                        "-DREACT_ANDROID_BUILD_DIR=$rootDir/../node_modules/react-native/ReactAndroid/build",
                        "-DNODE_MODULES_DIR=$rootDir/../node_modules",
                        "-DANDROID_STL=c++_shared"
                }
            }
            if (!enableSeparateBuildPerCPUArchitecture) {
                ndk {
                    abiFilters (*reactNativeArchitectures())
                }
            }
        }
		multiDexEnabled true
		testBuildType System.getProperty('testBuildType', 'debug')
		missingDimensionStrategy "minReactNative", "minReactNative46"
		testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
	/* 
 UNCOMMENT THIS IS DOESN'T WORK or comment the other code instead of the new architecture code
 		ndk {
			abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
		} */
		dexOptions {
			javaMaxHeapSize "2048M"
		}

		manifestPlaceholders = [
			MM_BRANCH_KEY_TEST: "$System.env.MM_BRANCH_KEY_TEST",
			MM_BRANCH_KEY_LIVE: "$System.env.MM_BRANCH_KEY_LIVE",
			MM_MIXPANEL_TOKEN: "$System.env.MM_MIXPANEL_TOKEN"
		]
		missingDimensionStrategy 'react-native-camera', 'general'
  }

	packagingOptions {
		exclude 'META-INF/DEPENDENCIES'
	}

	signingConfigs {
		release {
			storeFile file('../keystores/release.keystore')
			storePassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PASSWORD")
			keyAlias System.getenv("BITRISEIO_ANDROID_KEYSTORE_ALIAS")
			keyPassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD")
		}
    qa {
      storeFile file('../keystores/internalRelease.keystore')
      storePassword System.getenv("BITRISEIO_ANDROID_QA_KEYSTORE_PASSWORD")
      keyAlias System.getenv("BITRISEIO_ANDROID_QA_KEYSTORE_ALIAS")
      keyPassword System.getenv("BITRISEIO_ANDROID_QA_KEYSTORE_PRIVATE_KEY_PASSWORD")
    }
		debug {
      storeFile file('debug.keystore')
      storePassword 'android'
      keyAlias 'androiddebugkey'
      keyPassword 'android'
    }
	}
	 if (isNewArchitectureEnabled()) {
        // We configure the NDK build only if you decide to opt-in for the New Architecture.
        externalNativeBuild {
            cmake {
                path "$projectDir/src/main/jni/CMakeLists.txt"
            }
        }
        def reactAndroidProjectDir = project(':ReactAndroid').projectDir
        def packageReactNdkDebugLibs = tasks.register("packageReactNdkDebugLibs", Copy) {
            dependsOn(":ReactAndroid:packageReactNdkDebugLibsForBuck")
            from("$reactAndroidProjectDir/src/main/jni/prebuilt/lib")
            into("$buildDir/react-ndk/exported")
        }
        def packageReactNdkReleaseLibs = tasks.register("packageReactNdkReleaseLibs", Copy) {
            dependsOn(":ReactAndroid:packageReactNdkReleaseLibsForBuck")
            from("$reactAndroidProjectDir/src/main/jni/prebuilt/lib")
            into("$buildDir/react-ndk/exported")
        }
        afterEvaluate {
            // If you wish to add a custom TurboModule or component locally,
            // you should uncomment this line.
            // preBuild.dependsOn("generateCodegenArtifactsFromSchema")
            preDebugBuild.dependsOn(packageReactNdkDebugLibs)
            preReleaseBuild.dependsOn(packageReactNdkReleaseLibs)
            // Due to a bug inside AGP, we have to explicitly set a dependency
            // between configureCMakeDebug* tasks and the preBuild tasks.
            // This can be removed once this is solved: https://issuetracker.google.com/issues/207403732
            configureCMakeRelWithDebInfo.dependsOn(preReleaseBuild)
            configureCMakeDebug.dependsOn(preDebugBuild)
            reactNativeArchitectures().each { architecture ->
                tasks.findByName("configureCMakeDebug[${architecture}]")?.configure {
                    dependsOn("preDebugBuild")
                }
                tasks.findByName("configureCMakeRelWithDebInfo[${architecture}]")?.configure {
                    dependsOn("preReleaseBuild")
                }
            }
        }
    }

	splits {
		abi {
			reset()
			enable enableSeparateBuildPerCPUArchitecture
			universalApk false  // If true, also generate a universal APK
			include (*reactNativeArchitectures())
		}
	}

	buildTypes {
		debug {
			manifestPlaceholders = [isDebug:true]
		
			multiDexEnabled true
			signingConfig signingConfigs.debug
		}
		release {
			manifestPlaceholders = [isDebug:false]
			minifyEnabled true
			multiDexEnabled true
			shrinkResources true
		}
	}

	flavorDimensions "version"
   		productFlavors {
        qa {
          dimension "version"
          applicationIdSuffix ".qa"
          applicationId "io.metamask"
          signingConfig signingConfigs.qa
        }
        prod {
          dimension "version"
          applicationId "io.metamask"
          signingConfig signingConfigs.release
        }
    	}

	buildTypes.each {
		it.buildConfigField 'String', 'foxCode', "\"$System.env.MM_FOX_CODE\""

	}
	// applicationVariants are e.g. debug, release
	applicationVariants.all { variant ->
		variant.outputs.each { output ->
            // https://developer.android.com/studio/build/configure-apk-splits.html
      def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
			def abi = output.getFilter(OutputFile.ABI)
			if (abi != null) {  // null for the universal-debug, universal-release variants
				output.versionCodeOverride =
					defaultConfig.versionCode * 1000 + versionCodes.get(abi)
			}
		}
	}
}

configurations.all {
	exclude group: 'com.facebook.react', module: 'react-native'
}

dependencies {
	implementation project(':lottie-react-native')

	implementation project(':react-native-gesture-handler')

	implementation 'androidx.multidex:multidex:2.0.1'
	implementation 'androidx.annotation:annotation:1.1.0'
	implementation 'androidx.appcompat:appcompat:1.2.0'
	// Replace 'com.facebook.react:react-native:+' with project(':ReactAndroid') to respect changes that we make in native Android code
	implementation project(':ReactAndroid')
	implementation 'org.chromium:v8-android:+'
	implementation 'com.google.android.gms:play-services-wallet:18.0.0'
	implementation "io.branch.sdk.android:library:5.+"
	implementation 'com.mixpanel.android:mixpanel-android:5.+'
	androidTestImplementation('com.wix:detox:+') { transitive = true }
	androidTestImplementation 'junit:junit:4.12'
	implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
	implementation "com.android.installreferrer:installreferrer:2.2"
	implementation "androidx.work:work-runtime-ktx:2.7.0"

	debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.fbjni'
    }

    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }

    if (enableHermes) {
      //noinspection GradleDynamicVersion
        implementation("com.facebook.react:hermes-engine:+") { // From node_modules
            exclude group:'com.facebook.fbjni'
		}

    } else {
        implementation jscFlavor
    }
}

if (isNewArchitectureEnabled()) {
    // If new architecture is enabled, we let you build RN from source
    // Otherwise we fallback to a prebuilt .aar bundled in the NPM package.
    // This will be applied to all the imported transtitive dependency.
    configurations.all {
        resolutionStrategy.dependencySubstitution {
            substitute(module("com.facebook.react:react-native"))
                    .using(project(":ReactAndroid"))
                    .because("On New Architecture we're building React Native from source")
            substitute(module("com.facebook.react:hermes-engine"))
                    .using(project(":ReactAndroid:hermes-engine"))
                    .because("On New Architecture we're building Hermes from source")
        }
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
	from configurations.implementation
	into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)

def isNewArchitectureEnabled() {
    // To opt-in for the New Architecture, you can either:
    // - Set `newArchEnabled` to true inside the `gradle.properties` file
    // - Invoke gradle with `-newArchEnabled=true`
    // - Set an environment variable `ORG_GRADLE_PROJECT_newArchEnabled=true`
    return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
}