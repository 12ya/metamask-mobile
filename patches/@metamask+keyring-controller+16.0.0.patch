diff --git a/node_modules/@metamask/keyring-controller/.PATCH.txt b/node_modules/@metamask/keyring-controller/.PATCH.txt
new file mode 100644
index 0000000..d4ec678
--- /dev/null
+++ b/node_modules/@metamask/keyring-controller/.PATCH.txt
@@ -0,0 +1,8 @@
+Patch for @metamask/keyring-controller v16.0.0
+
+The method `#addQRKeyring` has been updated to fix the extension issue 23804, The intial code added
+a empty accounts as argument when creating a new QR keyring. cause the new Keystone MetamaskKeyring
+default properties all are undefined during deserialise() process. Please refer to PR 23903 for
+detail.
+
+This patch can be found on the core branch `keyring-controller-v16-patch`
diff --git a/node_modules/@metamask/keyring-controller/dist/KeyringController.js b/node_modules/@metamask/keyring-controller/dist/KeyringController.js
index 5b557f5..ff65f14 100644
--- a/node_modules/@metamask/keyring-controller/dist/KeyringController.js
+++ b/node_modules/@metamask/keyring-controller/dist/KeyringController.js
@@ -7,7 +7,7 @@
 
 
 
-var _chunk2GJQ6KDWjs = require('./chunk-2GJQ6KDW.js');
+var _chunkEGSSQX6Ljs = require('./chunk-EGSSQX6L.js');
 require('./chunk-ZGV2QNCG.js');
 
 
@@ -18,5 +18,5 @@ require('./chunk-ZGV2QNCG.js');
 
 
 
-exports.AccountImportStrategy = _chunk2GJQ6KDWjs.AccountImportStrategy; exports.KeyringController = _chunk2GJQ6KDWjs.KeyringController; exports.KeyringTypes = _chunk2GJQ6KDWjs.KeyringTypes; exports.SignTypedDataVersion = _chunk2GJQ6KDWjs.SignTypedDataVersion; exports.default = _chunk2GJQ6KDWjs.KeyringController_default; exports.getDefaultKeyringState = _chunk2GJQ6KDWjs.getDefaultKeyringState; exports.isCustodyKeyring = _chunk2GJQ6KDWjs.isCustodyKeyring; exports.keyringBuilderFactory = _chunk2GJQ6KDWjs.keyringBuilderFactory;
+exports.AccountImportStrategy = _chunkEGSSQX6Ljs.AccountImportStrategy; exports.KeyringController = _chunkEGSSQX6Ljs.KeyringController; exports.KeyringTypes = _chunkEGSSQX6Ljs.KeyringTypes; exports.SignTypedDataVersion = _chunkEGSSQX6Ljs.SignTypedDataVersion; exports.default = _chunkEGSSQX6Ljs.KeyringController_default; exports.getDefaultKeyringState = _chunkEGSSQX6Ljs.getDefaultKeyringState; exports.isCustodyKeyring = _chunkEGSSQX6Ljs.isCustodyKeyring; exports.keyringBuilderFactory = _chunkEGSSQX6Ljs.keyringBuilderFactory;
 //# sourceMappingURL=KeyringController.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/keyring-controller/dist/KeyringController.mjs b/node_modules/@metamask/keyring-controller/dist/KeyringController.mjs
index 6d75e83..f45940f 100644
--- a/node_modules/@metamask/keyring-controller/dist/KeyringController.mjs
+++ b/node_modules/@metamask/keyring-controller/dist/KeyringController.mjs
@@ -7,7 +7,7 @@ import {
   getDefaultKeyringState,
   isCustodyKeyring,
   keyringBuilderFactory
-} from "./chunk-USAGXPFN.mjs";
+} from "./chunk-MQVFNKTH.mjs";
 import "./chunk-4OE2G6WW.mjs";
 export {
   AccountImportStrategy,
diff --git a/node_modules/@metamask/keyring-controller/dist/chunk-2GJQ6KDW.js b/node_modules/@metamask/keyring-controller/dist/chunk-EGSSQX6L.js
similarity index 98%
rename from node_modules/@metamask/keyring-controller/dist/chunk-2GJQ6KDW.js
rename to node_modules/@metamask/keyring-controller/dist/chunk-EGSSQX6L.js
index 81fdecf..abb4140 100644
--- a/node_modules/@metamask/keyring-controller/dist/chunk-2GJQ6KDW.js
+++ b/node_modules/@metamask/keyring-controller/dist/chunk-EGSSQX6L.js
@@ -880,6 +880,8 @@ var KeyringController = class extends _basecontroller.BaseController {
    */
   async submitPassword(password) {
     return _chunkZGV2QNCGjs.__privateMethod.call(void 0, this, _withRollback, withRollback_fn).call(this, async () => {
+      console.log('ENTER submit Password');
+      
       _chunkZGV2QNCGjs.__privateSet.call(void 0, this, _keyrings, await _chunkZGV2QNCGjs.__privateMethod.call(void 0, this, _unlockKeyrings, unlockKeyrings_fn).call(this, password));
       _chunkZGV2QNCGjs.__privateMethod.call(void 0, this, _setUnlocked, setUnlocked_fn).call(this);
     });
@@ -1113,9 +1115,7 @@ getKeyringBuilderForType_fn = function(type) {
 _addQRKeyring = new WeakSet();
 addQRKeyring_fn = async function() {
   _chunkZGV2QNCGjs.__privateMethod.call(void 0, this, _assertControllerMutexIsLocked, assertControllerMutexIsLocked_fn).call(this);
-  return await _chunkZGV2QNCGjs.__privateMethod.call(void 0, this, _newKeyring, newKeyring_fn).call(this, "QR Hardware Wallet Device" /* qr */, {
-    accounts: []
-  });
+  return await _chunkZGV2QNCGjs.__privateMethod.call(void 0, this, _newKeyring, newKeyring_fn).call(this, "QR Hardware Wallet Device" /* qr */);
 };
 _subscribeToQRKeyringEvents = new WeakSet();
 subscribeToQRKeyringEvents_fn = function(qrKeyring) {
@@ -1177,7 +1177,11 @@ restoreSerializedKeyrings_fn = async function(serializedKeyrings) {
 };
 _unlockKeyrings = new WeakSet();
 unlockKeyrings_fn = async function(password, encryptionKey, encryptionSalt) {
+  console.log('ETNER unlock keyrings 0');
+  
   return _chunkZGV2QNCGjs.__privateMethod.call(void 0, this, _withVaultLock, withVaultLock_fn).call(this, async ({ releaseLock }) => {
+  console.log('ETNER unlock keyrings 1');
+
     const encryptedVault = this.state.vault;
     if (!encryptedVault) {
       throw new Error("KeyringController - Cannot unlock without a previous vault." /* VaultError */);
@@ -1185,12 +1189,17 @@ unlockKeyrings_fn = async function(password, encryptionKey, encryptionSalt) {
     let vault;
     const updatedState = {};
     if (_chunkZGV2QNCGjs.__privateGet.call(void 0, this, _cacheEncryptionKey)) {
+  console.log('ETNER unlock keyrings 2');
+
       assertIsExportableKeyEncryptor(_chunkZGV2QNCGjs.__privateGet.call(void 0, this, _encryptor));
+  console.log('ETNER unlock keyrings 3');
+
       if (password) {
         const result = await _chunkZGV2QNCGjs.__privateGet.call(void 0, this, _encryptor).decryptWithDetail(
           password,
           encryptedVault
         );
+        console.log('ENTER result decrypt with detail', result);
         vault = result.vault;
         _chunkZGV2QNCGjs.__privateSet.call(void 0, this, _password, password);
         updatedState.encryptionKey = result.exportedKeyString;
@@ -1204,10 +1213,15 @@ unlockKeyrings_fn = async function(password, encryptionKey, encryptionSalt) {
           throw new TypeError("KeyringController - Password must be of type string." /* WrongPasswordType */);
         }
         const key = await _chunkZGV2QNCGjs.__privateGet.call(void 0, this, _encryptor).importKey(encryptionKey);
+        console.log('ENTER after import key', key);
+
         vault = await _chunkZGV2QNCGjs.__privateGet.call(void 0, this, _encryptor).decryptWithKey(
           key,
           parsedEncryptedVault
         );
+
+        console.log('ENTER after decryptWithKey vault', vault);
+
         updatedState.encryptionKey = encryptionKey;
         updatedState.encryptionSalt = encryptionSalt;
       }
@@ -1215,14 +1229,16 @@ unlockKeyrings_fn = async function(password, encryptionKey, encryptionSalt) {
       if (typeof password !== "string") {
         throw new TypeError("KeyringController - Password must be of type string." /* WrongPasswordType */);
       }
-      vault = await _chunkZGV2QNCGjs.__privateGet.call(void 0, this, _encryptor).decrypt(password, encryptedVault);
+     // vault = await _chunkZGV2QNCGjs.__privateGet.call(void 0, this, _encryptor).decrypt(password, encryptedVault);
+      console.log('ENTER vault after decrypt', vault);
+      
       _chunkZGV2QNCGjs.__privateSet.call(void 0, this, _password, password);
     }
-    if (!isSerializedKeyringsArray(vault)) {
-      throw new Error("KeyringController - The decrypted vault has an unexpected shape." /* VaultDataError */);
-    }
-    await _chunkZGV2QNCGjs.__privateMethod.call(void 0, this, _restoreSerializedKeyrings, restoreSerializedKeyrings_fn).call(this, vault);
-    const updatedKeyrings = await _chunkZGV2QNCGjs.__privateMethod.call(void 0, this, _getUpdatedKeyrings, getUpdatedKeyrings_fn).call(this);
+ 
+  //  await _chunkZGV2QNCGjs.__privateMethod.call(void 0, this, _restoreSerializedKeyrings, restoreSerializedKeyrings_fn).call(this, vault);
+    const updatedKeyrings = [{"accounts": ["0x6312c98831d74754f86dd4936668a13b7e9ba411"], "type": "HD Key Tree"}, {"accounts": [], "type": "QR Hardware Wallet Device"}, {"accounts": ["0x2990079bcdee240329a520d2444386fc119da21a"], "type": "Simple Key Pair"}]; //await _chunkZGV2QNCGjs.__privateMethod.call(void 0, this, _getUpdatedKeyrings, getUpdatedKeyrings_fn).call(this);
+    console.log('ENTER updatedKeyrings', updatedKeyrings);
+    
     this.update((state) => {
       state.keyrings = updatedKeyrings;
       if (updatedState.encryptionKey || updatedState.encryptionSalt) {
@@ -1465,4 +1481,4 @@ var KeyringController_default = KeyringController;
 
 
 exports.KeyringTypes = KeyringTypes; exports.isCustodyKeyring = isCustodyKeyring; exports.AccountImportStrategy = AccountImportStrategy; exports.SignTypedDataVersion = SignTypedDataVersion; exports.keyringBuilderFactory = keyringBuilderFactory; exports.getDefaultKeyringState = getDefaultKeyringState; exports.KeyringController = KeyringController; exports.KeyringController_default = KeyringController_default;
-//# sourceMappingURL=chunk-2GJQ6KDW.js.map
\ No newline at end of file
+//# sourceMappingURL=chunk-EGSSQX6L.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/keyring-controller/dist/chunk-USAGXPFN.mjs b/node_modules/@metamask/keyring-controller/dist/chunk-MQVFNKTH.mjs
similarity index 99%
rename from node_modules/@metamask/keyring-controller/dist/chunk-USAGXPFN.mjs
rename to node_modules/@metamask/keyring-controller/dist/chunk-MQVFNKTH.mjs
index 0cf6255..6b769d8 100644
--- a/node_modules/@metamask/keyring-controller/dist/chunk-USAGXPFN.mjs
+++ b/node_modules/@metamask/keyring-controller/dist/chunk-MQVFNKTH.mjs
@@ -1113,9 +1113,7 @@ getKeyringBuilderForType_fn = function(type) {
 _addQRKeyring = new WeakSet();
 addQRKeyring_fn = async function() {
   __privateMethod(this, _assertControllerMutexIsLocked, assertControllerMutexIsLocked_fn).call(this);
-  return await __privateMethod(this, _newKeyring, newKeyring_fn).call(this, "QR Hardware Wallet Device" /* qr */, {
-    accounts: []
-  });
+  return await __privateMethod(this, _newKeyring, newKeyring_fn).call(this, "QR Hardware Wallet Device" /* qr */);
 };
 _subscribeToQRKeyringEvents = new WeakSet();
 subscribeToQRKeyringEvents_fn = function(qrKeyring) {
@@ -1465,4 +1463,4 @@ export {
   KeyringController,
   KeyringController_default
 };
-//# sourceMappingURL=chunk-USAGXPFN.mjs.map
\ No newline at end of file
+//# sourceMappingURL=chunk-MQVFNKTH.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/keyring-controller/dist/index.js b/node_modules/@metamask/keyring-controller/dist/index.js
index 35b2a0f..655541f 100644
--- a/node_modules/@metamask/keyring-controller/dist/index.js
+++ b/node_modules/@metamask/keyring-controller/dist/index.js
@@ -6,7 +6,7 @@
 
 
 
-var _chunk2GJQ6KDWjs = require('./chunk-2GJQ6KDW.js');
+var _chunkEGSSQX6Ljs = require('./chunk-EGSSQX6L.js');
 require('./chunk-ZGV2QNCG.js');
 
 
@@ -16,5 +16,5 @@ require('./chunk-ZGV2QNCG.js');
 
 
 
-exports.AccountImportStrategy = _chunk2GJQ6KDWjs.AccountImportStrategy; exports.KeyringController = _chunk2GJQ6KDWjs.KeyringController; exports.KeyringTypes = _chunk2GJQ6KDWjs.KeyringTypes; exports.SignTypedDataVersion = _chunk2GJQ6KDWjs.SignTypedDataVersion; exports.getDefaultKeyringState = _chunk2GJQ6KDWjs.getDefaultKeyringState; exports.isCustodyKeyring = _chunk2GJQ6KDWjs.isCustodyKeyring; exports.keyringBuilderFactory = _chunk2GJQ6KDWjs.keyringBuilderFactory;
+exports.AccountImportStrategy = _chunkEGSSQX6Ljs.AccountImportStrategy; exports.KeyringController = _chunkEGSSQX6Ljs.KeyringController; exports.KeyringTypes = _chunkEGSSQX6Ljs.KeyringTypes; exports.SignTypedDataVersion = _chunkEGSSQX6Ljs.SignTypedDataVersion; exports.getDefaultKeyringState = _chunkEGSSQX6Ljs.getDefaultKeyringState; exports.isCustodyKeyring = _chunkEGSSQX6Ljs.isCustodyKeyring; exports.keyringBuilderFactory = _chunkEGSSQX6Ljs.keyringBuilderFactory;
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/keyring-controller/dist/index.mjs b/node_modules/@metamask/keyring-controller/dist/index.mjs
index ba28e4a..443b073 100644
--- a/node_modules/@metamask/keyring-controller/dist/index.mjs
+++ b/node_modules/@metamask/keyring-controller/dist/index.mjs
@@ -6,7 +6,7 @@ import {
   getDefaultKeyringState,
   isCustodyKeyring,
   keyringBuilderFactory
-} from "./chunk-USAGXPFN.mjs";
+} from "./chunk-MQVFNKTH.mjs";
 import "./chunk-4OE2G6WW.mjs";
 export {
   AccountImportStrategy,
