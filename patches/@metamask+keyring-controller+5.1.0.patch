diff --git a/node_modules/@metamask/keyring-controller/dist/KeyringController.js b/node_modules/@metamask/keyring-controller/dist/KeyringController.js
index ecec472..183cbdf 100644
--- a/node_modules/@metamask/keyring-controller/dist/KeyringController.js
+++ b/node_modules/@metamask/keyring-controller/dist/KeyringController.js
@@ -706,16 +706,19 @@ class KeyringController extends base_controller_1.BaseController {
             yield __classPrivateFieldGet(this, _KeyringController_keyring, "f").addNewAccount(keyring);
             const newAccounts = yield __classPrivateFieldGet(this, _KeyringController_keyring, "f").getAccounts();
             this.updateIdentities(newAccounts);
+            let newHardwareWalletAddress = '';
             newAccounts.forEach((address) => {
                 if (!oldAccounts.includes(address)) {
                     if (this.setAccountLabel) {
                         this.setAccountLabel(address, `${keyring.getName()} ${index}`);
                     }
-                    this.setSelectedAddress(address);
+                    newHardwareWalletAddress = address;
                 }
             });
             yield __classPrivateFieldGet(this, _KeyringController_keyring, "f").persistAllKeyrings();
             yield this.fullUpdate();
+            // Return address of hardware wallet address that was created.
+            return newHardwareWalletAddress;
         });
     }
     getAccountKeyringType(account) {
@@ -726,13 +729,15 @@ class KeyringController extends base_controller_1.BaseController {
     forgetQRDevice() {
         return __awaiter(this, void 0, void 0, function* () {
             const keyring = yield this.getOrAddQRKeyring();
+            const accountsIncludingHardware = (yield __classPrivateFieldGet(this, _KeyringController_keyring, "f").getAccounts());
             keyring.forgetDevice();
-            const accounts = (yield __classPrivateFieldGet(this, _KeyringController_keyring, "f").getAccounts());
-            accounts.forEach((account) => {
-                this.setSelectedAddress(account);
-            });
+            const remainingAccounts = (yield __classPrivateFieldGet(this, _KeyringController_keyring, "f").getAccounts());
+            const removedAccounts = accountsIncludingHardware.filter((address) => !remainingAccounts.includes(address));
+            this.updateIdentities(remainingAccounts);
             yield __classPrivateFieldGet(this, _KeyringController_keyring, "f").persistAllKeyrings();
             yield this.fullUpdate();
+            // Return list of removed accounts as well as remaining accounts for the app to use.
+            return { removedAccounts, remainingAccounts };
         });
     }
 }
