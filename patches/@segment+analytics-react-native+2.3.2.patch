diff --git a/node_modules/@segment/analytics-react-native/src/analytics.ts b/node_modules/@segment/analytics-react-native/src/analytics.ts
index ab1a744..8a0a921 100644
--- a/node_modules/@segment/analytics-react-native/src/analytics.ts
+++ b/node_modules/@segment/analytics-react-native/src/analytics.ts
@@ -492,10 +492,12 @@ export class SegmentClient {
     this.logger.info('SCREEN event saved', event);
   }
 
-  track(eventName: string, options?: JsonMap) {
+  track(eventName: string, options?: JsonMap, userId?: string, anonymousId?: string) {
     const event = createTrackEvent({
       event: eventName,
       properties: options,
+      userId: userId,
+      anonymousId: anonymousId,
     });
 
     this.process(event);
@@ -669,12 +671,8 @@ export class SegmentClient {
     this.appState = nextAppState;
   }
 
-  reset(resetAnonymousId: boolean = true) {
-    const anonymousId =
-      resetAnonymousId === true
-        ? getUUID()
-        : this.store.userInfo.get().anonymousId;
-
+  reset() {
+    const anonymousId = '0x0000000000000000'
     this.store.userInfo.set({
       anonymousId,
       userId: undefined,
diff --git a/node_modules/@segment/analytics-react-native/src/client.tsx b/node_modules/@segment/analytics-react-native/src/client.tsx
index f9ed76b..7326a16 100644
--- a/node_modules/@segment/analytics-react-native/src/client.tsx
+++ b/node_modules/@segment/analytics-react-native/src/client.tsx
@@ -67,6 +67,6 @@ export const useAnalytics = (): ClientMethods => {
     flush: () => client.flush(),
     group: (...args) => client.group(...args),
     alias: (...args) => client.alias(...args),
-    reset: (...args) => client.reset(...args),
+    reset: () => client.reset(),
   };
 };
diff --git a/node_modules/@segment/analytics-react-native/src/events.ts b/node_modules/@segment/analytics-react-native/src/events.ts
index d940f68..cbfd29e 100644
--- a/node_modules/@segment/analytics-react-native/src/events.ts
+++ b/node_modules/@segment/analytics-react-native/src/events.ts
@@ -17,13 +17,19 @@ import {
 export const createTrackEvent = ({
   event,
   properties = {},
+  userId,
+  anonymousId,
 }: {
   event: string;
   properties?: JsonMap;
+  userId?: string;
+  anonymousId?: string;
 }): TrackEventType => ({
   type: EventType.TrackEvent,
   event,
   properties,
+  userId,
+  anonymousId,
 });
 
 export const createScreenEvent = ({
@@ -89,13 +95,8 @@ export const applyRawEventData = (
 ): SegmentEvent => {
   return {
     ...event,
-    anonymousId: userInfo.anonymousId,
     messageId: getUUID(),
     timestamp: new Date().toISOString(),
     integrations: event.integrations ?? {},
-    userId:
-      isAliasEvent(event) || isIdentifyEvent(event)
-        ? event.userId
-        : userInfo.userId,
   };
 };
