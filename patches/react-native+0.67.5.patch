diff --git a/node_modules/react-native/ReactAndroid/build.gradle b/node_modules/react-native/ReactAndroid/build.gradle
index 513d76c..9cc30b1 100644
--- a/node_modules/react-native/ReactAndroid/build.gradle
+++ b/node_modules/react-native/ReactAndroid/build.gradle
@@ -446,15 +446,11 @@ task installArchives {
 }
 
 android {
-    compileSdkVersion 30
-    ndkVersion ANDROID_NDK_VERSION
-    if (ANDROID_NDK_PATH != null) {
-        ndkPath ANDROID_NDK_PATH
-    }
+    compileSdkVersion rootProject.ext.compileSdkVersion
 
     defaultConfig {
-        minSdkVersion(21)
-        targetSdkVersion(28)
+        minSdkVersion rootProject.ext.minSdkVersion
+		targetSdkVersion rootProject.ext.targetSdkVersion
         versionCode(1)
         versionName("1.0")
 
diff --git a/node_modules/react-native/ReactAndroid/gradle.properties b/node_modules/react-native/ReactAndroid/gradle.properties
index 1ef5b92..a1405da 100644
--- a/node_modules/react-native/ReactAndroid/gradle.properties
+++ b/node_modules/react-native/ReactAndroid/gradle.properties
@@ -13,7 +13,7 @@ JUNIT_VERSION=4.12
 ANDROIDX_TEST_VERSION=1.1.0
 FRESCO_VERSION=2.5.0
 OKHTTP_VERSION=4.9.2
-SO_LOADER_VERSION=0.10.1
+SO_LOADER_VERSION=0.10.4
 
 BOOST_VERSION=1_63_0
 DOUBLE_CONVERSION_VERSION=1.1.6
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactEditText.java b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactEditText.java
index 84d5942..3fe970c 100644
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactEditText.java
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactEditText.java
@@ -31,6 +31,7 @@ import android.view.KeyEvent;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.accessibility.AccessibilityNodeInfo;
+import android.view.inputmethod.BaseInputConnection;
 import android.view.inputmethod.EditorInfo;
 import android.view.inputmethod.InputConnection;
 import android.view.inputmethod.InputMethodManager;
@@ -89,6 +90,16 @@ public class ReactEditText extends AppCompatEditText
   /** A count of events sent to JS or C++. */
   protected int mNativeEventCount;
 
+  /**                                                                                                    
+   * Taken from EditorInfo.IME_FLAG_NO_PERSONALIZED_LEARNING We can't use that
+   * value directly as it was only added on Oreo, but we can apply the value
+   * anyway.
+   */
+  private static final int IME_FLAG_NO_PERSONALIZED_LEARNING = 0x1000000;
+  /** Samsung Manufacturer Name */
+  private static final String SAMSUNG_MANUFACTURER_NAME = "samsung";
+  /** Samsung Device Check */
+  private static final Boolean IS_SAMSUNG_DEVICE = Build.MANUFACTURER.equals(SAMSUNG_MANUFACTURER_NAME);
   private static final int UNSET = -1;
 
   private @Nullable ArrayList<TextWatcher> mListeners;
@@ -247,10 +258,25 @@ public class ReactEditText extends AppCompatEditText
   public InputConnection onCreateInputConnection(EditorInfo outAttrs) {
     ReactContext reactContext = getReactContext(this);
     InputConnection inputConnection = super.onCreateInputConnection(outAttrs);
-    if (inputConnection != null && mOnKeyPress) {
-      inputConnection =
-          new ReactEditTextInputConnectionWrapper(
-              inputConnection, reactContext, this, mEventDispatcher);
+
+    InputConnection inputConnection;
+    // Don't apply learning flag on Samsung devices. Samsung Keyboards do not
+    // support incognito mode.
+    if (IS_SAMSUNG_DEVICE) {
+      // Default React-Native implementation
+      inputConnection = super.onCreateInputConnection(outAttrs);
+      if (isMultiline() && getBlurOnSubmit()) {
+        // Remove IME_FLAG_NO_ENTER_ACTION to keep the original IME_OPTION
+        outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NO_ENTER_ACTION;
+      }
+    } else {
+      inputConnection = new BaseInputConnection(this, false);
+      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+        outAttrs.imeOptions = EditorInfo.IME_FLAG_NO_PERSONALIZED_LEARNING;
+      } else {
+        // Cover OS versions below Oreo
+        outAttrs.imeOptions = IME_FLAG_NO_PERSONALIZED_LEARNING;
+      }
     }
 
     if (isMultiline() && getBlurOnSubmit()) {
diff --git a/node_modules/react-native/packages/react-native-codegen/.babelrc b/node_modules/react-native/packages/react-native-codegen/.babelrc
new file mode 100644
index 0000000..7a6194f
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/.babelrc
@@ -0,0 +1,12 @@
+{
+  "plugins": [
+    "@babel/plugin-proposal-object-rest-spread",
+    "@babel/plugin-transform-async-to-generator",
+    "@babel/plugin-transform-destructuring",
+    "@babel/plugin-transform-flow-strip-types",
+    "@babel/plugin-syntax-dynamic-import",
+    "@babel/plugin-proposal-class-properties",
+    "@babel/plugin-proposal-nullish-coalescing-operator",
+    "@babel/plugin-proposal-optional-chaining"
+  ]
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/.prettierrc b/node_modules/react-native/packages/react-native-codegen/.prettierrc
new file mode 100644
index 0000000..20374fd
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/.prettierrc
@@ -0,0 +1,7 @@
+{
+  "requirePragma": true,
+  "singleQuote": true,
+  "trailingComma": "all",
+  "bracketSpacing": false,
+  "jsxBracketSameLine": true
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/BUCK b/node_modules/react-native/packages/react-native-codegen/BUCK
new file mode 100644
index 0000000..c0c516a
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/BUCK
@@ -0,0 +1,122 @@
+load("//tools/build_defs:fb_native_wrapper.bzl", "fb_native")
+load("//tools/build_defs/oss:rn_defs.bzl", "ANDROID", "APPLE", "IOS", "IS_OSS_BUILD", "react_native_root_target", "react_native_target", "rn_android_library", "rn_xplat_cxx_library")
+load("//tools/build_defs/third_party:yarn_defs.bzl", "yarn_workspace")
+load(":DEFS.bzl", "rn_codegen_cli", "rn_codegen_components", "rn_codegen_modules")
+
+rn_codegen_cli()
+
+SETUP_ENV_DEPS = [] if IS_OSS_BUILD else [
+    "//xplat/js:setup_env",
+]
+
+fb_native.genrule(
+    name = "codegen_tests_schema",
+    srcs = glob(
+        [
+            "**/e2e/__test_fixtures__/components/*NativeComponent.js",
+            "**/e2e/__test_fixtures__/modules/Native*.js",
+        ],
+    ),
+    cmd = "$(exe {}) $OUT $SRCS".format(react_native_root_target("packages/react-native-codegen:write_to_json")),
+    out = "schema-codegen_tests.json",
+)
+
+rn_codegen_components(
+    name = "codegen_tests",
+    schema_target = ":codegen_tests_schema",
+)
+
+rn_codegen_modules(
+    name = "FBReactNativeTestSpec",
+    android_package_name = "com.facebook.fbreact.specs",
+    ios_assume_nonnull = False,
+    schema_target = ":codegen_tests_schema",
+)
+
+rn_android_library(
+    name = "rn_codegen_library_java",
+    srcs = glob(
+        ["buck_tests/*.java"],
+    ),
+    autoglob = False,
+    visibility = [
+        "PUBLIC",
+    ],
+    deps = [
+        react_native_target("java/com/facebook/react/bridge:bridge"),
+        react_native_target("java/com/facebook/react/common:common"),
+        react_native_target("java/com/facebook/react/views/view:view"),
+        react_native_target("java/com/facebook/react/uimanager:uimanager"),
+        ":generated_components_java-codegen_tests",
+    ],
+)
+
+rn_xplat_cxx_library(
+    name = "rn_codegen_library",
+    srcs = ["buck_tests/emptyFile.cpp"],
+    headers = [],
+    compiler_flags = [
+        "-fexceptions",
+        "-frtti",
+        "-std=c++17",
+        "-Wall",
+    ],
+    platforms = (ANDROID, APPLE),
+    preprocessor_flags = [
+        "-DLOG_TAG=\"ReactNative\"",
+        "-DWITH_FBSYSTRACE=1",
+    ],
+    visibility = [
+        "PUBLIC",
+    ],
+    deps = [
+        ":generated_components-codegen_tests",
+    ],
+)
+
+rn_xplat_cxx_library(
+    name = "rn_codegen_library_mm",
+    srcs = ["buck_tests/emptyFile.mm"],
+    headers = [],
+    apple_sdks = (IOS,),
+    compiler_flags = [
+        "-fexceptions",
+        "-frtti",
+        "-std=c++17",
+        "-Wall",
+    ],
+    platforms = APPLE,
+    preprocessor_flags = [
+        "-DLOG_TAG=\"ReactNative\"",
+        "-DWITH_FBSYSTRACE=1",
+    ],
+    visibility = [
+        "PUBLIC",
+    ],
+    deps = [
+        ":FBReactNativeTestSpec",
+        ":generated_components-codegen_tests",
+    ],
+)
+
+yarn_workspace(
+    name = "yarn-workspace",
+    srcs = glob(
+        ["**/*.js"],
+        exclude = [
+            "**/__fixtures__/**",
+            "**/__flowtests__/**",
+            "**/__mocks__/**",
+            "**/__server_snapshot_tests__/**",
+            "**/__tests__/**",
+            "**/node_modules/**",
+            "**/node_modules/.bin/**",
+            "**/.*",
+            "**/.*/**",
+            "**/.*/.*",
+            "**/*.xcodeproj/**",
+            "**/*.xcworkspace/**",
+        ],
+    ),
+    visibility = ["PUBLIC"],
+)
diff --git a/node_modules/react-native/packages/react-native-codegen/DEFS.bzl b/node_modules/react-native/packages/react-native-codegen/DEFS.bzl
new file mode 100644
index 0000000..43ac82e
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/DEFS.bzl
@@ -0,0 +1,587 @@
+# Copyright (c) Facebook, Inc. and its affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+load("//tools/build_defs:buckconfig.bzl", "read_bool")
+load("//tools/build_defs:fb_native_wrapper.bzl", "fb_native")
+load(
+    "//tools/build_defs/oss:rn_defs.bzl",
+    "ANDROID",
+    "APPLE",
+    "CXX",
+    "IOS",
+    "IS_OSS_BUILD",
+    "MACOSX",
+    "YOGA_CXX_TARGET",
+    "fb_xplat_cxx_test",
+    "get_apple_compiler_flags",
+    "get_apple_inspector_flags",
+    "get_preprocessor_flags_for_build_mode",
+    "react_native_dep",
+    "react_native_root_target",
+    "react_native_target",
+    "react_native_xplat_shared_library_target",
+    "react_native_xplat_target",
+    "react_native_xplat_target_apple",
+    "rn_android_library",
+    "rn_apple_library",
+    "rn_xplat_cxx_library",
+)
+
+# Call this in the react-native-codegen/BUCK file
+def rn_codegen_cli():
+    if not IS_OSS_BUILD:
+        # FB Internal Setup
+        fb_native.sh_binary(
+            name = "write_to_json",
+            main = "src/cli/combine/combine_js_to_schema.sh",
+            resources = [
+                "src/cli/combine/combine-js-to-schema.js",
+                "src/cli/combine/combine_js_to_schema.sh",
+                ":yarn-workspace",
+                "//xplat/js:setup_env",
+            ],
+            visibility = ["PUBLIC"],
+        )
+
+        fb_native.sh_binary(
+            name = "generate_all_from_schema",
+            main = "src/cli/generators/generate-all.sh",
+            resources = native.glob(
+                [
+                    "buck_tests/**/*.js",
+                    "src/**/*.js",
+                ],
+            ) + [
+                "package.json",
+                "//xplat/js:setup_env",
+            ],
+            visibility = ["PUBLIC"],
+        )
+    else:
+        # OSS setup, assumes yarn and node (v12.0.0+) are installed.
+        fb_native.genrule(
+            name = "setup_cli",
+            srcs = native.glob([
+                "scripts/**/*",
+                "src/**/*",
+            ], exclude = [
+                "__tests__/**/*",
+            ]) + [
+                ".babelrc",
+                ".prettierrc",
+                "package.json",
+            ],
+            out = "build",
+            bash = r"""
+                set -euo pipefail
+                mkdir -p "$OUT"
+                rsync -rLptgoD "$SRCDIR/" "$OUT"
+                cd "$OUT"
+                yarn install 2> >(grep -v '^warning' 1>&2)
+                yarn run build
+            """,
+        )
+
+        fb_native.sh_binary(
+            name = "write_to_json",
+            main = "scripts/buck-oss/combine_js_to_schema.sh",
+            resources = [
+                ":setup_cli",
+            ],
+            visibility = ["PUBLIC"],
+        )
+
+        fb_native.sh_binary(
+            name = "generate_all_from_schema",
+            main = "scripts/buck-oss/generate-all.sh",
+            resources = [
+                ":setup_cli",
+            ],
+            visibility = ["PUBLIC"],
+        )
+
+def rn_codegen_modules(
+        name,
+        android_package_name,
+        ios_assume_nonnull,
+        library_labels = [],
+        schema_target = ""):
+    generate_fixtures_rule_name = "{}-codegen-modules".format(name)
+    generate_module_hobjcpp_name = "{}-codegen-modules-hobjcpp".format(name)
+    generate_module_mm_name = "{}-codegen-modules-mm".format(name)
+    generate_module_java_name = "{}-codegen-modules-java".format(name)
+    generate_module_java_zip_name = "{}-codegen-modules-java_zip".format(name)
+    generate_module_jni_h_name = "{}-codegen-modules-jni_h".format(name)
+    generate_module_jni_cpp_name = "{}-codegen-modules-jni_cpp".format(name)
+
+    fb_native.genrule(
+        name = generate_fixtures_rule_name,
+        srcs = native.glob(["src/generators/**/*.js"]),
+        cmd = "$(exe {generator_script}) $(location {schema_target}) {library_name} $OUT {android_package_name} {ios_assume_nonnull}".format(
+            generator_script = react_native_root_target("packages/react-native-codegen:generate_all_from_schema"),
+            schema_target = schema_target,
+            library_name = name,
+            android_package_name = android_package_name,
+            ios_assume_nonnull = ios_assume_nonnull,
+        ),
+        out = "codegenfiles-{}".format(name),
+        labels = ["codegen_rule"],
+    )
+
+    ##################
+    # Android handling
+    ##################
+    fb_native.genrule(
+        name = generate_module_java_name,
+        cmd = "mkdir -p $OUT/{spec_path} && cp -r $(location {generator_target})/java/{spec_path}/* $OUT/{spec_path}/".format(
+            spec_path = android_package_name.replace(".", "/"),
+            generator_target = ":" + generate_fixtures_rule_name,
+        ),
+        out = "src",
+        labels = ["codegen_rule"],
+    )
+
+    fb_native.zip_file(
+        name = generate_module_java_zip_name,
+        srcs = [":{}".format(generate_module_java_name)],
+        out = "{}.src.zip".format(generate_module_java_zip_name),
+        labels = ["codegen_rule"],
+    )
+
+    fb_native.genrule(
+        name = generate_module_jni_h_name,
+        cmd = "cp $(location :{})/jni/{}.h $OUT".format(generate_fixtures_rule_name, name),
+        out = "{}.h".format(name),
+        labels = ["codegen_rule"],
+    )
+
+    fb_native.genrule(
+        name = generate_module_jni_cpp_name,
+        cmd = "cp $(location :{})/jni/{}-generated.cpp $OUT".format(generate_fixtures_rule_name, name),
+        out = "{}-generated.cpp".format(name),
+        labels = ["codegen_rule"],
+    )
+
+    rn_android_library(
+        name = "{}".format(name),
+        srcs = [
+            ":{}".format(generate_module_java_zip_name),
+        ],
+        autoglob = False,
+        labels = library_labels + ["codegen_rule"],
+        visibility = ["PUBLIC"],
+        deps = [
+            react_native_dep("third-party/java/jsr-305:jsr-305"),
+            react_native_dep("third-party/java/jsr-330:jsr-330"),
+            react_native_target("java/com/facebook/react/bridge:bridge"),
+            react_native_target("java/com/facebook/react/common:common"),
+        ],
+        exported_deps = [
+            react_native_target("java/com/facebook/react/turbomodule/core/interfaces:interfaces"),
+        ],
+    )
+
+    rn_xplat_cxx_library(
+        name = "{}-jni".format(name),
+        srcs = [
+            ":{}".format(generate_module_jni_cpp_name),
+        ],
+        header_namespace = "",
+        headers = [
+            ":{}".format(generate_module_jni_h_name),
+        ],
+        exported_headers = {
+            "{}/{}.h".format(name, name): ":{}".format(generate_module_jni_h_name),
+        },
+        compiler_flags = [
+            "-fexceptions",
+            "-frtti",
+            "-std=c++14",
+            "-Wall",
+        ],
+        force_static = True,
+        preprocessor_flags = [
+            "-DLOG_TAG=\"ReactNative\"",
+            "-DWITH_FBSYSTRACE=1",
+        ],
+        visibility = [
+            "PUBLIC",
+        ],
+        deps = [],
+        exported_deps = [
+            react_native_xplat_shared_library_target("jsi:jsi"),
+            react_native_xplat_target("react/nativemodule/core:core"),
+        ],
+        platforms = (ANDROID,),
+        labels = library_labels + ["codegen_rule"],
+    )
+
+    ##############
+    # iOS handling
+    ##############
+    if not IS_OSS_BUILD:
+        # iOS Buck build isn't fully working in OSS, so let's skip it for OSS for now.
+        fb_native.genrule(
+            name = generate_module_hobjcpp_name,
+            cmd = "cp $(location :{})/{}.h $OUT".format(generate_fixtures_rule_name, name),
+            out = "{}.h".format(name),
+            labels = ["codegen_rule"],
+        )
+
+        fb_native.genrule(
+            name = generate_module_mm_name,
+            cmd = "cp $(location :{})/{}-generated.mm $OUT".format(generate_fixtures_rule_name, name),
+            out = "{}-generated.mm".format(name),
+            labels = ["codegen_rule"],
+        )
+
+        rn_apple_library(
+            name = "{}Apple".format(name),
+            extension_api_only = True,
+            header_namespace = "",
+            sdks = (IOS),
+            compiler_flags = [
+                "-Wno-unused-private-field",
+            ],
+            exported_headers = {
+                "{}/{}.h".format(name, name): ":{}".format(generate_module_hobjcpp_name),
+            },
+            headers = [
+                ":{}".format(generate_module_hobjcpp_name),
+            ],
+            srcs = [
+                ":{}".format(generate_module_mm_name),
+            ],
+            autoglob = False,
+            labels = library_labels + ["codegen_rule"],
+            visibility = ["PUBLIC"],
+            exported_deps = [
+                "//xplat/js/react-native-github:RCTTypeSafety",
+                "//xplat/js/react-native-github/Libraries/RCTRequired:RCTRequired",
+                react_native_xplat_target_apple("react/nativemodule/core:core"),
+            ],
+        )
+
+def rn_codegen_components(
+        name = "",
+        schema_target = "",
+        library_labels = []):
+    generate_fixtures_rule_name = "generate_fixtures_components-{}".format(name)
+    generate_component_descriptor_h_name = "generate_component_descriptor_h-{}".format(name)
+    generate_component_hobjcpp_name = "generate_component_hobjcpp-{}".format(name)
+    generate_event_emitter_cpp_name = "generate_event_emitter_cpp-{}".format(name)
+    generate_event_emitter_h_name = "generate_event_emitter_h-{}".format(name)
+    generate_props_cpp_name = "generate_props_cpp-{}".format(name)
+    generate_props_h_name = "generated_props_h-{}".format(name)
+    generate_tests_cpp_name = "generate_tests_cpp-{}".format(name)
+    generate_shadow_node_cpp_name = "generated_shadow_node_cpp-{}".format(name)
+    generate_shadow_node_h_name = "generated_shadow_node_h-{}".format(name)
+    copy_generated_java_files = "copy_generated_java_files-{}".format(name)
+    copy_generated_cxx_files = "copy_generated_cxx_files-{}".format(name)
+    zip_generated_java_files = "zip_generated_java_files-{}".format(name)
+    zip_generated_cxx_files = "zip_generated_cxx_files-{}".format(name)
+
+    fb_native.genrule(
+        name = generate_fixtures_rule_name,
+        srcs = native.glob(["src/generators/**/*.js"]),
+        cmd = "$(exe {}) $(location {}) {} $OUT".format(react_native_root_target("packages/react-native-codegen:generate_all_from_schema"), schema_target, name),
+        out = "codegenfiles-{}".format(name),
+        labels = ["codegen_rule"],
+    )
+
+    fb_native.genrule(
+        name = generate_component_descriptor_h_name,
+        cmd = "cp $(location :{})/ComponentDescriptors.h $OUT".format(generate_fixtures_rule_name),
+        out = "ComponentDescriptors.h",
+        labels = ["codegen_rule"],
+    )
+
+    fb_native.genrule(
+        name = generate_component_hobjcpp_name,
+        cmd = "cp $(location :{})/RCTComponentViewHelpers.h $OUT".format(generate_fixtures_rule_name),
+        out = "RCTComponentViewHelpers.h",
+        labels = ["codegen_rule"],
+    )
+
+    fb_native.genrule(
+        name = generate_event_emitter_cpp_name,
+        cmd = "cp $(location :{})/EventEmitters.cpp $OUT".format(generate_fixtures_rule_name),
+        out = "EventEmitters.cpp",
+        labels = ["codegen_rule"],
+    )
+
+    fb_native.genrule(
+        name = generate_event_emitter_h_name,
+        cmd = "cp $(location :{})/EventEmitters.h $OUT".format(generate_fixtures_rule_name),
+        out = "EventEmitters.h",
+        labels = ["codegen_rule"],
+    )
+
+    fb_native.genrule(
+        name = generate_props_cpp_name,
+        cmd = "cp $(location :{})/Props.cpp $OUT".format(generate_fixtures_rule_name),
+        out = "Props.cpp",
+        labels = ["codegen_rule"],
+    )
+
+    fb_native.genrule(
+        name = generate_tests_cpp_name,
+        cmd = "cp $(location :{})/Tests.cpp $OUT".format(generate_fixtures_rule_name),
+        out = "Tests.cpp",
+        labels = ["codegen_rule"],
+    )
+
+    fb_native.genrule(
+        name = generate_props_h_name,
+        cmd = "cp $(location :{})/Props.h $OUT".format(generate_fixtures_rule_name),
+        out = "Props.h",
+        labels = ["codegen_rule"],
+    )
+
+    fb_native.genrule(
+        name = copy_generated_java_files,
+        # TODO: support different package name internally.
+        # Right now, it's hardcoded to `com.facebook.react.viewmanagers`.
+        cmd = "mkdir -p $OUT/com/facebook/react/viewmanagers && cp -R $(location :{})/java/com/facebook/react/viewmanagers/* $OUT/com/facebook/react/viewmanagers".format(generate_fixtures_rule_name),
+        out = "java",
+        labels = ["codegen_rule"],
+    )
+
+    fb_native.genrule(
+        name = copy_generated_cxx_files,
+        # The command below is filtering C++ iOS files, this will be refactored when C++ codegen is finished.
+        cmd = "mkdir -p $OUT && find $(location :{}) -not -path '*/rncore*' -not -path '*Tests*' -not -path '*NativeModules*' -not -path '*RCTComponentViewHelpers*' -type f \\( -iname \\*.h -o -iname \\*.cpp \\) -print0 -exec cp {{}} $OUT \\;".format(generate_fixtures_rule_name),
+        out = "cxx",
+        labels = ["codegen_rule"],
+    )
+
+    fb_native.zip_file(
+        name = zip_generated_cxx_files,
+        srcs = [":{}".format(copy_generated_cxx_files)],
+        out = "{}.src.zip".format(zip_generated_cxx_files),
+        visibility = ["PUBLIC"],
+        labels = ["codegen_rule"],
+    )
+
+    fb_native.zip_file(
+        name = zip_generated_java_files,
+        srcs = [":{}".format(copy_generated_java_files)],
+        out = "{}.src.zip".format(zip_generated_java_files),
+        visibility = ["PUBLIC"],
+        labels = ["codegen_rule"],
+    )
+
+    fb_native.genrule(
+        name = generate_shadow_node_cpp_name,
+        cmd = "cp $(location :{})/ShadowNodes.cpp $OUT".format(generate_fixtures_rule_name),
+        out = "ShadowNodes.cpp",
+        labels = ["codegen_rule"],
+    )
+
+    fb_native.genrule(
+        name = generate_shadow_node_h_name,
+        cmd = "cp $(location :{})/ShadowNodes.h $OUT".format(generate_fixtures_rule_name),
+        out = "ShadowNodes.h",
+        labels = ["codegen_rule"],
+    )
+
+    ##############
+    # iOS handling
+    ##############
+    if not IS_OSS_BUILD:
+        # iOS Buck build isn't fully working in OSS, so let's skip it for OSS for now.
+        if is_running_buck_project():
+            rn_xplat_cxx_library(name = "generated_components-{}".format(name), visibility = ["PUBLIC"])
+        else:
+            rn_xplat_cxx_library(
+                name = "generated_components-{}".format(name),
+                srcs = [
+                    ":{}".format(generate_event_emitter_cpp_name),
+                    ":{}".format(generate_props_cpp_name),
+                    ":{}".format(generate_shadow_node_cpp_name),
+                ],
+                headers = [
+                    ":{}".format(generate_component_descriptor_h_name),
+                    ":{}".format(generate_event_emitter_h_name),
+                    ":{}".format(generate_props_h_name),
+                    ":{}".format(generate_shadow_node_h_name),
+                ],
+                header_namespace = "react/renderer/components/{}".format(name),
+                exported_headers = {
+                    "ComponentDescriptors.h": ":{}".format(generate_component_descriptor_h_name),
+                    "EventEmitters.h": ":{}".format(generate_event_emitter_h_name),
+                    "Props.h": ":{}".format(generate_props_h_name),
+                    "RCTComponentViewHelpers.h": ":{}".format(generate_component_hobjcpp_name),
+                    "ShadowNodes.h": ":{}".format(generate_shadow_node_h_name),
+                },
+                compiler_flags = [
+                    "-fexceptions",
+                    "-frtti",
+                    "-std=c++14",
+                    "-Wall",
+                ],
+                fbobjc_compiler_flags = get_apple_compiler_flags(),
+                fbobjc_preprocessor_flags = get_preprocessor_flags_for_build_mode() + get_apple_inspector_flags(),
+                ios_exported_headers = {
+                    "ComponentViewHelpers.h": ":{}".format(generate_component_hobjcpp_name),
+                },
+                ios_headers = [
+                    ":{}".format(generate_component_hobjcpp_name),
+                ],
+                labels = library_labels + ["codegen_rule"],
+                platforms = (ANDROID, APPLE, CXX),
+                preprocessor_flags = [
+                    "-DLOG_TAG=\"ReactNative\"",
+                    "-DWITH_FBSYSTRACE=1",
+                ],
+                tests = [":generated_tests-{}".format(name)],
+                visibility = ["PUBLIC"],
+                deps = [
+                    "//third-party/glog:glog",
+                    "//xplat/fbsystrace:fbsystrace",
+                    "//xplat/folly:headers_only",
+                    "//xplat/folly:memory",
+                    "//xplat/folly:molly",
+                    YOGA_CXX_TARGET,
+                    react_native_xplat_target("react/renderer/debug:debug"),
+                    react_native_xplat_target("react/renderer/core:core"),
+                    react_native_xplat_target("react/renderer/graphics:graphics"),
+                    react_native_xplat_target("react/renderer/components/image:image"),
+                    react_native_xplat_target("react/renderer/imagemanager:imagemanager"),
+                    react_native_xplat_target("react/renderer/components/view:view"),
+                ],
+            )
+
+        # Tests
+        fb_xplat_cxx_test(
+            name = "generated_tests-{}".format(name),
+            # TODO T96844980: Fix and enable generated_tests-codegen_testsAndroid
+            srcs = [] if ANDROID else [
+                ":{}".format(generate_tests_cpp_name),
+            ],
+            apple_sdks = (IOS, MACOSX),
+            fbandroid_use_instrumentation_test = True,
+            compiler_flags = [
+                "-fexceptions",
+                "-frtti",
+                "-std=c++14",
+                "-Wall",
+            ],
+            contacts = ["oncall+react_native@xmail.facebook.com"],
+            labels = library_labels + ["codegen_rule"],
+            platforms = (ANDROID, APPLE, CXX),
+            deps = [
+                YOGA_CXX_TARGET,
+                react_native_xplat_target("react/renderer/core:core"),
+                "//xplat/third-party/gmock:gtest",
+                ":generated_components-{}".format(name),
+            ],
+        )
+
+    ##################
+    # Android handling
+    ##################
+    if is_running_buck_project():
+        rn_android_library(name = "generated_components_java-{}".format(name), autoglob = False)
+    else:
+        rn_android_library(
+            name = "generated_components_java-{}".format(name),
+            srcs = [
+                ":{}".format(zip_generated_java_files),
+            ],
+            autoglob = False,
+            labels = library_labels + ["codegen_rule"],
+            visibility = ["PUBLIC"],
+            deps = [
+                react_native_dep("third-party/android/androidx:annotation"),
+                react_native_target("java/com/facebook/react/bridge:bridge"),
+                react_native_target("java/com/facebook/react/uimanager/interfaces:interfaces"),
+            ],
+        )
+
+        rn_android_library(
+            name = "generated_components_cxx-{}".format(name),
+            srcs = [
+                ":{}".format(zip_generated_cxx_files),
+            ],
+            autoglob = False,
+            labels = library_labels + ["codegen_rule"],
+            visibility = ["PUBLIC"],
+            deps = [
+                react_native_dep("third-party/android/androidx:annotation"),
+                react_native_target("java/com/facebook/react/bridge:bridge"),
+                react_native_target("java/com/facebook/react/common:common"),
+                react_native_target("java/com/facebook/react/turbomodule/core:core"),
+                react_native_target("java/com/facebook/react/uimanager:uimanager"),
+            ],
+        )
+
+def rn_codegen_cxx_modules(
+        name = "",
+        schema_target = ""):
+    generate_fixtures_rule_name = "generate_fixtures_cxx-{}".format(name)
+    generate_module_h_name = "generate_module_h-{}".format(name)
+    generate_module_cpp_name = "generate_module_cpp-{}".format(name)
+
+    fb_native.genrule(
+        name = generate_fixtures_rule_name,
+        srcs = native.glob(["src/generators/**/*.js"]),
+        cmd = "$(exe {}) $(location {}) {} $OUT {}".format(react_native_root_target("packages/react-native-codegen:generate_all_from_schema"), schema_target, name, name),
+        out = "codegenfiles-{}".format(name),
+        labels = ["codegen_rule"],
+    )
+
+    fb_native.genrule(
+        name = generate_module_h_name,
+        cmd = "cp $(location :{})/NativeModules.h $OUT".format(generate_fixtures_rule_name),
+        out = "NativeModules.h",
+        labels = ["codegen_rule"],
+    )
+
+    fb_native.genrule(
+        name = generate_module_cpp_name,
+        cmd = "cp $(location :{})/NativeModules.cpp $OUT".format(generate_fixtures_rule_name),
+        out = "NativeModules.cpp",
+        labels = ["codegen_rule"],
+    )
+
+    if is_running_buck_project():
+        rn_xplat_cxx_library(name = "generated_cxx_modules-{}".format(name))
+    else:
+        rn_xplat_cxx_library(
+            name = "generated_cxx_modules-{}".format(name),
+            srcs = [
+                ":{}".format(generate_module_cpp_name),
+            ],
+            headers = [
+                ":{}".format(generate_module_h_name),
+            ],
+            header_namespace = "react/modules/{}".format(name),
+            exported_headers = {
+                "NativeModules.cpp": ":{}".format(generate_module_cpp_name),
+                "NativeModules.h": ":{}".format(generate_module_h_name),
+            },
+            compiler_flags = [
+                "-fexceptions",
+                "-frtti",
+                "-std=c++14",
+                "-Wall",
+            ],
+            fbobjc_compiler_flags = get_apple_compiler_flags(),
+            fbobjc_preprocessor_flags = get_preprocessor_flags_for_build_mode() + get_apple_inspector_flags(),
+            labels = ["codegen_rule"],
+            platforms = (ANDROID, APPLE),
+            preprocessor_flags = [
+                "-DLOG_TAG=\"ReactNative\"",
+                "-DWITH_FBSYSTRACE=1",
+            ],
+            visibility = ["PUBLIC"],
+            exported_deps = [
+                react_native_xplat_target("react/nativemodule/core:core"),
+            ],
+        )
+
+def is_running_buck_project():
+    return read_bool("fbandroid", "is_running_buck_project", False)
diff --git a/node_modules/react-native/packages/react-native-codegen/README.md b/node_modules/react-native/packages/react-native-codegen/README.md
new file mode 100644
index 0000000..fe72387
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/README.md
@@ -0,0 +1,14 @@
+# react-native-codegen
+
+[![Version][version-badge]][package]
+
+## Installation
+
+```
+yarn add --dev react-native-codegen
+```
+
+*Note: We're using `yarn` to install deps. Feel free to change commands to use `npm` 3+ and `npx` if you like*
+
+[version-badge]: https://img.shields.io/npm/v/react-native-codegen?style=flat-square
+[package]: https://www.npmjs.com/package/react-native-codegen
diff --git a/node_modules/react-native/packages/react-native-codegen/android/.gradle/buildOutputCleanup/buildOutputCleanup.lock b/node_modules/react-native/packages/react-native-codegen/android/.gradle/buildOutputCleanup/buildOutputCleanup.lock
new file mode 100644
index 0000000..bc6ac9b
Binary files /dev/null and b/node_modules/react-native/packages/react-native-codegen/android/.gradle/buildOutputCleanup/buildOutputCleanup.lock differ
diff --git a/node_modules/react-native/packages/react-native-codegen/android/.gradle/buildOutputCleanup/cache.properties b/node_modules/react-native/packages/react-native-codegen/android/.gradle/buildOutputCleanup/cache.properties
new file mode 100644
index 0000000..5d4a85f
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/.gradle/buildOutputCleanup/cache.properties
@@ -0,0 +1,2 @@
+#Wed Mar 01 21:38:21 WET 2023
+gradle.version=7.2
diff --git a/node_modules/react-native/packages/react-native-codegen/android/build.gradle b/node_modules/react-native/packages/react-native-codegen/android/build.gradle
new file mode 100644
index 0000000..ddb8615
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/build.gradle
@@ -0,0 +1,74 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+import org.apache.tools.ant.taskdefs.condition.Os
+
+plugins {
+    id 'java-gradle-plugin'
+}
+
+repositories {
+    mavenLocal()
+    google()
+    mavenCentral()
+}
+
+dependencies {
+    implementation 'com.android.tools.build:gradle:4.2.2'
+    // Use the same Gson version that `com.android.tools.build:gradle` depends on.
+    implementation 'com.google.code.gson:gson:2.8.5'
+    implementation 'com.google.guava:guava:29.0-jre'
+    implementation 'com.squareup:javapoet:1.13.0'
+}
+
+gradlePlugin {
+    plugins {
+        codegen {
+            id = 'com.facebook.react.codegen'
+            implementationClass = 'com.facebook.react.codegen.plugin.CodegenPlugin'
+        }
+    }
+}
+
+// This task is required when using react-native-codegen from source, instead of npm.
+task('buildCodegenCLI', type: Exec) {
+    def codegenRoot = "$projectDir/.."
+
+    inputs.files(
+        file("$codegenRoot/scripts"),
+        file("$codegenRoot/src"),
+        file("$codegenRoot/package.json"),
+        file("$codegenRoot/.babelrc"),
+        file("$codegenRoot/.prettierrc"),
+    )
+
+    def libDir = file("$codegenRoot/lib")
+    libDir.mkdirs()
+    def nodeModulesDir = file("$codegenRoot/node_modules")
+    nodeModulesDir.mkdirs();
+    outputs.dirs(libDir, nodeModulesDir)
+
+    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
+      // Convert path to Linux format: use canonical path to strip it off relative elements in the middle of the string.
+      // Then replace baskslashes with slashes, remove leading colon, add leading slash.
+      // Eg. D:\path1\sub2/.. -> /D/path1/path2
+      String canonicalPath = new File(codegenRoot).getCanonicalPath()
+      String linuxPath = canonicalPath.replace('\\', '/');
+      linuxPath = linuxPath.replace(':', '')
+      linuxPath = '/' + linuxPath
+
+      // Get the location of bash in the system; assume environment variable created to store it.
+      String bashHome = "$System.env.REACT_WINDOWS_BASH"
+      if (bashHome == null) {
+        throw new GradleException("REACT_WINDOWS_BASH is not defined.")
+      }
+      commandLine(bashHome, "-c", "$linuxPath/scripts/oss/build.sh")
+    }
+    else {
+        commandLine("$codegenRoot/scripts/oss/build.sh")
+    }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/gradle/wrapper/gradle-wrapper.jar b/node_modules/react-native/packages/react-native-codegen/android/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000..e708b1c
Binary files /dev/null and b/node_modules/react-native/packages/react-native-codegen/android/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/node_modules/react-native/packages/react-native-codegen/android/gradle/wrapper/gradle-wrapper.properties b/node_modules/react-native/packages/react-native-codegen/android/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 0000000..7665b0f
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,5 @@
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-6.9-all.zip
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
diff --git a/node_modules/react-native/packages/react-native-codegen/android/gradlew b/node_modules/react-native/packages/react-native-codegen/android/gradlew
new file mode 100755
index 0000000..4f906e0
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/gradlew
@@ -0,0 +1,185 @@
+#!/usr/bin/env sh
+
+#
+# Copyright 2015 the original author or authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn () {
+    echo "$*"
+}
+
+die () {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin or MSYS, switch paths to Windows format before running java
+if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=`expr $i + 1`
+    done
+    case $i in
+        0) set -- ;;
+        1) set -- "$args0" ;;
+        2) set -- "$args0" "$args1" ;;
+        3) set -- "$args0" "$args1" "$args2" ;;
+        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Escape application args
+save () {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
+}
+APP_ARGS=`save "$@"`
+
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+exec "$JAVACMD" "$@"
diff --git a/node_modules/react-native/packages/react-native-codegen/android/gradlew.bat b/node_modules/react-native/packages/react-native-codegen/android/gradlew.bat
new file mode 100644
index 0000000..ac1b06f
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/gradlew.bat
@@ -0,0 +1,89 @@
+@rem
+@rem Copyright 2015 the original author or authors.
+@rem
+@rem Licensed under the Apache License, Version 2.0 (the "License");
+@rem you may not use this file except in compliance with the License.
+@rem You may obtain a copy of the License at
+@rem
+@rem      https://www.apache.org/licenses/LICENSE-2.0
+@rem
+@rem Unless required by applicable law or agreed to in writing, software
+@rem distributed under the License is distributed on an "AS IS" BASIS,
+@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+@rem See the License for the specific language governing permissions and
+@rem limitations under the License.
+@rem
+
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Resolve any "." and ".." in APP_HOME to make it shorter.
+for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto execute
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto execute
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/node_modules/react-native/packages/react-native-codegen/android/settings.gradle b/node_modules/react-native/packages/react-native-codegen/android/settings.gradle
new file mode 100644
index 0000000..f399ad5
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/settings.gradle
@@ -0,0 +1,16 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+pluginManagement {
+    repositories {
+        gradlePluginPortal()
+        mavenLocal()
+        google()
+    }
+}
+
+rootProject.name = 'react-native-codegen-android'
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/JavaGenerator.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/JavaGenerator.java
new file mode 100644
index 0000000..c0abf23
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/JavaGenerator.java
@@ -0,0 +1,106 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator;
+
+import static java.nio.charset.StandardCharsets.UTF_8;
+
+import com.facebook.react.codegen.generator.model.CodegenException;
+import com.facebook.react.codegen.generator.model.TypeData;
+import com.facebook.react.codegen.generator.resolver.ResolvedType;
+import com.facebook.react.codegen.generator.resolver.TypeResolver;
+import com.squareup.javapoet.JavaFile;
+import com.squareup.javapoet.TypeSpec;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.OutputStreamWriter;
+import java.io.Writer;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.List;
+import java.util.stream.Collectors;
+
+/**
+ * Given a react-native-codegen JSON schema, generate a set of .java files for React Native. The
+ * generator is isolated to a single schema, and a single Java package output.
+ */
+public final class JavaGenerator {
+  public static String LICENSE_HEADER =
+      "/*\n"
+          + " * Copyright (c) Facebook, Inc. and its affiliates.\n"
+          + " *\n"
+          + " * This source code is licensed under the MIT license found in the\n"
+          + " * LICENSE file in the root directory of this source tree.\n"
+          + " *\n"
+          + " * Generated by react-native-codegen JavaGenerator.\n"
+          + " *\n"
+          + " * @"
+          + "generated\n"
+          + " * @"
+          + "nolint\n"
+          + " */\n\n";
+  private final File mSchemaFile;
+  private final String mJavaPackageName;
+  private final File mOutputDir;
+
+  public JavaGenerator(final File schemaFile, final String javaPackageName, final File outputDir) {
+    mSchemaFile = schemaFile;
+    mJavaPackageName = javaPackageName;
+    mOutputDir = outputDir;
+  }
+
+  public void build() throws CodegenException, FileNotFoundException, IOException {
+    // Step 1: Given a schema JSON, collect all types.
+    final TypeData typeData = SchemaJsonParser.parse(mSchemaFile);
+
+    // Step 2: Resolve each type, then collect those that produce a class or interface (TypeSpec).
+    final List<TypeSpec> typeSpecsToWrite =
+        typeData.getAllTypes().stream()
+            .map(
+                t -> {
+                  final ResolvedType resolvedType =
+                      TypeResolver.resolveType(typeData.getType(t), typeData, false);
+                  final TypeSpec spec = resolvedType.getGeneratedCode(mJavaPackageName);
+                  return spec;
+                })
+            .filter(f -> f != null)
+            .collect(Collectors.toList());
+
+    // Step 3: Write all of the TypeSpec's into the output directory.
+    for (final TypeSpec typeSpec : typeSpecsToWrite) {
+      writeTypeSpecToFile(typeSpec);
+    }
+  }
+
+  private final void writeTypeSpecToFile(final TypeSpec typeSpec)
+      throws CodegenException, IOException {
+    JavaFile file = JavaFile.builder(mJavaPackageName, typeSpec).skipJavaLangImports(true).build();
+
+    // Instead of using JavaFile.writeTo() API, manage the output files ourselves because
+    // JavaFile.addFileComment() does not support "block comment" style.
+    // See https://github.com/square/javapoet/issues/682#issuecomment-512238075.
+    Path outputDirPath = new File(mOutputDir, "java").toPath();
+
+    if (Files.exists(outputDirPath) && !Files.isDirectory(outputDirPath)) {
+      throw new CodegenException(
+          "Output path " + outputDirPath + " exists but is not a directory.");
+    }
+
+    if (!mJavaPackageName.isEmpty()) {
+      for (String packageComponent : mJavaPackageName.split("\\.")) {
+        outputDirPath = outputDirPath.resolve(packageComponent);
+      }
+      Files.createDirectories(outputDirPath);
+    }
+
+    Path outputPath = outputDirPath.resolve(typeSpec.name + ".java");
+    try (Writer writer = new OutputStreamWriter(Files.newOutputStream(outputPath), UTF_8)) {
+      writer.write(LICENSE_HEADER + file.toString());
+    }
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/SchemaJsonParser.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/SchemaJsonParser.java
new file mode 100644
index 0000000..422317a
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/SchemaJsonParser.java
@@ -0,0 +1,275 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator;
+
+import com.facebook.react.codegen.generator.model.AliasType;
+import com.facebook.react.codegen.generator.model.AnyType;
+import com.facebook.react.codegen.generator.model.ArrayType;
+import com.facebook.react.codegen.generator.model.BooleanType;
+import com.facebook.react.codegen.generator.model.CodegenException;
+import com.facebook.react.codegen.generator.model.DoubleType;
+import com.facebook.react.codegen.generator.model.FloatType;
+import com.facebook.react.codegen.generator.model.FunctionType;
+import com.facebook.react.codegen.generator.model.GenericObjectType;
+import com.facebook.react.codegen.generator.model.Int32Type;
+import com.facebook.react.codegen.generator.model.NativeModuleType;
+import com.facebook.react.codegen.generator.model.NullableType;
+import com.facebook.react.codegen.generator.model.NumberType;
+import com.facebook.react.codegen.generator.model.ObjectType;
+import com.facebook.react.codegen.generator.model.PromiseType;
+import com.facebook.react.codegen.generator.model.ReservedFunctionValueType;
+import com.facebook.react.codegen.generator.model.StringType;
+import com.facebook.react.codegen.generator.model.Type;
+import com.facebook.react.codegen.generator.model.TypeData;
+import com.facebook.react.codegen.generator.model.TypeId;
+import com.facebook.react.codegen.generator.model.VoidType;
+import com.google.common.base.CaseFormat;
+import com.google.common.collect.ImmutableList;
+import com.google.gson.JsonArray;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParser;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.stream.Collectors;
+
+public final class SchemaJsonParser {
+  private final TypeData mTypeData = new TypeData();
+
+  public static TypeData parse(final File schemaFile)
+      throws CodegenException, FileNotFoundException, IOException {
+    final SchemaJsonParser parser = new SchemaJsonParser();
+    return parser.buildTypeData(schemaFile);
+  }
+
+  private TypeData buildTypeData(final File schemaFile)
+      throws CodegenException, FileNotFoundException, IOException {
+    final JsonParser parser = new JsonParser();
+    final JsonElement rootElement = parser.parse(new FileReader(schemaFile));
+
+    final Map<String, Map<String, NativeModuleType>> collection = new HashMap<>();
+
+    if (rootElement.isJsonObject()) {
+      final JsonObject root = rootElement.getAsJsonObject();
+      final JsonObject modules = root.getAsJsonObject("modules");
+      modules
+          .entrySet()
+          .forEach(
+              entry -> {
+                final String jsModuleName = entry.getKey();
+                final JsonObject jsModule = entry.getValue().getAsJsonObject();
+                final String jsModuleType = jsModule.get("type").getAsString();
+
+                if (!"NativeModule".equals(jsModuleType)) {
+                  return;
+                }
+
+                if (jsModule.has("excludedPlatforms")) {
+                  final JsonArray excludedPlatforms = jsModule.getAsJsonArray("excludedPlatforms");
+                  for (JsonElement p : excludedPlatforms) {
+                    if (p.getAsString().equals("android")) {
+                      // This module is not for Android.
+                      return;
+                    }
+                  }
+                }
+
+                final Type parsedType =
+                    parseNativeModule(
+                        // TODO (T71955395): NativeModule spec type name does not
+                        // exist in the schema. For now assume it's "Spec".
+                        // The final type name will be the output class name.
+                        TypeId.of(jsModuleName, jsModuleName + "Spec"), jsModule);
+                mTypeData.addType(parsedType);
+              });
+    }
+
+    return mTypeData;
+  }
+
+  // Parse type information from a JSON "typeAnnotation" node.
+  private Type parseTypeAnnotation(final TypeId typeId, final JsonObject originalTypeAnnotation) {
+    JsonObject typeAnnotation = originalTypeAnnotation;
+    String type = typeAnnotation.get("type").getAsString();
+    boolean nullable = false;
+    Type parsedType = null;
+
+    if (type.equals(NullableType.TYPE_NAME)) {
+      nullable = true;
+      typeAnnotation = typeAnnotation.get("typeAnnotation").getAsJsonObject();
+      type = typeAnnotation.get("type").getAsString();
+    }
+
+    switch (type) {
+      case AliasType.TYPE_NAME:
+        parsedType = parseAliasTypeAnnotation(typeId, typeAnnotation);
+        break;
+      case AnyType.TYPE_NAME:
+        parsedType = new AnyType(typeId);
+        break;
+      case ArrayType.TYPE_NAME:
+        parsedType = parseArrayTypeAnnotation(typeId, typeAnnotation);
+        break;
+      case BooleanType.TYPE_NAME:
+        parsedType = new BooleanType(typeId);
+        break;
+      case DoubleType.TYPE_NAME:
+        parsedType = new DoubleType(typeId);
+        break;
+      case FloatType.TYPE_NAME:
+        parsedType = new FloatType(typeId);
+        break;
+      case FunctionType.TYPE_NAME:
+        parsedType = parseFunctionTypeAnnotation(typeId, typeAnnotation);
+        break;
+      case GenericObjectType.TYPE_NAME:
+        parsedType = new GenericObjectType(typeId);
+        break;
+      case Int32Type.TYPE_NAME:
+        parsedType = new Int32Type(typeId);
+        break;
+      case NumberType.TYPE_NAME:
+        // Use double type for generic numbers.
+        parsedType = new DoubleType(typeId);
+        break;
+      case ObjectType.TYPE_NAME:
+        parsedType = parseObjectTypeAnnotation(typeId, typeAnnotation);
+        break;
+      case PromiseType.TYPE_NAME:
+        parsedType = new PromiseType(typeId);
+        break;
+      case ReservedFunctionValueType.TYPE_NAME:
+        parsedType = parseReservedFunctionValueTypeAnnotation(typeId, typeAnnotation);
+        break;
+      case StringType.TYPE_NAME:
+        parsedType = new StringType(typeId);
+        break;
+      case VoidType.TYPE_NAME:
+        return VoidType.VOID;
+      default:
+        throw new CodegenException("Found invalid type annotation: " + type);
+    }
+
+    final Type finalType = maybeCreateNullableType(nullable, parsedType);
+    mTypeData.addType(finalType);
+    return finalType;
+  }
+
+  private NativeModuleType parseNativeModule(final TypeId typeId, final JsonObject json) {
+    final JsonObject aliases = json.getAsJsonObject("aliases");
+    final JsonArray properties = json.getAsJsonObject("spec").getAsJsonArray("properties");
+
+    final ImmutableList<Type> collectedAliases =
+        ImmutableList.copyOf(
+            aliases.entrySet().stream()
+                .map(
+                    entry -> {
+                      final String typeName = entry.getKey();
+                      final JsonObject typeAnnotation = entry.getValue().getAsJsonObject();
+                      // The alias name is the type name that other types can refer to.
+                      return parseTypeAnnotation(
+                          TypeId.of(typeId.moduleName, typeName), typeAnnotation);
+                    })
+                .collect(Collectors.toList()));
+
+    ImmutableList.Builder<NativeModuleType.Property> collectedPropertiesBuilder =
+        new ImmutableList.Builder<>();
+    properties.forEach(
+        p -> {
+          final JsonObject node = p.getAsJsonObject();
+          final String name = node.get("name").getAsString();
+          final JsonObject typeAnnotation = node.getAsJsonObject("typeAnnotation");
+          final boolean optional = node.get("optional").getAsBoolean();
+          final TypeId propertyTypeId =
+              TypeId.expandOf(typeId, CaseFormat.LOWER_CAMEL.to(CaseFormat.UPPER_CAMEL, name));
+          collectedPropertiesBuilder.add(
+              new NativeModuleType.Property(
+                  name, parseTypeAnnotation(propertyTypeId, typeAnnotation), optional));
+        });
+
+    return new NativeModuleType(typeId, collectedAliases, collectedPropertiesBuilder.build());
+  }
+
+  private Type parseAliasTypeAnnotation(final TypeId typeId, final JsonObject typeAnnotation) {
+    // For now, assume the alias lives inside the same file.
+    return new AliasType(
+        typeId, TypeId.of(typeId.moduleName, typeAnnotation.get("name").getAsString()));
+  }
+
+  private Type parseArrayTypeAnnotation(final TypeId typeId, final JsonObject typeAnnotation) {
+    final JsonObject elementTypeAnnotation = typeAnnotation.getAsJsonObject("elementType");
+    final TypeId elementTypeId = TypeId.expandOf(typeId, "ElementType");
+    // TODO (T71847026): Some array types are missing elementType annotation.
+    final Type elementType =
+        elementTypeAnnotation != null
+            ? parseTypeAnnotation(elementTypeId, elementTypeAnnotation)
+            : new AnyType(elementTypeId);
+    return new ArrayType(typeId, elementType);
+  }
+
+  private Type parseFunctionTypeAnnotation(final TypeId typeId, final JsonObject typeAnnotation) {
+    final JsonArray params = typeAnnotation.getAsJsonArray("params");
+
+    ImmutableList.Builder<FunctionType.ArgumentType> paramsList = new ImmutableList.Builder<>();
+
+    for (int i = 0; i < params.size(); i++) {
+      final JsonElement p = params.get(i);
+      final JsonObject node = p.getAsJsonObject();
+      final String name = node.get("name").getAsString();
+      paramsList.add(
+          FunctionType.createArgument(
+              name,
+              parseTypeAnnotation(
+                  TypeId.expandOf(typeId, CaseFormat.LOWER_CAMEL.to(CaseFormat.UPPER_CAMEL, name)),
+                  node.getAsJsonObject("typeAnnotation"))));
+    }
+
+    final JsonObject returnTypeAnnotation = typeAnnotation.getAsJsonObject("returnTypeAnnotation");
+    final Type returnType =
+        parseTypeAnnotation(TypeId.expandOf(typeId, "ReturnType"), returnTypeAnnotation);
+
+    return new FunctionType(typeId, paramsList.build(), returnType);
+  }
+
+  private Type parseObjectTypeAnnotation(final TypeId typeId, final JsonObject typeAnnotation) {
+    final JsonArray properties = typeAnnotation.getAsJsonArray("properties");
+
+    ImmutableList.Builder<ObjectType.Property> propertiesList = new ImmutableList.Builder<>();
+    properties.forEach(
+        p -> {
+          final JsonObject node = p.getAsJsonObject();
+          final String name = node.get("name").getAsString();
+          final boolean optional = node.get("optional").getAsBoolean();
+          final JsonObject propertyTypeAnnotation = node.getAsJsonObject("typeAnnotation");
+          final TypeId propertyTypeId =
+              TypeId.expandOf(typeId, CaseFormat.LOWER_CAMEL.to(CaseFormat.UPPER_CAMEL, name));
+          final Type propertyType = parseTypeAnnotation(propertyTypeId, propertyTypeAnnotation);
+          propertiesList.add(new ObjectType.Property(name, propertyType, optional));
+        });
+
+    return new ObjectType(typeId, propertiesList.build());
+  }
+
+  private Type parseReservedFunctionValueTypeAnnotation(
+      final TypeId typeId, final JsonObject typeAnnotation) {
+    return new ReservedFunctionValueType(
+        typeId,
+        ReservedFunctionValueType.ReservedName.valueOf(typeAnnotation.get("name").getAsString()));
+  }
+
+  private Type maybeCreateNullableType(final boolean nullable, final Type original) {
+    if (!nullable || original instanceof VoidType) {
+      return original;
+    }
+    return new NullableType(TypeId.of(original.getTypeId()), original);
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/AliasType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/AliasType.java
new file mode 100644
index 0000000..4114dc5
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/AliasType.java
@@ -0,0 +1,19 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.model;
+
+public final class AliasType extends Type {
+  public static final String TYPE_NAME = "TypeAliasTypeAnnotation";
+
+  public final TypeId referredTypeId;
+
+  public AliasType(final TypeId typeId, final TypeId referredTypeId) {
+    super(typeId);
+    this.referredTypeId = referredTypeId;
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/AnyType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/AnyType.java
new file mode 100644
index 0000000..ce22b20
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/AnyType.java
@@ -0,0 +1,16 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.model;
+
+public final class AnyType extends Type {
+  public static final String TYPE_NAME = "AnyTypeAnnotation";
+
+  public AnyType(final TypeId typeId) {
+    super(typeId);
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/ArrayType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/ArrayType.java
new file mode 100644
index 0000000..536a082
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/ArrayType.java
@@ -0,0 +1,19 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.model;
+
+public final class ArrayType extends Type {
+  public static final String TYPE_NAME = "ArrayTypeAnnotation";
+
+  public final Type elementType;
+
+  public ArrayType(final TypeId typeId, final Type elementType) {
+    super(typeId);
+    this.elementType = elementType;
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/BooleanType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/BooleanType.java
new file mode 100644
index 0000000..c5f8b9b
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/BooleanType.java
@@ -0,0 +1,16 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.model;
+
+public final class BooleanType extends Type {
+  public static final String TYPE_NAME = "BooleanTypeAnnotation";
+
+  public BooleanType(final TypeId typeId) {
+    super(typeId);
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/CodegenException.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/CodegenException.java
new file mode 100644
index 0000000..0b0ff3c
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/CodegenException.java
@@ -0,0 +1,16 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.model;
+
+public class CodegenException extends RuntimeException {
+  private static final long serialVersionUID = 1L;
+
+  public CodegenException(final String message) {
+    super(message);
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/DoubleType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/DoubleType.java
new file mode 100644
index 0000000..ddfa061
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/DoubleType.java
@@ -0,0 +1,16 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.model;
+
+public final class DoubleType extends NumberType {
+  public static final String TYPE_NAME = "DoubleTypeAnnotation";
+
+  public DoubleType(final TypeId typeId) {
+    super(typeId);
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/FloatType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/FloatType.java
new file mode 100644
index 0000000..6698735
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/FloatType.java
@@ -0,0 +1,16 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.model;
+
+public final class FloatType extends NumberType {
+  public static final String TYPE_NAME = "FloatTypeAnnotation";
+
+  public FloatType(final TypeId typeId) {
+    super(typeId);
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/FunctionType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/FunctionType.java
new file mode 100644
index 0000000..d664d74
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/FunctionType.java
@@ -0,0 +1,89 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.model;
+
+import java.util.Collections;
+import java.util.List;
+import java.util.Objects;
+
+public final class FunctionType extends Type {
+  public static final String TYPE_NAME = "FunctionTypeAnnotation";
+
+  public static class ArgumentType {
+    public final String name;
+    public final Type type;
+
+    // Note: Function argument is not optional.
+    // TODO (T71926678): Revisit if optional should be supported.
+    private ArgumentType(String name, Type type) {
+      this.name = name;
+      this.type = type;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+      if (this == o) {
+        return true;
+      }
+      if (o == null || getClass() != o.getClass()) {
+        return false;
+      }
+
+      ArgumentType that = (ArgumentType) o;
+      return Objects.equals(this.name, that.name) && Objects.equals(this.type, that.type);
+    }
+
+    @Override
+    public int hashCode() {
+      return Objects.hash(name, type);
+    }
+
+    @Override
+    public String toString() {
+      return name + ": " + type;
+    }
+  }
+
+  public static ArgumentType createArgument(String name, Type type) {
+    return new ArgumentType(name, type);
+  }
+
+  public final List<ArgumentType> parameters;
+  public final Type returnType;
+
+  public FunctionType(
+      final TypeId typeId, final List<ArgumentType> parameters, final Type returnType) {
+    super(typeId);
+    this.parameters = Collections.unmodifiableList(parameters);
+    this.returnType = returnType;
+  }
+
+  @Override
+  public boolean equals(final Object o) {
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass() || !super.equals(o)) {
+      return false;
+    }
+
+    final FunctionType that = (FunctionType) o;
+    return Objects.equals(this.parameters, that.parameters)
+        && Objects.equals(this.returnType, that.returnType);
+  }
+
+  @Override
+  public int hashCode() {
+    return Objects.hash(super.hashCode(), parameters, returnType);
+  }
+
+  @Override
+  public String toString() {
+    return "(" + returnType + ")" + this.getTypeId() + "(" + parameters + ")";
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/GenericObjectType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/GenericObjectType.java
new file mode 100644
index 0000000..ce4a2b0
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/GenericObjectType.java
@@ -0,0 +1,16 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.model;
+
+public final class GenericObjectType extends Type {
+  public static final String TYPE_NAME = "GenericObjectTypeAnnotation";
+
+  public GenericObjectType(final TypeId typeId) {
+    super(typeId);
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/Int32Type.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/Int32Type.java
new file mode 100644
index 0000000..4639d39
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/Int32Type.java
@@ -0,0 +1,16 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.model;
+
+public final class Int32Type extends NumberType {
+  public static final String TYPE_NAME = "Int32TypeAnnotation";
+
+  public Int32Type(final TypeId typeId) {
+    super(typeId);
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/NativeModuleType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/NativeModuleType.java
new file mode 100644
index 0000000..2f3a410
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/NativeModuleType.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.model;
+
+import java.util.Collections;
+import java.util.List;
+
+public final class NativeModuleType extends Type {
+  public static String TYPE_NAME = "<NONE>"; // Not an actual type in the schema.
+
+  public final List<Type> aliases;
+  public final List<Property> properties;
+
+  public static class Property {
+    public final String name;
+    public final FunctionType type;
+    public final boolean optional;
+
+    public Property(final String name, final Type type, final boolean optional) {
+      assertType(type, FunctionType.class);
+      this.name = name;
+      this.type = (FunctionType) type;
+      this.optional = optional;
+    }
+
+    @Override
+    public String toString() {
+      return name + ": " + (this.optional ? "?" : "") + type;
+    }
+  }
+
+  public NativeModuleType(
+      final TypeId typeId, final List<Type> aliases, final List<Property> properties) {
+    super(typeId);
+    this.aliases = Collections.unmodifiableList(aliases);
+    this.properties = Collections.unmodifiableList(properties);
+  }
+
+  @Override
+  public String toString() {
+    return getTypeId() + "\n  aliases: " + aliases + "\n  properties: " + properties;
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/NullableType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/NullableType.java
new file mode 100644
index 0000000..5180925
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/NullableType.java
@@ -0,0 +1,19 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.model;
+
+public final class NullableType extends Type {
+  public static final String TYPE_NAME = "NullableTypeAnnotation";
+
+  public final Type innerType;
+
+  public NullableType(final TypeId typeId, final Type innerType) {
+    super(typeId);
+    this.innerType = innerType;
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/NumberType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/NumberType.java
new file mode 100644
index 0000000..382e068
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/NumberType.java
@@ -0,0 +1,16 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.model;
+
+public abstract class NumberType extends Type {
+  public static final String TYPE_NAME = "NumberTypeAnnotation";
+
+  public NumberType(final TypeId typeId) {
+    super(typeId);
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/ObjectType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/ObjectType.java
new file mode 100644
index 0000000..3c1fcab
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/ObjectType.java
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.model;
+
+import java.util.Collections;
+import java.util.List;
+
+public final class ObjectType extends Type {
+  public static final String TYPE_NAME = "ObjectTypeAnnotation";
+
+  public static class Property {
+    public final String name;
+    public final Type type;
+    public final boolean optional;
+
+    public Property(String name, Type type, boolean optional) {
+      this.name = name;
+      this.type = type;
+      this.optional = optional;
+    }
+
+    @Override
+    public String toString() {
+      return (optional ? "?" : "") + name + ": " + type;
+    }
+  }
+
+  public final List<Property> properties;
+
+  public ObjectType(final TypeId typeId, final List<Property> properties) {
+    super(typeId);
+    this.properties = Collections.unmodifiableList(properties);
+  }
+
+  @Override
+  public String toString() {
+    return getTypeId() + " -> " + properties;
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/PromiseType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/PromiseType.java
new file mode 100644
index 0000000..c243cae
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/PromiseType.java
@@ -0,0 +1,16 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.model;
+
+public final class PromiseType extends Type {
+  public static final String TYPE_NAME = "PromiseTypeAnnotation";
+
+  public PromiseType(final TypeId typeId) {
+    super(typeId);
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/ReservedFunctionValueType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/ReservedFunctionValueType.java
new file mode 100644
index 0000000..c1f755e
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/ReservedFunctionValueType.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.model;
+
+public final class ReservedFunctionValueType extends Type {
+  public static final String TYPE_NAME = "ReservedFunctionValueTypeAnnotation";
+
+  public enum ReservedName {
+    RootTag,
+  }
+
+  public ReservedName reservedName;
+
+  public ReservedFunctionValueType(final TypeId typeId, ReservedName reservedName) {
+    super(typeId);
+    this.reservedName = reservedName;
+  }
+
+  @Override
+  public String toString() {
+    return mTypeId + "(" + reservedName.toString() + ")";
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/StringType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/StringType.java
new file mode 100644
index 0000000..39ba374
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/StringType.java
@@ -0,0 +1,16 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.model;
+
+public final class StringType extends Type {
+  public static final String TYPE_NAME = "StringTypeAnnotation";
+
+  public StringType(final TypeId typeId) {
+    super(typeId);
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/Type.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/Type.java
new file mode 100644
index 0000000..b6151d2
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/Type.java
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.model;
+
+import java.util.Objects;
+
+public abstract class Type {
+  public static String TYPE_NAME = "<NONE>";
+
+  protected final TypeId mTypeId;
+
+  public static <T extends Type> void assertType(
+      final Type type, final Class<T> expectedTypeClass) {
+    if (!expectedTypeClass.isInstance(type)) {
+      throw new IllegalStateException(
+          "Expected: " + expectedTypeClass.getName() + " but found: " + type.getClass().getName());
+    }
+  }
+
+  public Type(final TypeId typeId) {
+    mTypeId = typeId;
+  }
+
+  public TypeId getTypeId() {
+    return mTypeId;
+  }
+
+  @Override
+  public String toString() {
+    return mTypeId.toString();
+  }
+
+  @Override
+  public boolean equals(final Object o) {
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
+    final Type type = (Type) o;
+    return Objects.equals(mTypeId, type.mTypeId);
+  }
+
+  @Override
+  public int hashCode() {
+    return Objects.hash(mTypeId);
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/TypeData.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/TypeData.java
new file mode 100644
index 0000000..91a58f5
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/TypeData.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.model;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+import javax.annotation.Nullable;
+
+/** A collection of all types information based on the parsed schema. */
+public final class TypeData {
+  private final Map<TypeId, Type> mTypes = new HashMap<>();
+
+  public void addType(final TypeId typeId, final Type type) throws IllegalStateException {
+    if (getType(typeId) != null) {
+      throw new IllegalStateException("Found duplicated TypeId: " + typeId + " for: " + type);
+    }
+    mTypes.put(typeId, type);
+  }
+
+  public void addType(final Type type) {
+    addType(type.getTypeId(), type);
+  }
+
+  public @Nullable Type getType(final TypeId typeId) {
+    return mTypes.get(typeId);
+  }
+
+  public Set<TypeId> getAllTypes() {
+    return mTypes.keySet();
+  }
+
+  @Override
+  public String toString() {
+    final StringBuilder builder = new StringBuilder();
+    mTypes.forEach(
+        (k, v) -> {
+          builder.append(v.toString());
+          builder.append("\n");
+        });
+    return builder.toString();
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/TypeId.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/TypeId.java
new file mode 100644
index 0000000..ef9831c
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/TypeId.java
@@ -0,0 +1,74 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.model;
+
+import java.util.Objects;
+import javax.annotation.Nullable;
+
+/** Represents the fully qualified name for a Flow type. */
+public final class TypeId {
+  public final String moduleName;
+  public final String typeName;
+
+  private static final String EMPTY_TYPE_NAME = "";
+
+  private TypeId(final String moduleName, final String typeName) {
+    this.moduleName = moduleName;
+    this.typeName = typeName;
+  }
+
+  public static TypeId of(final String moduleName) {
+    return new TypeId(moduleName, EMPTY_TYPE_NAME);
+  }
+
+  public static TypeId of(final String moduleName, @Nullable final String typeName) {
+    if (typeName == null) {
+      return TypeId.of(moduleName);
+    }
+
+    if (moduleName.equals(typeName)) {
+      return TypeId.of(moduleName);
+    }
+
+    return new TypeId(moduleName, typeName);
+  }
+
+  public static TypeId of(final TypeId typeId) {
+    return of(typeId.moduleName, typeId.typeName);
+  }
+
+  public static TypeId expandOf(final TypeId typeId, String suffix) {
+    return of(typeId.moduleName, typeId.typeName + suffix);
+  }
+
+  @Override
+  public String toString() {
+    return String.format(
+        "<moduleName = %s, typeName = %s>",
+        moduleName, EMPTY_TYPE_NAME.equals(typeName) ? "\"\"" : typeName);
+  }
+
+  @Override
+  public boolean equals(final Object o) {
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
+
+    final TypeId typeId = (TypeId) o;
+    return Objects.equals(moduleName, typeId.moduleName)
+        && Objects.equals(typeName, typeId.typeName);
+  }
+
+  @Override
+  public int hashCode() {
+    return Objects.hash(moduleName, typeName);
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/VoidType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/VoidType.java
new file mode 100644
index 0000000..29ea494
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/model/VoidType.java
@@ -0,0 +1,17 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.model;
+
+public final class VoidType extends Type {
+  public static final String TYPE_NAME = "VoidTypeAnnotation";
+  public static final VoidType VOID = new VoidType(TypeId.of(""));
+
+  private VoidType(final TypeId typeId) {
+    super(typeId);
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/AliasResolvedType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/AliasResolvedType.java
new file mode 100644
index 0000000..6720ef7
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/AliasResolvedType.java
@@ -0,0 +1,43 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.resolver;
+
+import com.facebook.react.codegen.generator.model.AliasType;
+import com.facebook.react.codegen.generator.model.AnyType;
+import com.facebook.react.codegen.generator.model.Type;
+import com.facebook.react.codegen.generator.model.TypeData;
+import com.squareup.javapoet.TypeName;
+import com.squareup.javapoet.TypeSpec;
+import javax.annotation.Nullable;
+
+public final class AliasResolvedType extends ResolvedType<AliasType> {
+
+  private AliasResolvedType(final AliasType type, final boolean nullable) {
+    super(type, nullable);
+    throw new UnsupportedOperationException();
+  }
+
+  public static ResolvedType create(
+      final AliasType type, final TypeData typeData, final boolean nullable) {
+    Type referredType = typeData.getType(type.referredTypeId);
+    if (referredType != null) {
+      return resolveType(referredType, typeData, nullable);
+    }
+    return resolveType(new AnyType(type.getTypeId()), typeData, nullable);
+  }
+
+  @Override
+  public TypeName getNativeType(final NativeTypeContext typeContext) {
+    throw new UnsupportedOperationException();
+  }
+
+  @Override
+  public @Nullable TypeSpec getGeneratedCode(final String packageName) {
+    throw new UnsupportedOperationException();
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/Annotations.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/Annotations.java
new file mode 100644
index 0000000..4025b54
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/Annotations.java
@@ -0,0 +1,16 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.resolver;
+
+import com.squareup.javapoet.AnnotationSpec;
+import javax.annotation.Nullable;
+
+public class Annotations {
+  public static final AnnotationSpec OVERRIDE = AnnotationSpec.builder(Override.class).build();
+  public static final AnnotationSpec NULLABLE = AnnotationSpec.builder(Nullable.class).build();
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/AnyResolvedType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/AnyResolvedType.java
new file mode 100644
index 0000000..e9fc8dc
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/AnyResolvedType.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.resolver;
+
+import com.facebook.react.codegen.generator.model.AnyType;
+import com.facebook.react.codegen.generator.model.TypeData;
+import com.squareup.javapoet.TypeName;
+
+public final class AnyResolvedType extends ResolvedType<AnyType> {
+
+  private AnyResolvedType(final AnyType type, final boolean nullable) {
+    super(type, nullable);
+  }
+
+  public static AnyResolvedType create(
+      final AnyType type, final TypeData typeData, final boolean nullable) {
+    return new AnyResolvedType(type, nullable);
+  }
+
+  @Override
+  public TypeName getNativeType(final NativeTypeContext typeContext) {
+    switch (typeContext) {
+      case FUNCTION_ARGUMENT:
+        return TypeUtils.makeNullable(ReactClassNames.REACT_READABLE_MAP, mNullable);
+      case FUNCTION_RETURN:
+        return TypeUtils.makeNullable(ReactClassNames.REACT_WRITABLE_MAP, mNullable);
+      default:
+        return TypeUtils.makeNullable(TypeName.OBJECT, mNullable);
+    }
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/ArrayResolvedType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/ArrayResolvedType.java
new file mode 100644
index 0000000..b6a7d3b
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/ArrayResolvedType.java
@@ -0,0 +1,45 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.resolver;
+
+import com.facebook.react.codegen.generator.model.ArrayType;
+import com.facebook.react.codegen.generator.model.TypeData;
+import com.squareup.javapoet.ArrayTypeName;
+import com.squareup.javapoet.TypeName;
+
+public final class ArrayResolvedType extends ResolvedType<ArrayType> {
+
+  private final ResolvedType mElementResolvedType;
+
+  private ArrayResolvedType(final ArrayType type, final TypeData typeData, final boolean nullable) {
+    super(type, nullable);
+    mElementResolvedType = resolveType(mType.elementType, typeData, nullable);
+  }
+
+  public static ArrayResolvedType create(
+      final ArrayType type, final TypeData typeData, final boolean nullable) {
+    return new ArrayResolvedType(type, typeData, nullable);
+  }
+
+  public ResolvedType getElementResolvedType() {
+    return mElementResolvedType;
+  }
+
+  @Override
+  public TypeName getNativeType(final NativeTypeContext typeContext) {
+    switch (typeContext) {
+      case FUNCTION_ARGUMENT:
+        return TypeUtils.makeNullable(ReactClassNames.REACT_READABLE_ARRAY, mNullable);
+      case FUNCTION_RETURN:
+        return TypeUtils.makeNullable(ReactClassNames.REACT_WRITABLE_ARRAY, mNullable);
+      default:
+        return TypeUtils.makeNullable(
+            ArrayTypeName.of(mElementResolvedType.getNativeType(typeContext)), mNullable);
+    }
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/BooleanResolvedType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/BooleanResolvedType.java
new file mode 100644
index 0000000..75ac0a7
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/BooleanResolvedType.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.resolver;
+
+import com.facebook.react.codegen.generator.model.BooleanType;
+import com.facebook.react.codegen.generator.model.TypeData;
+import com.squareup.javapoet.TypeName;
+
+public final class BooleanResolvedType extends ResolvedType<BooleanType> {
+
+  private BooleanResolvedType(final BooleanType type, final boolean nullable) {
+    super(type, nullable);
+  }
+
+  public static BooleanResolvedType create(
+      final BooleanType type, final TypeData typeData, final boolean nullable) {
+    return new BooleanResolvedType(type, nullable);
+  }
+
+  @Override
+  public TypeName getNativeType(final NativeTypeContext typeContext) {
+    return TypeUtils.makeNullable(TypeName.BOOLEAN, mNullable);
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/ClassNames.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/ClassNames.java
new file mode 100644
index 0000000..5a76753
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/ClassNames.java
@@ -0,0 +1,23 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.resolver;
+
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.ParameterizedTypeName;
+import com.squareup.javapoet.TypeName;
+import java.util.Map;
+
+/** Names of Java classes required by generated code. */
+public class ClassNames {
+
+  // Java standard classes
+  public static final TypeName STRING = ClassName.get(String.class);
+
+  public static final ParameterizedTypeName CONSTANTS_MAP =
+      ParameterizedTypeName.get(ClassName.get(Map.class), ClassNames.STRING, ClassName.OBJECT);
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/FunctionResolvedType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/FunctionResolvedType.java
new file mode 100644
index 0000000..7896494
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/FunctionResolvedType.java
@@ -0,0 +1,125 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.resolver;
+
+import com.facebook.react.codegen.generator.model.FunctionType;
+import com.facebook.react.codegen.generator.model.TypeData;
+import com.squareup.javapoet.AnnotationSpec;
+import com.squareup.javapoet.CodeBlock;
+import com.squareup.javapoet.MethodSpec;
+import com.squareup.javapoet.ParameterSpec;
+import com.squareup.javapoet.TypeName;
+import java.util.Collections;
+import java.util.Map;
+import java.util.stream.Collectors;
+import javax.annotation.Nullable;
+import javax.lang.model.element.Modifier;
+
+public final class FunctionResolvedType extends ResolvedType<FunctionType> {
+  private final Map<String, ResolvedType> mResolvedArgTypes;
+  private final ResolvedType mResolvedReturnType;
+
+  private FunctionResolvedType(
+      final FunctionType type, final TypeData typeData, final boolean nullable) {
+    super(type, nullable);
+    mResolvedReturnType = resolveType(type.returnType, typeData, nullable);
+    mResolvedArgTypes =
+        Collections.unmodifiableMap(
+            type.parameters.stream()
+                .collect(
+                    Collectors.toMap(
+                        item -> item.name, item -> resolveType(item.type, typeData, false))));
+  }
+
+  public static FunctionResolvedType create(
+      final FunctionType type, final TypeData typeData, final boolean nullable) {
+    return new FunctionResolvedType(type, typeData, nullable);
+  }
+
+  public ResolvedType getResolvedReturnType() {
+    return mResolvedReturnType;
+  }
+
+  public Map<String, ResolvedType> getResolvedArgTypes() {
+    return mResolvedArgTypes;
+  }
+
+  @Override
+  public TypeName getNativeType(final NativeTypeContext typeContext) {
+    return TypeUtils.makeNullable(ReactClassNames.REACT_CALLBACK, mNullable);
+  }
+
+  public MethodSpec getGeneratedMethodWithReactAnnotation(String methodName) {
+    TypeName resolvedReturnTypeName =
+        mResolvedReturnType.getNativeType(NativeTypeContext.FUNCTION_RETURN);
+
+    boolean isReturnTypePromise = resolvedReturnTypeName == ReactClassNames.REACT_PROMISE;
+    TypeName returnTypeName = isReturnTypePromise ? TypeName.VOID : resolvedReturnTypeName;
+
+    MethodSpec.Builder methodBuilder =
+        MethodSpec.methodBuilder(methodName).addModifiers(Modifier.PUBLIC);
+    methodBuilder.returns(returnTypeName);
+
+    if (!mNullable) {
+      methodBuilder.addModifiers(Modifier.ABSTRACT);
+    } else {
+      String returnStatement = getFalsyReturnStatement(returnTypeName);
+      if (returnStatement != null) {
+        CodeBlock.Builder methodBody = CodeBlock.builder();
+        methodBody.addStatement(returnStatement);
+        methodBuilder.addCode(methodBody.build());
+      }
+    }
+
+    mResolvedArgTypes
+        .entrySet()
+        .forEach(
+            e -> {
+              String argName = e.getKey();
+              ResolvedType argResolvedType = e.getValue();
+              methodBuilder.addParameter(
+                  ParameterSpec.builder(
+                          argResolvedType.getNativeType(NativeTypeContext.FUNCTION_ARGUMENT),
+                          argName)
+                      .build());
+            });
+
+    AnnotationSpec.Builder annotationBuilder = AnnotationSpec.builder(ReactClassNames.REACT_METHOD);
+
+    // Special case: Promise inserts additional method arg at the end.
+    if (isReturnTypePromise) {
+      methodBuilder.addParameter(
+          ParameterSpec.builder(ReactClassNames.REACT_PROMISE, "promise").build());
+    } else if (!TypeName.VOID.equals(returnTypeName)) {
+      // A non-promise non-void return type means the method is synchronous.
+      annotationBuilder.addMember("isBlockingSynchronousMethod", "$L", true);
+    }
+
+    // React methods need special `@ReactMethod` annotation for now.
+    methodBuilder.addAnnotation(annotationBuilder.build());
+
+    // TODO(T82242829) Add @DoNotStrip annotation
+
+    return methodBuilder.build();
+  }
+
+  private static @Nullable String getFalsyReturnStatement(TypeName returnType) {
+    // TODO: Handle nullable falsy return.
+    if (returnType == TypeName.BOOLEAN) {
+      return "return false";
+    } else if (returnType == TypeName.DOUBLE) {
+      return "return 0.0";
+    } else if (returnType == ClassNames.STRING
+        || returnType == ReactClassNames.REACT_WRITABLE_ARRAY
+        || returnType == ReactClassNames.REACT_WRITABLE_MAP) {
+      return "return null";
+    }
+
+    return null;
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/GenericObjectResolvedType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/GenericObjectResolvedType.java
new file mode 100644
index 0000000..84b98eb
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/GenericObjectResolvedType.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.resolver;
+
+import com.facebook.react.codegen.generator.model.CodegenException;
+import com.facebook.react.codegen.generator.model.GenericObjectType;
+import com.facebook.react.codegen.generator.model.TypeData;
+import com.squareup.javapoet.TypeName;
+
+public final class GenericObjectResolvedType extends ResolvedType<GenericObjectType> {
+
+  private GenericObjectResolvedType(final GenericObjectType type, final boolean nullable) {
+    super(type, nullable);
+  }
+
+  public static GenericObjectResolvedType create(
+      final GenericObjectType type, final TypeData typeData, final boolean nullable) {
+    return new GenericObjectResolvedType(type, nullable);
+  }
+
+  @Override
+  public TypeName getNativeType(final NativeTypeContext typeContext) {
+    switch (typeContext) {
+      case FUNCTION_ARGUMENT:
+        return TypeUtils.makeNullable(ReactClassNames.REACT_READABLE_MAP, mNullable);
+      case FUNCTION_RETURN:
+        return TypeUtils.makeNullable(ReactClassNames.REACT_WRITABLE_MAP, mNullable);
+      default:
+        break;
+    }
+
+    throw new CodegenException(
+        "Unsupported GenericObjectType: " + mType + " - typeContext: " + typeContext);
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/NativeModuleResolvedType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/NativeModuleResolvedType.java
new file mode 100644
index 0000000..0022209
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/NativeModuleResolvedType.java
@@ -0,0 +1,260 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.resolver;
+
+import com.facebook.react.codegen.generator.model.NativeModuleType;
+import com.facebook.react.codegen.generator.model.TypeData;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
+import com.squareup.javapoet.MethodSpec;
+import com.squareup.javapoet.ParameterSpec;
+import com.squareup.javapoet.ParameterizedTypeName;
+import com.squareup.javapoet.TypeName;
+import com.squareup.javapoet.TypeSpec;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.stream.Collectors;
+import javax.annotation.Nullable;
+import javax.lang.model.element.Modifier;
+
+public final class NativeModuleResolvedType extends ResolvedType<NativeModuleType> {
+  private final Map<String, ResolvedType> mResolvedAliasTypes;
+  private final Map<String, FunctionResolvedType> mResolvedPropertyTypes;
+
+  private NativeModuleResolvedType(
+      final NativeModuleType type, final TypeData typeData, final boolean nullable) {
+    super(type, nullable);
+    mResolvedAliasTypes =
+        Collections.unmodifiableMap(
+            type.aliases.stream()
+                .collect(
+                    Collectors.toMap(
+                        item -> item.getTypeId().typeName,
+                        item -> resolveType(item, typeData, false))));
+    mResolvedPropertyTypes =
+        Collections.unmodifiableMap(
+            type.properties.stream()
+                .collect(
+                    Collectors.toMap(
+                        item -> item.name,
+                        // TODO: Optional Object property is not necessarily nullable.
+                        item -> {
+                          final ResolvedType resolvedType =
+                              resolveType(item.type, typeData, item.optional);
+                          TypeUtils.assertCondition(
+                              resolvedType instanceof FunctionResolvedType,
+                              "NativeModules can only contain methods. Constants like '"
+                                  + item.name
+                                  + "' must be declared in the return type of the 'getConstants()' method.");
+                          return (FunctionResolvedType) resolvedType;
+                        })));
+  }
+
+  public static NativeModuleResolvedType create(
+      final NativeModuleType type, final TypeData typeData, final boolean nullable) {
+    return new NativeModuleResolvedType(type, typeData, nullable);
+  }
+
+  @Override
+  public TypeName getNativeType(final NativeTypeContext typeContext) {
+    throw new UnsupportedOperationException(
+        "NativeModuleType cannot be referred to by other types.");
+  }
+
+  @Override
+  public @Nullable TypeSpec getGeneratedCode(final String packageName) {
+    final TypeSpec.Builder classBuilder =
+        TypeSpec.classBuilder(mType.getTypeId().typeName)
+            .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)
+            .superclass(ReactClassNames.REACT_CONTEXT_BASE_JAVA_MODULE)
+            .addSuperinterface(ReactClassNames.REACT_MODULE_WITH_SPEC)
+            .addSuperinterface(ReactClassNames.REACT_TURBOMODULE);
+
+    final MethodSpec.Builder constructorBuilder =
+        MethodSpec.constructorBuilder()
+            .addModifiers(Modifier.PUBLIC)
+            .addParameter(
+                ParameterSpec.builder(ReactClassNames.REACT_APPLICATION_CONTEXT, "reactContext")
+                    .build())
+            .addStatement("super($N)", "reactContext");
+    classBuilder.addMethod(constructorBuilder.build());
+
+    mResolvedPropertyTypes.forEach(
+        (name, resolvedType) -> {
+          if (name.equals("getConstants")) {
+            classBuilder.addMethod(generateGetTypedExportedConstantsMethod());
+            classBuilder.addMethod(generateGetConstantsMethod(resolvedType));
+          } else {
+            classBuilder.addMethod(
+                ((FunctionResolvedType) resolvedType).getGeneratedMethodWithReactAnnotation(name));
+          }
+        });
+
+    return classBuilder.build();
+  }
+
+  // For now, getConstants() needs a runtime check to ensure the object return value has the
+  // required properties. In the future, the method should return the specific object type that
+  // can be verified during build time.
+  private static MethodSpec generateGetConstantsMethod(final FunctionResolvedType resolvedType) {
+    final ResolvedType resolvedReturnType = resolvedType.getResolvedReturnType();
+    TypeUtils.assertCondition(
+        resolvedReturnType instanceof ObjectResolvedType,
+        "getConstants() method must return an exact object. Found: " + resolvedType.mType);
+
+    final ParameterizedTypeName returnType =
+        ParameterizedTypeName.get(ClassName.get(Map.class), ClassNames.STRING, ClassName.OBJECT);
+    return MethodSpec.methodBuilder("getConstants")
+        .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
+        .addAnnotation(Annotations.OVERRIDE)
+        .returns(returnType.annotated(Annotations.NULLABLE))
+        .addCode(
+            getConstantsMethodBody(
+                returnType, ((ObjectResolvedType) resolvedReturnType).getResolvedPropertyTypes()))
+        .build();
+  }
+
+  private static MethodSpec generateGetTypedExportedConstantsMethod() {
+    return MethodSpec.methodBuilder("getTypedExportedConstants")
+        .addModifiers(Modifier.PROTECTED, Modifier.ABSTRACT)
+        .returns(ClassNames.CONSTANTS_MAP)
+        .build();
+  }
+
+  private static CodeBlock getConstantsMethodBody(
+      final ParameterizedTypeName returnType, final Map<String, ResolvedType> constantsTypes) {
+    final CodeBlock.Builder methodBody = CodeBlock.builder();
+
+    final Map<Boolean, List<Map.Entry<String, ResolvedType>>> constantsByNullability =
+        constantsTypes.entrySet().stream()
+            .collect(Collectors.partitioningBy(entry -> entry.getValue().mNullable));
+
+    final String constantsVariableName = "constants";
+    final String obligatoryFlowConstantsVariableName = "obligatoryFlowConstants";
+    final String optionalFlowConstantsVariableName = "optionalFlowConstants";
+    final TypeName setOfStringsType =
+        ParameterizedTypeName.get(ClassName.get(Set.class), ClassNames.STRING);
+    final TypeName hashsetType = ClassName.get(HashSet.class);
+
+    methodBody.addStatement(
+        "$T $N = $N()",
+        returnType,
+        constantsVariableName,
+        generateGetTypedExportedConstantsMethod().name);
+
+    // Enable all of this for internal (debug) builds only.
+    methodBody.beginControlFlow(
+        "if ($1T.DEBUG || $1T.IS_INTERNAL_BUILD)", ReactClassNames.REACT_BUILD_CONFIG);
+    {
+      final List<String> obligatoryConstants =
+          constantsByNullability.get(false).stream()
+              .map(Map.Entry::getKey)
+              .sorted()
+              .collect(Collectors.toList());
+      addVariableDeclaration(
+          methodBody,
+          obligatoryFlowConstantsVariableName,
+          obligatoryConstants,
+          setOfStringsType,
+          hashsetType);
+
+      final List<String> optionalConstants =
+          constantsByNullability.get(true).stream()
+              .map(Map.Entry::getKey)
+              .sorted()
+              .collect(Collectors.toList());
+      addVariableDeclaration(
+          methodBody,
+          optionalFlowConstantsVariableName,
+          optionalConstants,
+          setOfStringsType,
+          hashsetType);
+
+      final String undeclaredConstantsVariableName = "undeclaredConstants";
+
+      methodBody
+          .addStatement(
+              "$T $N = new $T<>($N.keySet())",
+              setOfStringsType,
+              undeclaredConstantsVariableName,
+              hashsetType,
+              constantsVariableName)
+          .addStatement(
+              "$N.removeAll($N)",
+              undeclaredConstantsVariableName,
+              obligatoryFlowConstantsVariableName)
+          .addStatement(
+              "$N.removeAll($N)",
+              undeclaredConstantsVariableName,
+              optionalFlowConstantsVariableName);
+      methodBody.add(
+          checkForConstantsFulfillmentBlock(
+              undeclaredConstantsVariableName,
+              "Native Module Flow doesn\'t declare constants: %s"));
+
+      methodBody
+          .addStatement(
+              "$N = $N", undeclaredConstantsVariableName, obligatoryFlowConstantsVariableName)
+          .addStatement(
+              "$N.removeAll($N.keySet())", undeclaredConstantsVariableName, constantsVariableName);
+      methodBody.add(
+          checkForConstantsFulfillmentBlock(
+              undeclaredConstantsVariableName, "Native Module doesn\'t fill in constants: %s"));
+    }
+    methodBody.endControlFlow();
+    methodBody.addStatement("return $N", constantsVariableName);
+
+    return methodBody.build();
+  }
+
+  private static void addVariableDeclaration(
+      final CodeBlock.Builder builder,
+      final String variableName,
+      final List<String> values,
+      final TypeName varType,
+      final TypeName actualType) {
+    if (values.isEmpty()) {
+      builder.addStatement("$T $N = new $T<>()", varType, variableName, actualType);
+    } else {
+      builder.add(
+          "$T $N = new $T<>($T.asList(\n",
+          varType,
+          variableName,
+          actualType,
+          ClassName.get(Arrays.class));
+      builder.indent().indent();
+
+      int constantsToAdd = values.size();
+      for (final String constantName : values) {
+        builder.add("\"$L\"", constantName);
+        if (--constantsToAdd > 0) {
+          builder.add(",");
+        }
+        builder.add("\n");
+      }
+
+      builder.unindent().unindent();
+      builder.addStatement("))");
+    }
+  }
+
+  private static CodeBlock checkForConstantsFulfillmentBlock(
+      final String undeclaredConstantsVariableName, final String formatString) {
+    return CodeBlock.builder()
+        .beginControlFlow("if (!$N.isEmpty())", undeclaredConstantsVariableName)
+        .addStatement(
+            "throw new IllegalStateException(String.format(\"" + formatString + "\", $N))",
+            undeclaredConstantsVariableName)
+        .endControlFlow()
+        .build();
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/NullableResolvedType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/NullableResolvedType.java
new file mode 100644
index 0000000..b5dd2fe
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/NullableResolvedType.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.resolver;
+
+import com.facebook.react.codegen.generator.model.NullableType;
+import com.facebook.react.codegen.generator.model.TypeData;
+import com.squareup.javapoet.TypeName;
+import com.squareup.javapoet.TypeSpec;
+import javax.annotation.Nullable;
+
+public final class NullableResolvedType extends ResolvedType<NullableType> {
+
+  private NullableResolvedType(final NullableType type, final boolean nullable) {
+    super(type, nullable);
+    throw new UnsupportedOperationException();
+  }
+
+  public static ResolvedType create(
+      final NullableType type, final TypeData typeData, final boolean nullable) {
+    return resolveType(type.innerType, typeData, true);
+  }
+
+  @Override
+  public TypeName getNativeType(final NativeTypeContext typeContext) {
+    throw new UnsupportedOperationException();
+  }
+
+  @Override
+  public @Nullable TypeSpec getGeneratedCode(final String packageName) {
+    throw new UnsupportedOperationException();
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/NumberResolvedType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/NumberResolvedType.java
new file mode 100644
index 0000000..6a9576e
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/NumberResolvedType.java
@@ -0,0 +1,42 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.resolver;
+
+import com.facebook.react.codegen.generator.model.CodegenException;
+import com.facebook.react.codegen.generator.model.DoubleType;
+import com.facebook.react.codegen.generator.model.FloatType;
+import com.facebook.react.codegen.generator.model.Int32Type;
+import com.facebook.react.codegen.generator.model.NumberType;
+import com.facebook.react.codegen.generator.model.TypeData;
+import com.squareup.javapoet.TypeName;
+
+public final class NumberResolvedType extends ResolvedType<NumberType> {
+
+  private NumberResolvedType(final NumberType type, final boolean nullable) {
+    super(type, nullable);
+  }
+
+  public static NumberResolvedType create(
+      final NumberType type, final TypeData typeData, final boolean nullable) {
+    return new NumberResolvedType(type, nullable);
+  }
+
+  @Override
+  public TypeName getNativeType(final NativeTypeContext typeContext) {
+    if (mType instanceof Int32Type) {
+      return TypeUtils.makeNullable(TypeName.INT, mNullable);
+    }
+    if (mType instanceof FloatType) {
+      return TypeUtils.makeNullable(TypeName.FLOAT, mNullable);
+    }
+    if (mType instanceof DoubleType) {
+      return TypeUtils.makeNullable(TypeName.DOUBLE, mNullable);
+    }
+    throw new CodegenException("Unsupported NumberType: " + mType.getClass());
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/ObjectResolvedType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/ObjectResolvedType.java
new file mode 100644
index 0000000..54a9cb0
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/ObjectResolvedType.java
@@ -0,0 +1,68 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.resolver;
+
+import com.facebook.react.codegen.generator.model.CodegenException;
+import com.facebook.react.codegen.generator.model.ObjectType;
+import com.facebook.react.codegen.generator.model.TypeData;
+import com.squareup.javapoet.TypeName;
+import com.squareup.javapoet.TypeSpec;
+import java.util.Collections;
+import java.util.Map;
+import java.util.stream.Collectors;
+import javax.annotation.Nullable;
+
+public final class ObjectResolvedType extends ResolvedType<ObjectType> {
+  private final Map<String, ResolvedType> mResolvedPropertyTypes;
+
+  private ObjectResolvedType(
+      final ObjectType type, final TypeData typeData, final boolean nullable) {
+    super(type, nullable);
+    mResolvedPropertyTypes =
+        Collections.unmodifiableMap(
+            type.properties.stream()
+                .collect(
+                    Collectors.toMap(
+                        item -> item.name,
+                        // TODO: Optional Object property is not necessarily nullable.
+                        item -> resolveType(item.type, typeData, item.optional))));
+  }
+
+  public static ObjectResolvedType create(
+      final ObjectType type, final TypeData typeData, final boolean nullable) {
+    return new ObjectResolvedType(type, typeData, nullable);
+  }
+
+  public Map<String, ResolvedType> getResolvedPropertyTypes() {
+    return mResolvedPropertyTypes;
+  }
+
+  @Override
+  public TypeName getNativeType(final NativeTypeContext typeContext) {
+    // TODO: It should return its own class type.
+    // However, the NativeModule system only supports built-in ReadableMap/WritableMap for now.
+    switch (typeContext) {
+      case FUNCTION_ARGUMENT:
+        return TypeUtils.makeNullable(ReactClassNames.REACT_READABLE_MAP, mNullable);
+      case FUNCTION_RETURN:
+        return TypeUtils.makeNullable(ReactClassNames.REACT_WRITABLE_MAP, mNullable);
+      default:
+        break;
+    }
+
+    throw new CodegenException(
+        "Unsupported ObjectType: " + mType + " - typeContext: " + typeContext);
+  }
+
+  @Override
+  public @Nullable TypeSpec getGeneratedCode(final String packageName) {
+    // TODO: Object type should produce is own class to represent its shape.
+    // However, the NativeModule system only supports built-in ReadableMap/WritableMap for now.
+    return null;
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/PromiseResolvedType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/PromiseResolvedType.java
new file mode 100644
index 0000000..0c575ff
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/PromiseResolvedType.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.resolver;
+
+import com.facebook.react.codegen.generator.model.PromiseType;
+import com.facebook.react.codegen.generator.model.TypeData;
+import com.squareup.javapoet.TypeName;
+
+public final class PromiseResolvedType extends ResolvedType<PromiseType> {
+
+  private PromiseResolvedType(final PromiseType type, final boolean nullable) {
+    super(type, nullable);
+  }
+
+  public static PromiseResolvedType create(
+      final PromiseType type, final TypeData typeData, final boolean nullable) {
+    return new PromiseResolvedType(type, nullable);
+  }
+
+  @Override
+  public TypeName getNativeType(final NativeTypeContext typeContext) {
+    return TypeUtils.makeNullable(ReactClassNames.REACT_PROMISE, mNullable);
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/ReactClassNames.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/ReactClassNames.java
new file mode 100644
index 0000000..2fca4df
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/ReactClassNames.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.resolver;
+
+import com.squareup.javapoet.ClassName;
+
+/** Names of React-specific Java classes required by generated code. */
+public class ReactClassNames {
+
+  public static final ClassName REACT_APPLICATION_CONTEXT =
+      ClassName.bestGuess("com.facebook.react.bridge.ReactApplicationContext");
+  public static final ClassName REACT_CALLBACK =
+      ClassName.bestGuess("com.facebook.react.bridge.Callback");
+  public static final ClassName REACT_CONTEXT_BASE_JAVA_MODULE =
+      ClassName.bestGuess("com.facebook.react.bridge.ReactContextBaseJavaModule");
+  public static final ClassName REACT_METHOD =
+      ClassName.bestGuess("com.facebook.react.bridge.ReactMethod");
+  public static final ClassName REACT_MODULE_WITH_SPEC =
+      ClassName.bestGuess("com.facebook.react.bridge.ReactModuleWithSpec");
+  public static final ClassName REACT_PROMISE =
+      ClassName.bestGuess("com.facebook.react.bridge.Promise");
+  public static final ClassName REACT_READABLE_ARRAY =
+      ClassName.bestGuess("com.facebook.react.bridge.ReadableArray");
+  public static final ClassName REACT_READABLE_MAP =
+      ClassName.bestGuess("com.facebook.react.bridge.ReadableMap");
+  public static final ClassName REACT_WRITABLE_ARRAY =
+      ClassName.bestGuess("com.facebook.react.bridge.WritableArray");
+  public static final ClassName REACT_WRITABLE_MAP =
+      ClassName.bestGuess("com.facebook.react.bridge.WritableMap");
+  public static final ClassName REACT_BUILD_CONFIG =
+      ClassName.bestGuess("com.facebook.react.common.build.ReactBuildConfig");
+  public static final ClassName REACT_TURBOMODULE =
+      ClassName.bestGuess("com.facebook.react.turbomodule.core.interfaces.TurboModule");
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/ReservedFunctionValueResolvedType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/ReservedFunctionValueResolvedType.java
new file mode 100644
index 0000000..3cd677c
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/ReservedFunctionValueResolvedType.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.resolver;
+
+import com.facebook.react.codegen.generator.model.CodegenException;
+import com.facebook.react.codegen.generator.model.DoubleType;
+import com.facebook.react.codegen.generator.model.ReservedFunctionValueType;
+import com.facebook.react.codegen.generator.model.TypeData;
+import com.squareup.javapoet.TypeName;
+import com.squareup.javapoet.TypeSpec;
+import javax.annotation.Nullable;
+
+public final class ReservedFunctionValueResolvedType
+    extends ResolvedType<ReservedFunctionValueType> {
+
+  private ReservedFunctionValueResolvedType(
+      final ReservedFunctionValueType type, final boolean nullable) {
+    super(type, nullable);
+    throw new UnsupportedOperationException();
+  }
+
+  public static ResolvedType create(
+      final ReservedFunctionValueType type, final TypeData typeData, final boolean nullable) {
+    switch (type.reservedName) {
+      case RootTag:
+        return resolveType(new DoubleType(type.getTypeId()), typeData, nullable);
+      default:
+        break;
+    }
+
+    throw new CodegenException("Unsupported ReservedFunctionValueType: " + type);
+  }
+
+  @Override
+  public TypeName getNativeType(final NativeTypeContext typeContext) {
+    throw new UnsupportedOperationException();
+  }
+
+  @Override
+  public @Nullable TypeSpec getGeneratedCode(final String packageName) {
+    throw new UnsupportedOperationException();
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/ResolvedType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/ResolvedType.java
new file mode 100644
index 0000000..e9373ed
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/ResolvedType.java
@@ -0,0 +1,52 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.resolver;
+
+import com.facebook.react.codegen.generator.model.Type;
+import com.facebook.react.codegen.generator.model.TypeData;
+import com.squareup.javapoet.TypeName;
+import com.squareup.javapoet.TypeSpec;
+import javax.annotation.Nullable;
+
+public abstract class ResolvedType<T extends Type> {
+  /** Contexts native types can appear in. */
+  public enum NativeTypeContext {
+    FUNCTION_ARGUMENT,
+    FUNCTION_RETURN,
+    DEFAULT,
+  }
+
+  protected final T mType;
+  protected final boolean mNullable;
+
+  protected ResolvedType(final T type, final boolean nullable) {
+    mType = type;
+    mNullable = nullable;
+  }
+
+  protected static ResolvedType resolveType(
+      final Type type, final TypeData typeData, final boolean nullable) {
+    return TypeResolver.resolveType(type, typeData, nullable);
+  }
+
+  public T getType() {
+    return mType;
+  }
+
+  public boolean isNullable() {
+    return mNullable;
+  }
+
+  /** The Java type generated for this type */
+  public abstract TypeName getNativeType(NativeTypeContext typeContext);
+
+  /** Generate code for this type itself, if applicable. */
+  public @Nullable TypeSpec getGeneratedCode(final String packageName) {
+    return null;
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/StringResolvedType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/StringResolvedType.java
new file mode 100644
index 0000000..c247111
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/StringResolvedType.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.resolver;
+
+import com.facebook.react.codegen.generator.model.StringType;
+import com.facebook.react.codegen.generator.model.TypeData;
+import com.squareup.javapoet.TypeName;
+
+public final class StringResolvedType extends ResolvedType<StringType> {
+
+  private StringResolvedType(final StringType type, final boolean nullable) {
+    super(type, nullable);
+  }
+
+  public static StringResolvedType create(
+      final StringType type, final TypeData typeData, final boolean nullable) {
+    return new StringResolvedType(type, nullable);
+  }
+
+  @Override
+  public TypeName getNativeType(final NativeTypeContext typeContext) {
+    return TypeUtils.makeNullable(ClassNames.STRING, mNullable);
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/TypeResolver.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/TypeResolver.java
new file mode 100644
index 0000000..6b9b533
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/TypeResolver.java
@@ -0,0 +1,90 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.resolver;
+
+import com.facebook.react.codegen.generator.model.AliasType;
+import com.facebook.react.codegen.generator.model.AnyType;
+import com.facebook.react.codegen.generator.model.ArrayType;
+import com.facebook.react.codegen.generator.model.BooleanType;
+import com.facebook.react.codegen.generator.model.FunctionType;
+import com.facebook.react.codegen.generator.model.GenericObjectType;
+import com.facebook.react.codegen.generator.model.NativeModuleType;
+import com.facebook.react.codegen.generator.model.NullableType;
+import com.facebook.react.codegen.generator.model.NumberType;
+import com.facebook.react.codegen.generator.model.ObjectType;
+import com.facebook.react.codegen.generator.model.PromiseType;
+import com.facebook.react.codegen.generator.model.ReservedFunctionValueType;
+import com.facebook.react.codegen.generator.model.StringType;
+import com.facebook.react.codegen.generator.model.Type;
+import com.facebook.react.codegen.generator.model.TypeData;
+import com.facebook.react.codegen.generator.model.VoidType;
+
+public final class TypeResolver {
+  public static ResolvedType resolveType(
+      final Type type, final TypeData typeData, final boolean nullable) {
+
+    if (type instanceof AliasType) {
+      return AliasResolvedType.create((AliasType) type, typeData, nullable);
+    }
+
+    if (type instanceof AnyType) {
+      return AnyResolvedType.create((AnyType) type, typeData, nullable);
+    }
+
+    if (type instanceof ArrayType) {
+      return ArrayResolvedType.create((ArrayType) type, typeData, nullable);
+    }
+
+    if (type instanceof BooleanType) {
+      return BooleanResolvedType.create((BooleanType) type, typeData, nullable);
+    }
+
+    if (type instanceof FunctionType) {
+      return FunctionResolvedType.create((FunctionType) type, typeData, nullable);
+    }
+
+    if (type instanceof GenericObjectType) {
+      return GenericObjectResolvedType.create((GenericObjectType) type, typeData, nullable);
+    }
+
+    if (type instanceof NativeModuleType) {
+      return NativeModuleResolvedType.create((NativeModuleType) type, typeData, nullable);
+    }
+
+    if (type instanceof NullableType) {
+      return NullableResolvedType.create((NullableType) type, typeData, nullable);
+    }
+
+    if (type instanceof NumberType) {
+      return NumberResolvedType.create((NumberType) type, typeData, nullable);
+    }
+
+    if (type instanceof ObjectType) {
+      return ObjectResolvedType.create((ObjectType) type, typeData, nullable);
+    }
+
+    if (type instanceof PromiseType) {
+      return PromiseResolvedType.create((PromiseType) type, typeData, nullable);
+    }
+
+    if (type instanceof ReservedFunctionValueType) {
+      return ReservedFunctionValueResolvedType.create(
+          (ReservedFunctionValueType) type, typeData, nullable);
+    }
+
+    if (type instanceof StringType) {
+      return StringResolvedType.create((StringType) type, typeData, nullable);
+    }
+
+    if (type instanceof VoidType) {
+      return VoidResolvedType.create((VoidType) type, typeData, nullable);
+    }
+
+    throw new IllegalArgumentException("Unable to resolve unsupported type: " + type.getClass());
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/TypeUtils.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/TypeUtils.java
new file mode 100644
index 0000000..b8742b6
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/TypeUtils.java
@@ -0,0 +1,43 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.resolver;
+
+import com.facebook.react.codegen.generator.model.CodegenException;
+import com.squareup.javapoet.ParameterizedTypeName;
+import com.squareup.javapoet.TypeName;
+import com.squareup.javapoet.TypeVariableName;
+
+public class TypeUtils {
+
+  public static TypeName getNativeClassName(TypeName className) {
+    while (className instanceof ParameterizedTypeName) {
+      className = ((ParameterizedTypeName) className).rawType;
+    }
+
+    return (className instanceof TypeVariableName) ? TypeName.OBJECT : className.box();
+  }
+
+  public static TypeName makeNullable(final TypeName typeName, final boolean isNullable) {
+    if (isNullable) {
+      if (typeName.isPrimitive()) {
+        return typeName.box();
+      }
+      if (!typeName.annotations.contains(Annotations.NULLABLE)) {
+        return typeName.annotated(Annotations.NULLABLE);
+      }
+    }
+    return typeName;
+  }
+
+  public static void assertCondition(final boolean condition, final String errorMessage)
+      throws CodegenException {
+    if (!condition) {
+      throw new CodegenException(errorMessage);
+    }
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/VoidResolvedType.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/VoidResolvedType.java
new file mode 100644
index 0000000..0665ddf
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/generator/resolver/VoidResolvedType.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.generator.resolver;
+
+import com.facebook.react.codegen.generator.model.TypeData;
+import com.facebook.react.codegen.generator.model.VoidType;
+import com.squareup.javapoet.TypeName;
+import com.squareup.javapoet.TypeSpec;
+import javax.annotation.Nullable;
+
+public final class VoidResolvedType extends ResolvedType<VoidType> {
+
+  private VoidResolvedType(final VoidType type, final boolean nullable) {
+    super(type, nullable);
+  }
+
+  public static VoidResolvedType create(
+      final VoidType type, final TypeData typeData, final boolean nullable) {
+    return new VoidResolvedType(type, nullable);
+  }
+
+  @Override
+  public TypeName getNativeType(final NativeTypeContext typeContext) {
+    return TypeName.VOID;
+  }
+
+  @Override
+  public @Nullable TypeSpec getGeneratedCode(final String packageName) {
+    throw new UnsupportedOperationException();
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/plugin/CodegenPlugin.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/plugin/CodegenPlugin.java
new file mode 100644
index 0000000..dc760c3
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/plugin/CodegenPlugin.java
@@ -0,0 +1,153 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.plugin;
+
+import com.android.build.gradle.BaseExtension;
+import com.facebook.react.codegen.generator.JavaGenerator;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
+import java.io.File;
+import org.gradle.api.GradleException;
+import org.gradle.api.Plugin;
+import org.gradle.api.Project;
+import org.gradle.api.Task;
+import org.gradle.api.tasks.Exec;
+
+/**
+ * A Gradle plugin to enable react-native-codegen in Gradle environment. See the Gradle API docs for
+ * more information: https://docs.gradle.org/6.5.1/javadoc/org/gradle/api/Project.html
+ */
+public class CodegenPlugin implements Plugin<Project> {
+
+  public void apply(final Project project) {
+    final CodegenPluginExtension extension =
+        project.getExtensions().create("react", CodegenPluginExtension.class, project);
+
+    // 1. Set up build dir.
+    final File generatedSrcDir = new File(project.getBuildDir(), "generated/source/codegen");
+    final File generatedSchemaFile = new File(generatedSrcDir, "schema.json");
+
+    // 2. Task: produce schema from JS files.
+    String os = System.getProperty("os.name").toLowerCase();
+
+    project
+        .getTasks()
+        .register(
+            "generateCodegenSchemaFromJavaScript",
+            Exec.class,
+            task -> {
+              // This is needed when using codegen from source, not from npm.
+              task.dependsOn(":packages:react-native-codegen:android:buildCodegenCLI");
+
+              task.doFirst(
+                  s -> {
+                    generatedSrcDir.delete();
+                    generatedSrcDir.mkdirs();
+                  });
+
+              task.getInputs()
+                  .files(project.fileTree(ImmutableMap.of("dir", extension.codegenDir())));
+              task.getInputs()
+                  .files(
+                      project.fileTree(
+                          ImmutableMap.of(
+                              "dir",
+                              extension.jsRootDir,
+                              "includes",
+                              ImmutableList.of("**/*.js"))));
+              task.getOutputs().file(generatedSchemaFile);
+
+              ImmutableList<String> execCommands =
+                  new ImmutableList.Builder<String>()
+                      .add(os.contains("windows") ? "yarn.cmd" : "yarn")
+                      .addAll(ImmutableList.copyOf(extension.nodeExecutableAndArgs))
+                      .add(extension.codegenGenerateSchemaCLI().getAbsolutePath())
+                      .add(generatedSchemaFile.getAbsolutePath())
+                      .add(extension.jsRootDir.getAbsolutePath())
+                      .build();
+              task.commandLine(execCommands);
+            });
+
+    // 3. Task: generate Java code from schema.
+    project
+        .getTasks()
+        .register(
+            "generateCodegenArtifactsFromSchema",
+            Exec.class,
+            task -> {
+              task.dependsOn("generateCodegenSchemaFromJavaScript");
+
+              task.getInputs()
+                  .files(project.fileTree(ImmutableMap.of("dir", extension.codegenDir())));
+              task.getInputs().files(extension.codegenGenerateNativeModuleSpecsCLI());
+              task.getInputs().files(generatedSchemaFile);
+              task.getOutputs().dir(generatedSrcDir);
+
+              if (extension.useJavaGenerator) {
+                task.doLast(
+                    s -> {
+                      generateJavaFromSchemaWithJavaGenerator(
+                          generatedSchemaFile, extension.codegenJavaPackageName, generatedSrcDir);
+                    });
+              }
+
+              ImmutableList<String> execCommands =
+                  new ImmutableList.Builder<String>()
+                      .add(os.contains("windows") ? "yarn.cmd" : "yarn")
+                      .addAll(ImmutableList.copyOf(extension.nodeExecutableAndArgs))
+                      .add(extension.codegenGenerateNativeModuleSpecsCLI().getAbsolutePath())
+                      .add("android")
+                      .add(generatedSchemaFile.getAbsolutePath())
+                      .add(generatedSrcDir.getAbsolutePath())
+                      .add(extension.libraryName)
+                      .add(extension.codegenJavaPackageName)
+                      .build();
+              task.commandLine(execCommands);
+            });
+
+    // 4. Add dependencies & generated sources to the project.
+    // Note: This last step needs to happen after the project has been evaluated.
+    project.afterEvaluate(
+        s -> {
+          // `preBuild` is one of the base tasks automatically registered by Gradle.
+          // This will invoke the codegen before compiling the entire project.
+          Task preBuild = project.getTasks().findByName("preBuild");
+          if (preBuild != null) {
+            preBuild.dependsOn("generateCodegenArtifactsFromSchema");
+          }
+
+          /**
+           * Finally, update the android configuration to include the generated sources. This
+           * equivalent to this DSL:
+           *
+           * <p>android { sourceSets { main { java { srcDirs += "$generatedSrcDir/java" } } } }
+           *
+           * <p>See documentation at
+           * https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.BaseExtension.html.
+           */
+          BaseExtension android = (BaseExtension) project.getExtensions().getByName("android");
+          android
+              .getSourceSets()
+              .getByName("main")
+              .getJava()
+              .srcDir(new File(generatedSrcDir, "java"));
+        });
+  }
+
+  // Use Java-based generator implementation to produce the source files, instead of using the
+  // JS-based generator.
+  private void generateJavaFromSchemaWithJavaGenerator(
+      final File schemaFile, final String javaPackageName, final File outputDir) {
+    final JavaGenerator generator = new JavaGenerator(schemaFile, javaPackageName, outputDir);
+    try {
+      generator.build();
+    } catch (final Exception ex) {
+      throw new GradleException("Failed to generate Java from schema.", ex);
+    }
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/plugin/CodegenPluginExtension.java b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/plugin/CodegenPluginExtension.java
new file mode 100644
index 0000000..4d734a1
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/android/src/main/java/com/facebook/react/codegen/plugin/CodegenPluginExtension.java
@@ -0,0 +1,51 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.codegen.plugin;
+
+import com.google.common.base.CaseFormat;
+import java.io.File;
+import java.util.StringTokenizer;
+import org.gradle.api.Project;
+
+public class CodegenPluginExtension {
+  public String codegenJavaPackageName = "com.facebook.fbreact.specs";
+  public File jsRootDir;
+  public String libraryName;
+  public String[] nodeExecutableAndArgs = {"node"};
+  public File reactNativeRootDir;
+  public boolean useJavaGenerator = false;
+
+  public CodegenPluginExtension(final Project project) {
+    this.reactNativeRootDir = new File(project.getRootDir(), "node_modules/react-native");
+    this.libraryName = projectPathToLibraryName(project.getPath());
+  }
+
+  public File codegenDir() {
+    return new File(this.reactNativeRootDir, "packages/react-native-codegen");
+  }
+
+  public File codegenGenerateSchemaCLI() {
+    return new File(this.codegenDir(), "lib/cli/combine/combine-js-to-schema-cli.js");
+  }
+
+  public File codegenGenerateNativeModuleSpecsCLI() {
+    return new File(this.reactNativeRootDir, "scripts/generate-specs-cli.js");
+  }
+
+  private String projectPathToLibraryName(final String projectPath) {
+    final StringTokenizer tokenizer = new StringTokenizer(projectPath, ":-_.");
+    final StringBuilder nameBuilder = new StringBuilder();
+
+    while (tokenizer.hasMoreTokens()) {
+      nameBuilder.append(CaseFormat.LOWER_CAMEL.to(CaseFormat.UPPER_CAMEL, tokenizer.nextToken()));
+    }
+    nameBuilder.append("Spec");
+
+    return nameBuilder.toString();
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/buck_tests/emptyFile.cpp b/node_modules/react-native/packages/react-native-codegen/buck_tests/emptyFile.cpp
new file mode 100644
index 0000000..a68c679
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/buck_tests/emptyFile.cpp
@@ -0,0 +1,14 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#import <react/renderer/components/codegen_tests/ComponentDescriptors.h>
+
+// TODO: Import every prop and event to asset they're generated
+
+int main(){
+    return 0;
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/buck_tests/emptyFile.mm b/node_modules/react-native/packages/react-native-codegen/buck_tests/emptyFile.mm
new file mode 100644
index 0000000..a7713b5
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/buck_tests/emptyFile.mm
@@ -0,0 +1,17 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#import <react/renderer/components/codegen_tests/ComponentDescriptors.h>
+#import <react/renderer/components/codegen_tests/ComponentViewHelpers.h>
+#import <FBReactNativeTestSpec/FBReactNativeTestSpec.h>
+#import <FBReactNativeTestSpec/FBReactNativeTestSpec-generated.mm>
+
+// TODO: Import every prop and event to asset they're generated
+
+int main(){
+    return 0;
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/buck_tests/java/ArrayPropsNativeComponentViewManager.java b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/ArrayPropsNativeComponentViewManager.java
new file mode 100644
index 0000000..2811ae0
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/ArrayPropsNativeComponentViewManager.java
@@ -0,0 +1,64 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.uimanager;
+
+import android.view.ViewGroup;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.viewmanagers.ArrayPropsNativeComponentViewManagerDelegate;
+import com.facebook.react.viewmanagers.ArrayPropsNativeComponentViewManagerInterface;
+
+public class ArrayPropsNativeComponentViewManager extends SimpleViewManager<ViewGroup>
+    implements ArrayPropsNativeComponentViewManagerInterface<ViewGroup> {
+
+  public static final String REACT_CLASS = "ArrayPropsNativeComponentView";
+
+  @Override
+  public String getName() {
+    return REACT_CLASS;
+  }
+
+  private void test() {
+    ArrayPropsNativeComponentViewManagerDelegate<ViewGroup, ArrayPropsNativeComponentViewManager>
+        delegate = new ArrayPropsNativeComponentViewManagerDelegate<>(this);
+  }
+
+  @Override
+  public ViewGroup createViewInstance(ThemedReactContext context) {
+    throw new IllegalStateException();
+  }
+
+  @Override
+  public void setNames(ViewGroup view, ReadableArray value) {}
+
+  @Override
+  public void setDisableds(ViewGroup view, ReadableArray value) {}
+
+  @Override
+  public void setProgress(ViewGroup view, ReadableArray value) {}
+
+  @Override
+  public void setRadii(ViewGroup view, ReadableArray value) {}
+
+  @Override
+  public void setColors(ViewGroup view, ReadableArray value) {}
+
+  @Override
+  public void setSrcs(ViewGroup view, ReadableArray value) {}
+
+  @Override
+  public void setPoints(ViewGroup view, ReadableArray value) {}
+
+  @Override
+  public void setEdgeInsets(ViewGroup view, ReadableArray value) {}
+
+  @Override
+  public void setSizes(ViewGroup view, ReadableArray value) {}
+
+  @Override
+  public void setObject(ViewGroup view, ReadableArray value) {}
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/buck_tests/java/BooleanPropNativeComponentViewManager.java b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/BooleanPropNativeComponentViewManager.java
new file mode 100644
index 0000000..8421c64
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/BooleanPropNativeComponentViewManager.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.uimanager;
+
+import android.view.ViewGroup;
+import androidx.annotation.Nullable;
+import com.facebook.react.viewmanagers.BooleanPropNativeComponentViewManagerDelegate;
+import com.facebook.react.viewmanagers.BooleanPropNativeComponentViewManagerInterface;
+
+public class BooleanPropNativeComponentViewManager extends SimpleViewManager<ViewGroup>
+    implements BooleanPropNativeComponentViewManagerInterface<ViewGroup> {
+
+  public static final String REACT_CLASS = "BooleanPropNativeComponentView";
+
+  @Override
+  public String getName() {
+    return REACT_CLASS;
+  }
+
+  private void test() {
+    BooleanPropNativeComponentViewManagerDelegate<ViewGroup, BooleanPropNativeComponentViewManager>
+        delegate = new BooleanPropNativeComponentViewManagerDelegate<>(this);
+  }
+
+  @Override
+  public ViewGroup createViewInstance(ThemedReactContext context) {
+    throw new IllegalStateException();
+  }
+
+  @Override
+  public void setDisabled(ViewGroup view, boolean value) {}
+
+  @Override
+  public void setDisabledNullable(ViewGroup view, @Nullable Boolean value) {}
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/buck_tests/java/ColorPropNativeComponentViewManager.java b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/ColorPropNativeComponentViewManager.java
new file mode 100644
index 0000000..96144cd
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/ColorPropNativeComponentViewManager.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.uimanager;
+
+import android.view.ViewGroup;
+import com.facebook.react.viewmanagers.ColorPropNativeComponentViewManagerDelegate;
+import com.facebook.react.viewmanagers.ColorPropNativeComponentViewManagerInterface;
+
+public class ColorPropNativeComponentViewManager extends SimpleViewManager<ViewGroup>
+    implements ColorPropNativeComponentViewManagerInterface<ViewGroup> {
+
+  public static final String REACT_CLASS = "ColorPropNativeComponentView";
+
+  @Override
+  public String getName() {
+    return REACT_CLASS;
+  }
+
+  private void test() {
+    ColorPropNativeComponentViewManagerDelegate<ViewGroup, ColorPropNativeComponentViewManager>
+        delegate = new ColorPropNativeComponentViewManagerDelegate<>(this);
+  }
+
+  @Override
+  public ViewGroup createViewInstance(ThemedReactContext context) {
+    throw new IllegalStateException();
+  }
+
+  @Override
+  public void setTintColor(ViewGroup view, Integer value) {}
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/buck_tests/java/EdgeInsetsPropNativeComponentViewManager.java b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/EdgeInsetsPropNativeComponentViewManager.java
new file mode 100644
index 0000000..207b3f3
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/EdgeInsetsPropNativeComponentViewManager.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.uimanager;
+
+import android.view.ViewGroup;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.viewmanagers.EdgeInsetsPropNativeComponentViewManagerDelegate;
+import com.facebook.react.viewmanagers.EdgeInsetsPropNativeComponentViewManagerInterface;
+
+public class EdgeInsetsPropNativeComponentViewManager extends SimpleViewManager<ViewGroup>
+    implements EdgeInsetsPropNativeComponentViewManagerInterface<ViewGroup> {
+
+  public static final String REACT_CLASS = "EdgeInsetsPropNativeComponentView";
+
+  @Override
+  public String getName() {
+    return REACT_CLASS;
+  }
+
+  private void test() {
+    EdgeInsetsPropNativeComponentViewManagerDelegate<
+            ViewGroup, EdgeInsetsPropNativeComponentViewManager>
+        delegate = new EdgeInsetsPropNativeComponentViewManagerDelegate<>(this);
+  }
+
+  @Override
+  public ViewGroup createViewInstance(ThemedReactContext context) {
+    throw new IllegalStateException();
+  }
+
+  @Override
+  public void setContentInset(ViewGroup view, ReadableMap value) {}
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/buck_tests/java/EnumPropNativeComponentViewManager.java b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/EnumPropNativeComponentViewManager.java
new file mode 100644
index 0000000..9b7ec1f
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/EnumPropNativeComponentViewManager.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.uimanager;
+
+import android.view.ViewGroup;
+import com.facebook.react.viewmanagers.EnumPropNativeComponentViewManagerDelegate;
+import com.facebook.react.viewmanagers.EnumPropNativeComponentViewManagerInterface;
+
+public class EnumPropNativeComponentViewManager extends SimpleViewManager<ViewGroup>
+    implements EnumPropNativeComponentViewManagerInterface<ViewGroup> {
+
+  public static final String REACT_CLASS = "EnumPropNativeComponentView";
+
+  @Override
+  public String getName() {
+    return REACT_CLASS;
+  }
+
+  private void test() {
+    EnumPropNativeComponentViewManagerDelegate<ViewGroup, EnumPropNativeComponentViewManager>
+        delegate = new EnumPropNativeComponentViewManagerDelegate<>(this);
+  }
+
+  @Override
+  public ViewGroup createViewInstance(ThemedReactContext context) {
+    throw new IllegalStateException();
+  }
+
+  @Override
+  public void setAlignment(ViewGroup view, String value) {}
+
+  @Override
+  public void setIntervals(ViewGroup view, Integer value) {}
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/buck_tests/java/EventNestedObjectPropsNativeComponentViewManager.java b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/EventNestedObjectPropsNativeComponentViewManager.java
new file mode 100644
index 0000000..29e1d28
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/EventNestedObjectPropsNativeComponentViewManager.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.uimanager;
+
+import android.view.ViewGroup;
+import com.facebook.react.viewmanagers.EventNestedObjectPropsNativeComponentViewManagerDelegate;
+import com.facebook.react.viewmanagers.EventNestedObjectPropsNativeComponentViewManagerInterface;
+
+public class EventNestedObjectPropsNativeComponentViewManager extends SimpleViewManager<ViewGroup>
+    implements EventNestedObjectPropsNativeComponentViewManagerInterface<ViewGroup> {
+
+  public static final String REACT_CLASS = "EventNestedObjectPropsNativeComponentView";
+
+  @Override
+  public String getName() {
+    return REACT_CLASS;
+  }
+
+  private void test() {
+    EventNestedObjectPropsNativeComponentViewManagerDelegate<
+            ViewGroup, EventNestedObjectPropsNativeComponentViewManager>
+        delegate = new EventNestedObjectPropsNativeComponentViewManagerDelegate<>(this);
+  }
+
+  @Override
+  public ViewGroup createViewInstance(ThemedReactContext context) {
+    throw new IllegalStateException();
+  }
+
+  @Override
+  public void setDisabled(ViewGroup view, boolean value) {}
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/buck_tests/java/EventPropsNativeComponentViewManager.java b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/EventPropsNativeComponentViewManager.java
new file mode 100644
index 0000000..1bba0ea
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/EventPropsNativeComponentViewManager.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.uimanager;
+
+import android.view.ViewGroup;
+import com.facebook.react.viewmanagers.EventPropsNativeComponentViewManagerDelegate;
+import com.facebook.react.viewmanagers.EventPropsNativeComponentViewManagerInterface;
+
+public class EventPropsNativeComponentViewManager extends SimpleViewManager<ViewGroup>
+    implements EventPropsNativeComponentViewManagerInterface<ViewGroup> {
+
+  public static final String REACT_CLASS = "EventPropsNativeComponentView";
+
+  @Override
+  public String getName() {
+    return REACT_CLASS;
+  }
+
+  private void test() {
+    EventPropsNativeComponentViewManagerDelegate<ViewGroup, EventPropsNativeComponentViewManager>
+        delegate = new EventPropsNativeComponentViewManagerDelegate<>(this);
+  }
+
+  @Override
+  public ViewGroup createViewInstance(ThemedReactContext context) {
+    throw new IllegalStateException();
+  }
+
+  @Override
+  public void setDisabled(ViewGroup view, boolean value) {}
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/buck_tests/java/FloatPropsNativeComponentViewManager.java b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/FloatPropsNativeComponentViewManager.java
new file mode 100644
index 0000000..3cad8d1
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/FloatPropsNativeComponentViewManager.java
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.uimanager;
+
+import android.view.ViewGroup;
+import androidx.annotation.Nullable;
+import com.facebook.react.viewmanagers.FloatPropsNativeComponentViewManagerDelegate;
+import com.facebook.react.viewmanagers.FloatPropsNativeComponentViewManagerInterface;
+
+public class FloatPropsNativeComponentViewManager extends SimpleViewManager<ViewGroup>
+    implements FloatPropsNativeComponentViewManagerInterface<ViewGroup> {
+
+  public static final String REACT_CLASS = "FloatPropsNativeComponentView";
+
+  @Override
+  public String getName() {
+    return REACT_CLASS;
+  }
+
+  private void test() {
+    FloatPropsNativeComponentViewManagerDelegate<ViewGroup, FloatPropsNativeComponentViewManager>
+        delegate = new FloatPropsNativeComponentViewManagerDelegate<>(this);
+  }
+
+  @Override
+  public ViewGroup createViewInstance(ThemedReactContext context) {
+    throw new IllegalStateException();
+  }
+
+  @Override
+  public void setBlurRadius(ViewGroup view, float value) {}
+
+  @Override
+  public void setBlurRadius2(ViewGroup view, float value) {}
+
+  @Override
+  public void setBlurRadius3(ViewGroup view, float value) {}
+
+  @Override
+  public void setBlurRadius4(ViewGroup view, float value) {}
+
+  @Override
+  public void setBlurRadius5(ViewGroup view, float value) {}
+
+  @Override
+  public void setBlurRadius6(ViewGroup view, float value) {}
+
+  @Override
+  public void setBlurRadiusNullable(ViewGroup view, @Nullable Float value) {}
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/buck_tests/java/ImagePropNativeComponentViewManager.java b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/ImagePropNativeComponentViewManager.java
new file mode 100644
index 0000000..c437963
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/ImagePropNativeComponentViewManager.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.uimanager;
+
+import android.view.ViewGroup;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.viewmanagers.ImagePropNativeComponentViewManagerDelegate;
+import com.facebook.react.viewmanagers.ImagePropNativeComponentViewManagerInterface;
+
+public class ImagePropNativeComponentViewManager extends SimpleViewManager<ViewGroup>
+    implements ImagePropNativeComponentViewManagerInterface<ViewGroup> {
+
+  public static final String REACT_CLASS = "ImagePropNativeComponentView";
+
+  @Override
+  public String getName() {
+    return REACT_CLASS;
+  }
+
+  private void test() {
+    ImagePropNativeComponentViewManagerDelegate<ViewGroup, ImagePropNativeComponentViewManager>
+        delegate = new ImagePropNativeComponentViewManagerDelegate<>(this);
+  }
+
+  @Override
+  public ViewGroup createViewInstance(ThemedReactContext context) {
+    throw new IllegalStateException();
+  }
+
+  @Override
+  public void setThumbImage(ViewGroup view, ReadableMap value) {}
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/buck_tests/java/IntegerPropNativeComponentViewManager.java b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/IntegerPropNativeComponentViewManager.java
new file mode 100644
index 0000000..7658e14
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/IntegerPropNativeComponentViewManager.java
@@ -0,0 +1,42 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.uimanager;
+
+import android.view.ViewGroup;
+import com.facebook.react.viewmanagers.IntegerPropNativeComponentViewManagerDelegate;
+import com.facebook.react.viewmanagers.IntegerPropNativeComponentViewManagerInterface;
+
+public class IntegerPropNativeComponentViewManager extends SimpleViewManager<ViewGroup>
+    implements IntegerPropNativeComponentViewManagerInterface<ViewGroup> {
+
+  public static final String REACT_CLASS = "IntegerPropNativeComponentView";
+
+  @Override
+  public String getName() {
+    return REACT_CLASS;
+  }
+
+  private void test() {
+    IntegerPropNativeComponentViewManagerDelegate<ViewGroup, IntegerPropNativeComponentViewManager>
+        delegate = new IntegerPropNativeComponentViewManagerDelegate<>(this);
+  }
+
+  @Override
+  public ViewGroup createViewInstance(ThemedReactContext context) {
+    throw new IllegalStateException();
+  }
+
+  @Override
+  public void setProgress1(ViewGroup view, int value) {}
+
+  @Override
+  public void setProgress2(ViewGroup view, int value) {}
+
+  @Override
+  public void setProgress3(ViewGroup view, int value) {}
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/buck_tests/java/InterfaceOnlyNativeComponentViewManager.java b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/InterfaceOnlyNativeComponentViewManager.java
new file mode 100644
index 0000000..fcaffeb
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/InterfaceOnlyNativeComponentViewManager.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.uimanager;
+
+import android.view.ViewGroup;
+import com.facebook.react.viewmanagers.InterfaceOnlyNativeComponentViewManagerDelegate;
+import com.facebook.react.viewmanagers.InterfaceOnlyNativeComponentViewManagerInterface;
+
+public class InterfaceOnlyNativeComponentViewManager extends SimpleViewManager<ViewGroup>
+    implements InterfaceOnlyNativeComponentViewManagerInterface<ViewGroup> {
+
+  public static final String REACT_CLASS = "InterfaceOnlyNativeComponentView";
+
+  @Override
+  public String getName() {
+    return REACT_CLASS;
+  }
+
+  private void test() {
+    InterfaceOnlyNativeComponentViewManagerDelegate<
+            ViewGroup, InterfaceOnlyNativeComponentViewManager>
+        delegate = new InterfaceOnlyNativeComponentViewManagerDelegate<>(this);
+  }
+
+  @Override
+  public ViewGroup createViewInstance(ThemedReactContext context) {
+    throw new IllegalStateException();
+  }
+
+  @Override
+  public void setTitle(ViewGroup view, String value) {}
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/buck_tests/java/MultiNativePropNativeComponentViewManager.java b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/MultiNativePropNativeComponentViewManager.java
new file mode 100644
index 0000000..6cc8bf7
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/MultiNativePropNativeComponentViewManager.java
@@ -0,0 +1,47 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.uimanager;
+
+import android.view.ViewGroup;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.viewmanagers.MultiNativePropNativeComponentViewManagerDelegate;
+import com.facebook.react.viewmanagers.MultiNativePropNativeComponentViewManagerInterface;
+
+public class MultiNativePropNativeComponentViewManager extends SimpleViewManager<ViewGroup>
+    implements MultiNativePropNativeComponentViewManagerInterface<ViewGroup> {
+
+  public static final String REACT_CLASS = "MultiNativePropNativeComponentView";
+
+  @Override
+  public String getName() {
+    return REACT_CLASS;
+  }
+
+  private void test() {
+    MultiNativePropNativeComponentViewManagerDelegate<
+            ViewGroup, MultiNativePropNativeComponentViewManager>
+        delegate = new MultiNativePropNativeComponentViewManagerDelegate<>(this);
+  }
+
+  @Override
+  public ViewGroup createViewInstance(ThemedReactContext context) {
+    throw new IllegalStateException();
+  }
+
+  @Override
+  public void setThumbImage(ViewGroup view, ReadableMap value) {}
+
+  @Override
+  public void setColor(ViewGroup view, Integer value) {}
+
+  @Override
+  public void setThumbTintColor(ViewGroup view, Integer value) {}
+
+  @Override
+  public void setPoint(ViewGroup view, ReadableMap value) {}
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/buck_tests/java/NoPropsNoEventsNativeComponentViewManager.java b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/NoPropsNoEventsNativeComponentViewManager.java
new file mode 100644
index 0000000..3f93021
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/NoPropsNoEventsNativeComponentViewManager.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.uimanager;
+
+import android.view.ViewGroup;
+import com.facebook.react.viewmanagers.NoPropsNoEventsNativeComponentViewManagerDelegate;
+import com.facebook.react.viewmanagers.NoPropsNoEventsNativeComponentViewManagerInterface;
+
+public class NoPropsNoEventsNativeComponentViewManager extends SimpleViewManager<ViewGroup>
+    implements NoPropsNoEventsNativeComponentViewManagerInterface<ViewGroup> {
+
+  public static final String REACT_CLASS = "NoPropsNoEventsNativeComponentView";
+
+  @Override
+  public String getName() {
+    return REACT_CLASS;
+  }
+
+  private void test() {
+    NoPropsNoEventsNativeComponentViewManagerDelegate<
+            ViewGroup, NoPropsNoEventsNativeComponentViewManager>
+        delegate = new NoPropsNoEventsNativeComponentViewManagerDelegate<>(this);
+  }
+
+  @Override
+  public ViewGroup createViewInstance(ThemedReactContext context) {
+    throw new IllegalStateException();
+  }
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/buck_tests/java/ObjectPropsNativeComponentManager.java b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/ObjectPropsNativeComponentManager.java
new file mode 100644
index 0000000..c73ed05
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/ObjectPropsNativeComponentManager.java
@@ -0,0 +1,43 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.uimanager;
+
+import android.view.ViewGroup;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.viewmanagers.ObjectPropsNativeComponentManagerDelegate;
+import com.facebook.react.viewmanagers.ObjectPropsNativeComponentManagerInterface;
+
+public class ObjectPropsNativeComponentManager extends SimpleViewManager<ViewGroup>
+    implements ObjectPropsNativeComponentManagerInterface<ViewGroup> {
+
+  public static final String REACT_CLASS = "ObjectPropsNativeComponent";
+
+  @Override
+  public String getName() {
+    return REACT_CLASS;
+  }
+
+  private void test() {
+    ObjectPropsNativeComponentManagerDelegate<ViewGroup, ObjectPropsNativeComponentManager>
+        delegate = new ObjectPropsNativeComponentManagerDelegate<>(this);
+  }
+
+  @Override
+  public ViewGroup createViewInstance(ThemedReactContext context) {
+    throw new IllegalStateException();
+  }
+
+  @Override
+  public void setObjectProp(ViewGroup view, ReadableMap value) {}
+
+  @Override
+  public void setObjectArrayProp(ViewGroup view, ReadableMap value) {}
+
+  @Override
+  public void setObjectPrimitiveRequiredProp(ViewGroup view, ReadableMap value) {}
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/buck_tests/java/PointPropNativeComponentViewManager.java b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/PointPropNativeComponentViewManager.java
new file mode 100644
index 0000000..d117a02
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/PointPropNativeComponentViewManager.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.uimanager;
+
+import android.view.ViewGroup;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.viewmanagers.PointPropNativeComponentViewManagerDelegate;
+import com.facebook.react.viewmanagers.PointPropNativeComponentViewManagerInterface;
+
+public class PointPropNativeComponentViewManager extends SimpleViewManager<ViewGroup>
+    implements PointPropNativeComponentViewManagerInterface<ViewGroup> {
+
+  public static final String REACT_CLASS = "PointPropNativeComponentView";
+
+  @Override
+  public String getName() {
+    return REACT_CLASS;
+  }
+
+  private void test() {
+    PointPropNativeComponentViewManagerDelegate<ViewGroup, PointPropNativeComponentViewManager>
+        delegate = new PointPropNativeComponentViewManagerDelegate<>(this);
+  }
+
+  @Override
+  public ViewGroup createViewInstance(ThemedReactContext context) {
+    throw new IllegalStateException();
+  }
+
+  @Override
+  public void setStartPoint(ViewGroup view, ReadableMap value) {}
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/buck_tests/java/StringPropNativeComponentViewManager.java b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/StringPropNativeComponentViewManager.java
new file mode 100644
index 0000000..0ad67d3
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/buck_tests/java/StringPropNativeComponentViewManager.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.uimanager;
+
+import android.view.ViewGroup;
+import com.facebook.react.viewmanagers.StringPropNativeComponentViewManagerDelegate;
+import com.facebook.react.viewmanagers.StringPropNativeComponentViewManagerInterface;
+
+public class StringPropNativeComponentViewManager extends SimpleViewManager<ViewGroup>
+    implements StringPropNativeComponentViewManagerInterface<ViewGroup> {
+
+  public static final String REACT_CLASS = "StringPropNativeComponentView";
+
+  @Override
+  public String getName() {
+    return REACT_CLASS;
+  }
+
+  private void test() {
+    StringPropNativeComponentViewManagerDelegate<ViewGroup, StringPropNativeComponentViewManager>
+        delegate = new StringPropNativeComponentViewManagerDelegate<>(this);
+  }
+
+  @Override
+  public ViewGroup createViewInstance(ThemedReactContext context) {
+    throw new IllegalStateException();
+  }
+
+  @Override
+  public void setPlaceholder(ViewGroup view, String value) {}
+
+  @Override
+  public void setDefaultValue(ViewGroup view, String value) {}
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/ArrayPropsNativeComponent.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/ArrayPropsNativeComponent.js
new file mode 100644
index 0000000..6c9a09d
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/ArrayPropsNativeComponent.js
@@ -0,0 +1,44 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+import type {
+  PointValue,
+  EdgeInsetsValue,
+} from '../../../../../Libraries/StyleSheet/StyleSheetTypes';
+import type {ColorValue} from '../../../../../Libraries/StyleSheet/StyleSheet';
+import type {ImageSource} from '../../../../../Libraries/Image/ImageSource';
+import type {
+  Int32,
+  Float,
+  WithDefault,
+} from '../../../../../Libraries/Types/CodegenTypes';
+import type {ViewProps} from '../../../../../Libraries/Components/View/ViewPropTypes';
+import codegenNativeComponent from '../../../../../Libraries/Utilities/codegenNativeComponent';
+import type {HostComponent} from '../../../../../Libraries/Renderer/shims/ReactNativeTypes';
+
+type NativeProps = $ReadOnly<{|
+  ...ViewProps,
+
+  // Props
+  names?: $ReadOnlyArray<string>,
+  disableds?: $ReadOnlyArray<boolean>,
+  progress?: $ReadOnlyArray<Int32>,
+  radii?: $ReadOnlyArray<Float>,
+  colors?: $ReadOnlyArray<ColorValue>,
+  srcs?: $ReadOnlyArray<ImageSource>,
+  points?: $ReadOnlyArray<PointValue>,
+  edgeInsets?: $ReadOnlyArray<EdgeInsetsValue>,
+  sizes?: WithDefault<$ReadOnlyArray<'small' | 'large'>, 'small'>,
+  object?: $ReadOnlyArray<$ReadOnly<{|prop: string|}>>,
+|}>;
+
+export default (codegenNativeComponent<NativeProps>(
+  'ArrayPropsNativeComponentView',
+): HostComponent<NativeProps>);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/BooleanPropNativeComponent.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/BooleanPropNativeComponent.js
new file mode 100644
index 0000000..289b6ff
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/BooleanPropNativeComponent.js
@@ -0,0 +1,26 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+import type {WithDefault} from '../../../../../Libraries/Types/CodegenTypes';
+import type {ViewProps} from '../../../../../Libraries/Components/View/ViewPropTypes';
+import codegenNativeComponent from '../../../../../Libraries/Utilities/codegenNativeComponent';
+import type {HostComponent} from '../../../../../Libraries/Renderer/shims/ReactNativeTypes';
+
+type NativeProps = $ReadOnly<{|
+  ...ViewProps,
+
+  // Props
+  disabled?: WithDefault<boolean, false>,
+  disabledNullable?: WithDefault<boolean, null>,
+|}>;
+
+export default (codegenNativeComponent<NativeProps>(
+  'BooleanPropNativeComponentView',
+): HostComponent<NativeProps>);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/ColorPropNativeComponent.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/ColorPropNativeComponent.js
new file mode 100644
index 0000000..b8dcdaf
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/ColorPropNativeComponent.js
@@ -0,0 +1,25 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+import type {ColorValue} from '../../../../../Libraries/StyleSheet/StyleSheet';
+import type {ViewProps} from '../../../../../Libraries/Components/View/ViewPropTypes';
+import codegenNativeComponent from '../../../../../Libraries/Utilities/codegenNativeComponent';
+import type {HostComponent} from '../../../../../Libraries/Renderer/shims/ReactNativeTypes';
+
+type NativeProps = $ReadOnly<{|
+  ...ViewProps,
+
+  // Props
+  tintColor?: ColorValue,
+|}>;
+
+export default (codegenNativeComponent<NativeProps>(
+  'ColorPropNativeComponentView',
+): HostComponent<NativeProps>);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/EdgeInsetsPropNativeComponent.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/EdgeInsetsPropNativeComponent.js
new file mode 100644
index 0000000..bad3a5a
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/EdgeInsetsPropNativeComponent.js
@@ -0,0 +1,25 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+import type {EdgeInsetsValue} from '../../../../../Libraries/StyleSheet/StyleSheetTypes';
+import type {ViewProps} from '../../../../../Libraries/Components/View/ViewPropTypes';
+import codegenNativeComponent from '../../../../../Libraries/Utilities/codegenNativeComponent';
+import type {HostComponent} from '../../../../../Libraries/Renderer/shims/ReactNativeTypes';
+
+type NativeProps = $ReadOnly<{|
+  ...ViewProps,
+
+  // Props
+  contentInset?: EdgeInsetsValue,
+|}>;
+
+export default (codegenNativeComponent<NativeProps>(
+  'EdgeInsetsPropNativeComponentView',
+): HostComponent<NativeProps>);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/EnumPropNativeComponent.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/EnumPropNativeComponent.js
new file mode 100644
index 0000000..72b1f59
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/EnumPropNativeComponent.js
@@ -0,0 +1,26 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+import type {WithDefault} from '../../../../../Libraries/Types/CodegenTypes';
+import type {ViewProps} from '../../../../../Libraries/Components/View/ViewPropTypes';
+import codegenNativeComponent from '../../../../../Libraries/Utilities/codegenNativeComponent';
+import type {HostComponent} from '../../../../../Libraries/Renderer/shims/ReactNativeTypes';
+
+type NativeProps = $ReadOnly<{|
+  ...ViewProps,
+
+  // Props
+  alignment?: WithDefault<'top' | 'center' | 'bottom-right', 'center'>,
+  intervals?: WithDefault<0 | 15 | 30 | 60, 0>,
+|}>;
+
+export default (codegenNativeComponent<NativeProps>(
+  'EnumPropNativeComponentView',
+): HostComponent<NativeProps>);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/EventNestedObjectPropsNativeComponent.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/EventNestedObjectPropsNativeComponent.js
new file mode 100644
index 0000000..a12ed0c
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/EventNestedObjectPropsNativeComponent.js
@@ -0,0 +1,41 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+import type {
+  Int32,
+  BubblingEventHandler,
+  WithDefault,
+} from '../../../../../Libraries/Types/CodegenTypes';
+import type {ViewProps} from '../../../../../Libraries/Components/View/ViewPropTypes';
+import codegenNativeComponent from '../../../../../Libraries/Utilities/codegenNativeComponent';
+import type {HostComponent} from '../../../../../Libraries/Renderer/shims/ReactNativeTypes';
+
+type OnChangeEvent = $ReadOnly<{|
+  location: {
+    source: {url: string, ...},
+    x: Int32,
+    y: Int32,
+    ...
+  },
+|}>;
+
+type NativeProps = $ReadOnly<{|
+  ...ViewProps,
+
+  // Props
+  disabled?: WithDefault<boolean, false>,
+
+  // Events
+  onChange?: ?BubblingEventHandler<OnChangeEvent>,
+|}>;
+
+export default (codegenNativeComponent<NativeProps>(
+  'EventNestedObjectPropsNativeComponentView',
+): HostComponent<NativeProps>);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/EventPropsNativeComponent.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/EventPropsNativeComponent.js
new file mode 100644
index 0000000..8de54ec
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/EventPropsNativeComponent.js
@@ -0,0 +1,63 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+import type {
+  Int32,
+  Float,
+  BubblingEventHandler,
+  DirectEventHandler,
+  WithDefault,
+} from '../../../../../Libraries/Types/CodegenTypes';
+import type {ViewProps} from '../../../../../Libraries/Components/View/ViewPropTypes';
+import codegenNativeComponent from '../../../../../Libraries/Utilities/codegenNativeComponent';
+import type {HostComponent} from '../../../../../Libraries/Renderer/shims/ReactNativeTypes';
+
+type OnChangeEvent = $ReadOnly<{|
+  value: boolean,
+  source?: string,
+  progress: ?Int32,
+  scale?: ?Float,
+|}>;
+
+type OnEventDirect = $ReadOnly<{|
+  value: boolean,
+|}>;
+
+type OnOrientationChangeEvent = $ReadOnly<{|
+  orientation: 'landscape' | 'portrait',
+|}>;
+
+type NativeProps = $ReadOnly<{|
+  ...ViewProps,
+
+  // Props
+  disabled?: WithDefault<boolean, false>,
+
+  // Events
+  onChange?: ?BubblingEventHandler<OnChangeEvent, 'paperDirectName'>,
+  onEventDirect?: ?DirectEventHandler<OnEventDirect>,
+  onEventDirectWithPaperName?: ?DirectEventHandler<
+    OnEventDirect,
+    'paperDirectName',
+  >,
+  onOrientationChange?: ?DirectEventHandler<
+    OnOrientationChangeEvent,
+    'paperBubblingName',
+  >,
+  onEnd?: ?BubblingEventHandler<null>,
+  onEventBubblingWithPaperName?: ?BubblingEventHandler<
+    null,
+    'paperBubblingName',
+  >,
+|}>;
+
+export default (codegenNativeComponent<NativeProps>(
+  'EventPropsNativeComponentView',
+): HostComponent<NativeProps>);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/FloatPropsNativeComponent.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/FloatPropsNativeComponent.js
new file mode 100644
index 0000000..a0a31bf
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/FloatPropsNativeComponent.js
@@ -0,0 +1,34 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+import type {
+  WithDefault,
+  Float,
+} from '../../../../../Libraries/Types/CodegenTypes';
+import type {ViewProps} from '../../../../../Libraries/Components/View/ViewPropTypes';
+import codegenNativeComponent from '../../../../../Libraries/Utilities/codegenNativeComponent';
+import type {HostComponent} from '../../../../../Libraries/Renderer/shims/ReactNativeTypes';
+
+type NativeProps = $ReadOnly<{|
+  ...ViewProps,
+
+  // Props
+  blurRadius: Float,
+  blurRadius2?: WithDefault<Float, 0.001>,
+  blurRadius3?: WithDefault<Float, 2.1>,
+  blurRadius4?: WithDefault<Float, 0>,
+  blurRadius5?: WithDefault<Float, 1>,
+  blurRadius6?: WithDefault<Float, -0.0>,
+  blurRadiusNullable?: WithDefault<Float, null>,
+|}>;
+
+export default (codegenNativeComponent<NativeProps>(
+  'FloatPropsNativeComponentView',
+): HostComponent<NativeProps>);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/ImagePropNativeComponent.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/ImagePropNativeComponent.js
new file mode 100644
index 0000000..63b4a98
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/ImagePropNativeComponent.js
@@ -0,0 +1,25 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+import type {ImageSource} from '../../../../../Libraries/Image/ImageSource';
+import type {ViewProps} from '../../../../../Libraries/Components/View/ViewPropTypes';
+import codegenNativeComponent from '../../../../../Libraries/Utilities/codegenNativeComponent';
+import type {HostComponent} from '../../../../../Libraries/Renderer/shims/ReactNativeTypes';
+
+type NativeProps = $ReadOnly<{|
+  ...ViewProps,
+
+  // Props
+  thumbImage?: ImageSource,
+|}>;
+
+export default (codegenNativeComponent<NativeProps>(
+  'ImagePropNativeComponentView',
+): HostComponent<NativeProps>);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/IntegerPropNativeComponent.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/IntegerPropNativeComponent.js
new file mode 100644
index 0000000..1718b88
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/IntegerPropNativeComponent.js
@@ -0,0 +1,30 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+import type {
+  WithDefault,
+  Int32,
+} from '../../../../../Libraries/Types/CodegenTypes';
+import type {ViewProps} from '../../../../../Libraries/Components/View/ViewPropTypes';
+import codegenNativeComponent from '../../../../../Libraries/Utilities/codegenNativeComponent';
+import type {HostComponent} from '../../../../../Libraries/Renderer/shims/ReactNativeTypes';
+
+type NativeProps = $ReadOnly<{|
+  ...ViewProps,
+
+  // Props
+  progress1?: WithDefault<Int32, 0>,
+  progress2?: WithDefault<Int32, -1>,
+  progress3?: WithDefault<Int32, 10>,
+|}>;
+
+export default (codegenNativeComponent<NativeProps>(
+  'IntegerPropNativeComponentView',
+): HostComponent<NativeProps>);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/InterfaceOnlyNativeComponent.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/InterfaceOnlyNativeComponent.js
new file mode 100644
index 0000000..aa33dfd
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/InterfaceOnlyNativeComponent.js
@@ -0,0 +1,35 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+import type {
+  BubblingEventHandler,
+  WithDefault,
+} from '../../../../../Libraries/Types/CodegenTypes';
+import type {ViewProps} from '../../../../../Libraries/Components/View/ViewPropTypes';
+import codegenNativeComponent from '../../../../../Libraries/Utilities/codegenNativeComponent';
+import type {HostComponent} from '../../../../../Libraries/Renderer/shims/ReactNativeTypes';
+
+type NativeProps = $ReadOnly<{|
+  ...ViewProps,
+
+  // Props
+  title?: WithDefault<string, ''>,
+
+  // Events
+  onChange?: ?BubblingEventHandler<$ReadOnly<{|value: boolean|}>>,
+|}>;
+
+export default (codegenNativeComponent<NativeProps>(
+  'InterfaceOnlyNativeComponentView',
+  {
+    interfaceOnly: true,
+    paperComponentName: 'RCTInterfaceOnlyComponent',
+  },
+): HostComponent<NativeProps>);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/MultiNativePropNativeComponent.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/MultiNativePropNativeComponent.js
new file mode 100644
index 0000000..675ddf1
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/MultiNativePropNativeComponent.js
@@ -0,0 +1,30 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+import type {PointValue} from '../../../../../Libraries/StyleSheet/StyleSheetTypes';
+import type {ColorValue} from '../../../../../Libraries/StyleSheet/StyleSheet';
+import type {ImageSource} from '../../../../../Libraries/Image/ImageSource';
+import type {ViewProps} from '../../../../../Libraries/Components/View/ViewPropTypes';
+import codegenNativeComponent from '../../../../../Libraries/Utilities/codegenNativeComponent';
+import type {HostComponent} from '../../../../../Libraries/Renderer/shims/ReactNativeTypes';
+
+type NativeProps = $ReadOnly<{|
+  ...ViewProps,
+
+  // Props
+  thumbImage?: ImageSource,
+  color?: ColorValue,
+  thumbTintColor?: ColorValue,
+  point?: PointValue,
+|}>;
+
+export default (codegenNativeComponent<NativeProps>(
+  'MultiNativePropNativeComponentView',
+): HostComponent<NativeProps>);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/NoPropsNoEventsNativeComponent.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/NoPropsNoEventsNativeComponent.js
new file mode 100644
index 0000000..d5b821d
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/NoPropsNoEventsNativeComponent.js
@@ -0,0 +1,23 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+import type {ViewProps} from '../../../../../Libraries/Components/View/ViewPropTypes';
+import codegenNativeComponent from '../../../../../Libraries/Utilities/codegenNativeComponent';
+import type {HostComponent} from '../../../../../Libraries/Renderer/shims/ReactNativeTypes';
+
+type NativeProps = $ReadOnly<{|
+  ...ViewProps,
+
+  // No Props or events
+|}>;
+
+export default (codegenNativeComponent<NativeProps>(
+  'NoPropsNoEventsNativeComponentView',
+): HostComponent<NativeProps>);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/ObjectPropsNativeComponent.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/ObjectPropsNativeComponent.js
new file mode 100644
index 0000000..d39dbb5
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/ObjectPropsNativeComponent.js
@@ -0,0 +1,49 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+import type {ViewProps} from '../../../../../Libraries/Components/View/ViewPropTypes';
+import type {ImageSource} from '../../../../../Libraries/Image/ImageSource';
+import type {PointValue} from '../../../../../Libraries/StyleSheet/StyleSheetTypes';
+import type {ColorValue} from '../../../../../Libraries/StyleSheet/StyleSheet';
+import type {
+  Int32,
+  Float,
+  WithDefault,
+} from '../../../../../Libraries/Types/CodegenTypes';
+import codegenNativeComponent from '../../../../../Libraries/Utilities/codegenNativeComponent';
+import type {HostComponent} from '../../../../../Libraries/Renderer/shims/ReactNativeTypes';
+
+type ObjectArrayPropType = $ReadOnly<{|
+  array: $ReadOnlyArray<string>,
+|}>;
+
+type NativeProps = $ReadOnly<{|
+  ...ViewProps,
+
+  // Props
+  objectProp?: $ReadOnly<{|
+    stringProp?: WithDefault<string, ''>,
+    booleanProp: boolean,
+    floatProp: Float,
+    intProp: Int32,
+    stringEnumProp?: WithDefault<'small' | 'large', 'small'>,
+    intEnumProp?: WithDefault<0 | 1, 0>,
+  |}>,
+  objectArrayProp: ObjectArrayPropType,
+  objectPrimitiveRequiredProp: $ReadOnly<{|
+    image: ImageSource,
+    color?: ColorValue,
+    point: ?PointValue,
+  |}>,
+|}>;
+
+export default (codegenNativeComponent<NativeProps>(
+  'ObjectPropsNativeComponent',
+): HostComponent<NativeProps>);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/PointPropNativeComponent.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/PointPropNativeComponent.js
new file mode 100644
index 0000000..0d450b8
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/PointPropNativeComponent.js
@@ -0,0 +1,25 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+import type {PointValue} from '../../../../../Libraries/StyleSheet/StyleSheetTypes';
+import type {ViewProps} from '../../../../../Libraries/Components/View/ViewPropTypes';
+import codegenNativeComponent from '../../../../../Libraries/Utilities/codegenNativeComponent';
+import type {HostComponent} from '../../../../../Libraries/Renderer/shims/ReactNativeTypes';
+
+type NativeProps = $ReadOnly<{|
+  ...ViewProps,
+
+  // Props
+  startPoint?: PointValue,
+|}>;
+
+export default (codegenNativeComponent<NativeProps>(
+  'PointPropNativeComponentView',
+): HostComponent<NativeProps>);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/StringPropNativeComponent.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/StringPropNativeComponent.js
new file mode 100644
index 0000000..2da62e3
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/components/StringPropNativeComponent.js
@@ -0,0 +1,26 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+import type {WithDefault} from '../../../../../Libraries/Types/CodegenTypes';
+import type {ViewProps} from '../../../../../Libraries/Components/View/ViewPropTypes';
+import codegenNativeComponent from '../../../../../Libraries/Utilities/codegenNativeComponent';
+import type {HostComponent} from '../../../../../Libraries/Renderer/shims/ReactNativeTypes';
+
+type NativeProps = $ReadOnly<{|
+  ...ViewProps,
+
+  // Props
+  placeholder?: WithDefault<string, ''>,
+  defaultValue?: string,
+|}>;
+
+export default (codegenNativeComponent<NativeProps>(
+  'StringPropNativeComponentView',
+): HostComponent<NativeProps>);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeArrayTurboModule.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeArrayTurboModule.js
new file mode 100644
index 0000000..291f0f6
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeArrayTurboModule.js
@@ -0,0 +1,25 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ * @format
+ */
+
+import type {TurboModule} from 'react-native/Libraries/TurboModule/RCTExport';
+import * as TurboModuleRegistry from 'react-native/Libraries/TurboModule/TurboModuleRegistry';
+
+export type ArrayType = string;
+type AnotherArray = Array<ArrayType>;
+
+export interface Spec extends TurboModule {
+  +getArray: (a: Array<any>) => Array<string>;
+  +getReadOnlyArray: (a: Array<any>) => $ReadOnlyArray<string>;
+  +getArrayWithAlias: (a: AnotherArray, b: Array<ArrayType>) => AnotherArray;
+}
+
+export default (TurboModuleRegistry.getEnforcing<Spec>(
+  'SampleTurboModule',
+): Spec);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeBooleanTurboModule.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeBooleanTurboModule.js
new file mode 100644
index 0000000..4c417f5
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeBooleanTurboModule.js
@@ -0,0 +1,24 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+import type {TurboModule} from 'react-native/Libraries/TurboModule/RCTExport';
+import * as TurboModuleRegistry from 'react-native/Libraries/TurboModule/TurboModuleRegistry';
+
+export type Boolean = boolean;
+type AnotherBoolean = Boolean;
+
+export interface Spec extends TurboModule {
+  +getBoolean: (arg: boolean) => boolean;
+  +getBooleanWithAlias: (arg: Boolean) => AnotherBoolean;
+}
+
+export default (TurboModuleRegistry.getEnforcing<Spec>(
+  'SampleTurboModule',
+): Spec);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeCallbackTurboModule.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeCallbackTurboModule.js
new file mode 100644
index 0000000..753547d
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeCallbackTurboModule.js
@@ -0,0 +1,24 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+import type {TurboModule} from 'react-native/Libraries/TurboModule/RCTExport';
+import * as TurboModuleRegistry from 'react-native/Libraries/TurboModule/TurboModuleRegistry';
+
+export type String = string;
+type CB = (value: String) => void;
+
+export interface Spec extends TurboModule {
+  +getValueWithCallback: (callback: (value: string) => void) => void;
+  +getValueWithCallbackWithAlias: (c: CB) => void;
+}
+
+export default (TurboModuleRegistry.getEnforcing<Spec>(
+  'SampleTurboModule',
+): Spec);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeNullableTurboModule.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeNullableTurboModule.js
new file mode 100644
index 0000000..4272eb3
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeNullableTurboModule.js
@@ -0,0 +1,25 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ * @format
+ */
+
+import type {TurboModule} from 'react-native/Libraries/TurboModule/RCTExport';
+import * as TurboModuleRegistry from 'react-native/Libraries/TurboModule/TurboModuleRegistry';
+
+export interface Spec extends TurboModule {
+  +getBool: (a: ?boolean) => ?boolean;
+  +getNumber: (a: ?number) => ?number;
+  +getString: (a: ?number) => ?string;
+  +getArray: (a: ?Array<any>) => ?Array<any>;
+  +getObject: (a: ?Object) => ?Object;
+  +getValueWithPromise: () => ?Promise<string>;
+}
+
+export default (TurboModuleRegistry.getEnforcing<Spec>(
+  'SampleTurboModule',
+): Spec);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeNumberTurboModule.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeNumberTurboModule.js
new file mode 100644
index 0000000..1efc1b6
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeNumberTurboModule.js
@@ -0,0 +1,24 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+import type {TurboModule} from 'react-native/Libraries/TurboModule/RCTExport';
+import * as TurboModuleRegistry from 'react-native/Libraries/TurboModule/TurboModuleRegistry';
+
+export type Number = number;
+type AnotherNumber = Number;
+
+export interface Spec extends TurboModule {
+  +getNumber: (arg: number) => number;
+  +getNumberWithAlias: (arg: Number) => AnotherNumber;
+}
+
+export default (TurboModuleRegistry.getEnforcing<Spec>(
+  'SampleTurboModule',
+): Spec);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeObjectTurboModule.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeObjectTurboModule.js
new file mode 100644
index 0000000..ea7782d
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeObjectTurboModule.js
@@ -0,0 +1,63 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ * @format
+ */
+
+import type {TurboModule} from 'react-native/Libraries/TurboModule/RCTExport';
+import * as TurboModuleRegistry from 'react-native/Libraries/TurboModule/TurboModuleRegistry';
+
+export type GenericObject = Object;
+type AnotherGenericObject = GenericObject;
+
+export interface Spec extends TurboModule {
+  +getGenericObject: (arg: Object) => Object;
+  +getGenericObjectReadOnly: (arg: Object) => $ReadOnly<{|a: string|}>;
+  +getGenericObjectWithAlias: (arg: GenericObject) => AnotherGenericObject;
+  +difficultObject: (A: {|
+    D: boolean,
+    E: {|
+      D: boolean,
+      E: number,
+      F: string,
+    |},
+    F: string,
+  |}) => {|
+    D: boolean,
+    E: {|
+      D: boolean,
+      E: {|
+        D: boolean,
+        E: number,
+        F: string,
+      |},
+      F: string,
+    |},
+    F: string,
+  |};
+  +getConstants: () => {|
+    D: boolean,
+    E: {|
+      D: boolean,
+      E: {|
+        D: boolean,
+        E: {|
+          D: boolean,
+          E: number,
+          F: string,
+        |},
+        F: string,
+      |},
+      F: string,
+    |},
+    F: string,
+  |};
+}
+
+export default (TurboModuleRegistry.getEnforcing<Spec>(
+  'SampleTurboModule',
+): Spec);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeOptionalObjectTurboModule.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeOptionalObjectTurboModule.js
new file mode 100644
index 0000000..2408df3
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeOptionalObjectTurboModule.js
@@ -0,0 +1,37 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ * @format
+ */
+
+import type {TurboModule} from 'react-native/Libraries/TurboModule/RCTExport';
+import * as TurboModuleRegistry from 'react-native/Libraries/TurboModule/TurboModuleRegistry';
+
+export interface Spec extends TurboModule {
+  +getConstants: () => {|
+    D?: ?boolean,
+    A?: Array<any>,
+    E?: ?{|
+      D?: ?boolean,
+      E?: ?{|
+        D?: ?boolean,
+        E?: ?{|
+          D?: boolean,
+          E?: number,
+          F?: string,
+        |},
+        F?: string,
+      |},
+      F?: string,
+    |},
+    F?: string,
+  |};
+}
+
+export default (TurboModuleRegistry.getEnforcing<Spec>(
+  'SampleTurboModule',
+): Spec);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativePromiseTurboModule.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativePromiseTurboModule.js
new file mode 100644
index 0000000..34a75f6
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativePromiseTurboModule.js
@@ -0,0 +1,24 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+import type {TurboModule} from 'react-native/Libraries/TurboModule/RCTExport';
+import * as TurboModuleRegistry from 'react-native/Libraries/TurboModule/TurboModuleRegistry';
+
+export type String = string;
+type AnotherPromise = Promise<String>;
+
+export interface Spec extends TurboModule {
+  +getValueWithPromise: (error: boolean) => Promise<string>;
+  +getValueWithPromiseWithAlias: (arg: String) => AnotherPromise;
+}
+
+export default (TurboModuleRegistry.getEnforcing<Spec>(
+  'SampleTurboModule',
+): Spec);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeSampleTurboModule.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeSampleTurboModule.js
new file mode 100644
index 0000000..bda6ca6
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeSampleTurboModule.js
@@ -0,0 +1,48 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ * @format
+ */
+
+import type {
+  RootTag,
+  TurboModule,
+} from 'react-native/Libraries/TurboModule/RCTExport';
+import * as TurboModuleRegistry from 'react-native/Libraries/TurboModule/TurboModuleRegistry';
+
+type Animal = {|
+  name: string,
+|};
+
+export interface Spec extends TurboModule {
+  // Exported methods.
+  +getConstants: () => {|
+    const1: boolean,
+    const2: number,
+    const3: string,
+  |};
+  +voidFunc: () => void;
+  +getBool: (arg: boolean) => boolean;
+  +getNumber: (arg: number) => number;
+  +getString: (arg: string) => string;
+  +getArray: (arg: Array<any>) => Array<any>;
+  +getObject: (arg: Object) => Object;
+  +getObjectShape: (arg: {|prop: number|}) => {|prop: number|};
+  +getAlias: (arg: Animal) => Animal;
+  +getRootTag: (arg: RootTag) => RootTag;
+  +getValue: (
+    x: number,
+    getValuegetValuegetValuegetValuegetValuey: string,
+    z: Object,
+  ) => Object;
+  +getValueWithCallback: (callback: (value: string) => void) => void;
+  +getValueWithPromise: (error: boolean) => Promise<string>;
+}
+
+export default (TurboModuleRegistry.getEnforcing<Spec>(
+  'SampleTurboModule',
+): Spec);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeSampleTurboModuleArrays.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeSampleTurboModuleArrays.js
new file mode 100644
index 0000000..7ee503f
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeSampleTurboModuleArrays.js
@@ -0,0 +1,49 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ * @format
+ */
+
+import type {
+  RootTag,
+  TurboModule,
+} from 'react-native/Libraries/TurboModule/RCTExport';
+import * as TurboModuleRegistry from 'react-native/Libraries/TurboModule/TurboModuleRegistry';
+
+type Animal = {|
+  name: string,
+|};
+
+export interface Spec extends TurboModule {
+  // Exported methods.
+  +getConstants: () => {|
+    const1: Array<boolean>,
+    const2: Array<number>,
+    const3: Array<string>,
+    id?: Array<?{|prop: number|}>,
+  |};
+  +voidFunc: () => void;
+  +getBool: (id: Array<boolean>) => Array<boolean>;
+  +getNumber: (arg: Array<number>) => Array<number>;
+  +getString: (arg: Array<string>) => Array<string>;
+  +getArray: (arg: Array<Array<any>>) => Array<Array<any>>;
+  +getObject: (arg: Array<Object>) => Array<Object>;
+  +getObjectShape: (arg: Array<{|prop: number|}>) => Array<{|prop: number|}>;
+  +getAlias: (arg: Array<Animal>) => Array<Animal>;
+  +getRootTag: (arg: Array<RootTag>) => Array<RootTag>;
+  +getValue: (
+    x: Array<number>,
+    y: Array<string>,
+    z: Array<Object>,
+  ) => Array<Object>;
+  +getValueWithCallback: (callback: (value: Array<string>) => void) => void;
+  +getValueWithPromise: (error: Array<boolean>) => Promise<Array<string>>;
+}
+
+export default (TurboModuleRegistry.getEnforcing<Spec>(
+  'SampleTurboModuleArrays',
+): Spec);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeSampleTurboModuleNullable.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeSampleTurboModuleNullable.js
new file mode 100644
index 0000000..1c174e7
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeSampleTurboModuleNullable.js
@@ -0,0 +1,44 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ * @format
+ */
+
+import type {
+  RootTag,
+  TurboModule,
+} from 'react-native/Libraries/TurboModule/RCTExport';
+import * as TurboModuleRegistry from 'react-native/Libraries/TurboModule/TurboModuleRegistry';
+
+type Animal = ?{|
+  name: ?string,
+|};
+
+export interface Spec extends TurboModule {
+  // Exported methods.
+  +getConstants: () => {|
+    const1: ?boolean,
+    const2: ?number,
+    const3: ?string,
+  |};
+  +voidFunc: () => void;
+  +getBool: (arg: ?boolean) => ?boolean;
+  +getNumber: (arg: ?number) => ?number;
+  +getString: (arg: ?string) => ?string;
+  +getArray: (arg: ?Array<any>) => ?Array<any>;
+  +getObject: (arg: ?Object) => ?Object;
+  +getObjectShape: (arg: ?{|prop: ?number|}) => ?{|prop: ?number|};
+  +getAlias: (arg: ?Animal) => ?Animal;
+  +getRootTag: (arg: ?RootTag) => ?RootTag;
+  +getValue: (x: ?number, y: ?string, z: ?Object) => ?Object;
+  +getValueWithCallback: (callback: (value: ?string) => void) => void;
+  +getValueWithPromise: (error: ?boolean) => ?Promise<string>;
+}
+
+export default (TurboModuleRegistry.getEnforcing<Spec>(
+  'SampleTurboModuleNullable',
+): Spec);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeSampleTurboModuleNullableAndOptional.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeSampleTurboModuleNullableAndOptional.js
new file mode 100644
index 0000000..7863aef
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeSampleTurboModuleNullableAndOptional.js
@@ -0,0 +1,44 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ * @format
+ */
+
+import type {
+  RootTag,
+  TurboModule,
+} from 'react-native/Libraries/TurboModule/RCTExport';
+import * as TurboModuleRegistry from 'react-native/Libraries/TurboModule/TurboModuleRegistry';
+
+type Animal = ?{|
+  name?: ?string,
+|};
+
+export interface Spec extends TurboModule {
+  // Exported methods.
+  +getConstants?: () => {|
+    const1?: ?boolean,
+    const2?: ?number,
+    const3?: ?string,
+  |};
+  +voidFunc?: () => void;
+  +getBool?: (arg?: ?boolean) => ?boolean;
+  +getNumber?: (arg?: ?number) => ?number;
+  +getString?: (arg?: ?string) => ?string;
+  +getArray?: (arg?: ?Array<any>) => ?Array<any>;
+  +getObject?: (arg?: ?Object) => ?Object;
+  +getObjectShape?: (arg?: {|prop?: ?number|}) => {|prop?: ?number|};
+  +getAlias?: (arg?: ?Animal) => ?Animal;
+  +getRootTag?: (arg?: ?RootTag) => ?RootTag;
+  +getValue?: (x?: ?number, y?: ?string, z?: ?Object) => ?Object;
+  +getValueWithCallback?: (callback?: ?(value?: ?string) => void) => void;
+  +getValueWithPromise?: (error?: ?boolean) => ?Promise<string>;
+}
+
+export default (TurboModuleRegistry.getEnforcing<Spec>(
+  'SampleTurboModuleNullableAndOptional',
+): Spec);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeSampleTurboModuleOptional.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeSampleTurboModuleOptional.js
new file mode 100644
index 0000000..52343ae
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeSampleTurboModuleOptional.js
@@ -0,0 +1,44 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ * @format
+ */
+
+import type {
+  RootTag,
+  TurboModule,
+} from 'react-native/Libraries/TurboModule/RCTExport';
+import * as TurboModuleRegistry from 'react-native/Libraries/TurboModule/TurboModuleRegistry';
+
+type Animal = {|
+  name?: string,
+|};
+
+export interface Spec extends TurboModule {
+  // Exported methods.
+  +getConstants?: () => {|
+    const1?: boolean,
+    const2?: number,
+    const3?: string,
+  |};
+  +voidFunc?: () => void;
+  +getBool?: (arg?: boolean) => boolean;
+  +getNumber?: (arg?: number) => number;
+  +getString?: (arg?: string) => string;
+  +getArray?: (arg?: Array<any>) => Array<any>;
+  +getObject?: (arg?: Object) => Object;
+  +getObjectShape?: (arg?: {|prop?: number|}) => {|prop?: number|};
+  +getAlias?: (arg?: Animal) => Animal;
+  +getRootTag?: (arg?: RootTag) => RootTag;
+  +getValue?: (x?: number, y?: string, z?: Object) => Object;
+  +getValueWithCallback?: (callback?: (value?: string) => void) => void;
+  +getValueWithPromise?: (error?: boolean) => Promise<string>;
+}
+
+export default (TurboModuleRegistry.getEnforcing<Spec>(
+  'SampleTurboModuleOptional',
+): Spec);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeStringTurboModule.js b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeStringTurboModule.js
new file mode 100644
index 0000000..684a867
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__test_fixtures__/modules/NativeStringTurboModule.js
@@ -0,0 +1,24 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+import type {TurboModule} from 'react-native/Libraries/TurboModule/RCTExport';
+import * as TurboModuleRegistry from 'react-native/Libraries/TurboModule/TurboModuleRegistry';
+
+export type String = string;
+type AnotherString = String;
+
+export interface Spec extends TurboModule {
+  +getString: (arg: string) => string;
+  +getStringWithAlias: (arg: String) => AnotherString;
+}
+
+export default (TurboModuleRegistry.getEnforcing<Spec>(
+  'SampleTurboModule',
+): Spec);
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__tests__/modules/GenerateModuleObjCpp-test.js b/node_modules/react-native/packages/react-native-codegen/e2e/__tests__/modules/GenerateModuleObjCpp-test.js
new file mode 100644
index 0000000..62f923d
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__tests__/modules/GenerateModuleObjCpp-test.js
@@ -0,0 +1,56 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @emails oncall+react_native
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const parser = require('../../../src/parsers/flow');
+const generator = require('../../../src/generators/modules/GenerateModuleObjCpp');
+const fs = require('fs');
+
+import type {SchemaType} from '../../../src/CodegenSchema';
+
+const FIXTURE_DIR = `${__dirname}/../../__test_fixtures__/modules`;
+
+function getModules(): SchemaType {
+  const filenames: Array<string> = fs.readdirSync(FIXTURE_DIR);
+  return filenames.reduce<SchemaType>(
+    (accumulator, file) => {
+      const schema = parser.parseFile(`${FIXTURE_DIR}/${file}`);
+      return {
+        modules: {
+          ...accumulator.modules,
+          ...schema.modules,
+        },
+      };
+    },
+    {modules: {}},
+  );
+}
+
+describe('GenerateModuleObjCpp', () => {
+  it('can generate a header file NativeModule specs', () => {
+    const libName = 'RNCodegenModuleFixtures';
+    const output = generator.generate(libName, getModules(), undefined, false);
+    expect(output.get(libName + '.h')).toMatchSnapshot();
+  });
+
+  it('can generate a header file NativeModule specs with assume nonnull enabled', () => {
+    const libName = 'RNCodegenModuleFixtures';
+    const output = generator.generate(libName, getModules(), undefined, true);
+    expect(output.get(libName + '.h')).toMatchSnapshot();
+  });
+
+  it('can generate an implementation file NativeModule specs', () => {
+    const libName = 'RNCodegenModuleFixtures';
+    const output = generator.generate(libName, getModules(), undefined, false);
+    expect(output.get(libName + '-generated.mm')).toMatchSnapshot();
+  });
+});
diff --git a/node_modules/react-native/packages/react-native-codegen/e2e/__tests__/modules/__snapshots__/GenerateModuleObjCpp-test.js.snap b/node_modules/react-native/packages/react-native-codegen/e2e/__tests__/modules/__snapshots__/GenerateModuleObjCpp-test.js.snap
new file mode 100644
index 0000000..7243580
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/e2e/__tests__/modules/__snapshots__/GenerateModuleObjCpp-test.js.snap
@@ -0,0 +1,3214 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GenerateModuleObjCpp can generate a header file NativeModule specs 1`] = `
+"/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleObjCpp
+ *
+ * We create an umbrella header (and corresponding implementation) here since
+ * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
+ * must have a single output. More files => more genrule()s => slower builds.
+ */
+
+#ifndef __cplusplus
+#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
+#endif
+#import <Foundation/Foundation.h>
+#import <RCTRequired/RCTRequired.h>
+#import <RCTTypeSafety/RCTConvertHelpers.h>
+#import <RCTTypeSafety/RCTTypedModuleConstants.h>
+#import <React/RCTBridgeModule.h>
+#import <React/RCTCxxConvert.h>
+#import <React/RCTManagedPointer.h>
+#import <ReactCommon/RCTTurboModule.h>
+#import <folly/Optional.h>
+#import <vector>
+
+
+@protocol NativeArrayTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
+
+- (NSArray<NSString *> *)getArray:(NSArray *)a;
+- (NSArray<NSString *> *)getReadOnlyArray:(NSArray *)a;
+- (NSArray<NSString *> *)getArrayWithAlias:(NSArray *)a
+                                         b:(NSArray *)b;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeArrayTurboModule'
+     */
+    class JSI_EXPORT NativeArrayTurboModuleSpecJSI : public ObjCTurboModule {
+    public:
+      NativeArrayTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+
+@protocol NativeBooleanTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
+
+- (NSNumber *)getBoolean:(BOOL)arg;
+- (NSNumber *)getBooleanWithAlias:(BOOL)arg;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeBooleanTurboModule'
+     */
+    class JSI_EXPORT NativeBooleanTurboModuleSpecJSI : public ObjCTurboModule {
+    public:
+      NativeBooleanTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+
+@protocol NativeCallbackTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
+
+- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
+- (void)getValueWithCallbackWithAlias:(RCTResponseSenderBlock)c;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeCallbackTurboModule'
+     */
+    class JSI_EXPORT NativeCallbackTurboModuleSpecJSI : public ObjCTurboModule {
+    public:
+      NativeCallbackTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+
+@protocol NativeNullableTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
+
+- (NSNumber * _Nullable)getBool:(NSNumber *)a;
+- (NSNumber * _Nullable)getNumber:(NSNumber *)a;
+- (NSString * _Nullable)getString:(NSNumber *)a;
+- (NSArray<id<NSObject>> * _Nullable)getArray:(NSArray * _Nullable)a;
+- (NSDictionary * _Nullable)getObject:(NSDictionary * _Nullable)a;
+- (void)getValueWithPromise:(RCTPromiseResolveBlock)resolve
+                     reject:(RCTPromiseRejectBlock)reject;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeNullableTurboModule'
+     */
+    class JSI_EXPORT NativeNullableTurboModuleSpecJSI : public ObjCTurboModule {
+    public:
+      NativeNullableTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+
+@protocol NativeNumberTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
+
+- (NSNumber *)getNumber:(double)arg;
+- (NSNumber *)getNumberWithAlias:(double)arg;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeNumberTurboModule'
+     */
+    class JSI_EXPORT NativeNumberTurboModuleSpecJSI : public ObjCTurboModule {
+    public:
+      NativeNumberTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+namespace JS {
+  namespace NativeObjectTurboModule {
+    struct SpecDifficultObjectAE {
+      bool D() const;
+      double E() const;
+      NSString *F() const;
+
+      SpecDifficultObjectAE(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeObjectTurboModule_SpecDifficultObjectAE)
++ (RCTManagedPointer *)JS_NativeObjectTurboModule_SpecDifficultObjectAE:(id)json;
+@end
+namespace JS {
+  namespace NativeObjectTurboModule {
+    struct SpecDifficultObjectA {
+      bool D() const;
+      JS::NativeObjectTurboModule::SpecDifficultObjectAE E() const;
+      NSString *F() const;
+
+      SpecDifficultObjectA(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeObjectTurboModule_SpecDifficultObjectA)
++ (RCTManagedPointer *)JS_NativeObjectTurboModule_SpecDifficultObjectA:(id)json;
+@end
+namespace JS {
+  namespace NativeObjectTurboModule {
+    struct ConstantsEEE {
+
+      struct Builder {
+        struct Input {
+          RCTRequired<bool> D;
+          RCTRequired<double> E;
+          RCTRequired<NSString *> F;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing ConstantsEEE */
+        Builder(ConstantsEEE i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static ConstantsEEE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      ConstantsEEE(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+namespace JS {
+  namespace NativeObjectTurboModule {
+    struct ConstantsEE {
+
+      struct Builder {
+        struct Input {
+          RCTRequired<bool> D;
+          RCTRequired<JS::NativeObjectTurboModule::ConstantsEEE::Builder> E;
+          RCTRequired<NSString *> F;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing ConstantsEE */
+        Builder(ConstantsEE i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static ConstantsEE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      ConstantsEE(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+namespace JS {
+  namespace NativeObjectTurboModule {
+    struct ConstantsE {
+
+      struct Builder {
+        struct Input {
+          RCTRequired<bool> D;
+          RCTRequired<JS::NativeObjectTurboModule::ConstantsEE::Builder> E;
+          RCTRequired<NSString *> F;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing ConstantsE */
+        Builder(ConstantsE i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static ConstantsE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      ConstantsE(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+namespace JS {
+  namespace NativeObjectTurboModule {
+    struct Constants {
+
+      struct Builder {
+        struct Input {
+          RCTRequired<bool> D;
+          RCTRequired<JS::NativeObjectTurboModule::ConstantsE::Builder> E;
+          RCTRequired<NSString *> F;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing Constants */
+        Builder(Constants i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      Constants(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+@protocol NativeObjectTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
+
+- (NSDictionary *)getGenericObject:(NSDictionary *)arg;
+- (NSDictionary *)getGenericObjectReadOnly:(NSDictionary *)arg;
+- (NSDictionary *)getGenericObjectWithAlias:(NSDictionary *)arg;
+- (NSDictionary *)difficultObject:(JS::NativeObjectTurboModule::SpecDifficultObjectA &)A;
+- (facebook::react::ModuleConstants<JS::NativeObjectTurboModule::Constants::Builder>)constantsToExport;
+- (facebook::react::ModuleConstants<JS::NativeObjectTurboModule::Constants::Builder>)getConstants;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeObjectTurboModule'
+     */
+    class JSI_EXPORT NativeObjectTurboModuleSpecJSI : public ObjCTurboModule {
+    public:
+      NativeObjectTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+namespace JS {
+  namespace NativeOptionalObjectTurboModule {
+    struct ConstantsEEE {
+
+      struct Builder {
+        struct Input {
+          folly::Optional<bool> D;
+          folly::Optional<double> E;
+          NSString *F;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing ConstantsEEE */
+        Builder(ConstantsEEE i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static ConstantsEEE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      ConstantsEEE(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+namespace JS {
+  namespace NativeOptionalObjectTurboModule {
+    struct ConstantsEE {
+
+      struct Builder {
+        struct Input {
+          folly::Optional<bool> D;
+          folly::Optional<JS::NativeOptionalObjectTurboModule::ConstantsEEE::Builder> E;
+          NSString *F;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing ConstantsEE */
+        Builder(ConstantsEE i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static ConstantsEE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      ConstantsEE(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+namespace JS {
+  namespace NativeOptionalObjectTurboModule {
+    struct ConstantsE {
+
+      struct Builder {
+        struct Input {
+          folly::Optional<bool> D;
+          folly::Optional<JS::NativeOptionalObjectTurboModule::ConstantsEE::Builder> E;
+          NSString *F;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing ConstantsE */
+        Builder(ConstantsE i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static ConstantsE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      ConstantsE(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+namespace JS {
+  namespace NativeOptionalObjectTurboModule {
+    struct Constants {
+
+      struct Builder {
+        struct Input {
+          folly::Optional<bool> D;
+          id<NSObject> _Nullable  A;
+          folly::Optional<JS::NativeOptionalObjectTurboModule::ConstantsE::Builder> E;
+          NSString *F;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing Constants */
+        Builder(Constants i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      Constants(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+@protocol NativeOptionalObjectTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
+
+- (facebook::react::ModuleConstants<JS::NativeOptionalObjectTurboModule::Constants::Builder>)constantsToExport;
+- (facebook::react::ModuleConstants<JS::NativeOptionalObjectTurboModule::Constants::Builder>)getConstants;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeOptionalObjectTurboModule'
+     */
+    class JSI_EXPORT NativeOptionalObjectTurboModuleSpecJSI : public ObjCTurboModule {
+    public:
+      NativeOptionalObjectTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+
+@protocol NativePromiseTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
+
+- (void)getValueWithPromise:(BOOL)error
+                    resolve:(RCTPromiseResolveBlock)resolve
+                     reject:(RCTPromiseRejectBlock)reject;
+- (void)getValueWithPromiseWithAlias:(NSString *)arg
+                             resolve:(RCTPromiseResolveBlock)resolve
+                              reject:(RCTPromiseRejectBlock)reject;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativePromiseTurboModule'
+     */
+    class JSI_EXPORT NativePromiseTurboModuleSpecJSI : public ObjCTurboModule {
+    public:
+      NativePromiseTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+namespace JS {
+  namespace NativeSampleTurboModule {
+    struct SpecGetObjectShapeArg {
+      double prop() const;
+
+      SpecGetObjectShapeArg(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeSampleTurboModule_SpecGetObjectShapeArg)
++ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecGetObjectShapeArg:(id)json;
+@end
+namespace JS {
+  namespace NativeSampleTurboModule {
+    struct Animal {
+      NSString *name() const;
+
+      Animal(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeSampleTurboModule_Animal)
++ (RCTManagedPointer *)JS_NativeSampleTurboModule_Animal:(id)json;
+@end
+namespace JS {
+  namespace NativeSampleTurboModule {
+    struct Constants {
+
+      struct Builder {
+        struct Input {
+          RCTRequired<bool> const1;
+          RCTRequired<double> const2;
+          RCTRequired<NSString *> const3;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing Constants */
+        Builder(Constants i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      Constants(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
+
+- (void)voidFunc;
+- (NSNumber *)getBool:(BOOL)arg;
+- (NSNumber *)getNumber:(double)arg;
+- (NSString *)getString:(NSString *)arg;
+- (NSArray<id<NSObject>> *)getArray:(NSArray *)arg;
+- (NSDictionary *)getObject:(NSDictionary *)arg;
+- (NSDictionary *)getObjectShape:(JS::NativeSampleTurboModule::SpecGetObjectShapeArg &)arg;
+- (NSDictionary *)getAlias:(JS::NativeSampleTurboModule::Animal &)arg;
+- (NSNumber *)getRootTag:(double)arg;
+- (NSDictionary *)getValue:(double)x
+getValuegetValuegetValuegetValuegetValuey:(NSString *)getValuegetValuegetValuegetValuegetValuey
+                         z:(NSDictionary *)z;
+- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
+- (void)getValueWithPromise:(BOOL)error
+                    resolve:(RCTPromiseResolveBlock)resolve
+                     reject:(RCTPromiseRejectBlock)reject;
+- (facebook::react::ModuleConstants<JS::NativeSampleTurboModule::Constants::Builder>)constantsToExport;
+- (facebook::react::ModuleConstants<JS::NativeSampleTurboModule::Constants::Builder>)getConstants;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeSampleTurboModule'
+     */
+    class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
+    public:
+      NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+namespace JS {
+  namespace NativeSampleTurboModuleArrays {
+    struct ConstantsIdElement {
+
+      struct Builder {
+        struct Input {
+          RCTRequired<double> prop;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing ConstantsIdElement */
+        Builder(ConstantsIdElement i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static ConstantsIdElement fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      ConstantsIdElement(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+namespace JS {
+  namespace NativeSampleTurboModuleArrays {
+    struct Constants {
+
+      struct Builder {
+        struct Input {
+          RCTRequired<std::vector<bool>> const1;
+          RCTRequired<std::vector<double>> const2;
+          RCTRequired<std::vector<NSString *>> const3;
+          folly::Optional<std::vector<folly::Optional<JS::NativeSampleTurboModuleArrays::ConstantsIdElement::Builder>>> id_;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing Constants */
+        Builder(Constants i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      Constants(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+@protocol NativeSampleTurboModuleArraysSpec <RCTBridgeModule, RCTTurboModule>
+
+- (void)voidFunc;
+- (NSArray<NSNumber *> *)getBool:(NSArray *)id;
+- (NSArray<NSNumber *> *)getNumber:(NSArray *)arg;
+- (NSArray<NSString *> *)getString:(NSArray *)arg;
+- (NSArray<NSArray<id<NSObject>> *> *)getArray:(NSArray *)arg;
+- (NSArray<NSDictionary *> *)getObject:(NSArray *)arg;
+- (NSArray<NSDictionary *> *)getObjectShape:(NSArray *)arg;
+- (NSArray<NSDictionary *> *)getAlias:(NSArray *)arg;
+- (NSArray<NSNumber *> *)getRootTag:(NSArray *)arg;
+- (NSArray<NSDictionary *> *)getValue:(NSArray *)x
+                                    y:(NSArray *)y
+                                    z:(NSArray *)z;
+- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
+- (void)getValueWithPromise:(NSArray *)error
+                    resolve:(RCTPromiseResolveBlock)resolve
+                     reject:(RCTPromiseRejectBlock)reject;
+- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleArrays::Constants::Builder>)constantsToExport;
+- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleArrays::Constants::Builder>)getConstants;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeSampleTurboModuleArrays'
+     */
+    class JSI_EXPORT NativeSampleTurboModuleArraysSpecJSI : public ObjCTurboModule {
+    public:
+      NativeSampleTurboModuleArraysSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+namespace JS {
+  namespace NativeSampleTurboModuleNullable {
+    struct SpecGetObjectShapeArg {
+      folly::Optional<double> prop() const;
+
+      SpecGetObjectShapeArg(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeSampleTurboModuleNullable_SpecGetObjectShapeArg)
++ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullable_SpecGetObjectShapeArg:(id)json;
+@end
+namespace JS {
+  namespace NativeSampleTurboModuleNullable {
+    struct Animal {
+      NSString *name() const;
+
+      Animal(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeSampleTurboModuleNullable_Animal)
++ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullable_Animal:(id)json;
+@end
+namespace JS {
+  namespace NativeSampleTurboModuleNullable {
+    struct Constants {
+
+      struct Builder {
+        struct Input {
+          RCTRequired<folly::Optional<bool>> const1;
+          RCTRequired<folly::Optional<double>> const2;
+          RCTRequired<NSString *> const3;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing Constants */
+        Builder(Constants i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      Constants(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+@protocol NativeSampleTurboModuleNullableSpec <RCTBridgeModule, RCTTurboModule>
+
+- (void)voidFunc;
+- (NSNumber * _Nullable)getBool:(NSNumber *)arg;
+- (NSNumber * _Nullable)getNumber:(NSNumber *)arg;
+- (NSString * _Nullable)getString:(NSString * _Nullable)arg;
+- (NSArray<id<NSObject>> * _Nullable)getArray:(NSArray * _Nullable)arg;
+- (NSDictionary * _Nullable)getObject:(NSDictionary * _Nullable)arg;
+- (NSDictionary * _Nullable)getObjectShape:(JS::NativeSampleTurboModuleNullable::SpecGetObjectShapeArg &)arg;
+- (NSDictionary * _Nullable)getAlias:(JS::NativeSampleTurboModuleNullable::Animal &)arg;
+- (NSNumber * _Nullable)getRootTag:(NSNumber *)arg;
+- (NSDictionary * _Nullable)getValue:(NSNumber *)x
+                                   y:(NSString * _Nullable)y
+                                   z:(NSDictionary * _Nullable)z;
+- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
+- (void)getValueWithPromise:(NSNumber *)error
+                    resolve:(RCTPromiseResolveBlock)resolve
+                     reject:(RCTPromiseRejectBlock)reject;
+- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleNullable::Constants::Builder>)constantsToExport;
+- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleNullable::Constants::Builder>)getConstants;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeSampleTurboModuleNullable'
+     */
+    class JSI_EXPORT NativeSampleTurboModuleNullableSpecJSI : public ObjCTurboModule {
+    public:
+      NativeSampleTurboModuleNullableSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+namespace JS {
+  namespace NativeSampleTurboModuleNullableAndOptional {
+    struct SpecGetObjectShapeArg {
+      folly::Optional<double> prop() const;
+
+      SpecGetObjectShapeArg(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeSampleTurboModuleNullableAndOptional_SpecGetObjectShapeArg)
++ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullableAndOptional_SpecGetObjectShapeArg:(id)json;
+@end
+namespace JS {
+  namespace NativeSampleTurboModuleNullableAndOptional {
+    struct Animal {
+      NSString *name() const;
+
+      Animal(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeSampleTurboModuleNullableAndOptional_Animal)
++ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullableAndOptional_Animal:(id)json;
+@end
+namespace JS {
+  namespace NativeSampleTurboModuleNullableAndOptional {
+    struct Constants {
+
+      struct Builder {
+        struct Input {
+          folly::Optional<bool> const1;
+          folly::Optional<double> const2;
+          NSString *const3;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing Constants */
+        Builder(Constants i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      Constants(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+@protocol NativeSampleTurboModuleNullableAndOptionalSpec <RCTBridgeModule, RCTTurboModule>
+
+- (void)voidFunc;
+- (NSNumber * _Nullable)getBool:(NSNumber *)arg;
+- (NSNumber * _Nullable)getNumber:(NSNumber *)arg;
+- (NSString * _Nullable)getString:(NSString * _Nullable)arg;
+- (NSArray<id<NSObject>> * _Nullable)getArray:(NSArray * _Nullable)arg;
+- (NSDictionary * _Nullable)getObject:(NSDictionary * _Nullable)arg;
+- (NSDictionary *)getObjectShape:(JS::NativeSampleTurboModuleNullableAndOptional::SpecGetObjectShapeArg &)arg;
+- (NSDictionary * _Nullable)getAlias:(JS::NativeSampleTurboModuleNullableAndOptional::Animal &)arg;
+- (NSNumber * _Nullable)getRootTag:(NSNumber *)arg;
+- (NSDictionary * _Nullable)getValue:(NSNumber *)x
+                                   y:(NSString * _Nullable)y
+                                   z:(NSDictionary * _Nullable)z;
+- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
+- (void)getValueWithPromise:(NSNumber *)error
+                    resolve:(RCTPromiseResolveBlock)resolve
+                     reject:(RCTPromiseRejectBlock)reject;
+- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleNullableAndOptional::Constants::Builder>)constantsToExport;
+- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleNullableAndOptional::Constants::Builder>)getConstants;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeSampleTurboModuleNullableAndOptional'
+     */
+    class JSI_EXPORT NativeSampleTurboModuleNullableAndOptionalSpecJSI : public ObjCTurboModule {
+    public:
+      NativeSampleTurboModuleNullableAndOptionalSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+namespace JS {
+  namespace NativeSampleTurboModuleOptional {
+    struct SpecGetObjectShapeArg {
+      folly::Optional<double> prop() const;
+
+      SpecGetObjectShapeArg(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeSampleTurboModuleOptional_SpecGetObjectShapeArg)
++ (RCTManagedPointer *)JS_NativeSampleTurboModuleOptional_SpecGetObjectShapeArg:(id)json;
+@end
+namespace JS {
+  namespace NativeSampleTurboModuleOptional {
+    struct Animal {
+      NSString *name() const;
+
+      Animal(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeSampleTurboModuleOptional_Animal)
++ (RCTManagedPointer *)JS_NativeSampleTurboModuleOptional_Animal:(id)json;
+@end
+namespace JS {
+  namespace NativeSampleTurboModuleOptional {
+    struct Constants {
+
+      struct Builder {
+        struct Input {
+          folly::Optional<bool> const1;
+          folly::Optional<double> const2;
+          NSString *const3;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing Constants */
+        Builder(Constants i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      Constants(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+@protocol NativeSampleTurboModuleOptionalSpec <RCTBridgeModule, RCTTurboModule>
+
+- (void)voidFunc;
+- (NSNumber *)getBool:(NSNumber *)arg;
+- (NSNumber *)getNumber:(NSNumber *)arg;
+- (NSString *)getString:(NSString *)arg;
+- (NSArray<id<NSObject>> *)getArray:(NSArray *)arg;
+- (NSDictionary *)getObject:(NSDictionary *)arg;
+- (NSDictionary *)getObjectShape:(JS::NativeSampleTurboModuleOptional::SpecGetObjectShapeArg &)arg;
+- (NSDictionary *)getAlias:(JS::NativeSampleTurboModuleOptional::Animal &)arg;
+- (NSNumber *)getRootTag:(NSNumber *)arg;
+- (NSDictionary *)getValue:(NSNumber *)x
+                         y:(NSString *)y
+                         z:(NSDictionary *)z;
+- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
+- (void)getValueWithPromise:(NSNumber *)error
+                    resolve:(RCTPromiseResolveBlock)resolve
+                     reject:(RCTPromiseRejectBlock)reject;
+- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleOptional::Constants::Builder>)constantsToExport;
+- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleOptional::Constants::Builder>)getConstants;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeSampleTurboModuleOptional'
+     */
+    class JSI_EXPORT NativeSampleTurboModuleOptionalSpecJSI : public ObjCTurboModule {
+    public:
+      NativeSampleTurboModuleOptionalSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+
+@protocol NativeStringTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
+
+- (NSString *)getString:(NSString *)arg;
+- (NSString *)getStringWithAlias:(NSString *)arg;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeStringTurboModule'
+     */
+    class JSI_EXPORT NativeStringTurboModuleSpecJSI : public ObjCTurboModule {
+    public:
+      NativeStringTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+
+
+
+
+
+inline bool JS::NativeObjectTurboModule::SpecDifficultObjectAE::D() const
+{
+  id const p = _v[@\\"D\\"];
+  return RCTBridgingToBool(p);
+}
+inline double JS::NativeObjectTurboModule::SpecDifficultObjectAE::E() const
+{
+  id const p = _v[@\\"E\\"];
+  return RCTBridgingToDouble(p);
+}
+inline NSString *JS::NativeObjectTurboModule::SpecDifficultObjectAE::F() const
+{
+  id const p = _v[@\\"F\\"];
+  return RCTBridgingToString(p);
+}
+inline bool JS::NativeObjectTurboModule::SpecDifficultObjectA::D() const
+{
+  id const p = _v[@\\"D\\"];
+  return RCTBridgingToBool(p);
+}
+inline JS::NativeObjectTurboModule::SpecDifficultObjectAE JS::NativeObjectTurboModule::SpecDifficultObjectA::E() const
+{
+  id const p = _v[@\\"E\\"];
+  return JS::NativeObjectTurboModule::SpecDifficultObjectAE(p);
+}
+inline NSString *JS::NativeObjectTurboModule::SpecDifficultObjectA::F() const
+{
+  id const p = _v[@\\"F\\"];
+  return RCTBridgingToString(p);
+}
+inline JS::NativeObjectTurboModule::ConstantsEEE::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto D = i.D.get();
+  d[@\\"D\\"] = @(D);
+  auto E = i.E.get();
+  d[@\\"E\\"] = @(E);
+  auto F = i.F.get();
+  d[@\\"F\\"] = F;
+  return d;
+}) {}
+inline JS::NativeObjectTurboModule::ConstantsEEE::Builder::Builder(ConstantsEEE i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+inline JS::NativeObjectTurboModule::ConstantsEE::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto D = i.D.get();
+  d[@\\"D\\"] = @(D);
+  auto E = i.E.get();
+  d[@\\"E\\"] = E.buildUnsafeRawValue();
+  auto F = i.F.get();
+  d[@\\"F\\"] = F;
+  return d;
+}) {}
+inline JS::NativeObjectTurboModule::ConstantsEE::Builder::Builder(ConstantsEE i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+inline JS::NativeObjectTurboModule::ConstantsE::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto D = i.D.get();
+  d[@\\"D\\"] = @(D);
+  auto E = i.E.get();
+  d[@\\"E\\"] = E.buildUnsafeRawValue();
+  auto F = i.F.get();
+  d[@\\"F\\"] = F;
+  return d;
+}) {}
+inline JS::NativeObjectTurboModule::ConstantsE::Builder::Builder(ConstantsE i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+inline JS::NativeObjectTurboModule::Constants::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto D = i.D.get();
+  d[@\\"D\\"] = @(D);
+  auto E = i.E.get();
+  d[@\\"E\\"] = E.buildUnsafeRawValue();
+  auto F = i.F.get();
+  d[@\\"F\\"] = F;
+  return d;
+}) {}
+inline JS::NativeObjectTurboModule::Constants::Builder::Builder(Constants i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+inline JS::NativeOptionalObjectTurboModule::ConstantsEEE::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto D = i.D;
+  d[@\\"D\\"] = D.hasValue() ? @((BOOL)D.value()) : nil;
+  auto E = i.E;
+  d[@\\"E\\"] = E.hasValue() ? @((double)E.value()) : nil;
+  auto F = i.F;
+  d[@\\"F\\"] = F;
+  return d;
+}) {}
+inline JS::NativeOptionalObjectTurboModule::ConstantsEEE::Builder::Builder(ConstantsEEE i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+inline JS::NativeOptionalObjectTurboModule::ConstantsEE::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto D = i.D;
+  d[@\\"D\\"] = D.hasValue() ? @((BOOL)D.value()) : nil;
+  auto E = i.E;
+  d[@\\"E\\"] = E.hasValue() ? E.value().buildUnsafeRawValue() : nil;
+  auto F = i.F;
+  d[@\\"F\\"] = F;
+  return d;
+}) {}
+inline JS::NativeOptionalObjectTurboModule::ConstantsEE::Builder::Builder(ConstantsEE i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+inline JS::NativeOptionalObjectTurboModule::ConstantsE::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto D = i.D;
+  d[@\\"D\\"] = D.hasValue() ? @((BOOL)D.value()) : nil;
+  auto E = i.E;
+  d[@\\"E\\"] = E.hasValue() ? E.value().buildUnsafeRawValue() : nil;
+  auto F = i.F;
+  d[@\\"F\\"] = F;
+  return d;
+}) {}
+inline JS::NativeOptionalObjectTurboModule::ConstantsE::Builder::Builder(ConstantsE i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+inline JS::NativeOptionalObjectTurboModule::Constants::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto D = i.D;
+  d[@\\"D\\"] = D.hasValue() ? @((BOOL)D.value()) : nil;
+  auto A = i.A;
+  d[@\\"A\\"] = A;
+  auto E = i.E;
+  d[@\\"E\\"] = E.hasValue() ? E.value().buildUnsafeRawValue() : nil;
+  auto F = i.F;
+  d[@\\"F\\"] = F;
+  return d;
+}) {}
+inline JS::NativeOptionalObjectTurboModule::Constants::Builder::Builder(Constants i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+
+inline double JS::NativeSampleTurboModule::SpecGetObjectShapeArg::prop() const
+{
+  id const p = _v[@\\"prop\\"];
+  return RCTBridgingToDouble(p);
+}
+inline NSString *JS::NativeSampleTurboModule::Animal::name() const
+{
+  id const p = _v[@\\"name\\"];
+  return RCTBridgingToString(p);
+}
+inline JS::NativeSampleTurboModule::Constants::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto const1 = i.const1.get();
+  d[@\\"const1\\"] = @(const1);
+  auto const2 = i.const2.get();
+  d[@\\"const2\\"] = @(const2);
+  auto const3 = i.const3.get();
+  d[@\\"const3\\"] = const3;
+  return d;
+}) {}
+inline JS::NativeSampleTurboModule::Constants::Builder::Builder(Constants i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+inline JS::NativeSampleTurboModuleArrays::ConstantsIdElement::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto prop = i.prop.get();
+  d[@\\"prop\\"] = @(prop);
+  return d;
+}) {}
+inline JS::NativeSampleTurboModuleArrays::ConstantsIdElement::Builder::Builder(ConstantsIdElement i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+inline JS::NativeSampleTurboModuleArrays::Constants::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto const1 = i.const1.get();
+  d[@\\"const1\\"] = RCTConvertVecToArray(const1, ^id(bool el_) { return @(el_); });
+  auto const2 = i.const2.get();
+  d[@\\"const2\\"] = RCTConvertVecToArray(const2, ^id(double el_) { return @(el_); });
+  auto const3 = i.const3.get();
+  d[@\\"const3\\"] = RCTConvertVecToArray(const3, ^id(NSString * el_) { return el_; });
+  auto id_ = i.id_;
+  d[@\\"id\\"] = RCTConvertOptionalVecToArray(id_, ^id(folly::Optional<JS::NativeSampleTurboModuleArrays::ConstantsIdElement::Builder> el_) { return el_.hasValue() ? el_.value().buildUnsafeRawValue() : nil; });
+  return d;
+}) {}
+inline JS::NativeSampleTurboModuleArrays::Constants::Builder::Builder(Constants i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+inline folly::Optional<double> JS::NativeSampleTurboModuleNullable::SpecGetObjectShapeArg::prop() const
+{
+  id const p = _v[@\\"prop\\"];
+  return RCTBridgingToOptionalDouble(p);
+}
+inline NSString *JS::NativeSampleTurboModuleNullable::Animal::name() const
+{
+  id const p = _v[@\\"name\\"];
+  return RCTBridgingToOptionalString(p);
+}
+inline JS::NativeSampleTurboModuleNullable::Constants::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto const1 = i.const1.get();
+  d[@\\"const1\\"] = const1.hasValue() ? @((BOOL)const1.value()) : nil;
+  auto const2 = i.const2.get();
+  d[@\\"const2\\"] = const2.hasValue() ? @((double)const2.value()) : nil;
+  auto const3 = i.const3.get();
+  d[@\\"const3\\"] = const3;
+  return d;
+}) {}
+inline JS::NativeSampleTurboModuleNullable::Constants::Builder::Builder(Constants i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+inline folly::Optional<double> JS::NativeSampleTurboModuleNullableAndOptional::SpecGetObjectShapeArg::prop() const
+{
+  id const p = _v[@\\"prop\\"];
+  return RCTBridgingToOptionalDouble(p);
+}
+inline NSString *JS::NativeSampleTurboModuleNullableAndOptional::Animal::name() const
+{
+  id const p = _v[@\\"name\\"];
+  return RCTBridgingToOptionalString(p);
+}
+inline JS::NativeSampleTurboModuleNullableAndOptional::Constants::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto const1 = i.const1;
+  d[@\\"const1\\"] = const1.hasValue() ? @((BOOL)const1.value()) : nil;
+  auto const2 = i.const2;
+  d[@\\"const2\\"] = const2.hasValue() ? @((double)const2.value()) : nil;
+  auto const3 = i.const3;
+  d[@\\"const3\\"] = const3;
+  return d;
+}) {}
+inline JS::NativeSampleTurboModuleNullableAndOptional::Constants::Builder::Builder(Constants i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+inline folly::Optional<double> JS::NativeSampleTurboModuleOptional::SpecGetObjectShapeArg::prop() const
+{
+  id const p = _v[@\\"prop\\"];
+  return RCTBridgingToOptionalDouble(p);
+}
+inline NSString *JS::NativeSampleTurboModuleOptional::Animal::name() const
+{
+  id const p = _v[@\\"name\\"];
+  return RCTBridgingToOptionalString(p);
+}
+inline JS::NativeSampleTurboModuleOptional::Constants::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto const1 = i.const1;
+  d[@\\"const1\\"] = const1.hasValue() ? @((BOOL)const1.value()) : nil;
+  auto const2 = i.const2;
+  d[@\\"const2\\"] = const2.hasValue() ? @((double)const2.value()) : nil;
+  auto const3 = i.const3;
+  d[@\\"const3\\"] = const3;
+  return d;
+}) {}
+inline JS::NativeSampleTurboModuleOptional::Constants::Builder::Builder(Constants i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+
+"
+`;
+
+exports[`GenerateModuleObjCpp can generate a header file NativeModule specs with assume nonnull enabled 1`] = `
+"/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleObjCpp
+ *
+ * We create an umbrella header (and corresponding implementation) here since
+ * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
+ * must have a single output. More files => more genrule()s => slower builds.
+ */
+
+#ifndef __cplusplus
+#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
+#endif
+#import <Foundation/Foundation.h>
+#import <RCTRequired/RCTRequired.h>
+#import <RCTTypeSafety/RCTConvertHelpers.h>
+#import <RCTTypeSafety/RCTTypedModuleConstants.h>
+#import <React/RCTBridgeModule.h>
+#import <React/RCTCxxConvert.h>
+#import <React/RCTManagedPointer.h>
+#import <ReactCommon/RCTTurboModule.h>
+#import <folly/Optional.h>
+#import <vector>
+
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol NativeArrayTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
+
+- (NSArray<NSString *> *)getArray:(NSArray *)a;
+- (NSArray<NSString *> *)getReadOnlyArray:(NSArray *)a;
+- (NSArray<NSString *> *)getArrayWithAlias:(NSArray *)a
+                                         b:(NSArray *)b;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeArrayTurboModule'
+     */
+    class JSI_EXPORT NativeArrayTurboModuleSpecJSI : public ObjCTurboModule {
+    public:
+      NativeArrayTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+
+@protocol NativeBooleanTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
+
+- (NSNumber *)getBoolean:(BOOL)arg;
+- (NSNumber *)getBooleanWithAlias:(BOOL)arg;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeBooleanTurboModule'
+     */
+    class JSI_EXPORT NativeBooleanTurboModuleSpecJSI : public ObjCTurboModule {
+    public:
+      NativeBooleanTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+
+@protocol NativeCallbackTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
+
+- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
+- (void)getValueWithCallbackWithAlias:(RCTResponseSenderBlock)c;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeCallbackTurboModule'
+     */
+    class JSI_EXPORT NativeCallbackTurboModuleSpecJSI : public ObjCTurboModule {
+    public:
+      NativeCallbackTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+
+@protocol NativeNullableTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
+
+- (NSNumber * _Nullable)getBool:(NSNumber *)a;
+- (NSNumber * _Nullable)getNumber:(NSNumber *)a;
+- (NSString * _Nullable)getString:(NSNumber *)a;
+- (NSArray<id<NSObject>> * _Nullable)getArray:(NSArray * _Nullable)a;
+- (NSDictionary * _Nullable)getObject:(NSDictionary * _Nullable)a;
+- (void)getValueWithPromise:(RCTPromiseResolveBlock)resolve
+                     reject:(RCTPromiseRejectBlock)reject;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeNullableTurboModule'
+     */
+    class JSI_EXPORT NativeNullableTurboModuleSpecJSI : public ObjCTurboModule {
+    public:
+      NativeNullableTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+
+@protocol NativeNumberTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
+
+- (NSNumber *)getNumber:(double)arg;
+- (NSNumber *)getNumberWithAlias:(double)arg;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeNumberTurboModule'
+     */
+    class JSI_EXPORT NativeNumberTurboModuleSpecJSI : public ObjCTurboModule {
+    public:
+      NativeNumberTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+namespace JS {
+  namespace NativeObjectTurboModule {
+    struct SpecDifficultObjectAE {
+      bool D() const;
+      double E() const;
+      NSString *F() const;
+
+      SpecDifficultObjectAE(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeObjectTurboModule_SpecDifficultObjectAE)
++ (RCTManagedPointer *)JS_NativeObjectTurboModule_SpecDifficultObjectAE:(id)json;
+@end
+namespace JS {
+  namespace NativeObjectTurboModule {
+    struct SpecDifficultObjectA {
+      bool D() const;
+      JS::NativeObjectTurboModule::SpecDifficultObjectAE E() const;
+      NSString *F() const;
+
+      SpecDifficultObjectA(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeObjectTurboModule_SpecDifficultObjectA)
++ (RCTManagedPointer *)JS_NativeObjectTurboModule_SpecDifficultObjectA:(id)json;
+@end
+namespace JS {
+  namespace NativeObjectTurboModule {
+    struct ConstantsEEE {
+
+      struct Builder {
+        struct Input {
+          RCTRequired<bool> D;
+          RCTRequired<double> E;
+          RCTRequired<NSString *> F;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing ConstantsEEE */
+        Builder(ConstantsEEE i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static ConstantsEEE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      ConstantsEEE(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+namespace JS {
+  namespace NativeObjectTurboModule {
+    struct ConstantsEE {
+
+      struct Builder {
+        struct Input {
+          RCTRequired<bool> D;
+          RCTRequired<JS::NativeObjectTurboModule::ConstantsEEE::Builder> E;
+          RCTRequired<NSString *> F;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing ConstantsEE */
+        Builder(ConstantsEE i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static ConstantsEE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      ConstantsEE(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+namespace JS {
+  namespace NativeObjectTurboModule {
+    struct ConstantsE {
+
+      struct Builder {
+        struct Input {
+          RCTRequired<bool> D;
+          RCTRequired<JS::NativeObjectTurboModule::ConstantsEE::Builder> E;
+          RCTRequired<NSString *> F;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing ConstantsE */
+        Builder(ConstantsE i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static ConstantsE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      ConstantsE(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+namespace JS {
+  namespace NativeObjectTurboModule {
+    struct Constants {
+
+      struct Builder {
+        struct Input {
+          RCTRequired<bool> D;
+          RCTRequired<JS::NativeObjectTurboModule::ConstantsE::Builder> E;
+          RCTRequired<NSString *> F;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing Constants */
+        Builder(Constants i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      Constants(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+@protocol NativeObjectTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
+
+- (NSDictionary *)getGenericObject:(NSDictionary *)arg;
+- (NSDictionary *)getGenericObjectReadOnly:(NSDictionary *)arg;
+- (NSDictionary *)getGenericObjectWithAlias:(NSDictionary *)arg;
+- (NSDictionary *)difficultObject:(JS::NativeObjectTurboModule::SpecDifficultObjectA &)A;
+- (facebook::react::ModuleConstants<JS::NativeObjectTurboModule::Constants::Builder>)constantsToExport;
+- (facebook::react::ModuleConstants<JS::NativeObjectTurboModule::Constants::Builder>)getConstants;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeObjectTurboModule'
+     */
+    class JSI_EXPORT NativeObjectTurboModuleSpecJSI : public ObjCTurboModule {
+    public:
+      NativeObjectTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+namespace JS {
+  namespace NativeOptionalObjectTurboModule {
+    struct ConstantsEEE {
+
+      struct Builder {
+        struct Input {
+          folly::Optional<bool> D;
+          folly::Optional<double> E;
+          NSString *F;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing ConstantsEEE */
+        Builder(ConstantsEEE i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static ConstantsEEE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      ConstantsEEE(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+namespace JS {
+  namespace NativeOptionalObjectTurboModule {
+    struct ConstantsEE {
+
+      struct Builder {
+        struct Input {
+          folly::Optional<bool> D;
+          folly::Optional<JS::NativeOptionalObjectTurboModule::ConstantsEEE::Builder> E;
+          NSString *F;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing ConstantsEE */
+        Builder(ConstantsEE i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static ConstantsEE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      ConstantsEE(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+namespace JS {
+  namespace NativeOptionalObjectTurboModule {
+    struct ConstantsE {
+
+      struct Builder {
+        struct Input {
+          folly::Optional<bool> D;
+          folly::Optional<JS::NativeOptionalObjectTurboModule::ConstantsEE::Builder> E;
+          NSString *F;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing ConstantsE */
+        Builder(ConstantsE i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static ConstantsE fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      ConstantsE(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+namespace JS {
+  namespace NativeOptionalObjectTurboModule {
+    struct Constants {
+
+      struct Builder {
+        struct Input {
+          folly::Optional<bool> D;
+          id<NSObject> _Nullable  A;
+          folly::Optional<JS::NativeOptionalObjectTurboModule::ConstantsE::Builder> E;
+          NSString *F;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing Constants */
+        Builder(Constants i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      Constants(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+@protocol NativeOptionalObjectTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
+
+- (facebook::react::ModuleConstants<JS::NativeOptionalObjectTurboModule::Constants::Builder>)constantsToExport;
+- (facebook::react::ModuleConstants<JS::NativeOptionalObjectTurboModule::Constants::Builder>)getConstants;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeOptionalObjectTurboModule'
+     */
+    class JSI_EXPORT NativeOptionalObjectTurboModuleSpecJSI : public ObjCTurboModule {
+    public:
+      NativeOptionalObjectTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+
+@protocol NativePromiseTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
+
+- (void)getValueWithPromise:(BOOL)error
+                    resolve:(RCTPromiseResolveBlock)resolve
+                     reject:(RCTPromiseRejectBlock)reject;
+- (void)getValueWithPromiseWithAlias:(NSString *)arg
+                             resolve:(RCTPromiseResolveBlock)resolve
+                              reject:(RCTPromiseRejectBlock)reject;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativePromiseTurboModule'
+     */
+    class JSI_EXPORT NativePromiseTurboModuleSpecJSI : public ObjCTurboModule {
+    public:
+      NativePromiseTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+namespace JS {
+  namespace NativeSampleTurboModule {
+    struct SpecGetObjectShapeArg {
+      double prop() const;
+
+      SpecGetObjectShapeArg(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeSampleTurboModule_SpecGetObjectShapeArg)
++ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecGetObjectShapeArg:(id)json;
+@end
+namespace JS {
+  namespace NativeSampleTurboModule {
+    struct Animal {
+      NSString *name() const;
+
+      Animal(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeSampleTurboModule_Animal)
++ (RCTManagedPointer *)JS_NativeSampleTurboModule_Animal:(id)json;
+@end
+namespace JS {
+  namespace NativeSampleTurboModule {
+    struct Constants {
+
+      struct Builder {
+        struct Input {
+          RCTRequired<bool> const1;
+          RCTRequired<double> const2;
+          RCTRequired<NSString *> const3;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing Constants */
+        Builder(Constants i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      Constants(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
+
+- (void)voidFunc;
+- (NSNumber *)getBool:(BOOL)arg;
+- (NSNumber *)getNumber:(double)arg;
+- (NSString *)getString:(NSString *)arg;
+- (NSArray<id<NSObject>> *)getArray:(NSArray *)arg;
+- (NSDictionary *)getObject:(NSDictionary *)arg;
+- (NSDictionary *)getObjectShape:(JS::NativeSampleTurboModule::SpecGetObjectShapeArg &)arg;
+- (NSDictionary *)getAlias:(JS::NativeSampleTurboModule::Animal &)arg;
+- (NSNumber *)getRootTag:(double)arg;
+- (NSDictionary *)getValue:(double)x
+getValuegetValuegetValuegetValuegetValuey:(NSString *)getValuegetValuegetValuegetValuegetValuey
+                         z:(NSDictionary *)z;
+- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
+- (void)getValueWithPromise:(BOOL)error
+                    resolve:(RCTPromiseResolveBlock)resolve
+                     reject:(RCTPromiseRejectBlock)reject;
+- (facebook::react::ModuleConstants<JS::NativeSampleTurboModule::Constants::Builder>)constantsToExport;
+- (facebook::react::ModuleConstants<JS::NativeSampleTurboModule::Constants::Builder>)getConstants;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeSampleTurboModule'
+     */
+    class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
+    public:
+      NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+namespace JS {
+  namespace NativeSampleTurboModuleArrays {
+    struct ConstantsIdElement {
+
+      struct Builder {
+        struct Input {
+          RCTRequired<double> prop;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing ConstantsIdElement */
+        Builder(ConstantsIdElement i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static ConstantsIdElement fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      ConstantsIdElement(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+namespace JS {
+  namespace NativeSampleTurboModuleArrays {
+    struct Constants {
+
+      struct Builder {
+        struct Input {
+          RCTRequired<std::vector<bool>> const1;
+          RCTRequired<std::vector<double>> const2;
+          RCTRequired<std::vector<NSString *>> const3;
+          folly::Optional<std::vector<folly::Optional<JS::NativeSampleTurboModuleArrays::ConstantsIdElement::Builder>>> id_;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing Constants */
+        Builder(Constants i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      Constants(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+@protocol NativeSampleTurboModuleArraysSpec <RCTBridgeModule, RCTTurboModule>
+
+- (void)voidFunc;
+- (NSArray<NSNumber *> *)getBool:(NSArray *)id;
+- (NSArray<NSNumber *> *)getNumber:(NSArray *)arg;
+- (NSArray<NSString *> *)getString:(NSArray *)arg;
+- (NSArray<NSArray<id<NSObject>> *> *)getArray:(NSArray *)arg;
+- (NSArray<NSDictionary *> *)getObject:(NSArray *)arg;
+- (NSArray<NSDictionary *> *)getObjectShape:(NSArray *)arg;
+- (NSArray<NSDictionary *> *)getAlias:(NSArray *)arg;
+- (NSArray<NSNumber *> *)getRootTag:(NSArray *)arg;
+- (NSArray<NSDictionary *> *)getValue:(NSArray *)x
+                                    y:(NSArray *)y
+                                    z:(NSArray *)z;
+- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
+- (void)getValueWithPromise:(NSArray *)error
+                    resolve:(RCTPromiseResolveBlock)resolve
+                     reject:(RCTPromiseRejectBlock)reject;
+- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleArrays::Constants::Builder>)constantsToExport;
+- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleArrays::Constants::Builder>)getConstants;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeSampleTurboModuleArrays'
+     */
+    class JSI_EXPORT NativeSampleTurboModuleArraysSpecJSI : public ObjCTurboModule {
+    public:
+      NativeSampleTurboModuleArraysSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+namespace JS {
+  namespace NativeSampleTurboModuleNullable {
+    struct SpecGetObjectShapeArg {
+      folly::Optional<double> prop() const;
+
+      SpecGetObjectShapeArg(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeSampleTurboModuleNullable_SpecGetObjectShapeArg)
++ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullable_SpecGetObjectShapeArg:(id)json;
+@end
+namespace JS {
+  namespace NativeSampleTurboModuleNullable {
+    struct Animal {
+      NSString *name() const;
+
+      Animal(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeSampleTurboModuleNullable_Animal)
++ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullable_Animal:(id)json;
+@end
+namespace JS {
+  namespace NativeSampleTurboModuleNullable {
+    struct Constants {
+
+      struct Builder {
+        struct Input {
+          RCTRequired<folly::Optional<bool>> const1;
+          RCTRequired<folly::Optional<double>> const2;
+          RCTRequired<NSString *> const3;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing Constants */
+        Builder(Constants i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      Constants(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+@protocol NativeSampleTurboModuleNullableSpec <RCTBridgeModule, RCTTurboModule>
+
+- (void)voidFunc;
+- (NSNumber * _Nullable)getBool:(NSNumber *)arg;
+- (NSNumber * _Nullable)getNumber:(NSNumber *)arg;
+- (NSString * _Nullable)getString:(NSString * _Nullable)arg;
+- (NSArray<id<NSObject>> * _Nullable)getArray:(NSArray * _Nullable)arg;
+- (NSDictionary * _Nullable)getObject:(NSDictionary * _Nullable)arg;
+- (NSDictionary * _Nullable)getObjectShape:(JS::NativeSampleTurboModuleNullable::SpecGetObjectShapeArg &)arg;
+- (NSDictionary * _Nullable)getAlias:(JS::NativeSampleTurboModuleNullable::Animal &)arg;
+- (NSNumber * _Nullable)getRootTag:(NSNumber *)arg;
+- (NSDictionary * _Nullable)getValue:(NSNumber *)x
+                                   y:(NSString * _Nullable)y
+                                   z:(NSDictionary * _Nullable)z;
+- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
+- (void)getValueWithPromise:(NSNumber *)error
+                    resolve:(RCTPromiseResolveBlock)resolve
+                     reject:(RCTPromiseRejectBlock)reject;
+- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleNullable::Constants::Builder>)constantsToExport;
+- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleNullable::Constants::Builder>)getConstants;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeSampleTurboModuleNullable'
+     */
+    class JSI_EXPORT NativeSampleTurboModuleNullableSpecJSI : public ObjCTurboModule {
+    public:
+      NativeSampleTurboModuleNullableSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+namespace JS {
+  namespace NativeSampleTurboModuleNullableAndOptional {
+    struct SpecGetObjectShapeArg {
+      folly::Optional<double> prop() const;
+
+      SpecGetObjectShapeArg(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeSampleTurboModuleNullableAndOptional_SpecGetObjectShapeArg)
++ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullableAndOptional_SpecGetObjectShapeArg:(id)json;
+@end
+namespace JS {
+  namespace NativeSampleTurboModuleNullableAndOptional {
+    struct Animal {
+      NSString *name() const;
+
+      Animal(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeSampleTurboModuleNullableAndOptional_Animal)
++ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullableAndOptional_Animal:(id)json;
+@end
+namespace JS {
+  namespace NativeSampleTurboModuleNullableAndOptional {
+    struct Constants {
+
+      struct Builder {
+        struct Input {
+          folly::Optional<bool> const1;
+          folly::Optional<double> const2;
+          NSString *const3;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing Constants */
+        Builder(Constants i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      Constants(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+@protocol NativeSampleTurboModuleNullableAndOptionalSpec <RCTBridgeModule, RCTTurboModule>
+
+- (void)voidFunc;
+- (NSNumber * _Nullable)getBool:(NSNumber *)arg;
+- (NSNumber * _Nullable)getNumber:(NSNumber *)arg;
+- (NSString * _Nullable)getString:(NSString * _Nullable)arg;
+- (NSArray<id<NSObject>> * _Nullable)getArray:(NSArray * _Nullable)arg;
+- (NSDictionary * _Nullable)getObject:(NSDictionary * _Nullable)arg;
+- (NSDictionary *)getObjectShape:(JS::NativeSampleTurboModuleNullableAndOptional::SpecGetObjectShapeArg &)arg;
+- (NSDictionary * _Nullable)getAlias:(JS::NativeSampleTurboModuleNullableAndOptional::Animal &)arg;
+- (NSNumber * _Nullable)getRootTag:(NSNumber *)arg;
+- (NSDictionary * _Nullable)getValue:(NSNumber *)x
+                                   y:(NSString * _Nullable)y
+                                   z:(NSDictionary * _Nullable)z;
+- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
+- (void)getValueWithPromise:(NSNumber *)error
+                    resolve:(RCTPromiseResolveBlock)resolve
+                     reject:(RCTPromiseRejectBlock)reject;
+- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleNullableAndOptional::Constants::Builder>)constantsToExport;
+- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleNullableAndOptional::Constants::Builder>)getConstants;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeSampleTurboModuleNullableAndOptional'
+     */
+    class JSI_EXPORT NativeSampleTurboModuleNullableAndOptionalSpecJSI : public ObjCTurboModule {
+    public:
+      NativeSampleTurboModuleNullableAndOptionalSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+namespace JS {
+  namespace NativeSampleTurboModuleOptional {
+    struct SpecGetObjectShapeArg {
+      folly::Optional<double> prop() const;
+
+      SpecGetObjectShapeArg(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeSampleTurboModuleOptional_SpecGetObjectShapeArg)
++ (RCTManagedPointer *)JS_NativeSampleTurboModuleOptional_SpecGetObjectShapeArg:(id)json;
+@end
+namespace JS {
+  namespace NativeSampleTurboModuleOptional {
+    struct Animal {
+      NSString *name() const;
+
+      Animal(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeSampleTurboModuleOptional_Animal)
++ (RCTManagedPointer *)JS_NativeSampleTurboModuleOptional_Animal:(id)json;
+@end
+namespace JS {
+  namespace NativeSampleTurboModuleOptional {
+    struct Constants {
+
+      struct Builder {
+        struct Input {
+          folly::Optional<bool> const1;
+          folly::Optional<double> const2;
+          NSString *const3;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing Constants */
+        Builder(Constants i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      Constants(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+@protocol NativeSampleTurboModuleOptionalSpec <RCTBridgeModule, RCTTurboModule>
+
+- (void)voidFunc;
+- (NSNumber *)getBool:(NSNumber *)arg;
+- (NSNumber *)getNumber:(NSNumber *)arg;
+- (NSString *)getString:(NSString *)arg;
+- (NSArray<id<NSObject>> *)getArray:(NSArray *)arg;
+- (NSDictionary *)getObject:(NSDictionary *)arg;
+- (NSDictionary *)getObjectShape:(JS::NativeSampleTurboModuleOptional::SpecGetObjectShapeArg &)arg;
+- (NSDictionary *)getAlias:(JS::NativeSampleTurboModuleOptional::Animal &)arg;
+- (NSNumber *)getRootTag:(NSNumber *)arg;
+- (NSDictionary *)getValue:(NSNumber *)x
+                         y:(NSString *)y
+                         z:(NSDictionary *)z;
+- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
+- (void)getValueWithPromise:(NSNumber *)error
+                    resolve:(RCTPromiseResolveBlock)resolve
+                     reject:(RCTPromiseRejectBlock)reject;
+- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleOptional::Constants::Builder>)constantsToExport;
+- (facebook::react::ModuleConstants<JS::NativeSampleTurboModuleOptional::Constants::Builder>)getConstants;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeSampleTurboModuleOptional'
+     */
+    class JSI_EXPORT NativeSampleTurboModuleOptionalSpecJSI : public ObjCTurboModule {
+    public:
+      NativeSampleTurboModuleOptionalSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+
+@protocol NativeStringTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
+
+- (NSString *)getString:(NSString *)arg;
+- (NSString *)getStringWithAlias:(NSString *)arg;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeStringTurboModule'
+     */
+    class JSI_EXPORT NativeStringTurboModuleSpecJSI : public ObjCTurboModule {
+    public:
+      NativeStringTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+
+
+
+
+
+inline bool JS::NativeObjectTurboModule::SpecDifficultObjectAE::D() const
+{
+  id const p = _v[@\\"D\\"];
+  return RCTBridgingToBool(p);
+}
+inline double JS::NativeObjectTurboModule::SpecDifficultObjectAE::E() const
+{
+  id const p = _v[@\\"E\\"];
+  return RCTBridgingToDouble(p);
+}
+inline NSString *JS::NativeObjectTurboModule::SpecDifficultObjectAE::F() const
+{
+  id const p = _v[@\\"F\\"];
+  return RCTBridgingToString(p);
+}
+inline bool JS::NativeObjectTurboModule::SpecDifficultObjectA::D() const
+{
+  id const p = _v[@\\"D\\"];
+  return RCTBridgingToBool(p);
+}
+inline JS::NativeObjectTurboModule::SpecDifficultObjectAE JS::NativeObjectTurboModule::SpecDifficultObjectA::E() const
+{
+  id const p = _v[@\\"E\\"];
+  return JS::NativeObjectTurboModule::SpecDifficultObjectAE(p);
+}
+inline NSString *JS::NativeObjectTurboModule::SpecDifficultObjectA::F() const
+{
+  id const p = _v[@\\"F\\"];
+  return RCTBridgingToString(p);
+}
+inline JS::NativeObjectTurboModule::ConstantsEEE::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto D = i.D.get();
+  d[@\\"D\\"] = @(D);
+  auto E = i.E.get();
+  d[@\\"E\\"] = @(E);
+  auto F = i.F.get();
+  d[@\\"F\\"] = F;
+  return d;
+}) {}
+inline JS::NativeObjectTurboModule::ConstantsEEE::Builder::Builder(ConstantsEEE i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+inline JS::NativeObjectTurboModule::ConstantsEE::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto D = i.D.get();
+  d[@\\"D\\"] = @(D);
+  auto E = i.E.get();
+  d[@\\"E\\"] = E.buildUnsafeRawValue();
+  auto F = i.F.get();
+  d[@\\"F\\"] = F;
+  return d;
+}) {}
+inline JS::NativeObjectTurboModule::ConstantsEE::Builder::Builder(ConstantsEE i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+inline JS::NativeObjectTurboModule::ConstantsE::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto D = i.D.get();
+  d[@\\"D\\"] = @(D);
+  auto E = i.E.get();
+  d[@\\"E\\"] = E.buildUnsafeRawValue();
+  auto F = i.F.get();
+  d[@\\"F\\"] = F;
+  return d;
+}) {}
+inline JS::NativeObjectTurboModule::ConstantsE::Builder::Builder(ConstantsE i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+inline JS::NativeObjectTurboModule::Constants::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto D = i.D.get();
+  d[@\\"D\\"] = @(D);
+  auto E = i.E.get();
+  d[@\\"E\\"] = E.buildUnsafeRawValue();
+  auto F = i.F.get();
+  d[@\\"F\\"] = F;
+  return d;
+}) {}
+inline JS::NativeObjectTurboModule::Constants::Builder::Builder(Constants i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+inline JS::NativeOptionalObjectTurboModule::ConstantsEEE::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto D = i.D;
+  d[@\\"D\\"] = D.hasValue() ? @((BOOL)D.value()) : nil;
+  auto E = i.E;
+  d[@\\"E\\"] = E.hasValue() ? @((double)E.value()) : nil;
+  auto F = i.F;
+  d[@\\"F\\"] = F;
+  return d;
+}) {}
+inline JS::NativeOptionalObjectTurboModule::ConstantsEEE::Builder::Builder(ConstantsEEE i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+inline JS::NativeOptionalObjectTurboModule::ConstantsEE::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto D = i.D;
+  d[@\\"D\\"] = D.hasValue() ? @((BOOL)D.value()) : nil;
+  auto E = i.E;
+  d[@\\"E\\"] = E.hasValue() ? E.value().buildUnsafeRawValue() : nil;
+  auto F = i.F;
+  d[@\\"F\\"] = F;
+  return d;
+}) {}
+inline JS::NativeOptionalObjectTurboModule::ConstantsEE::Builder::Builder(ConstantsEE i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+inline JS::NativeOptionalObjectTurboModule::ConstantsE::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto D = i.D;
+  d[@\\"D\\"] = D.hasValue() ? @((BOOL)D.value()) : nil;
+  auto E = i.E;
+  d[@\\"E\\"] = E.hasValue() ? E.value().buildUnsafeRawValue() : nil;
+  auto F = i.F;
+  d[@\\"F\\"] = F;
+  return d;
+}) {}
+inline JS::NativeOptionalObjectTurboModule::ConstantsE::Builder::Builder(ConstantsE i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+inline JS::NativeOptionalObjectTurboModule::Constants::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto D = i.D;
+  d[@\\"D\\"] = D.hasValue() ? @((BOOL)D.value()) : nil;
+  auto A = i.A;
+  d[@\\"A\\"] = A;
+  auto E = i.E;
+  d[@\\"E\\"] = E.hasValue() ? E.value().buildUnsafeRawValue() : nil;
+  auto F = i.F;
+  d[@\\"F\\"] = F;
+  return d;
+}) {}
+inline JS::NativeOptionalObjectTurboModule::Constants::Builder::Builder(Constants i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+
+inline double JS::NativeSampleTurboModule::SpecGetObjectShapeArg::prop() const
+{
+  id const p = _v[@\\"prop\\"];
+  return RCTBridgingToDouble(p);
+}
+inline NSString *JS::NativeSampleTurboModule::Animal::name() const
+{
+  id const p = _v[@\\"name\\"];
+  return RCTBridgingToString(p);
+}
+inline JS::NativeSampleTurboModule::Constants::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto const1 = i.const1.get();
+  d[@\\"const1\\"] = @(const1);
+  auto const2 = i.const2.get();
+  d[@\\"const2\\"] = @(const2);
+  auto const3 = i.const3.get();
+  d[@\\"const3\\"] = const3;
+  return d;
+}) {}
+inline JS::NativeSampleTurboModule::Constants::Builder::Builder(Constants i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+inline JS::NativeSampleTurboModuleArrays::ConstantsIdElement::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto prop = i.prop.get();
+  d[@\\"prop\\"] = @(prop);
+  return d;
+}) {}
+inline JS::NativeSampleTurboModuleArrays::ConstantsIdElement::Builder::Builder(ConstantsIdElement i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+inline JS::NativeSampleTurboModuleArrays::Constants::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto const1 = i.const1.get();
+  d[@\\"const1\\"] = RCTConvertVecToArray(const1, ^id(bool el_) { return @(el_); });
+  auto const2 = i.const2.get();
+  d[@\\"const2\\"] = RCTConvertVecToArray(const2, ^id(double el_) { return @(el_); });
+  auto const3 = i.const3.get();
+  d[@\\"const3\\"] = RCTConvertVecToArray(const3, ^id(NSString * el_) { return el_; });
+  auto id_ = i.id_;
+  d[@\\"id\\"] = RCTConvertOptionalVecToArray(id_, ^id(folly::Optional<JS::NativeSampleTurboModuleArrays::ConstantsIdElement::Builder> el_) { return el_.hasValue() ? el_.value().buildUnsafeRawValue() : nil; });
+  return d;
+}) {}
+inline JS::NativeSampleTurboModuleArrays::Constants::Builder::Builder(Constants i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+inline folly::Optional<double> JS::NativeSampleTurboModuleNullable::SpecGetObjectShapeArg::prop() const
+{
+  id const p = _v[@\\"prop\\"];
+  return RCTBridgingToOptionalDouble(p);
+}
+inline NSString *JS::NativeSampleTurboModuleNullable::Animal::name() const
+{
+  id const p = _v[@\\"name\\"];
+  return RCTBridgingToOptionalString(p);
+}
+inline JS::NativeSampleTurboModuleNullable::Constants::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto const1 = i.const1.get();
+  d[@\\"const1\\"] = const1.hasValue() ? @((BOOL)const1.value()) : nil;
+  auto const2 = i.const2.get();
+  d[@\\"const2\\"] = const2.hasValue() ? @((double)const2.value()) : nil;
+  auto const3 = i.const3.get();
+  d[@\\"const3\\"] = const3;
+  return d;
+}) {}
+inline JS::NativeSampleTurboModuleNullable::Constants::Builder::Builder(Constants i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+inline folly::Optional<double> JS::NativeSampleTurboModuleNullableAndOptional::SpecGetObjectShapeArg::prop() const
+{
+  id const p = _v[@\\"prop\\"];
+  return RCTBridgingToOptionalDouble(p);
+}
+inline NSString *JS::NativeSampleTurboModuleNullableAndOptional::Animal::name() const
+{
+  id const p = _v[@\\"name\\"];
+  return RCTBridgingToOptionalString(p);
+}
+inline JS::NativeSampleTurboModuleNullableAndOptional::Constants::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto const1 = i.const1;
+  d[@\\"const1\\"] = const1.hasValue() ? @((BOOL)const1.value()) : nil;
+  auto const2 = i.const2;
+  d[@\\"const2\\"] = const2.hasValue() ? @((double)const2.value()) : nil;
+  auto const3 = i.const3;
+  d[@\\"const3\\"] = const3;
+  return d;
+}) {}
+inline JS::NativeSampleTurboModuleNullableAndOptional::Constants::Builder::Builder(Constants i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+inline folly::Optional<double> JS::NativeSampleTurboModuleOptional::SpecGetObjectShapeArg::prop() const
+{
+  id const p = _v[@\\"prop\\"];
+  return RCTBridgingToOptionalDouble(p);
+}
+inline NSString *JS::NativeSampleTurboModuleOptional::Animal::name() const
+{
+  id const p = _v[@\\"name\\"];
+  return RCTBridgingToOptionalString(p);
+}
+inline JS::NativeSampleTurboModuleOptional::Constants::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto const1 = i.const1;
+  d[@\\"const1\\"] = const1.hasValue() ? @((BOOL)const1.value()) : nil;
+  auto const2 = i.const2;
+  d[@\\"const2\\"] = const2.hasValue() ? @((double)const2.value()) : nil;
+  auto const3 = i.const3;
+  d[@\\"const3\\"] = const3;
+  return d;
+}) {}
+inline JS::NativeSampleTurboModuleOptional::Constants::Builder::Builder(Constants i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+
+NS_ASSUME_NONNULL_END
+"
+`;
+
+exports[`GenerateModuleObjCpp can generate an implementation file NativeModule specs 1`] = `
+"/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleObjCpp
+ *
+ * We create an umbrella header (and corresponding implementation) here since
+ * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
+ * must have a single output. More files => more genrule()s => slower builds.
+ */
+
+#import \\"RNCodegenModuleFixtures.h\\"
+
+
+namespace facebook {
+  namespace react {
+    
+    static facebook::jsi::Value __hostFunction_NativeArrayTurboModuleSpecJSI_getArray(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getArray\\", @selector(getArray:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeArrayTurboModuleSpecJSI_getReadOnlyArray(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getReadOnlyArray\\", @selector(getReadOnlyArray:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeArrayTurboModuleSpecJSI_getArrayWithAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getArrayWithAlias\\", @selector(getArrayWithAlias:b:), args, count);
+    }
+
+    NativeArrayTurboModuleSpecJSI::NativeArrayTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
+      : ObjCTurboModule(params) {
+        
+        methodMap_[\\"getArray\\"] = MethodMetadata {1, __hostFunction_NativeArrayTurboModuleSpecJSI_getArray};
+        
+        
+        methodMap_[\\"getReadOnlyArray\\"] = MethodMetadata {1, __hostFunction_NativeArrayTurboModuleSpecJSI_getReadOnlyArray};
+        
+        
+        methodMap_[\\"getArrayWithAlias\\"] = MethodMetadata {2, __hostFunction_NativeArrayTurboModuleSpecJSI_getArrayWithAlias};
+        
+    }
+  } // namespace react
+} // namespace facebook
+
+namespace facebook {
+  namespace react {
+    
+    static facebook::jsi::Value __hostFunction_NativeBooleanTurboModuleSpecJSI_getBoolean(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, \\"getBoolean\\", @selector(getBoolean:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeBooleanTurboModuleSpecJSI_getBooleanWithAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, \\"getBooleanWithAlias\\", @selector(getBooleanWithAlias:), args, count);
+    }
+
+    NativeBooleanTurboModuleSpecJSI::NativeBooleanTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
+      : ObjCTurboModule(params) {
+        
+        methodMap_[\\"getBoolean\\"] = MethodMetadata {1, __hostFunction_NativeBooleanTurboModuleSpecJSI_getBoolean};
+        
+        
+        methodMap_[\\"getBooleanWithAlias\\"] = MethodMetadata {1, __hostFunction_NativeBooleanTurboModuleSpecJSI_getBooleanWithAlias};
+        
+    }
+  } // namespace react
+} // namespace facebook
+
+namespace facebook {
+  namespace react {
+    
+    static facebook::jsi::Value __hostFunction_NativeCallbackTurboModuleSpecJSI_getValueWithCallback(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"getValueWithCallback\\", @selector(getValueWithCallback:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeCallbackTurboModuleSpecJSI_getValueWithCallbackWithAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"getValueWithCallbackWithAlias\\", @selector(getValueWithCallbackWithAlias:), args, count);
+    }
+
+    NativeCallbackTurboModuleSpecJSI::NativeCallbackTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
+      : ObjCTurboModule(params) {
+        
+        methodMap_[\\"getValueWithCallback\\"] = MethodMetadata {1, __hostFunction_NativeCallbackTurboModuleSpecJSI_getValueWithCallback};
+        
+        
+        methodMap_[\\"getValueWithCallbackWithAlias\\"] = MethodMetadata {1, __hostFunction_NativeCallbackTurboModuleSpecJSI_getValueWithCallbackWithAlias};
+        
+    }
+  } // namespace react
+} // namespace facebook
+
+namespace facebook {
+  namespace react {
+    
+    static facebook::jsi::Value __hostFunction_NativeNullableTurboModuleSpecJSI_getBool(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, \\"getBool\\", @selector(getBool:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeNullableTurboModuleSpecJSI_getNumber(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getNumber\\", @selector(getNumber:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeNullableTurboModuleSpecJSI_getString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, \\"getString\\", @selector(getString:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeNullableTurboModuleSpecJSI_getArray(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getArray\\", @selector(getArray:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeNullableTurboModuleSpecJSI_getObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObject\\", @selector(getObject:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeNullableTurboModuleSpecJSI_getValueWithPromise(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"getValueWithPromise\\", @selector(getValueWithPromise:reject:), args, count);
+    }
+
+    NativeNullableTurboModuleSpecJSI::NativeNullableTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
+      : ObjCTurboModule(params) {
+        
+        methodMap_[\\"getBool\\"] = MethodMetadata {1, __hostFunction_NativeNullableTurboModuleSpecJSI_getBool};
+        
+        
+        methodMap_[\\"getNumber\\"] = MethodMetadata {1, __hostFunction_NativeNullableTurboModuleSpecJSI_getNumber};
+        
+        
+        methodMap_[\\"getString\\"] = MethodMetadata {1, __hostFunction_NativeNullableTurboModuleSpecJSI_getString};
+        
+        
+        methodMap_[\\"getArray\\"] = MethodMetadata {1, __hostFunction_NativeNullableTurboModuleSpecJSI_getArray};
+        
+        
+        methodMap_[\\"getObject\\"] = MethodMetadata {1, __hostFunction_NativeNullableTurboModuleSpecJSI_getObject};
+        
+        
+        methodMap_[\\"getValueWithPromise\\"] = MethodMetadata {0, __hostFunction_NativeNullableTurboModuleSpecJSI_getValueWithPromise};
+        
+    }
+  } // namespace react
+} // namespace facebook
+
+namespace facebook {
+  namespace react {
+    
+    static facebook::jsi::Value __hostFunction_NativeNumberTurboModuleSpecJSI_getNumber(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getNumber\\", @selector(getNumber:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeNumberTurboModuleSpecJSI_getNumberWithAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getNumberWithAlias\\", @selector(getNumberWithAlias:), args, count);
+    }
+
+    NativeNumberTurboModuleSpecJSI::NativeNumberTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
+      : ObjCTurboModule(params) {
+        
+        methodMap_[\\"getNumber\\"] = MethodMetadata {1, __hostFunction_NativeNumberTurboModuleSpecJSI_getNumber};
+        
+        
+        methodMap_[\\"getNumberWithAlias\\"] = MethodMetadata {1, __hostFunction_NativeNumberTurboModuleSpecJSI_getNumberWithAlias};
+        
+    }
+  } // namespace react
+} // namespace facebook
+@implementation RCTCxxConvert (NativeObjectTurboModule_SpecDifficultObjectAE)
++ (RCTManagedPointer *)JS_NativeObjectTurboModule_SpecDifficultObjectAE:(id)json
+{
+  return facebook::react::managedPointer<JS::NativeObjectTurboModule::SpecDifficultObjectAE>(json);
+}
+@end
+@implementation RCTCxxConvert (NativeObjectTurboModule_SpecDifficultObjectA)
++ (RCTManagedPointer *)JS_NativeObjectTurboModule_SpecDifficultObjectA:(id)json
+{
+  return facebook::react::managedPointer<JS::NativeObjectTurboModule::SpecDifficultObjectA>(json);
+}
+@end
+namespace facebook {
+  namespace react {
+    
+    static facebook::jsi::Value __hostFunction_NativeObjectTurboModuleSpecJSI_getGenericObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getGenericObject\\", @selector(getGenericObject:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeObjectTurboModuleSpecJSI_getGenericObjectReadOnly(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getGenericObjectReadOnly\\", @selector(getGenericObjectReadOnly:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeObjectTurboModuleSpecJSI_getGenericObjectWithAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getGenericObjectWithAlias\\", @selector(getGenericObjectWithAlias:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeObjectTurboModuleSpecJSI_difficultObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"difficultObject\\", @selector(difficultObject:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeObjectTurboModuleSpecJSI_getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", @selector(getConstants), args, count);
+    }
+
+    NativeObjectTurboModuleSpecJSI::NativeObjectTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
+      : ObjCTurboModule(params) {
+        
+        methodMap_[\\"getGenericObject\\"] = MethodMetadata {1, __hostFunction_NativeObjectTurboModuleSpecJSI_getGenericObject};
+        
+        
+        methodMap_[\\"getGenericObjectReadOnly\\"] = MethodMetadata {1, __hostFunction_NativeObjectTurboModuleSpecJSI_getGenericObjectReadOnly};
+        
+        
+        methodMap_[\\"getGenericObjectWithAlias\\"] = MethodMetadata {1, __hostFunction_NativeObjectTurboModuleSpecJSI_getGenericObjectWithAlias};
+        
+        
+        methodMap_[\\"difficultObject\\"] = MethodMetadata {1, __hostFunction_NativeObjectTurboModuleSpecJSI_difficultObject};
+        setMethodArgConversionSelector(@\\"difficultObject\\", 0, @\\"JS_NativeObjectTurboModule_SpecDifficultObjectA:\\");
+        
+        methodMap_[\\"getConstants\\"] = MethodMetadata {0, __hostFunction_NativeObjectTurboModuleSpecJSI_getConstants};
+        
+    }
+  } // namespace react
+} // namespace facebook
+
+namespace facebook {
+  namespace react {
+    
+    static facebook::jsi::Value __hostFunction_NativeOptionalObjectTurboModuleSpecJSI_getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", @selector(getConstants), args, count);
+    }
+
+    NativeOptionalObjectTurboModuleSpecJSI::NativeOptionalObjectTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
+      : ObjCTurboModule(params) {
+        
+        methodMap_[\\"getConstants\\"] = MethodMetadata {0, __hostFunction_NativeOptionalObjectTurboModuleSpecJSI_getConstants};
+        
+    }
+  } // namespace react
+} // namespace facebook
+
+namespace facebook {
+  namespace react {
+    
+    static facebook::jsi::Value __hostFunction_NativePromiseTurboModuleSpecJSI_getValueWithPromise(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"getValueWithPromise\\", @selector(getValueWithPromise:resolve:reject:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativePromiseTurboModuleSpecJSI_getValueWithPromiseWithAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"getValueWithPromiseWithAlias\\", @selector(getValueWithPromiseWithAlias:resolve:reject:), args, count);
+    }
+
+    NativePromiseTurboModuleSpecJSI::NativePromiseTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
+      : ObjCTurboModule(params) {
+        
+        methodMap_[\\"getValueWithPromise\\"] = MethodMetadata {1, __hostFunction_NativePromiseTurboModuleSpecJSI_getValueWithPromise};
+        
+        
+        methodMap_[\\"getValueWithPromiseWithAlias\\"] = MethodMetadata {1, __hostFunction_NativePromiseTurboModuleSpecJSI_getValueWithPromiseWithAlias};
+        
+    }
+  } // namespace react
+} // namespace facebook
+@implementation RCTCxxConvert (NativeSampleTurboModule_SpecGetObjectShapeArg)
++ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecGetObjectShapeArg:(id)json
+{
+  return facebook::react::managedPointer<JS::NativeSampleTurboModule::SpecGetObjectShapeArg>(json);
+}
+@end
+@implementation RCTCxxConvert (NativeSampleTurboModule_Animal)
++ (RCTManagedPointer *)JS_NativeSampleTurboModule_Animal:(id)json
+{
+  return facebook::react::managedPointer<JS::NativeSampleTurboModule::Animal>(json);
+}
+@end
+namespace facebook {
+  namespace react {
+    
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_voidFunc(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"voidFunc\\", @selector(voidFunc), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getBool(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, \\"getBool\\", @selector(getBool:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getNumber(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getNumber\\", @selector(getNumber:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, \\"getString\\", @selector(getString:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getArray(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getArray\\", @selector(getArray:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObject\\", @selector(getObject:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getObjectShape(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObjectShape\\", @selector(getObjectShape:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getAlias\\", @selector(getAlias:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getRootTag(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getRootTag\\", @selector(getRootTag:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getValue(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getValue\\", @selector(getValue:getValuegetValuegetValuegetValuegetValuey:z:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getValueWithCallback(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"getValueWithCallback\\", @selector(getValueWithCallback:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getValueWithPromise(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"getValueWithPromise\\", @selector(getValueWithPromise:resolve:reject:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", @selector(getConstants), args, count);
+    }
+
+    NativeSampleTurboModuleSpecJSI::NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
+      : ObjCTurboModule(params) {
+        
+        methodMap_[\\"voidFunc\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleSpecJSI_voidFunc};
+        
+        
+        methodMap_[\\"getBool\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getBool};
+        
+        
+        methodMap_[\\"getNumber\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getNumber};
+        
+        
+        methodMap_[\\"getString\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getString};
+        
+        
+        methodMap_[\\"getArray\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getArray};
+        
+        
+        methodMap_[\\"getObject\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getObject};
+        
+        
+        methodMap_[\\"getObjectShape\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getObjectShape};
+        setMethodArgConversionSelector(@\\"getObjectShape\\", 0, @\\"JS_NativeSampleTurboModule_SpecGetObjectShapeArg:\\");
+        
+        methodMap_[\\"getAlias\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getAlias};
+        setMethodArgConversionSelector(@\\"getAlias\\", 0, @\\"JS_NativeSampleTurboModule_Animal:\\");
+        
+        methodMap_[\\"getRootTag\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getRootTag};
+        
+        
+        methodMap_[\\"getValue\\"] = MethodMetadata {3, __hostFunction_NativeSampleTurboModuleSpecJSI_getValue};
+        
+        
+        methodMap_[\\"getValueWithCallback\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getValueWithCallback};
+        
+        
+        methodMap_[\\"getValueWithPromise\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getValueWithPromise};
+        
+        
+        methodMap_[\\"getConstants\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleSpecJSI_getConstants};
+        
+    }
+  } // namespace react
+} // namespace facebook
+
+namespace facebook {
+  namespace react {
+    
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI_voidFunc(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"voidFunc\\", @selector(voidFunc), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getBool(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getBool\\", @selector(getBool:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getNumber(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getNumber\\", @selector(getNumber:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getString\\", @selector(getString:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getArray(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getArray\\", @selector(getArray:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getObject\\", @selector(getObject:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getObjectShape(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getObjectShape\\", @selector(getObjectShape:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getAlias\\", @selector(getAlias:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getRootTag(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getRootTag\\", @selector(getRootTag:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getValue(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getValue\\", @selector(getValue:y:z:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getValueWithCallback(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"getValueWithCallback\\", @selector(getValueWithCallback:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getValueWithPromise(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"getValueWithPromise\\", @selector(getValueWithPromise:resolve:reject:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", @selector(getConstants), args, count);
+    }
+
+    NativeSampleTurboModuleArraysSpecJSI::NativeSampleTurboModuleArraysSpecJSI(const ObjCTurboModule::InitParams &params)
+      : ObjCTurboModule(params) {
+        
+        methodMap_[\\"voidFunc\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_voidFunc};
+        
+        
+        methodMap_[\\"getBool\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getBool};
+        
+        
+        methodMap_[\\"getNumber\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getNumber};
+        
+        
+        methodMap_[\\"getString\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getString};
+        
+        
+        methodMap_[\\"getArray\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getArray};
+        
+        
+        methodMap_[\\"getObject\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getObject};
+        
+        
+        methodMap_[\\"getObjectShape\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getObjectShape};
+        
+        
+        methodMap_[\\"getAlias\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getAlias};
+        
+        
+        methodMap_[\\"getRootTag\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getRootTag};
+        
+        
+        methodMap_[\\"getValue\\"] = MethodMetadata {3, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getValue};
+        
+        
+        methodMap_[\\"getValueWithCallback\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getValueWithCallback};
+        
+        
+        methodMap_[\\"getValueWithPromise\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getValueWithPromise};
+        
+        
+        methodMap_[\\"getConstants\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleArraysSpecJSI_getConstants};
+        
+    }
+  } // namespace react
+} // namespace facebook
+@implementation RCTCxxConvert (NativeSampleTurboModuleNullable_SpecGetObjectShapeArg)
++ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullable_SpecGetObjectShapeArg:(id)json
+{
+  return facebook::react::managedPointer<JS::NativeSampleTurboModuleNullable::SpecGetObjectShapeArg>(json);
+}
+@end
+@implementation RCTCxxConvert (NativeSampleTurboModuleNullable_Animal)
++ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullable_Animal:(id)json
+{
+  return facebook::react::managedPointer<JS::NativeSampleTurboModuleNullable::Animal>(json);
+}
+@end
+namespace facebook {
+  namespace react {
+    
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI_voidFunc(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"voidFunc\\", @selector(voidFunc), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getBool(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, \\"getBool\\", @selector(getBool:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getNumber(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getNumber\\", @selector(getNumber:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, \\"getString\\", @selector(getString:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getArray(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getArray\\", @selector(getArray:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObject\\", @selector(getObject:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getObjectShape(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObjectShape\\", @selector(getObjectShape:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getAlias\\", @selector(getAlias:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getRootTag(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getRootTag\\", @selector(getRootTag:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getValue(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getValue\\", @selector(getValue:y:z:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getValueWithCallback(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"getValueWithCallback\\", @selector(getValueWithCallback:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getValueWithPromise(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"getValueWithPromise\\", @selector(getValueWithPromise:resolve:reject:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", @selector(getConstants), args, count);
+    }
+
+    NativeSampleTurboModuleNullableSpecJSI::NativeSampleTurboModuleNullableSpecJSI(const ObjCTurboModule::InitParams &params)
+      : ObjCTurboModule(params) {
+        
+        methodMap_[\\"voidFunc\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_voidFunc};
+        
+        
+        methodMap_[\\"getBool\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getBool};
+        
+        
+        methodMap_[\\"getNumber\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getNumber};
+        
+        
+        methodMap_[\\"getString\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getString};
+        
+        
+        methodMap_[\\"getArray\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getArray};
+        
+        
+        methodMap_[\\"getObject\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getObject};
+        
+        
+        methodMap_[\\"getObjectShape\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getObjectShape};
+        setMethodArgConversionSelector(@\\"getObjectShape\\", 0, @\\"JS_NativeSampleTurboModuleNullable_SpecGetObjectShapeArg:\\");
+        
+        methodMap_[\\"getAlias\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getAlias};
+        setMethodArgConversionSelector(@\\"getAlias\\", 0, @\\"JS_NativeSampleTurboModuleNullable_Animal:\\");
+        
+        methodMap_[\\"getRootTag\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getRootTag};
+        
+        
+        methodMap_[\\"getValue\\"] = MethodMetadata {3, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getValue};
+        
+        
+        methodMap_[\\"getValueWithCallback\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getValueWithCallback};
+        
+        
+        methodMap_[\\"getValueWithPromise\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getValueWithPromise};
+        
+        
+        methodMap_[\\"getConstants\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleNullableSpecJSI_getConstants};
+        
+    }
+  } // namespace react
+} // namespace facebook
+@implementation RCTCxxConvert (NativeSampleTurboModuleNullableAndOptional_SpecGetObjectShapeArg)
++ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullableAndOptional_SpecGetObjectShapeArg:(id)json
+{
+  return facebook::react::managedPointer<JS::NativeSampleTurboModuleNullableAndOptional::SpecGetObjectShapeArg>(json);
+}
+@end
+@implementation RCTCxxConvert (NativeSampleTurboModuleNullableAndOptional_Animal)
++ (RCTManagedPointer *)JS_NativeSampleTurboModuleNullableAndOptional_Animal:(id)json
+{
+  return facebook::react::managedPointer<JS::NativeSampleTurboModuleNullableAndOptional::Animal>(json);
+}
+@end
+namespace facebook {
+  namespace react {
+    
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_voidFunc(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"voidFunc\\", @selector(voidFunc), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getBool(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, \\"getBool\\", @selector(getBool:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getNumber(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getNumber\\", @selector(getNumber:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, \\"getString\\", @selector(getString:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getArray(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getArray\\", @selector(getArray:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObject\\", @selector(getObject:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getObjectShape(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObjectShape\\", @selector(getObjectShape:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getAlias\\", @selector(getAlias:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getRootTag(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getRootTag\\", @selector(getRootTag:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getValue(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getValue\\", @selector(getValue:y:z:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getValueWithCallback(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"getValueWithCallback\\", @selector(getValueWithCallback:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getValueWithPromise(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"getValueWithPromise\\", @selector(getValueWithPromise:resolve:reject:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", @selector(getConstants), args, count);
+    }
+
+    NativeSampleTurboModuleNullableAndOptionalSpecJSI::NativeSampleTurboModuleNullableAndOptionalSpecJSI(const ObjCTurboModule::InitParams &params)
+      : ObjCTurboModule(params) {
+        
+        methodMap_[\\"voidFunc\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_voidFunc};
+        
+        
+        methodMap_[\\"getBool\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getBool};
+        
+        
+        methodMap_[\\"getNumber\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getNumber};
+        
+        
+        methodMap_[\\"getString\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getString};
+        
+        
+        methodMap_[\\"getArray\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getArray};
+        
+        
+        methodMap_[\\"getObject\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getObject};
+        
+        
+        methodMap_[\\"getObjectShape\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getObjectShape};
+        setMethodArgConversionSelector(@\\"getObjectShape\\", 0, @\\"JS_NativeSampleTurboModuleNullableAndOptional_SpecGetObjectShapeArg:\\");
+        
+        methodMap_[\\"getAlias\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getAlias};
+        setMethodArgConversionSelector(@\\"getAlias\\", 0, @\\"JS_NativeSampleTurboModuleNullableAndOptional_Animal:\\");
+        
+        methodMap_[\\"getRootTag\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getRootTag};
+        
+        
+        methodMap_[\\"getValue\\"] = MethodMetadata {3, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getValue};
+        
+        
+        methodMap_[\\"getValueWithCallback\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getValueWithCallback};
+        
+        
+        methodMap_[\\"getValueWithPromise\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getValueWithPromise};
+        
+        
+        methodMap_[\\"getConstants\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleNullableAndOptionalSpecJSI_getConstants};
+        
+    }
+  } // namespace react
+} // namespace facebook
+@implementation RCTCxxConvert (NativeSampleTurboModuleOptional_SpecGetObjectShapeArg)
++ (RCTManagedPointer *)JS_NativeSampleTurboModuleOptional_SpecGetObjectShapeArg:(id)json
+{
+  return facebook::react::managedPointer<JS::NativeSampleTurboModuleOptional::SpecGetObjectShapeArg>(json);
+}
+@end
+@implementation RCTCxxConvert (NativeSampleTurboModuleOptional_Animal)
++ (RCTManagedPointer *)JS_NativeSampleTurboModuleOptional_Animal:(id)json
+{
+  return facebook::react::managedPointer<JS::NativeSampleTurboModuleOptional::Animal>(json);
+}
+@end
+namespace facebook {
+  namespace react {
+    
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_voidFunc(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"voidFunc\\", @selector(voidFunc), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getBool(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, \\"getBool\\", @selector(getBool:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getNumber(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getNumber\\", @selector(getNumber:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, \\"getString\\", @selector(getString:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getArray(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getArray\\", @selector(getArray:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObject\\", @selector(getObject:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getObjectShape(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObjectShape\\", @selector(getObjectShape:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getAlias\\", @selector(getAlias:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getRootTag(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getRootTag\\", @selector(getRootTag:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getValue(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getValue\\", @selector(getValue:y:z:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getValueWithCallback(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"getValueWithCallback\\", @selector(getValueWithCallback:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getValueWithPromise(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"getValueWithPromise\\", @selector(getValueWithPromise:resolve:reject:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", @selector(getConstants), args, count);
+    }
+
+    NativeSampleTurboModuleOptionalSpecJSI::NativeSampleTurboModuleOptionalSpecJSI(const ObjCTurboModule::InitParams &params)
+      : ObjCTurboModule(params) {
+        
+        methodMap_[\\"voidFunc\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_voidFunc};
+        
+        
+        methodMap_[\\"getBool\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getBool};
+        
+        
+        methodMap_[\\"getNumber\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getNumber};
+        
+        
+        methodMap_[\\"getString\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getString};
+        
+        
+        methodMap_[\\"getArray\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getArray};
+        
+        
+        methodMap_[\\"getObject\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getObject};
+        
+        
+        methodMap_[\\"getObjectShape\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getObjectShape};
+        setMethodArgConversionSelector(@\\"getObjectShape\\", 0, @\\"JS_NativeSampleTurboModuleOptional_SpecGetObjectShapeArg:\\");
+        
+        methodMap_[\\"getAlias\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getAlias};
+        setMethodArgConversionSelector(@\\"getAlias\\", 0, @\\"JS_NativeSampleTurboModuleOptional_Animal:\\");
+        
+        methodMap_[\\"getRootTag\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getRootTag};
+        
+        
+        methodMap_[\\"getValue\\"] = MethodMetadata {3, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getValue};
+        
+        
+        methodMap_[\\"getValueWithCallback\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getValueWithCallback};
+        
+        
+        methodMap_[\\"getValueWithPromise\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getValueWithPromise};
+        
+        
+        methodMap_[\\"getConstants\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleOptionalSpecJSI_getConstants};
+        
+    }
+  } // namespace react
+} // namespace facebook
+
+namespace facebook {
+  namespace react {
+    
+    static facebook::jsi::Value __hostFunction_NativeStringTurboModuleSpecJSI_getString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, \\"getString\\", @selector(getString:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeStringTurboModuleSpecJSI_getStringWithAlias(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, \\"getStringWithAlias\\", @selector(getStringWithAlias:), args, count);
+    }
+
+    NativeStringTurboModuleSpecJSI::NativeStringTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
+      : ObjCTurboModule(params) {
+        
+        methodMap_[\\"getString\\"] = MethodMetadata {1, __hostFunction_NativeStringTurboModuleSpecJSI_getString};
+        
+        
+        methodMap_[\\"getStringWithAlias\\"] = MethodMetadata {1, __hostFunction_NativeStringTurboModuleSpecJSI_getStringWithAlias};
+        
+    }
+  } // namespace react
+} // namespace facebook
+"
+`;
diff --git a/node_modules/react-native/packages/react-native-codegen/scripts/buck-oss/combine_js_to_schema.sh b/node_modules/react-native/packages/react-native-codegen/scripts/buck-oss/combine_js_to_schema.sh
new file mode 100755
index 0000000..85bfb85
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/scripts/buck-oss/combine_js_to_schema.sh
@@ -0,0 +1,15 @@
+#!/bin/bash
+# Copyright (c) Facebook, Inc. and its affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+# Note: To be invoked by Buck sh_binary() in OSS environment.
+# DO NOT USE outside of Buck!
+
+set -e
+set -u
+
+pushd "$BUCK_DEFAULT_RUNTIME_RESOURCES" >/dev/null
+node "build/lib/cli/combine/combine-js-to-schema-cli.js" "$@"
+popd >/dev/null
diff --git a/node_modules/react-native/packages/react-native-codegen/scripts/buck-oss/generate-all.sh b/node_modules/react-native/packages/react-native-codegen/scripts/buck-oss/generate-all.sh
new file mode 100755
index 0000000..a60d6f4
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/scripts/buck-oss/generate-all.sh
@@ -0,0 +1,15 @@
+#!/bin/bash
+# Copyright (c) Facebook, Inc. and its affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+# Note: To be invoked by Buck sh_binary() in OSS environment.
+# DO NOT USE outside of Buck!
+
+set -e
+set -u
+
+pushd "$BUCK_DEFAULT_RUNTIME_RESOURCES" >/dev/null
+node "build/lib/cli/generators/generate-all.js" "$@"
+popd >/dev/null
diff --git a/node_modules/react-native/packages/react-native-codegen/scripts/build.js b/node_modules/react-native/packages/react-native-codegen/scripts/build.js
new file mode 100644
index 0000000..9eefd4f
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/scripts/build.js
@@ -0,0 +1,117 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ */
+
+/**
+ * script to build (transpile) files.
+ *
+ * Based off of the build script from Metro, and tweaked to run in just one
+ * package instead of in a monorepo. Just run `build.js` and the JS files in
+ * `src/` will be built in `lib/`, and the original source files will be copied
+ * over as `Example.js.flow`, so consumers of this module can still make use of
+ * type checking.
+ *
+ * Call this script with the `--verbose` flag to show the full output of this
+ * script.
+ */
+
+'use strict';
+
+const babel = require('@babel/core');
+const chalk = require('chalk');
+const fs = require('fs');
+const glob = require('glob');
+const micromatch = require('micromatch');
+const mkdirp = require('mkdirp');
+const path = require('path');
+const prettier = require('prettier');
+const prettierConfig = JSON.parse(
+  fs.readFileSync(path.resolve(__dirname, '..', '.prettierrc'), 'utf8'),
+);
+
+const SRC_DIR = 'src';
+const BUILD_DIR = 'lib';
+const JS_FILES_PATTERN = '**/*.js';
+const IGNORE_PATTERN = '**/__tests__/**';
+const PACKAGE_DIR = path.resolve(__dirname, '../');
+
+const fixedWidth = str => {
+  const WIDTH = 80;
+  const strs = str.match(new RegExp(`(.{1,${WIDTH}})`, 'g')) || [str];
+  let lastString = strs[strs.length - 1];
+  if (lastString.length < WIDTH) {
+    lastString += Array(WIDTH - lastString.length).join(chalk.dim('.'));
+  }
+  return strs
+    .slice(0, -1)
+    .concat(lastString)
+    .join('\n');
+};
+
+function getBuildPath(file, buildFolder) {
+  const pkgSrcPath = path.resolve(PACKAGE_DIR, SRC_DIR);
+  const pkgBuildPath = path.resolve(PACKAGE_DIR, BUILD_DIR);
+  const relativeToSrcPath = path.relative(pkgSrcPath, file);
+  return path.resolve(pkgBuildPath, relativeToSrcPath);
+}
+
+function buildFile(file, silent) {
+  const destPath = getBuildPath(file, BUILD_DIR);
+
+  mkdirp.sync(path.dirname(destPath));
+  if (micromatch.isMatch(file, IGNORE_PATTERN)) {
+    silent ||
+      process.stdout.write(
+        chalk.dim('  \u2022 ') +
+          path.relative(PACKAGE_DIR, file) +
+          ' (ignore)\n',
+      );
+  } else if (!micromatch.isMatch(file, JS_FILES_PATTERN)) {
+    fs.createReadStream(file).pipe(fs.createWriteStream(destPath));
+    silent ||
+      process.stdout.write(
+        chalk.red('  \u2022 ') +
+          path.relative(PACKAGE_DIR, file) +
+          chalk.red(' \u21D2 ') +
+          path.relative(PACKAGE_DIR, destPath) +
+          ' (copy)' +
+          '\n',
+      );
+  } else {
+    const transformed = prettier.format(
+      babel.transformFileSync(file, {}).code,
+      {
+        ...prettierConfig,
+        parser: 'babel',
+      },
+    );
+    fs.writeFileSync(destPath, transformed);
+    const source = fs.readFileSync(file).toString('utf-8');
+    if (/\@flow/.test(source)) {
+      fs.createReadStream(file).pipe(fs.createWriteStream(destPath + '.flow'));
+    }
+    silent ||
+      process.stdout.write(
+        chalk.green('  \u2022 ') +
+          path.relative(PACKAGE_DIR, file) +
+          chalk.green(' \u21D2 ') +
+          path.relative(PACKAGE_DIR, destPath) +
+          '\n',
+      );
+  }
+}
+
+const srcDir = path.resolve(__dirname, '..', SRC_DIR);
+const pattern = path.resolve(srcDir, '**/*');
+const files = glob.sync(pattern, {nodir: true});
+
+process.stdout.write(fixedWidth(`${path.basename(PACKAGE_DIR)}\n`));
+
+files.forEach(file => buildFile(file, !process.argv.includes('--verbose')));
+
+process.stdout.write(`[  ${chalk.green('OK')}  ]\n`);
diff --git a/node_modules/react-native/packages/react-native-codegen/scripts/oss/build.sh b/node_modules/react-native/packages/react-native-codegen/scripts/oss/build.sh
new file mode 100755
index 0000000..b5913f9
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/scripts/oss/build.sh
@@ -0,0 +1,61 @@
+#!/bin/bash
+# Copyright (c) Facebook, Inc. and its affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+# This script assumes yarn is already installed.
+
+THIS_DIR=$(cd -P "$(dirname "$(readlink "${BASH_SOURCE[0]}" || echo "${BASH_SOURCE[0]}")")" && pwd)
+
+set -e
+set -u
+
+CODEGEN_DIR="$THIS_DIR/../.."
+
+rm -rf "${CODEGEN_DIR:?}/lib" "${CODEGEN_DIR:?}/node_modules"
+
+# Fallback to npm if yarn is not available
+if [ -x "$(command -v yarn)" ]; then
+  YARN_OR_NPM=$(command -v yarn)
+else
+  YARN_OR_NPM=$(command -v npm)
+fi
+YARN_BINARY="${YARN_BINARY:-$YARN_OR_NPM}"
+
+if [[ ${FBSOURCE_ENV:-0} -eq 1 ]]; then
+  # Custom FB-specific setup
+  pushd "$CODEGEN_DIR" >/dev/null
+
+  "$YARN_BINARY" install 2> >(grep -v '^warning' 1>&2)
+  # Note: Within FBSOURCE_ENV, this has to explicitly run build.
+  "$YARN_BINARY" run build
+
+  popd >/dev/null
+
+else
+  # Run yarn install in a separate tmp dir to avoid conflict with the rest of the repo.
+  # Note: OSS-only.
+  TMP_DIR=$(mktemp -d)
+
+  # On Windows this script gets run by a seprate Git Bash instance, which cannot perform the copy
+  # due to file locks created by the host process. Need to exclude .lock files while copying.
+  # Using in-memory tar operation because piping `find` and `grep` doesn't preserve folder structure
+  # during recursive copying, and `rsync` is not installed by default in Git Bash.
+  # As an added benefit, blob copy is faster.
+  if [ "$OSTYPE" = "msys" ] || [ "$OSTYPE" = "cygwin" ]; then
+    tar cf - --exclude='*.lock' "$CODEGEN_DIR" | (cd "$TMP_DIR" && tar xvf - );
+  else
+    cp -R "$CODEGEN_DIR/." "$TMP_DIR";
+  fi
+
+  pushd "$TMP_DIR" >/dev/null
+
+  # Note: this automatically runs build as well.
+  "$YARN_BINARY" install 2> >(grep -v '^warning' 1>&2)
+
+  popd >/dev/null
+
+  mv "$TMP_DIR/lib" "$TMP_DIR/node_modules" "$CODEGEN_DIR"
+  rm -rf "$TMP_DIR"
+fi
diff --git a/node_modules/react-native/packages/react-native-codegen/src/CodegenSchema.js b/node_modules/react-native/packages/react-native-codegen/src/CodegenSchema.js
new file mode 100644
index 0000000..241017d
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/CodegenSchema.js
@@ -0,0 +1,327 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+export type PlatformType = 'iOS' | 'android';
+
+export type SchemaType = $ReadOnly<{
+  modules: $ReadOnly<{
+    [hasteModuleName: string]: ComponentSchema | NativeModuleSchema,
+  }>,
+}>;
+
+/**
+ * Component Type Annotations
+ */
+export type DoubleTypeAnnotation = $ReadOnly<{
+  type: 'DoubleTypeAnnotation',
+}>;
+
+export type FloatTypeAnnotation = $ReadOnly<{
+  type: 'FloatTypeAnnotation',
+}>;
+
+export type BooleanTypeAnnotation = $ReadOnly<{
+  type: 'BooleanTypeAnnotation',
+}>;
+
+export type Int32TypeAnnotation = $ReadOnly<{
+  type: 'Int32TypeAnnotation',
+}>;
+
+export type StringTypeAnnotation = $ReadOnly<{
+  type: 'StringTypeAnnotation',
+}>;
+
+export type StringEnumTypeAnnotation = $ReadOnly<{
+  type: 'StringEnumTypeAnnotation',
+  options: $ReadOnlyArray<string>,
+}>;
+
+export type VoidTypeAnnotation = $ReadOnly<{
+  type: 'VoidTypeAnnotation',
+}>;
+
+export type ObjectTypeAnnotation<+T> = $ReadOnly<{
+  type: 'ObjectTypeAnnotation',
+  properties: $ReadOnlyArray<NamedShape<T>>,
+}>;
+
+type FunctionTypeAnnotation<+P, +R> = $ReadOnly<{
+  type: 'FunctionTypeAnnotation',
+  params: $ReadOnlyArray<NamedShape<P>>,
+  returnTypeAnnotation: R,
+}>;
+
+export type NamedShape<+T> = $ReadOnly<{
+  name: string,
+  optional: boolean,
+  typeAnnotation: T,
+}>;
+
+export type ComponentSchema = $ReadOnly<{
+  type: 'Component',
+  components: $ReadOnly<{
+    [componentName: string]: ComponentShape,
+  }>,
+}>;
+
+export type ComponentShape = $ReadOnly<{
+  ...OptionsShape,
+  extendsProps: $ReadOnlyArray<ExtendsPropsShape>,
+  events: $ReadOnlyArray<EventTypeShape>,
+  props: $ReadOnlyArray<NamedShape<PropTypeAnnotation>>,
+  commands: $ReadOnlyArray<NamedShape<CommandTypeAnnotation>>,
+}>;
+
+export type OptionsShape = $ReadOnly<{
+  interfaceOnly?: boolean,
+
+  // Use for components with no current paper rename in progress
+  // Does not check for new name
+  paperComponentName?: string,
+
+  // Use for components that are not used on other platforms.
+  excludedPlatforms?: $ReadOnlyArray<PlatformType>,
+
+  // Use for components currently being renamed in paper
+  // Will use new name if it is available and fallback to this name
+  paperComponentNameDeprecated?: string,
+}>;
+
+export type ExtendsPropsShape = $ReadOnly<{
+  type: 'ReactNativeBuiltInType',
+  knownTypeName: 'ReactNativeCoreViewProps',
+}>;
+
+export type EventTypeShape = $ReadOnly<{
+  name: string,
+  bubblingType: 'direct' | 'bubble',
+  optional: boolean,
+  paperTopLevelNameDeprecated?: string,
+  typeAnnotation: $ReadOnly<{
+    type: 'EventTypeAnnotation',
+    argument?: ObjectTypeAnnotation<EventTypeAnnotation>,
+  }>,
+}>;
+
+export type EventTypeAnnotation =
+  | BooleanTypeAnnotation
+  | StringTypeAnnotation
+  | DoubleTypeAnnotation
+  | FloatTypeAnnotation
+  | Int32TypeAnnotation
+  | StringEnumTypeAnnotation
+  | ObjectTypeAnnotation<EventTypeAnnotation>;
+
+export type PropTypeAnnotation =
+  | $ReadOnly<{
+      type: 'BooleanTypeAnnotation',
+      default: boolean | null,
+    }>
+  | $ReadOnly<{
+      type: 'StringTypeAnnotation',
+      default: string | null,
+    }>
+  | $ReadOnly<{
+      type: 'DoubleTypeAnnotation',
+      default: number,
+    }>
+  | $ReadOnly<{
+      type: 'FloatTypeAnnotation',
+      default: number | null,
+    }>
+  | $ReadOnly<{
+      type: 'Int32TypeAnnotation',
+      default: number,
+    }>
+  | $ReadOnly<{
+      type: 'StringEnumTypeAnnotation',
+      default: string,
+      options: $ReadOnlyArray<string>,
+    }>
+  | $ReadOnly<{
+      type: 'Int32EnumTypeAnnotation',
+      default: number,
+      options: $ReadOnlyArray<number>,
+    }>
+  | ReservedPropTypeAnnotation
+  | ObjectTypeAnnotation<PropTypeAnnotation>
+  | $ReadOnly<{
+      type: 'ArrayTypeAnnotation',
+      elementType:
+        | BooleanTypeAnnotation
+        | StringTypeAnnotation
+        | DoubleTypeAnnotation
+        | FloatTypeAnnotation
+        | Int32TypeAnnotation
+        | $ReadOnly<{
+            type: 'StringEnumTypeAnnotation',
+            default: string,
+            options: $ReadOnlyArray<string>,
+          }>
+        | ObjectTypeAnnotation<PropTypeAnnotation>
+        | ReservedPropTypeAnnotation
+        | $ReadOnly<{
+            type: 'ArrayTypeAnnotation',
+            elementType: ObjectTypeAnnotation<PropTypeAnnotation>,
+          }>,
+    }>;
+
+export type ReservedPropTypeAnnotation = $ReadOnly<{
+  type: 'ReservedPropTypeAnnotation',
+  name:
+    | 'ColorPrimitive'
+    | 'ImageSourcePrimitive'
+    | 'PointPrimitive'
+    | 'EdgeInsetsPrimitive',
+}>;
+
+export type CommandTypeAnnotation = FunctionTypeAnnotation<
+  CommandParamTypeAnnotation,
+  VoidTypeAnnotation,
+>;
+
+export type CommandParamTypeAnnotation =
+  | ReservedTypeAnnotation
+  | BooleanTypeAnnotation
+  | Int32TypeAnnotation
+  | DoubleTypeAnnotation
+  | FloatTypeAnnotation
+  | StringTypeAnnotation;
+
+export type ReservedTypeAnnotation = $ReadOnly<{
+  type: 'ReservedTypeAnnotation',
+  name: 'RootTag', // Union with more custom types.
+}>;
+
+/**
+ * NativeModule Types
+ */
+export type Nullable<+T: NativeModuleTypeAnnotation> =
+  | NullableTypeAnnotation<T>
+  | T;
+
+export type NullableTypeAnnotation<+T: NativeModuleTypeAnnotation> = $ReadOnly<{
+  type: 'NullableTypeAnnotation',
+  typeAnnotation: T,
+}>;
+
+export type NativeModuleSchema = $ReadOnly<{
+  type: 'NativeModule',
+  aliases: NativeModuleAliasMap,
+  spec: NativeModuleSpec,
+  moduleNames: $ReadOnlyArray<string>,
+  // Use for modules that are not used on other platforms.
+  // TODO: It's clearer to define `restrictedToPlatforms` instead, but
+  // `excludedPlatforms` is used here to be consistent with ComponentSchema.
+  excludedPlatforms?: $ReadOnlyArray<PlatformType>,
+}>;
+
+type NativeModuleSpec = $ReadOnly<{
+  properties: $ReadOnlyArray<NativeModulePropertyShape>,
+}>;
+
+export type NativeModulePropertyShape = NamedShape<
+  Nullable<NativeModuleFunctionTypeAnnotation>,
+>;
+
+export type NativeModuleAliasMap = $ReadOnly<{
+  [aliasName: string]: NativeModuleObjectTypeAnnotation,
+}>;
+
+export type NativeModuleFunctionTypeAnnotation = FunctionTypeAnnotation<
+  Nullable<NativeModuleParamTypeAnnotation>,
+  Nullable<NativeModuleReturnTypeAnnotation>,
+>;
+
+export type NativeModuleObjectTypeAnnotation = ObjectTypeAnnotation<
+  Nullable<NativeModuleBaseTypeAnnotation>,
+>;
+
+export type NativeModuleArrayTypeAnnotation<
+  +T: Nullable<NativeModuleBaseTypeAnnotation>,
+> = $ReadOnly<{
+  type: 'ArrayTypeAnnotation',
+  /**
+   * TODO(T72031674): Migrate all our NativeModule specs to not use
+   * invalid Array ElementTypes. Then, make the elementType required.
+   */
+  elementType?: T,
+}>;
+
+export type NativeModuleStringTypeAnnotation = $ReadOnly<{
+  type: 'StringTypeAnnotation',
+}>;
+
+export type NativeModuleNumberTypeAnnotation = $ReadOnly<{
+  type: 'NumberTypeAnnotation',
+}>;
+
+export type NativeModuleInt32TypeAnnotation = $ReadOnly<{
+  type: 'Int32TypeAnnotation',
+}>;
+
+export type NativeModuleDoubleTypeAnnotation = $ReadOnly<{
+  type: 'DoubleTypeAnnotation',
+}>;
+
+export type NativeModuleFloatTypeAnnotation = $ReadOnly<{
+  type: 'FloatTypeAnnotation',
+}>;
+
+export type NativeModuleBooleanTypeAnnotation = $ReadOnly<{
+  type: 'BooleanTypeAnnotation',
+}>;
+
+export type NativeModuleGenericObjectTypeAnnotation = $ReadOnly<{
+  type: 'GenericObjectTypeAnnotation',
+}>;
+
+export type NativeModuleTypeAliasTypeAnnotation = $ReadOnly<{
+  type: 'TypeAliasTypeAnnotation',
+  name: string,
+}>;
+
+export type NativeModulePromiseTypeAnnotation = $ReadOnly<{
+  type: 'PromiseTypeAnnotation',
+}>;
+
+export type NativeModuleBaseTypeAnnotation =
+  | NativeModuleStringTypeAnnotation
+  | NativeModuleNumberTypeAnnotation
+  | NativeModuleInt32TypeAnnotation
+  | NativeModuleDoubleTypeAnnotation
+  | NativeModuleFloatTypeAnnotation
+  | NativeModuleBooleanTypeAnnotation
+  | NativeModuleGenericObjectTypeAnnotation
+  | ReservedTypeAnnotation
+  | NativeModuleTypeAliasTypeAnnotation
+  | NativeModuleArrayTypeAnnotation<Nullable<NativeModuleBaseTypeAnnotation>>
+  | NativeModuleObjectTypeAnnotation;
+
+export type NativeModuleParamTypeAnnotation =
+  | NativeModuleBaseTypeAnnotation
+  | NativeModuleParamOnlyTypeAnnotation;
+
+export type NativeModuleReturnTypeAnnotation =
+  | NativeModuleBaseTypeAnnotation
+  | NativeModuleReturnOnlyTypeAnnotation;
+
+export type NativeModuleTypeAnnotation =
+  | NativeModuleBaseTypeAnnotation
+  | NativeModuleParamOnlyTypeAnnotation
+  | NativeModuleReturnOnlyTypeAnnotation;
+
+type NativeModuleParamOnlyTypeAnnotation = NativeModuleFunctionTypeAnnotation;
+type NativeModuleReturnOnlyTypeAnnotation =
+  | NativeModulePromiseTypeAnnotation
+  | VoidTypeAnnotation;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/SchemaValidator.js b/node_modules/react-native/packages/react-native-codegen/src/SchemaValidator.js
new file mode 100644
index 0000000..4905b9a
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/SchemaValidator.js
@@ -0,0 +1,67 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const nullthrows = require('nullthrows');
+
+import type {SchemaType} from './CodegenSchema';
+
+function getErrors(schema: SchemaType): $ReadOnlyArray<string> {
+  const errors = new Set();
+
+  // Map of component name -> Array of module names
+  const componentModules: Map<string, Array<string>> = new Map();
+
+  Object.keys(schema.modules).forEach(moduleName => {
+    const module = schema.modules[moduleName];
+
+    if (module.components == null) {
+      return;
+    }
+
+    Object.keys(module.components).forEach(componentName => {
+      if (module.components == null) {
+        return;
+      }
+
+      if (!componentModules.has(componentName)) {
+        componentModules.set(componentName, []);
+      }
+
+      nullthrows(componentModules.get(componentName)).push(moduleName);
+    });
+  });
+
+  componentModules.forEach((modules, componentName) => {
+    if (modules.length > 1) {
+      errors.add(
+        `Duplicate components found with name ${componentName}. Found in modules ${modules.join(
+          ', ',
+        )}`,
+      );
+    }
+  });
+
+  return Array.from(errors).sort();
+}
+
+function validate(schema: SchemaType) {
+  const errors = getErrors(schema);
+
+  if (errors.length !== 0) {
+    throw new Error('Errors found validating schema:\n' + errors.join('\n'));
+  }
+}
+
+module.exports = {
+  getErrors,
+  validate,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/__tests__/SchemaValidator-test.js b/node_modules/react-native/packages/react-native-codegen/src/__tests__/SchemaValidator-test.js
new file mode 100644
index 0000000..76781b6
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/__tests__/SchemaValidator-test.js
@@ -0,0 +1,81 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @emails oncall+react_native
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const fixtures = require('../generators/components/__test_fixtures__/fixtures.js');
+const schemaValidator = require('../SchemaValidator.js');
+
+import type {SchemaType} from '../CodegenSchema.js';
+
+const simpleProp = {
+  name: 'disabled',
+  optional: true,
+  typeAnnotation: {
+    type: 'BooleanTypeAnnotation',
+    default: false,
+  },
+};
+
+describe('SchemaValidator', () => {
+  it('fails on components across modules with same name', () => {
+    const fixture: SchemaType = {
+      modules: {
+        Module1: {
+          type: 'Component',
+          components: {
+            Component1: {
+              extendsProps: [
+                {
+                  type: 'ReactNativeBuiltInType',
+                  knownTypeName: 'ReactNativeCoreViewProps',
+                },
+              ],
+              events: [],
+              props: [simpleProp],
+              commands: [],
+            },
+          },
+        },
+        Module2: {
+          type: 'Component',
+          components: {
+            Component1: {
+              extendsProps: [
+                {
+                  type: 'ReactNativeBuiltInType',
+                  knownTypeName: 'ReactNativeCoreViewProps',
+                },
+              ],
+              events: [],
+              props: [simpleProp],
+              commands: [],
+            },
+          },
+        },
+      },
+    };
+
+    expect(schemaValidator.getErrors(fixture)).toMatchSnapshot();
+  });
+
+  describe('fixture', () => {
+    Object.keys(fixtures)
+      .sort()
+      .forEach(fixtureName => {
+        const fixture = fixtures[fixtureName];
+
+        it(`${fixtureName} has no errors`, () => {
+          expect(schemaValidator.getErrors(fixture)).toHaveLength(0);
+        });
+      });
+  });
+});
diff --git a/node_modules/react-native/packages/react-native-codegen/src/__tests__/__snapshots__/SchemaValidator-test.js.snap b/node_modules/react-native/packages/react-native-codegen/src/__tests__/__snapshots__/SchemaValidator-test.js.snap
new file mode 100644
index 0000000..43044e3
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/__tests__/__snapshots__/SchemaValidator-test.js.snap
@@ -0,0 +1,7 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`SchemaValidator fails on components across modules with same name 1`] = `
+Array [
+  "Duplicate components found with name Component1. Found in modules Module1, Module2",
+]
+`;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/cli/combine/combine-js-to-schema-cli.js b/node_modules/react-native/packages/react-native-codegen/src/cli/combine/combine-js-to-schema-cli.js
new file mode 100644
index 0000000..6444928
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/cli/combine/combine-js-to-schema-cli.js
@@ -0,0 +1,54 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @emails oncall+react_native
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const combine = require('./combine-js-to-schema');
+const fs = require('fs');
+// $FlowFixMe[untyped-import] glob is untyped
+const glob = require('glob');
+const path = require('path');
+
+const [outfile, ...fileList] = process.argv.slice(2);
+
+function filterJSFile(file) {
+  return (
+    /^(Native.+|.+NativeComponent)/.test(path.basename(file)) &&
+    // NativeUIManager will be deprecated by Fabric UIManager.
+    // For now, ignore this spec completely because the types are not fully supported.
+    !file.endsWith('NativeUIManager.js') &&
+    // NativeSampleTurboModule is for demo purpose. It should be added manually to the
+    // app for now.
+    !file.endsWith('NativeSampleTurboModule.js') &&
+    !file.includes('__tests')
+  );
+}
+
+const allFiles = [];
+fileList.forEach(file => {
+  if (fs.lstatSync(file).isDirectory()) {
+    const dirFiles = glob
+      .sync(`${file}/**/*.js`, {
+        nodir: true,
+      })
+      .filter(filterJSFile);
+    allFiles.push(...dirFiles);
+  } else if (filterJSFile(file)) {
+    allFiles.push(file);
+  }
+});
+
+const formattedSchema = JSON.stringify(combine(allFiles), null, 2);
+if (outfile != null) {
+  fs.writeFileSync(outfile, formattedSchema);
+} else {
+  console.log(formattedSchema);
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/src/cli/combine/combine-js-to-schema.js b/node_modules/react-native/packages/react-native-codegen/src/cli/combine/combine-js-to-schema.js
new file mode 100644
index 0000000..cf2da06
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/cli/combine/combine-js-to-schema.js
@@ -0,0 +1,38 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+import type {SchemaType} from '../../CodegenSchema.js';
+
+const FlowParser = require('../../parsers/flow');
+const fs = require('fs');
+
+function combineSchemas(files: Array<string>): SchemaType {
+  return files.reduce(
+    (merged, filename) => {
+      const contents = fs.readFileSync(filename, 'utf8');
+      if (
+        contents &&
+        (/export\s+default\s+\(?codegenNativeComponent</.test(contents) ||
+          /extends TurboModule/.test(contents))
+      ) {
+        const schema = FlowParser.parseFile(filename);
+
+        if (schema && schema.modules) {
+          merged.modules = {...merged.modules, ...schema.modules};
+        }
+      }
+      return merged;
+    },
+    {modules: {}},
+  );
+}
+
+module.exports = combineSchemas;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/cli/combine/combine_js_to_schema.sh b/node_modules/react-native/packages/react-native-codegen/src/cli/combine/combine_js_to_schema.sh
new file mode 100755
index 0000000..6b6f30c
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/cli/combine/combine_js_to_schema.sh
@@ -0,0 +1,19 @@
+#!/bin/bash
+# Copyright (c) Facebook, Inc. and its affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+set -e
+set -u
+
+THIS_DIR=$(cd -P "$(dirname "$(readlink "${BASH_SOURCE[0]}" || echo "${BASH_SOURCE[0]}")")" && pwd)
+
+# shellcheck source=xplat/js/env-utils/setup_env_vars.sh
+source "$THIS_DIR/../../../../../../env-utils/setup_env_vars.sh"
+
+pushd "$JS_DIR" >/dev/null
+  "$INSTALL_NODE_MODULES"
+popd >/dev/null
+
+exec "$FLOW_NODE_BINARY" "$THIS_DIR/combine-js-to-schema-cli.js" "$@"
diff --git a/node_modules/react-native/packages/react-native-codegen/src/cli/generators/generate-all.js b/node_modules/react-native/packages/react-native-codegen/src/cli/generators/generate-all.js
new file mode 100644
index 0000000..202c13e
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/cli/generators/generate-all.js
@@ -0,0 +1,65 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ * @format
+ */
+
+/**
+ * This generates all possible outputs by executing all available generators.
+ */
+
+'use strict';
+
+const RNCodegen = require('../../generators/RNCodegen.js');
+const fs = require('fs');
+const mkdirp = require('mkdirp');
+
+const args = process.argv.slice(2);
+if (args.length < 3) {
+  throw new Error(
+    `Expected to receive path to schema, library name, output directory and module spec name. Received ${args.join(
+      ', ',
+    )}`,
+  );
+}
+
+const schemaPath = args[0];
+const libraryName = args[1];
+const outputDirectory = args[2];
+const packageName = args[3];
+const assumeNonnull = args[4] === 'true' || args[4] === 'True';
+
+const schemaText = fs.readFileSync(schemaPath, 'utf-8');
+
+if (schemaText == null) {
+  throw new Error(`Can't find schema at ${schemaPath}`);
+}
+
+mkdirp.sync(outputDirectory);
+
+let schema;
+try {
+  schema = JSON.parse(schemaText);
+} catch (err) {
+  throw new Error(`Can't parse schema to JSON. ${schemaPath}`);
+}
+
+RNCodegen.generate(
+  {libraryName, schema, outputDirectory, packageName, assumeNonnull},
+  {
+    generators: [
+      'descriptors',
+      'events',
+      'props',
+      'tests',
+      'shadow-nodes',
+      'modulesAndroid',
+      'modulesCxx',
+      'modulesIOS',
+    ],
+  },
+);
diff --git a/node_modules/react-native/packages/react-native-codegen/src/cli/generators/generate-all.sh b/node_modules/react-native/packages/react-native-codegen/src/cli/generators/generate-all.sh
new file mode 100755
index 0000000..c17f3a3
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/cli/generators/generate-all.sh
@@ -0,0 +1,19 @@
+#!/bin/bash
+# Copyright (c) Facebook, Inc. and its affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+set -e
+set -u
+
+THIS_DIR=$(cd -P "$(dirname "$(readlink "${BASH_SOURCE[0]}" || echo "${BASH_SOURCE[0]}")")" && pwd)
+
+# shellcheck source=xplat/js/env-utils/setup_env_vars.sh
+source "$THIS_DIR/../../../../../../env-utils/setup_env_vars.sh"
+
+pushd "$JS_DIR" >/dev/null
+  "$INSTALL_NODE_MODULES"
+popd >/dev/null
+
+exec "$FLOW_NODE_BINARY" "$THIS_DIR/generate-all.js" "$@"
diff --git a/node_modules/react-native/packages/react-native-codegen/src/cli/parser/parser-cli.js b/node_modules/react-native/packages/react-native-codegen/src/cli/parser/parser-cli.js
new file mode 100644
index 0000000..b81c085
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/cli/parser/parser-cli.js
@@ -0,0 +1,18 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @emails oncall+react_native
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const parseFiles = require('./parser.js');
+
+const [...fileList] = process.argv.slice(2);
+
+parseFiles(fileList);
diff --git a/node_modules/react-native/packages/react-native-codegen/src/cli/parser/parser.js b/node_modules/react-native/packages/react-native-codegen/src/cli/parser/parser.js
new file mode 100644
index 0000000..a54bd28
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/cli/parser/parser.js
@@ -0,0 +1,24 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const FlowParser = require('../../parsers/flow');
+
+function parseFiles(files: Array<string>) {
+  files.forEach(filename => {
+    console.log(
+      filename,
+      JSON.stringify(FlowParser.parseFile(filename), null, 2),
+    );
+  });
+}
+
+module.exports = parseFiles;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/cli/parser/parser.sh b/node_modules/react-native/packages/react-native-codegen/src/cli/parser/parser.sh
new file mode 100755
index 0000000..7d7352a
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/cli/parser/parser.sh
@@ -0,0 +1,15 @@
+#!/bin/bash
+# Copyright (c) Facebook, Inc. and its affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+set -e
+set -u
+
+THIS_DIR=$(cd -P "$(dirname "$(readlink "${BASH_SOURCE[0]}" || echo "${BASH_SOURCE[0]}")")" && pwd)
+
+# shellcheck source=xplat/js/env-utils/setup_env_vars.sh
+source "$THIS_DIR/../../../../../../env-utils/setup_env_vars.sh"
+
+exec "$FLOW_NODE_BINARY" "$THIS_DIR/parser.js" "$@"
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/RNCodegen.js b/node_modules/react-native/packages/react-native-codegen/src/generators/RNCodegen.js
new file mode 100644
index 0000000..1343c59
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/RNCodegen.js
@@ -0,0 +1,192 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+/*
+TODO:
+
+- ViewConfigs should spread in View's valid attributes
+*/
+
+const fs = require('fs');
+const generateComponentDescriptorH = require('./components/GenerateComponentDescriptorH.js');
+const generateComponentHObjCpp = require('./components/GenerateComponentHObjCpp.js');
+const generateEventEmitterCpp = require('./components/GenerateEventEmitterCpp.js');
+const generateEventEmitterH = require('./components/GenerateEventEmitterH.js');
+const generatePropsCpp = require('./components/GeneratePropsCpp.js');
+const generatePropsH = require('./components/GeneratePropsH.js');
+const generateModuleH = require('./modules/GenerateModuleH.js');
+const generateModuleCpp = require('./modules/GenerateModuleCpp.js');
+const generateModuleObjCpp = require('./modules/GenerateModuleObjCpp');
+const generateModuleJavaSpec = require('./modules/GenerateModuleJavaSpec.js');
+const GenerateModuleJniCpp = require('./modules/GenerateModuleJniCpp.js');
+const GenerateModuleJniH = require('./modules/GenerateModuleJniH.js');
+const generatePropsJavaInterface = require('./components/GeneratePropsJavaInterface.js');
+const generatePropsJavaDelegate = require('./components/GeneratePropsJavaDelegate.js');
+const generateTests = require('./components/GenerateTests.js');
+const generateShadowNodeCpp = require('./components/GenerateShadowNodeCpp.js');
+const generateShadowNodeH = require('./components/GenerateShadowNodeH.js');
+const generateViewConfigJs = require('./components/GenerateViewConfigJs.js');
+const path = require('path');
+const schemaValidator = require('../SchemaValidator.js');
+
+import type {SchemaType} from '../CodegenSchema';
+
+type Options = $ReadOnly<{
+  libraryName: string,
+  schema: SchemaType,
+  outputDirectory: string,
+  packageName?: string, // Some platforms have a notion of package, which should be configurable.
+  assumeNonnull: boolean,
+}>;
+
+type Generators =
+  | 'componentsAndroid'
+  | 'componentsIOS'
+  | 'descriptors'
+  | 'events'
+  | 'props'
+  | 'tests'
+  | 'shadow-nodes'
+  | 'modulesAndroid'
+  | 'modulesCxx'
+  | 'modulesIOS';
+
+type Config = $ReadOnly<{
+  generators: Array<Generators>,
+  test?: boolean,
+}>;
+
+const GENERATORS = {
+  descriptors: [generateComponentDescriptorH.generate],
+  events: [generateEventEmitterCpp.generate, generateEventEmitterH.generate],
+  props: [
+    generateComponentHObjCpp.generate,
+    generatePropsCpp.generate,
+    generatePropsH.generate,
+    generatePropsJavaInterface.generate,
+    generatePropsJavaDelegate.generate,
+  ],
+  // TODO: Refactor this to consolidate various C++ output variation instead of forking per platform.
+  componentsAndroid: [
+    // JNI/C++ files
+    generateComponentDescriptorH.generate,
+    generateEventEmitterCpp.generate,
+    generateEventEmitterH.generate,
+    generatePropsCpp.generate,
+    generatePropsH.generate,
+    generateShadowNodeCpp.generate,
+    generateShadowNodeH.generate,
+    // Java files
+    generatePropsJavaInterface.generate,
+    generatePropsJavaDelegate.generate,
+  ],
+  componentsIOS: [
+    generateComponentDescriptorH.generate,
+    generateEventEmitterCpp.generate,
+    generateEventEmitterH.generate,
+    generateComponentHObjCpp.generate,
+    generatePropsCpp.generate,
+    generatePropsH.generate,
+    generateShadowNodeCpp.generate,
+    generateShadowNodeH.generate,
+  ],
+  modulesAndroid: [
+    GenerateModuleJniCpp.generate,
+    GenerateModuleJniH.generate,
+    generateModuleJavaSpec.generate,
+  ],
+  modulesCxx: [generateModuleCpp.generate, generateModuleH.generate],
+  modulesIOS: [generateModuleObjCpp.generate],
+  tests: [generateTests.generate],
+  'shadow-nodes': [
+    generateShadowNodeCpp.generate,
+    generateShadowNodeH.generate,
+  ],
+};
+
+function writeMapToFiles(map: Map<string, string>, outputDir: string) {
+  let success = true;
+  map.forEach((contents: string, fileName: string) => {
+    try {
+      const location = path.join(outputDir, fileName);
+      const dirName = path.dirname(location);
+      if (!fs.existsSync(dirName)) {
+        fs.mkdirSync(dirName, {recursive: true});
+      }
+      fs.writeFileSync(location, contents);
+    } catch (error) {
+      success = false;
+      console.error(`Failed to write ${fileName} to ${outputDir}`, error);
+    }
+  });
+
+  return success;
+}
+
+function checkFilesForChanges(
+  map: Map<string, string>,
+  outputDir: string,
+): boolean {
+  let hasChanged = false;
+
+  map.forEach((contents: string, fileName: string) => {
+    const location = path.join(outputDir, fileName);
+    const currentContents = fs.readFileSync(location, 'utf8');
+    if (currentContents !== contents) {
+      console.error(`- ${fileName} has changed`);
+
+      hasChanged = true;
+    }
+  });
+
+  return !hasChanged;
+}
+
+module.exports = {
+  generate(
+    {libraryName, schema, outputDirectory, packageName, assumeNonnull}: Options,
+    {generators, test}: Config,
+  ): boolean {
+    schemaValidator.validate(schema);
+
+    const generatedFiles = [];
+    for (const name of generators) {
+      for (const generator of GENERATORS[name]) {
+        generatedFiles.push(
+          ...generator(libraryName, schema, packageName, assumeNonnull),
+        );
+      }
+    }
+
+    const filesToUpdate = new Map([...generatedFiles]);
+
+    if (test === true) {
+      return checkFilesForChanges(filesToUpdate, outputDirectory);
+    }
+
+    return writeMapToFiles(filesToUpdate, outputDirectory);
+  },
+  generateViewConfig({libraryName, schema}: Options): string {
+    schemaValidator.validate(schema);
+
+    const result = generateViewConfigJs
+      .generate(libraryName, schema)
+      .values()
+      .next();
+
+    if (typeof result.value !== 'string') {
+      throw new Error(`Failed to generate view config for ${libraryName}`);
+    }
+
+    return result.value;
+  },
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/Utils.js b/node_modules/react-native/packages/react-native-codegen/src/generators/Utils.js
new file mode 100644
index 0000000..68c1283
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/Utils.js
@@ -0,0 +1,19 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+function capitalize(string: string): string {
+  return string.charAt(0).toUpperCase() + string.slice(1);
+}
+
+module.exports = {
+  capitalize,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/CppHelpers.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/CppHelpers.js
new file mode 100644
index 0000000..bbf8a48
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/CppHelpers.js
@@ -0,0 +1,220 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+import type {NamedShape, PropTypeAnnotation} from '../../CodegenSchema';
+
+function upperCaseFirst(inString: string): string {
+  if (inString.length === 0) {
+    return inString;
+  }
+
+  return inString[0].toUpperCase() + inString.slice(1);
+}
+
+function toSafeCppString(input: string): string {
+  return input
+    .split('-')
+    .map(upperCaseFirst)
+    .join('');
+}
+
+function toIntEnumValueName(propName: string, value: number): string {
+  return `${toSafeCppString(propName)}${value}`;
+}
+
+function getCppTypeForAnnotation(
+  type:
+    | 'BooleanTypeAnnotation'
+    | 'StringTypeAnnotation'
+    | 'Int32TypeAnnotation'
+    | 'DoubleTypeAnnotation'
+    | 'FloatTypeAnnotation',
+): string {
+  switch (type) {
+    case 'BooleanTypeAnnotation':
+      return 'bool';
+    case 'StringTypeAnnotation':
+      return 'std::string';
+    case 'Int32TypeAnnotation':
+      return 'int';
+    case 'DoubleTypeAnnotation':
+      return 'double';
+    case 'FloatTypeAnnotation':
+      return 'Float';
+    default:
+      (type: empty);
+      throw new Error(`Received invalid typeAnnotation ${type}`);
+  }
+}
+
+function getImports(
+  properties: $ReadOnlyArray<NamedShape<PropTypeAnnotation>>,
+): Set<string> {
+  const imports: Set<string> = new Set();
+
+  function addImportsForNativeName(name) {
+    switch (name) {
+      case 'ColorPrimitive':
+        return;
+      case 'PointPrimitive':
+        return;
+      case 'EdgeInsetsPrimitive':
+        return;
+      case 'ImageSourcePrimitive':
+        imports.add('#include <react/renderer/components/image/conversions.h>');
+        return;
+      default:
+        (name: empty);
+        throw new Error(`Invalid name, got ${name}`);
+    }
+  }
+
+  properties.forEach(prop => {
+    const typeAnnotation = prop.typeAnnotation;
+
+    if (typeAnnotation.type === 'ReservedPropTypeAnnotation') {
+      addImportsForNativeName(typeAnnotation.name);
+    }
+
+    if (
+      typeAnnotation.type === 'ArrayTypeAnnotation' &&
+      typeAnnotation.elementType.type === 'ReservedPropTypeAnnotation'
+    ) {
+      addImportsForNativeName(typeAnnotation.elementType.name);
+    }
+
+    if (typeAnnotation.type === 'ObjectTypeAnnotation') {
+      const objectImports = getImports(typeAnnotation.properties);
+      // $FlowFixMe[method-unbinding] added when improving typing for this parameters
+      objectImports.forEach(imports.add, imports);
+    }
+  });
+
+  return imports;
+}
+
+function generateEventStructName(parts: $ReadOnlyArray<string> = []): string {
+  const additional = parts.map(toSafeCppString).join('');
+  return `${additional}`;
+}
+
+function generateStructName(
+  componentName: string,
+  parts: $ReadOnlyArray<string> = [],
+): string {
+  const additional = parts.map(toSafeCppString).join('');
+  return `${componentName}${additional}Struct`;
+}
+
+function getEnumName(componentName: string, propName: string): string {
+  const uppercasedPropName = toSafeCppString(propName);
+  return `${componentName}${uppercasedPropName}`;
+}
+
+function getEnumMaskName(enumName: string): string {
+  return `${enumName}Mask`;
+}
+
+function convertDefaultTypeToString(
+  componentName: string,
+  prop: NamedShape<PropTypeAnnotation>,
+): string {
+  const typeAnnotation = prop.typeAnnotation;
+  switch (typeAnnotation.type) {
+    case 'BooleanTypeAnnotation':
+      if (typeAnnotation.default == null) {
+        return '';
+      }
+      return String(typeAnnotation.default);
+    case 'StringTypeAnnotation':
+      if (typeAnnotation.default == null) {
+        return '';
+      }
+      return `"${typeAnnotation.default}"`;
+    case 'Int32TypeAnnotation':
+      return String(typeAnnotation.default);
+    case 'DoubleTypeAnnotation':
+      const defaultDoubleVal = typeAnnotation.default;
+      return parseInt(defaultDoubleVal, 10) === defaultDoubleVal
+        ? typeAnnotation.default.toFixed(1)
+        : String(typeAnnotation.default);
+    case 'FloatTypeAnnotation':
+      const defaultFloatVal = typeAnnotation.default;
+      if (defaultFloatVal == null) {
+        return '';
+      }
+      return parseInt(defaultFloatVal, 10) === defaultFloatVal
+        ? defaultFloatVal.toFixed(1)
+        : String(typeAnnotation.default);
+    case 'ReservedPropTypeAnnotation':
+      switch (typeAnnotation.name) {
+        case 'ColorPrimitive':
+          return '';
+        case 'ImageSourcePrimitive':
+          return '';
+        case 'PointPrimitive':
+          return '';
+        case 'EdgeInsetsPrimitive':
+          return '';
+        default:
+          (typeAnnotation.name: empty);
+          throw new Error(
+            `Unsupported type annotation: ${typeAnnotation.name}`,
+          );
+      }
+    case 'ArrayTypeAnnotation': {
+      const elementType = typeAnnotation.elementType;
+      switch (elementType.type) {
+        case 'StringEnumTypeAnnotation':
+          if (elementType.default == null) {
+            throw new Error(
+              'A default is required for array StringEnumTypeAnnotation',
+            );
+          }
+          const enumName = getEnumName(componentName, prop.name);
+          const enumMaskName = getEnumMaskName(enumName);
+          const defaultValue = `${enumName}::${toSafeCppString(
+            elementType.default,
+          )}`;
+          return `static_cast<${enumMaskName}>(${defaultValue})`;
+        default:
+          return '';
+      }
+    }
+    case 'ObjectTypeAnnotation': {
+      return '';
+    }
+    case 'StringEnumTypeAnnotation':
+      return `${getEnumName(componentName, prop.name)}::${toSafeCppString(
+        typeAnnotation.default,
+      )}`;
+    case 'Int32EnumTypeAnnotation':
+      return `${getEnumName(componentName, prop.name)}::${toIntEnumValueName(
+        prop.name,
+        typeAnnotation.default,
+      )}`;
+    default:
+      (typeAnnotation: empty);
+      throw new Error(`Unsupported type annotation: ${typeAnnotation.type}`);
+  }
+}
+
+module.exports = {
+  convertDefaultTypeToString,
+  getCppTypeForAnnotation,
+  getEnumName,
+  getEnumMaskName,
+  getImports,
+  toSafeCppString,
+  toIntEnumValueName,
+  generateStructName,
+  generateEventStructName,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/GenerateComponentDescriptorH.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GenerateComponentDescriptorH.js
new file mode 100644
index 0000000..7e670d9
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GenerateComponentDescriptorH.js
@@ -0,0 +1,86 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+import type {SchemaType} from '../../CodegenSchema';
+
+// File path -> contents
+type FilesOutput = Map<string, string>;
+
+const template = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * ${'@'}generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/::_LIBRARY_::/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+::_COMPONENT_DESCRIPTORS_::
+
+} // namespace react
+} // namespace facebook
+`;
+
+const componentTemplate = `
+using ::_CLASSNAME_::ComponentDescriptor = ConcreteComponentDescriptor<::_CLASSNAME_::ShadowNode>;
+`.trim();
+
+module.exports = {
+  generate(
+    libraryName: string,
+    schema: SchemaType,
+    packageName?: string,
+    assumeNonnull: boolean = false,
+  ): FilesOutput {
+    const fileName = 'ComponentDescriptors.h';
+
+    const componentDescriptors = Object.keys(schema.modules)
+      .map(moduleName => {
+        const module = schema.modules[moduleName];
+        if (module.type !== 'Component') {
+          return;
+        }
+
+        const {components} = module;
+        // No components in this module
+        if (components == null) {
+          return null;
+        }
+
+        return Object.keys(components)
+          .map(componentName => {
+            if (components[componentName].interfaceOnly === true) {
+              return;
+            }
+            return componentTemplate.replace(/::_CLASSNAME_::/g, componentName);
+          })
+          .join('\n');
+      })
+      .filter(Boolean)
+      .join('\n');
+
+    const replacedTemplate = template
+      .replace(/::_COMPONENT_DESCRIPTORS_::/g, componentDescriptors)
+      .replace('::_LIBRARY_::', libraryName);
+
+    return new Map([[fileName, replacedTemplate]]);
+  },
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/GenerateComponentHObjCpp.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GenerateComponentHObjCpp.js
new file mode 100644
index 0000000..d664e3c
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GenerateComponentHObjCpp.js
@@ -0,0 +1,372 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+import type {
+  NamedShape,
+  CommandTypeAnnotation,
+  ComponentShape,
+  SchemaType,
+  CommandParamTypeAnnotation,
+} from '../../CodegenSchema';
+
+type FilesOutput = Map<string, string>;
+
+function getOrdinalNumber(num: number): string {
+  switch (num) {
+    case 1:
+      return '1st';
+    case 2:
+      return '2nd';
+    case 3:
+      return '3rd';
+  }
+
+  if (num <= 20) {
+    return `${num}th`;
+  }
+
+  return 'unknown';
+}
+
+const protocolTemplate = `
+@protocol RCT::_COMPONENT_NAME_::ViewProtocol <NSObject>
+::_METHODS_::
+@end
+`.trim();
+
+const commandHandlerIfCaseConvertArgTemplate = `
+  NSObject *arg::_ARG_NUMBER_:: = args[::_ARG_NUMBER_::];
+#if RCT_DEBUG
+  if (!RCTValidateTypeOfViewCommandArgument(arg::_ARG_NUMBER_::, ::_EXPECTED_KIND_::, @"::_EXPECTED_KIND_STRING_::", @"::_COMPONENT_NAME_::", commandName, @"::_ARG_NUMBER_STR_::")) {
+    return;
+  }
+#endif
+  ::_ARG_CONVERSION_::
+`.trim();
+
+const commandHandlerIfCaseTemplate = `
+if ([commandName isEqualToString:@"::_COMMAND_NAME_::"]) {
+#if RCT_DEBUG
+  if ([args count] != ::_NUM_ARGS_::) {
+    RCTLogError(@"%@ command %@ received %d arguments, expected %d.", @"::_COMPONENT_NAME_::", commandName, (int)[args count], ::_NUM_ARGS_::);
+    return;
+  }
+#endif
+
+  ::_CONVERT_ARGS_::
+
+  ::_COMMAND_CALL_::
+  return;
+}
+`.trim();
+
+const commandHandlerTemplate = `
+RCT_EXTERN inline void RCT::_COMPONENT_NAME_::HandleCommand(
+  id<RCT::_COMPONENT_NAME_::ViewProtocol> componentView,
+  NSString const *commandName,
+  NSArray const *args)
+{
+  ::_IF_CASES_::
+
+#if RCT_DEBUG
+  RCTLogError(@"%@ received command %@, which is not a supported command.", @"::_COMPONENT_NAME_::", commandName);
+#endif
+}
+`.trim();
+
+const template = `
+/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* ${'@'}generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+::_COMPONENT_CONTENT_::
+
+NS_ASSUME_NONNULL_END
+`.trim();
+
+type Param = NamedShape<CommandParamTypeAnnotation>;
+
+function getObjCParamType(param: Param): string {
+  const {typeAnnotation} = param;
+
+  switch (typeAnnotation.type) {
+    case 'ReservedTypeAnnotation':
+      switch (typeAnnotation.name) {
+        case 'RootTag':
+          return 'double';
+        default:
+          (typeAnnotation.name: empty);
+          throw new Error(`Receieved invalid type: ${typeAnnotation.name}`);
+      }
+    case 'BooleanTypeAnnotation':
+      return 'BOOL';
+    case 'DoubleTypeAnnotation':
+      return 'double';
+    case 'FloatTypeAnnotation':
+      return 'float';
+    case 'Int32TypeAnnotation':
+      return 'NSInteger';
+    case 'StringTypeAnnotation':
+      return 'NSString *';
+    default:
+      (typeAnnotation.type: empty);
+      throw new Error('Received invalid param type annotation');
+  }
+}
+
+function getObjCExpectedKindParamType(param: Param): string {
+  const {typeAnnotation} = param;
+
+  switch (typeAnnotation.type) {
+    case 'ReservedTypeAnnotation':
+      switch (typeAnnotation.name) {
+        case 'RootTag':
+          return '[NSNumber class]';
+        default:
+          (typeAnnotation.name: empty);
+          throw new Error(`Receieved invalid type: ${typeAnnotation.name}`);
+      }
+    case 'BooleanTypeAnnotation':
+      return '[NSNumber class]';
+    case 'DoubleTypeAnnotation':
+      return '[NSNumber class]';
+    case 'FloatTypeAnnotation':
+      return '[NSNumber class]';
+    case 'Int32TypeAnnotation':
+      return '[NSNumber class]';
+    case 'StringTypeAnnotation':
+      return '[NSString class]';
+    default:
+      (typeAnnotation.type: empty);
+      throw new Error('Received invalid param type annotation');
+  }
+}
+
+function getReadableExpectedKindParamType(param: Param): string {
+  const {typeAnnotation} = param;
+
+  switch (typeAnnotation.type) {
+    case 'ReservedTypeAnnotation':
+      switch (typeAnnotation.name) {
+        case 'RootTag':
+          return 'double';
+        default:
+          (typeAnnotation.name: empty);
+          throw new Error(`Receieved invalid type: ${typeAnnotation.name}`);
+      }
+    case 'BooleanTypeAnnotation':
+      return 'boolean';
+    case 'DoubleTypeAnnotation':
+      return 'double';
+    case 'FloatTypeAnnotation':
+      return 'float';
+    case 'Int32TypeAnnotation':
+      return 'number';
+    case 'StringTypeAnnotation':
+      return 'string';
+    default:
+      (typeAnnotation.type: empty);
+      throw new Error('Received invalid param type annotation');
+  }
+}
+
+function getObjCRightHandAssignmentParamType(
+  param: Param,
+  index: number,
+): string {
+  const {typeAnnotation} = param;
+
+  switch (typeAnnotation.type) {
+    case 'ReservedTypeAnnotation':
+      switch (typeAnnotation.name) {
+        case 'RootTag':
+          return `[(NSNumber *)arg${index} doubleValue]`;
+        default:
+          (typeAnnotation.name: empty);
+          throw new Error(`Receieved invalid type: ${typeAnnotation.name}`);
+      }
+    case 'BooleanTypeAnnotation':
+      return `[(NSNumber *)arg${index} boolValue]`;
+    case 'DoubleTypeAnnotation':
+      return `[(NSNumber *)arg${index} doubleValue]`;
+    case 'FloatTypeAnnotation':
+      return `[(NSNumber *)arg${index} floatValue]`;
+    case 'Int32TypeAnnotation':
+      return `[(NSNumber *)arg${index} intValue]`;
+    case 'StringTypeAnnotation':
+      return `(NSString *)arg${index}`;
+    default:
+      (typeAnnotation.type: empty);
+      throw new Error('Received invalid param type annotation');
+  }
+}
+
+function generateProtocol(
+  component: ComponentShape,
+  componentName: string,
+): string {
+  const commands = component.commands
+    .map(command => {
+      const params = command.typeAnnotation.params;
+      const paramString =
+        params.length === 0
+          ? ''
+          : params
+              .map((param, index) => {
+                const objCType = getObjCParamType(param);
+
+                return `${index === 0 ? '' : param.name}:(${objCType})${
+                  param.name
+                }`;
+              })
+              .join(' ');
+      return `- (void)${command.name}${paramString};`;
+    })
+    .join('\n')
+    .trim();
+
+  return protocolTemplate
+    .replace(/::_COMPONENT_NAME_::/g, componentName)
+    .replace('::_METHODS_::', commands);
+}
+
+function generateConvertAndValidateParam(
+  param: Param,
+  index: number,
+  componentName: string,
+): string {
+  const leftSideType = getObjCParamType(param);
+  const expectedKind = getObjCExpectedKindParamType(param);
+  const expectedKindString = getReadableExpectedKindParamType(param);
+  const argConversion = `${leftSideType} ${
+    param.name
+  } = ${getObjCRightHandAssignmentParamType(param, index)};`;
+
+  return commandHandlerIfCaseConvertArgTemplate
+    .replace(/::_COMPONENT_NAME_::/g, componentName)
+    .replace('::_ARG_CONVERSION_::', argConversion)
+    .replace(/::_ARG_NUMBER_::/g, '' + index)
+    .replace('::_ARG_NUMBER_STR_::', getOrdinalNumber(index + 1))
+    .replace('::_EXPECTED_KIND_::', expectedKind)
+    .replace('::_EXPECTED_KIND_STRING_::', expectedKindString);
+}
+
+function generateCommandIfCase(
+  command: NamedShape<CommandTypeAnnotation>,
+  componentName: string,
+) {
+  const params = command.typeAnnotation.params;
+
+  const convertArgs = params
+    .map((param, index) =>
+      generateConvertAndValidateParam(param, index, componentName),
+    )
+    .join('\n\n')
+    .trim();
+
+  const commandCallArgs =
+    params.length === 0
+      ? ''
+      : params
+          .map((param, index) => {
+            return `${index === 0 ? '' : param.name}:${param.name}`;
+          })
+          .join(' ');
+  const commandCall = `[componentView ${command.name}${commandCallArgs}];`;
+
+  return commandHandlerIfCaseTemplate
+    .replace(/::_COMPONENT_NAME_::/g, componentName)
+    .replace(/::_COMMAND_NAME_::/g, command.name)
+    .replace(/::_NUM_ARGS_::/g, '' + params.length)
+    .replace('::_CONVERT_ARGS_::', convertArgs)
+    .replace('::_COMMAND_CALL_::', commandCall);
+}
+
+function generateCommandHandler(
+  component: ComponentShape,
+  componentName: string,
+): ?string {
+  if (component.commands.length === 0) {
+    return null;
+  }
+
+  const ifCases = component.commands
+    .map(command => generateCommandIfCase(command, componentName))
+    .join('\n\n');
+
+  return commandHandlerTemplate
+    .replace(/::_COMPONENT_NAME_::/g, componentName)
+    .replace('::_IF_CASES_::', ifCases);
+}
+
+module.exports = {
+  generate(
+    libraryName: string,
+    schema: SchemaType,
+    packageName?: string,
+    assumeNonnull: boolean = false,
+  ): FilesOutput {
+    const fileName = 'RCTComponentViewHelpers.h';
+
+    const componentContent = Object.keys(schema.modules)
+      .map(moduleName => {
+        const module = schema.modules[moduleName];
+        if (module.type !== 'Component') {
+          return;
+        }
+
+        const {components} = module;
+        // No components in this module
+        if (components == null) {
+          return null;
+        }
+
+        return Object.keys(components)
+          .filter(componentName => {
+            const component = components[componentName];
+            return !(
+              component.excludedPlatforms &&
+              component.excludedPlatforms.includes('iOS')
+            );
+          })
+          .map(componentName => {
+            return [
+              generateProtocol(components[componentName], componentName),
+              generateCommandHandler(components[componentName], componentName),
+            ]
+              .join('\n\n')
+              .trim();
+          })
+          .join('\n\n');
+      })
+      .filter(Boolean)
+      .join('\n\n');
+
+    const replacedTemplate = template.replace(
+      '::_COMPONENT_CONTENT_::',
+      componentContent,
+    );
+
+    return new Map([[fileName, replacedTemplate]]);
+  },
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/GenerateEventEmitterCpp.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GenerateEventEmitterCpp.js
new file mode 100644
index 0000000..4702ed5
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GenerateEventEmitterCpp.js
@@ -0,0 +1,234 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+const {generateEventStructName} = require('./CppHelpers.js');
+
+import type {
+  ComponentShape,
+  NamedShape,
+  EventTypeAnnotation,
+  SchemaType,
+} from '../../CodegenSchema';
+
+// File path -> contents
+type FilesOutput = Map<string, string>;
+
+type ComponentCollection = $ReadOnly<{
+  [component: string]: ComponentShape,
+  ...,
+}>;
+
+const template = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * ${'@'}generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/::_LIBRARY_::/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+::_EVENTS_::
+
+} // namespace react
+} // namespace facebook
+`;
+
+const componentTemplate = `
+void ::_CLASSNAME_::EventEmitter::::_EVENT_NAME_::(::_STRUCT_NAME_:: event) const {
+  dispatchEvent("::_DISPATCH_EVENT_NAME_::", [event=std::move(event)](jsi::Runtime &runtime) {
+    ::_IMPLEMENTATION_::
+  });
+}
+`.trim();
+
+const basicComponentTemplate = `
+void ::_CLASSNAME_::EventEmitter::::_EVENT_NAME_::() const {
+  dispatchEvent("::_DISPATCH_EVENT_NAME_::");
+}
+`.trim();
+
+function generateSetter(variableName, propertyName, propertyParts) {
+  const trailingPeriod = propertyParts.length === 0 ? '' : '.';
+  const eventChain = `event.${propertyParts.join(
+    '.',
+  )}${trailingPeriod}${propertyName});`;
+
+  return `${variableName}.setProperty(runtime, "${propertyName}", ${eventChain}`;
+}
+
+function generateEnumSetter(variableName, propertyName, propertyParts) {
+  const trailingPeriod = propertyParts.length === 0 ? '' : '.';
+  const eventChain = `event.${propertyParts.join(
+    '.',
+  )}${trailingPeriod}${propertyName})`;
+
+  return `${variableName}.setProperty(runtime, "${propertyName}", toString(${eventChain});`;
+}
+
+function generateSetters(
+  parentPropertyName: string,
+  properties: $ReadOnlyArray<NamedShape<EventTypeAnnotation>>,
+  propertyParts: $ReadOnlyArray<string>,
+): string {
+  const propSetters = properties
+    .map(eventProperty => {
+      const {typeAnnotation} = eventProperty;
+      switch (typeAnnotation.type) {
+        case 'BooleanTypeAnnotation':
+          return generateSetter(
+            parentPropertyName,
+            eventProperty.name,
+            propertyParts,
+          );
+        case 'StringTypeAnnotation':
+          return generateSetter(
+            parentPropertyName,
+            eventProperty.name,
+            propertyParts,
+          );
+        case 'Int32TypeAnnotation':
+          return generateSetter(
+            parentPropertyName,
+            eventProperty.name,
+            propertyParts,
+          );
+        case 'DoubleTypeAnnotation':
+          return generateSetter(
+            parentPropertyName,
+            eventProperty.name,
+            propertyParts,
+          );
+        case 'FloatTypeAnnotation':
+          return generateSetter(
+            parentPropertyName,
+            eventProperty.name,
+            propertyParts,
+          );
+        case 'StringEnumTypeAnnotation':
+          return generateEnumSetter(
+            parentPropertyName,
+            eventProperty.name,
+            propertyParts,
+          );
+        case 'ObjectTypeAnnotation':
+          const propertyName = eventProperty.name;
+          return `
+            {
+              auto ${propertyName} = jsi::Object(runtime);
+              ${generateSetters(
+                propertyName,
+                typeAnnotation.properties,
+                propertyParts.concat([propertyName]),
+              )}
+
+              ${parentPropertyName}.setProperty(runtime, "${propertyName}", ${propertyName});
+            }
+          `.trim();
+        default:
+          (typeAnnotation.type: empty);
+          throw new Error('Received invalid event property type');
+      }
+    })
+    .join('\n');
+
+  return propSetters;
+}
+
+function generateEvent(componentName: string, event): string {
+  // This is a gross hack necessary because native code is sending
+  // events named things like topChange to JS which is then converted back to
+  // call the onChange prop. We should be consistent throughout the system.
+  // In order to migrate to this new system we have to support the current
+  // naming scheme. We should delete this once we are able to control this name
+  // throughout the system.
+  const dispatchEventName = `${event.name[2].toLowerCase()}${event.name.slice(
+    3,
+  )}`;
+
+  if (event.typeAnnotation.argument) {
+    const implementation = `
+    auto payload = jsi::Object(runtime);
+    ${generateSetters('payload', event.typeAnnotation.argument.properties, [])}
+    return payload;
+  `.trim();
+
+    if (!event.name.startsWith('on')) {
+      throw new Error('Expected the event name to start with `on`');
+    }
+
+    return componentTemplate
+      .replace(/::_CLASSNAME_::/g, componentName)
+      .replace(/::_EVENT_NAME_::/g, event.name)
+      .replace(/::_DISPATCH_EVENT_NAME_::/g, dispatchEventName)
+      .replace('::_STRUCT_NAME_::', generateEventStructName([event.name]))
+      .replace('::_IMPLEMENTATION_::', implementation);
+  }
+
+  return basicComponentTemplate
+    .replace(/::_CLASSNAME_::/g, componentName)
+    .replace(/::_EVENT_NAME_::/g, event.name)
+    .replace(/::_DISPATCH_EVENT_NAME_::/g, dispatchEventName);
+}
+
+module.exports = {
+  generate(
+    libraryName: string,
+    schema: SchemaType,
+    packageName?: string,
+    assumeNonnull: boolean = false,
+  ): FilesOutput {
+    const moduleComponents: ComponentCollection = Object.keys(schema.modules)
+      .map(moduleName => {
+        const module = schema.modules[moduleName];
+        if (module.type !== 'Component') {
+          return;
+        }
+
+        const {components} = module;
+        // No components in this module
+        if (components == null) {
+          return null;
+        }
+
+        return components;
+      })
+      .filter(Boolean)
+      .reduce((acc, components) => Object.assign(acc, components), {});
+
+    const fileName = 'EventEmitters.cpp';
+
+    const componentEmitters = Object.keys(moduleComponents)
+      .map(componentName => {
+        const component = moduleComponents[componentName];
+
+        return component.events
+          .map(event => {
+            return generateEvent(componentName, event);
+          })
+          .join('\n');
+      })
+      .join('\n');
+
+    const replacedTemplate = template
+      .replace(/::_COMPONENT_EMITTERS_::/g, componentEmitters)
+      .replace('::_LIBRARY_::', libraryName)
+      .replace('::_EVENTS_::', componentEmitters);
+
+    return new Map([[fileName, replacedTemplate]]);
+  },
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/GenerateEventEmitterH.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GenerateEventEmitterH.js
new file mode 100644
index 0000000..65b4fc6
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GenerateEventEmitterH.js
@@ -0,0 +1,298 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const nullthrows = require('nullthrows');
+
+const {
+  getCppTypeForAnnotation,
+  toSafeCppString,
+  generateEventStructName,
+} = require('./CppHelpers.js');
+
+import type {
+  ComponentShape,
+  EventTypeShape,
+  NamedShape,
+  EventTypeAnnotation,
+  SchemaType,
+} from '../../CodegenSchema';
+
+// File path -> contents
+type FilesOutput = Map<string, string>;
+type StructsMap = Map<string, string>;
+
+type ComponentCollection = $ReadOnly<{
+  [component: string]: ComponentShape,
+  ...,
+}>;
+
+const template = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * ${'@'}generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+::_COMPONENT_EMITTERS_::
+
+} // namespace react
+} // namespace facebook
+`;
+
+const componentTemplate = `
+class ::_CLASSNAME_::EventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  ::_STRUCTS_::
+
+  ::_EVENTS_::
+};
+`.trim();
+
+const structTemplate = `
+  struct ::_STRUCT_NAME_:: {
+    ::_FIELDS_::
+  };
+`.trim();
+
+const enumTemplate = `enum class ::_ENUM_NAME_:: {
+  ::_VALUES_::
+};
+
+static char const *toString(const ::_ENUM_NAME_:: value) {
+  switch (value) {
+    ::_TO_CASES_::
+  }
+}
+`.trim();
+
+function indent(nice: string, spaces: number) {
+  return nice
+    .split('\n')
+    .map((line, index) => {
+      if (line.length === 0 || index === 0) {
+        return line;
+      }
+      const emptySpaces = new Array(spaces + 1).join(' ');
+      return emptySpaces + line;
+    })
+    .join('\n');
+}
+
+function getNativeTypeFromAnnotation(
+  componentName: string,
+  eventProperty: NamedShape<EventTypeAnnotation>,
+  nameParts: $ReadOnlyArray<string>,
+): string {
+  const {type} = eventProperty.typeAnnotation;
+
+  switch (type) {
+    case 'BooleanTypeAnnotation':
+    case 'StringTypeAnnotation':
+    case 'Int32TypeAnnotation':
+    case 'DoubleTypeAnnotation':
+    case 'FloatTypeAnnotation':
+      return getCppTypeForAnnotation(type);
+    case 'StringEnumTypeAnnotation':
+      return generateEventStructName(nameParts.concat([eventProperty.name]));
+    case 'ObjectTypeAnnotation':
+      return generateEventStructName(nameParts.concat([eventProperty.name]));
+    default:
+      (type: empty);
+      throw new Error(`Received invalid event property type ${type}`);
+  }
+}
+function generateEnum(structs, options, nameParts) {
+  const structName = generateEventStructName(nameParts);
+  const fields = options
+    .map((option, index) => `${toSafeCppString(option)}`)
+    .join(',\n  ');
+
+  const toCases = options
+    .map(
+      option =>
+        `case ${structName}::${toSafeCppString(option)}: return "${option}";`,
+    )
+    .join('\n' + '    ');
+
+  structs.set(
+    structName,
+    enumTemplate
+      .replace(/::_ENUM_NAME_::/g, structName)
+      .replace('::_VALUES_::', fields)
+      .replace('::_TO_CASES_::', toCases),
+  );
+}
+
+function generateStruct(
+  structs: StructsMap,
+  componentName: string,
+  nameParts: $ReadOnlyArray<string>,
+  properties: $ReadOnlyArray<NamedShape<EventTypeAnnotation>>,
+): void {
+  const structNameParts = nameParts;
+  const structName = generateEventStructName(structNameParts);
+
+  const fields = properties
+    .map(property => {
+      return `${getNativeTypeFromAnnotation(
+        componentName,
+        property,
+        structNameParts,
+      )} ${property.name};`;
+    })
+    .join('\n' + '  ');
+
+  properties.forEach(property => {
+    const {name, typeAnnotation} = property;
+    switch (typeAnnotation.type) {
+      case 'BooleanTypeAnnotation':
+        return;
+      case 'StringTypeAnnotation':
+        return;
+      case 'Int32TypeAnnotation':
+        return;
+      case 'DoubleTypeAnnotation':
+        return;
+      case 'FloatTypeAnnotation':
+        return;
+      case 'ObjectTypeAnnotation':
+        generateStruct(
+          structs,
+          componentName,
+          nameParts.concat([name]),
+          nullthrows(typeAnnotation.properties),
+        );
+        return;
+      case 'StringEnumTypeAnnotation':
+        generateEnum(structs, typeAnnotation.options, nameParts.concat([name]));
+        return;
+      default:
+        (typeAnnotation.type: empty);
+        throw new Error(
+          `Received invalid event property type ${typeAnnotation.type}`,
+        );
+    }
+  });
+
+  structs.set(
+    structName,
+    structTemplate
+      .replace('::_STRUCT_NAME_::', structName)
+      .replace('::_FIELDS_::', fields),
+  );
+}
+
+function generateStructs(componentName: string, component): string {
+  const structs: StructsMap = new Map();
+
+  component.events.forEach(event => {
+    if (event.typeAnnotation.argument) {
+      generateStruct(
+        structs,
+        componentName,
+        [event.name],
+        event.typeAnnotation.argument.properties,
+      );
+    }
+  });
+
+  return Array.from(structs.values()).join('\n\n');
+}
+
+function generateEvent(componentName: string, event: EventTypeShape): string {
+  if (event.typeAnnotation.argument) {
+    const structName = generateEventStructName([event.name]);
+
+    return `void ${event.name}(${structName} value) const;`;
+  }
+
+  return `void ${event.name}() const;`;
+}
+function generateEvents(componentName: string, component): string {
+  return component.events
+    .map(event => generateEvent(componentName, event))
+    .join('\n\n' + '  ');
+}
+
+module.exports = {
+  generate(
+    libraryName: string,
+    schema: SchemaType,
+    packageName?: string,
+    assumeNonnull: boolean = false,
+  ): FilesOutput {
+    const moduleComponents: ComponentCollection = Object.keys(schema.modules)
+      .map(moduleName => {
+        const module = schema.modules[moduleName];
+        if (module.type !== 'Component') {
+          return;
+        }
+
+        const {components} = module;
+        // No components in this module
+        if (components == null) {
+          return null;
+        }
+
+        return components;
+      })
+      .filter(Boolean)
+      .reduce((acc, components) => Object.assign(acc, components), {});
+
+    const moduleComponentsWithEvents = Object.keys(moduleComponents).filter(
+      componentName => moduleComponents[componentName].events.length > 0,
+    );
+
+    const fileName = 'EventEmitters.h';
+
+    const componentEmitters =
+      moduleComponentsWithEvents.length > 0
+        ? Object.keys(moduleComponents)
+            .map(componentName => {
+              const component = moduleComponents[componentName];
+
+              const replacedTemplate = componentTemplate
+                .replace(/::_CLASSNAME_::/g, componentName)
+                .replace(
+                  '::_STRUCTS_::',
+                  indent(generateStructs(componentName, component), 2),
+                )
+                .replace(
+                  '::_EVENTS_::',
+                  generateEvents(componentName, component),
+                )
+                .trim();
+
+              return replacedTemplate;
+            })
+            .join('\n')
+        : '';
+
+    const replacedTemplate = template.replace(
+      /::_COMPONENT_EMITTERS_::/g,
+      componentEmitters,
+    );
+
+    return new Map([[fileName, replacedTemplate]]);
+  },
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/GeneratePropsCpp.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GeneratePropsCpp.js
new file mode 100644
index 0000000..b29fdf7
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GeneratePropsCpp.js
@@ -0,0 +1,156 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+import type {ComponentShape, SchemaType} from '../../CodegenSchema';
+const {convertDefaultTypeToString, getImports} = require('./CppHelpers');
+
+// File path -> contents
+type FilesOutput = Map<string, string>;
+
+const template = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * ${'@'}generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/::_LIBRARY_::/Props.h>
+::_IMPORTS_::
+
+namespace facebook {
+namespace react {
+
+::_COMPONENT_CLASSES_::
+
+} // namespace react
+} // namespace facebook
+`;
+
+const componentTemplate = `
+::_CLASSNAME_::::::_CLASSNAME_::(
+    const PropsParserContext &context,
+    const ::_CLASSNAME_:: &sourceProps,
+    const RawProps &rawProps):::_EXTEND_CLASSES_::
+
+    ::_PROPS_::
+      {}
+`.trim();
+
+function generatePropsString(componentName: string, component: ComponentShape) {
+  return component.props
+    .map(prop => {
+      const defaultValue = convertDefaultTypeToString(componentName, prop);
+      return `${prop.name}(convertRawProp(context, rawProps, "${prop.name}", sourceProps.${prop.name}, {${defaultValue}}))`;
+    })
+    .join(',\n' + '    ');
+}
+
+function getClassExtendString(component): string {
+  const extendString =
+    ' ' +
+    component.extendsProps
+      .map(extendProps => {
+        switch (extendProps.type) {
+          case 'ReactNativeBuiltInType':
+            switch (extendProps.knownTypeName) {
+              case 'ReactNativeCoreViewProps':
+                return 'ViewProps(context, sourceProps, rawProps)';
+              default:
+                (extendProps.knownTypeName: empty);
+                throw new Error('Invalid knownTypeName');
+            }
+          default:
+            (extendProps.type: empty);
+            throw new Error('Invalid extended type');
+        }
+      })
+      .join(', ') +
+    `${component.props.length > 0 ? ',' : ''}`;
+
+  return extendString;
+}
+
+module.exports = {
+  generate(
+    libraryName: string,
+    schema: SchemaType,
+    packageName?: string,
+    assumeNonnull: boolean = false,
+  ): FilesOutput {
+    const fileName = 'Props.cpp';
+    const allImports: Set<string> = new Set([
+      '#include <react/renderer/core/propsConversions.h>',
+      '#include <react/renderer/core/PropsParserContext.h>',
+    ]);
+
+    const componentProps = Object.keys(schema.modules)
+      .map(moduleName => {
+        const module = schema.modules[moduleName];
+        if (module.type !== 'Component') {
+          return;
+        }
+
+        const {components} = module;
+        // No components in this module
+        if (components == null) {
+          return null;
+        }
+
+        return Object.keys(components)
+          .filter(componentName => {
+            const component = components[componentName];
+            return !(
+              component.excludedPlatforms &&
+              component.excludedPlatforms.includes('iOS')
+            );
+          })
+          .map(componentName => {
+            const component = components[componentName];
+            const newName = `${componentName}Props`;
+
+            const propsString = generatePropsString(componentName, component);
+            const extendString = getClassExtendString(component);
+
+            const imports = getImports(component.props);
+            // $FlowFixMe[method-unbinding] added when improving typing for this parameters
+            imports.forEach(allImports.add, allImports);
+
+            const replacedTemplate = componentTemplate
+              .replace(/::_CLASSNAME_::/g, newName)
+              .replace('::_EXTEND_CLASSES_::', extendString)
+              .replace('::_PROPS_::', propsString);
+
+            return replacedTemplate;
+          })
+          .join('\n');
+      })
+      .filter(Boolean)
+      .join('\n');
+
+    const replacedTemplate = template
+      .replace(/::_COMPONENT_CLASSES_::/g, componentProps)
+      .replace('::_LIBRARY_::', libraryName)
+      .replace(
+        '::_IMPORTS_::',
+
+        Array.from(allImports)
+          .sort()
+          .join('\n')
+          .trim(),
+      );
+
+    return new Map([[fileName, replacedTemplate]]);
+  },
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/GeneratePropsH.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GeneratePropsH.js
new file mode 100644
index 0000000..bdbd588
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GeneratePropsH.js
@@ -0,0 +1,836 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+const {
+  convertDefaultTypeToString,
+  getCppTypeForAnnotation,
+  getEnumMaskName,
+  getEnumName,
+  toSafeCppString,
+  generateStructName,
+  getImports,
+  toIntEnumValueName,
+} = require('./CppHelpers.js');
+
+import type {
+  ExtendsPropsShape,
+  NamedShape,
+  PropTypeAnnotation,
+  SchemaType,
+} from '../../CodegenSchema';
+
+// File path -> contents
+type FilesOutput = Map<string, string>;
+type StructsMap = Map<string, string>;
+
+const template = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * ${'@'}generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+::_IMPORTS_::
+
+namespace facebook {
+namespace react {
+
+::_COMPONENT_CLASSES_::
+
+} // namespace react
+} // namespace facebook
+`;
+
+const classTemplate = `
+::_ENUMS_::
+::_STRUCTS_::
+class ::_CLASSNAME_:: final::_EXTEND_CLASSES_:: {
+ public:
+  ::_CLASSNAME_::() = default;
+  ::_CLASSNAME_::(const PropsParserContext& context, const ::_CLASSNAME_:: &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  ::_PROPS_::
+};
+`.trim();
+
+const enumTemplate = `
+enum class ::_ENUM_NAME_:: { ::_VALUES_:: };
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ::_ENUM_NAME_:: &result) {
+  auto string = (std::string)value;
+  ::_FROM_CASES_::
+  abort();
+}
+
+static inline std::string toString(const ::_ENUM_NAME_:: &value) {
+  switch (value) {
+    ::_TO_CASES_::
+  }
+}
+`.trim();
+
+const intEnumTemplate = `
+enum class ::_ENUM_NAME_:: { ::_VALUES_:: };
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ::_ENUM_NAME_:: &result) {
+  assert(value.hasType<int>());
+  auto integerValue = (int)value;
+  switch (integerValue) {::_FROM_CASES_::
+  }
+  abort();
+}
+
+static inline std::string toString(const ::_ENUM_NAME_:: &value) {
+  switch (value) {
+    ::_TO_CASES_::
+  }
+}
+`.trim();
+
+const structTemplate = `struct ::_STRUCT_NAME_:: {
+  ::_FIELDS_::
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ::_STRUCT_NAME_:: &result) {
+  auto map = (better::map<std::string, RawValue>)value;
+
+  ::_FROM_CASES_::
+}
+
+static inline std::string toString(const ::_STRUCT_NAME_:: &value) {
+  return "[Object ::_STRUCT_NAME_::]";
+}
+`.trim();
+
+const arrayConversionFunction = `static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, std::vector<::_STRUCT_NAME_::> &result) {
+  auto items = (std::vector<RawValue>)value;
+  for (const auto &item : items) {
+    ::_STRUCT_NAME_:: newItem;
+    fromRawValue(context, item, newItem);
+    result.emplace_back(newItem);
+  }
+}
+`;
+
+const doubleArrayConversionFunction = `static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, std::vector<std::vector<::_STRUCT_NAME_::>> &result) {
+  auto items = (std::vector<std::vector<RawValue>>)value;
+  for (const std::vector<RawValue> &item : items) {
+    auto nestedArray = std::vector<::_STRUCT_NAME_::>{};
+    for (const RawValue &nestedItem : item) {
+      ::_STRUCT_NAME_:: newItem;
+      fromRawValue(context, nestedItem, newItem);
+      nestedArray.emplace_back(newItem);
+    }
+    result.emplace_back(nestedArray);
+  }
+}
+`;
+
+const arrayEnumTemplate = `
+using ::_ENUM_MASK_:: = uint32_t;
+
+enum class ::_ENUM_NAME_::: ::_ENUM_MASK_:: {
+  ::_VALUES_::
+};
+
+constexpr bool operator&(
+  ::_ENUM_MASK_:: const lhs,
+  enum ::_ENUM_NAME_:: const rhs) {
+  return lhs & static_cast<::_ENUM_MASK_::>(rhs);
+}
+
+constexpr ::_ENUM_MASK_:: operator|(
+  ::_ENUM_MASK_:: const lhs,
+  enum ::_ENUM_NAME_:: const rhs) {
+  return lhs | static_cast<::_ENUM_MASK_::>(rhs);
+}
+
+constexpr void operator|=(
+  ::_ENUM_MASK_:: &lhs,
+  enum ::_ENUM_NAME_:: const rhs) {
+  lhs = lhs | static_cast<::_ENUM_MASK_::>(rhs);
+}
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ::_ENUM_MASK_:: &result) {
+  auto items = std::vector<std::string>{value};
+  for (const auto &item : items) {
+    ::_FROM_CASES_::
+    abort();
+  }
+}
+
+static inline std::string toString(const ::_ENUM_MASK_:: &value) {
+    auto result = std::string{};
+    auto separator = std::string{", "};
+
+    ::_TO_CASES_::
+    if (!result.empty()) {
+      result.erase(result.length() - separator.length());
+    }
+    return result;
+}
+`.trim();
+
+function getClassExtendString(component): string {
+  const extendString =
+    ' : ' +
+    component.extendsProps
+      .map(extendProps => {
+        switch (extendProps.type) {
+          case 'ReactNativeBuiltInType':
+            switch (extendProps.knownTypeName) {
+              case 'ReactNativeCoreViewProps':
+                return 'public ViewProps';
+              default:
+                (extendProps.knownTypeName: empty);
+                throw new Error('Invalid knownTypeName');
+            }
+          default:
+            (extendProps.type: empty);
+            throw new Error('Invalid extended type');
+        }
+      })
+      .join(' ');
+
+  return extendString;
+}
+
+function getNativeTypeFromAnnotation(
+  componentName: string,
+  prop,
+  nameParts: $ReadOnlyArray<string>,
+): string {
+  const typeAnnotation = prop.typeAnnotation;
+
+  switch (typeAnnotation.type) {
+    case 'BooleanTypeAnnotation':
+    case 'StringTypeAnnotation':
+    case 'Int32TypeAnnotation':
+    case 'DoubleTypeAnnotation':
+    case 'FloatTypeAnnotation':
+      return getCppTypeForAnnotation(typeAnnotation.type);
+    case 'ReservedPropTypeAnnotation':
+      switch (typeAnnotation.name) {
+        case 'ColorPrimitive':
+          return 'SharedColor';
+        case 'ImageSourcePrimitive':
+          return 'ImageSource';
+        case 'PointPrimitive':
+          return 'Point';
+        case 'EdgeInsetsPrimitive':
+          return 'EdgeInsets';
+        default:
+          (typeAnnotation.name: empty);
+          throw new Error('Received unknown ReservedPropTypeAnnotation');
+      }
+    case 'ArrayTypeAnnotation': {
+      const arrayType = typeAnnotation.elementType.type;
+      if (arrayType === 'ArrayTypeAnnotation') {
+        return `std::vector<${getNativeTypeFromAnnotation(
+          componentName,
+          {typeAnnotation: typeAnnotation.elementType, name: ''},
+          nameParts.concat([prop.name]),
+        )}>`;
+      }
+      if (arrayType === 'ObjectTypeAnnotation') {
+        const structName = generateStructName(
+          componentName,
+          nameParts.concat([prop.name]),
+        );
+        return `std::vector<${structName}>`;
+      }
+      if (arrayType === 'StringEnumTypeAnnotation') {
+        const enumName = getEnumName(componentName, prop.name);
+        return getEnumMaskName(enumName);
+      }
+      const itemAnnotation = getNativeTypeFromAnnotation(
+        componentName,
+        {
+          typeAnnotation: typeAnnotation.elementType,
+          name: componentName,
+        },
+        nameParts.concat([prop.name]),
+      );
+      return `std::vector<${itemAnnotation}>`;
+    }
+    case 'ObjectTypeAnnotation': {
+      return generateStructName(componentName, nameParts.concat([prop.name]));
+    }
+    case 'StringEnumTypeAnnotation':
+      return getEnumName(componentName, prop.name);
+    case 'Int32EnumTypeAnnotation':
+      return getEnumName(componentName, prop.name);
+    default:
+      (typeAnnotation: empty);
+      throw new Error(
+        `Received invalid typeAnnotation for ${componentName} prop ${prop.name}, received ${typeAnnotation.type}`,
+      );
+  }
+}
+
+function convertValueToEnumOption(value: string): string {
+  return toSafeCppString(value);
+}
+
+function generateArrayEnumString(
+  componentName: string,
+  name: string,
+  options: $ReadOnlyArray<string>,
+): string {
+  const enumName = getEnumName(componentName, name);
+
+  const values = options
+    .map((option, index) => `${toSafeCppString(option)} = 1 << ${index}`)
+    .join(',\n  ');
+
+  const fromCases = options
+    .map(
+      option =>
+        `if (item == "${option}") {
+      result |= ${enumName}::${toSafeCppString(option)};
+      continue;
+    }`,
+    )
+    .join('\n    ');
+
+  const toCases = options
+    .map(
+      option =>
+        `if (value & ${enumName}::${toSafeCppString(option)}) {
+      result += "${option}" + separator;
+    }`,
+    )
+    .join('\n' + '    ');
+
+  return arrayEnumTemplate
+    .replace(/::_ENUM_NAME_::/g, enumName)
+    .replace(/::_ENUM_MASK_::/g, getEnumMaskName(enumName))
+    .replace('::_VALUES_::', values)
+    .replace('::_FROM_CASES_::', fromCases)
+    .replace('::_TO_CASES_::', toCases);
+}
+
+function generateStringEnum(componentName, prop) {
+  const typeAnnotation = prop.typeAnnotation;
+  if (typeAnnotation.type === 'StringEnumTypeAnnotation') {
+    const values: $ReadOnlyArray<string> = typeAnnotation.options;
+    const enumName = getEnumName(componentName, prop.name);
+
+    const fromCases = values
+      .map(
+        value =>
+          `if (string == "${value}") { result = ${enumName}::${convertValueToEnumOption(
+            value,
+          )}; return; }`,
+      )
+      .join('\n' + '  ');
+
+    const toCases = values
+      .map(
+        value =>
+          `case ${enumName}::${convertValueToEnumOption(
+            value,
+          )}: return "${value}";`,
+      )
+      .join('\n' + '    ');
+
+    return enumTemplate
+      .replace(/::_ENUM_NAME_::/g, enumName)
+      .replace('::_VALUES_::', values.map(toSafeCppString).join(', '))
+      .replace('::_FROM_CASES_::', fromCases)
+      .replace('::_TO_CASES_::', toCases);
+  }
+
+  return '';
+}
+
+function generateIntEnum(componentName, prop) {
+  const typeAnnotation = prop.typeAnnotation;
+  if (typeAnnotation.type === 'Int32EnumTypeAnnotation') {
+    const values: $ReadOnlyArray<number> = typeAnnotation.options;
+    const enumName = getEnumName(componentName, prop.name);
+
+    const fromCases = values
+      .map(
+        value =>
+          `
+    case ${value}:
+      result = ${enumName}::${toIntEnumValueName(prop.name, value)};
+      return;`,
+      )
+      .join('');
+
+    const toCases = values
+      .map(
+        value =>
+          `case ${enumName}::${toIntEnumValueName(
+            prop.name,
+            value,
+          )}: return "${value}";`,
+      )
+      .join('\n' + '    ');
+
+    const valueVariables = values
+      .map(val => `${toIntEnumValueName(prop.name, val)} = ${val}`)
+      .join(', ');
+
+    return intEnumTemplate
+      .replace(/::_ENUM_NAME_::/g, enumName)
+      .replace('::_VALUES_::', valueVariables)
+      .replace('::_FROM_CASES_::', fromCases)
+      .replace('::_TO_CASES_::', toCases);
+  }
+
+  return '';
+}
+
+function generateEnumString(componentName: string, component): string {
+  return component.props
+    .map(prop => {
+      if (
+        prop.typeAnnotation.type === 'ArrayTypeAnnotation' &&
+        prop.typeAnnotation.elementType.type === 'StringEnumTypeAnnotation'
+      ) {
+        return generateArrayEnumString(
+          componentName,
+          prop.name,
+          prop.typeAnnotation.elementType.options,
+        );
+      }
+
+      if (prop.typeAnnotation.type === 'StringEnumTypeAnnotation') {
+        return generateStringEnum(componentName, prop);
+      }
+
+      if (prop.typeAnnotation.type === 'Int32EnumTypeAnnotation') {
+        return generateIntEnum(componentName, prop);
+      }
+
+      if (prop.typeAnnotation.type === 'ObjectTypeAnnotation') {
+        return prop.typeAnnotation.properties
+          .map(property => {
+            if (property.typeAnnotation.type === 'StringEnumTypeAnnotation') {
+              return generateStringEnum(componentName, property);
+            } else if (
+              property.typeAnnotation.type === 'Int32EnumTypeAnnotation'
+            ) {
+              return generateIntEnum(componentName, property);
+            }
+            return null;
+          })
+          .filter(Boolean)
+          .join('\n');
+      }
+    })
+    .filter(Boolean)
+    .join('\n');
+}
+
+function generatePropsString(
+  componentName: string,
+  props: $ReadOnlyArray<NamedShape<PropTypeAnnotation>>,
+) {
+  return props
+    .map(prop => {
+      const nativeType = getNativeTypeFromAnnotation(componentName, prop, []);
+      const defaultValue = convertDefaultTypeToString(componentName, prop);
+
+      return `${nativeType} ${prop.name}{${defaultValue}};`;
+    })
+    .join('\n' + '  ');
+}
+
+function getExtendsImports(
+  extendsProps: $ReadOnlyArray<ExtendsPropsShape>,
+): Set<string> {
+  const imports: Set<string> = new Set();
+
+  imports.add('#include <react/renderer/core/PropsParserContext.h>');
+
+  extendsProps.forEach(extendProps => {
+    switch (extendProps.type) {
+      case 'ReactNativeBuiltInType':
+        switch (extendProps.knownTypeName) {
+          case 'ReactNativeCoreViewProps':
+            imports.add(
+              '#include <react/renderer/components/view/ViewProps.h>',
+            );
+            return;
+          default:
+            (extendProps.knownTypeName: empty);
+            throw new Error('Invalid knownTypeName');
+        }
+      default:
+        (extendProps.type: empty);
+        throw new Error('Invalid extended type');
+    }
+  });
+
+  return imports;
+}
+
+function getLocalImports(
+  properties: $ReadOnlyArray<NamedShape<PropTypeAnnotation>>,
+): Set<string> {
+  const imports: Set<string> = new Set();
+
+  function addImportsForNativeName(name) {
+    switch (name) {
+      case 'ColorPrimitive':
+        imports.add('#include <react/renderer/graphics/Color.h>');
+        return;
+      case 'ImageSourcePrimitive':
+        imports.add('#include <react/renderer/imagemanager/primitives.h>');
+        return;
+      case 'PointPrimitive':
+        imports.add('#include <react/renderer/graphics/Geometry.h>');
+        return;
+      case 'EdgeInsetsPrimitive':
+        imports.add('#include <react/renderer/graphics/Geometry.h>');
+        return;
+      default:
+        (name: empty);
+        throw new Error(`Invalid ReservedPropTypeAnnotation name, got ${name}`);
+    }
+  }
+
+  properties.forEach(prop => {
+    const typeAnnotation = prop.typeAnnotation;
+
+    if (typeAnnotation.type === 'ReservedPropTypeAnnotation') {
+      addImportsForNativeName(typeAnnotation.name);
+    }
+
+    if (typeAnnotation.type === 'ArrayTypeAnnotation') {
+      imports.add('#include <vector>');
+      if (typeAnnotation.elementType.type === 'StringEnumTypeAnnotation') {
+        imports.add('#include <cinttypes>');
+      }
+    }
+
+    if (
+      typeAnnotation.type === 'ArrayTypeAnnotation' &&
+      typeAnnotation.elementType.type === 'ReservedPropTypeAnnotation'
+    ) {
+      addImportsForNativeName(typeAnnotation.elementType.name);
+    }
+
+    if (
+      typeAnnotation.type === 'ArrayTypeAnnotation' &&
+      typeAnnotation.elementType.type === 'ObjectTypeAnnotation'
+    ) {
+      const objectProps = typeAnnotation.elementType.properties;
+      const objectImports = getImports(objectProps);
+      const localImports = getLocalImports(objectProps);
+      // $FlowFixMe[method-unbinding] added when improving typing for this parameters
+      objectImports.forEach(imports.add, imports);
+      // $FlowFixMe[method-unbinding] added when improving typing for this parameters
+      localImports.forEach(imports.add, imports);
+    }
+
+    if (typeAnnotation.type === 'ObjectTypeAnnotation') {
+      imports.add('#include <react/renderer/core/propsConversions.h>');
+      const objectImports = getImports(typeAnnotation.properties);
+      const localImports = getLocalImports(typeAnnotation.properties);
+      // $FlowFixMe[method-unbinding] added when improving typing for this parameters
+      objectImports.forEach(imports.add, imports);
+      // $FlowFixMe[method-unbinding] added when improving typing for this parameters
+      localImports.forEach(imports.add, imports);
+    }
+  });
+
+  return imports;
+}
+
+function generateStructsForComponent(componentName: string, component): string {
+  const structs = generateStructs(componentName, component.props, []);
+  const structArray = Array.from(structs.values());
+  if (structArray.length < 1) {
+    return '';
+  }
+  return structArray.join('\n\n');
+}
+
+function generateStructs(
+  componentName: string,
+  properties,
+  nameParts,
+): StructsMap {
+  const structs: StructsMap = new Map();
+  properties.forEach(prop => {
+    const typeAnnotation = prop.typeAnnotation;
+    if (typeAnnotation.type === 'ObjectTypeAnnotation') {
+      // Recursively visit all of the object properties.
+      // Note: this is depth first so that the nested structs are ordered first.
+      const elementProperties = typeAnnotation.properties;
+      const nestedStructs = generateStructs(
+        componentName,
+        elementProperties,
+        nameParts.concat([prop.name]),
+      );
+      nestedStructs.forEach(function(value, key) {
+        structs.set(key, value);
+      });
+
+      generateStruct(
+        structs,
+        componentName,
+        nameParts.concat([prop.name]),
+        typeAnnotation.properties,
+      );
+    }
+
+    if (
+      prop.typeAnnotation.type === 'ArrayTypeAnnotation' &&
+      prop.typeAnnotation.elementType.type === 'ObjectTypeAnnotation'
+    ) {
+      // Recursively visit all of the object properties.
+      // Note: this is depth first so that the nested structs are ordered first.
+      const elementProperties = prop.typeAnnotation.elementType.properties;
+      const nestedStructs = generateStructs(
+        componentName,
+        elementProperties,
+        nameParts.concat([prop.name]),
+      );
+      nestedStructs.forEach(function(value, key) {
+        structs.set(key, value);
+      });
+
+      // Generate this struct and its conversion function.
+      generateStruct(
+        structs,
+        componentName,
+        nameParts.concat([prop.name]),
+        elementProperties,
+      );
+
+      // Generate the conversion function for std:vector<Object>.
+      // Note: This needs to be at the end since it references the struct above.
+      structs.set(
+        `${[componentName, ...nameParts.concat([prop.name])].join(
+          '',
+        )}ArrayStruct`,
+        arrayConversionFunction.replace(
+          /::_STRUCT_NAME_::/g,
+          generateStructName(componentName, nameParts.concat([prop.name])),
+        ),
+      );
+    }
+    if (
+      prop.typeAnnotation.type === 'ArrayTypeAnnotation' &&
+      prop.typeAnnotation.elementType.type === 'ArrayTypeAnnotation' &&
+      prop.typeAnnotation.elementType.elementType.type ===
+        'ObjectTypeAnnotation'
+    ) {
+      // Recursively visit all of the object properties.
+      // Note: this is depth first so that the nested structs are ordered first.
+      const elementProperties =
+        prop.typeAnnotation.elementType.elementType.properties;
+      const nestedStructs = generateStructs(
+        componentName,
+        elementProperties,
+        nameParts.concat([prop.name]),
+      );
+      nestedStructs.forEach(function(value, key) {
+        structs.set(key, value);
+      });
+
+      // Generate this struct and its conversion function.
+      generateStruct(
+        structs,
+        componentName,
+        nameParts.concat([prop.name]),
+        elementProperties,
+      );
+
+      // Generate the conversion function for std:vector<Object>.
+      // Note: This needs to be at the end since it references the struct above.
+      structs.set(
+        `${[componentName, ...nameParts.concat([prop.name])].join(
+          '',
+        )}ArrayArrayStruct`,
+        doubleArrayConversionFunction.replace(
+          /::_STRUCT_NAME_::/g,
+          generateStructName(componentName, nameParts.concat([prop.name])),
+        ),
+      );
+    }
+  });
+
+  return structs;
+}
+
+function generateStruct(
+  structs: StructsMap,
+  componentName: string,
+  nameParts: $ReadOnlyArray<string>,
+  properties: $ReadOnlyArray<NamedShape<PropTypeAnnotation>>,
+): void {
+  const structNameParts = nameParts;
+  const structName = generateStructName(componentName, structNameParts);
+
+  const fields = properties
+    .map(property => {
+      return `${getNativeTypeFromAnnotation(
+        componentName,
+        property,
+        structNameParts,
+      )} ${property.name};`;
+    })
+    .join('\n' + '  ');
+
+  properties.forEach((property: NamedShape<PropTypeAnnotation>) => {
+    const name = property.name;
+    switch (property.typeAnnotation.type) {
+      case 'BooleanTypeAnnotation':
+        return;
+      case 'StringTypeAnnotation':
+        return;
+      case 'Int32TypeAnnotation':
+        return;
+      case 'DoubleTypeAnnotation':
+        return;
+      case 'FloatTypeAnnotation':
+        return;
+      case 'ReservedPropTypeAnnotation':
+        return;
+      case 'ArrayTypeAnnotation':
+        return;
+      case 'StringEnumTypeAnnotation':
+        return;
+      case 'Int32EnumTypeAnnotation':
+        return;
+      case 'DoubleTypeAnnotation':
+        return;
+      case 'ObjectTypeAnnotation':
+        const props = property.typeAnnotation.properties;
+        if (props == null) {
+          throw new Error(
+            `Properties are expected for ObjectTypeAnnotation (see ${name} in ${componentName})`,
+          );
+        }
+        generateStruct(structs, componentName, nameParts.concat([name]), props);
+        return;
+      default:
+        (property.typeAnnotation.type: empty);
+        throw new Error(
+          `Received invalid component property type ${property.typeAnnotation.type}`,
+        );
+    }
+  });
+
+  const fromCases = properties
+    .map(property => {
+      const variable = property.name;
+      return `auto ${variable} = map.find("${property.name}");
+  if (${variable} != map.end()) {
+    fromRawValue(context, ${variable}->second, result.${variable});
+  }`;
+    })
+    .join('\n  ');
+
+  structs.set(
+    structName,
+    structTemplate
+      .replace(/::_STRUCT_NAME_::/g, structName)
+      .replace('::_FIELDS_::', fields)
+      .replace('::_FROM_CASES_::', fromCases),
+  );
+}
+
+module.exports = {
+  generate(
+    libraryName: string,
+    schema: SchemaType,
+    packageName?: string,
+    assumeNonnull: boolean = false,
+  ): FilesOutput {
+    const fileName = 'Props.h';
+
+    const allImports: Set<string> = new Set();
+
+    const componentClasses = Object.keys(schema.modules)
+      .map(moduleName => {
+        const module = schema.modules[moduleName];
+        if (module.type !== 'Component') {
+          return;
+        }
+
+        const {components} = module;
+        // No components in this module
+        if (components == null) {
+          return null;
+        }
+
+        return Object.keys(components)
+          .filter(componentName => {
+            const component = components[componentName];
+            return !(
+              component.excludedPlatforms &&
+              component.excludedPlatforms.includes('iOS')
+            );
+          })
+          .map(componentName => {
+            const component = components[componentName];
+
+            const newName = `${componentName}Props`;
+            const structString = generateStructsForComponent(
+              componentName,
+              component,
+            );
+            const enumString = generateEnumString(componentName, component);
+            const propsString = generatePropsString(
+              componentName,
+              component.props,
+            );
+            const extendString = getClassExtendString(component);
+            const extendsImports = getExtendsImports(component.extendsProps);
+            const imports = getLocalImports(component.props);
+
+            // $FlowFixMe[method-unbinding] added when improving typing for this parameters
+            extendsImports.forEach(allImports.add, allImports);
+            // $FlowFixMe[method-unbinding] added when improving typing for this parameters
+            imports.forEach(allImports.add, allImports);
+
+            const replacedTemplate = classTemplate
+              .replace('::_ENUMS_::', enumString)
+              .replace('::_STRUCTS_::', structString)
+              .replace(/::_CLASSNAME_::/g, newName)
+              .replace('::_EXTEND_CLASSES_::', extendString)
+              .replace('::_PROPS_::', propsString)
+              .trim();
+
+            return replacedTemplate;
+          })
+          .join('\n\n');
+      })
+      .filter(Boolean)
+      .join('\n\n');
+
+    const replacedTemplate = template
+      .replace(/::_COMPONENT_CLASSES_::/g, componentClasses)
+      .replace(
+        '::_IMPORTS_::',
+        Array.from(allImports)
+          .sort()
+          .join('\n'),
+      );
+
+    return new Map([[fileName, replacedTemplate]]);
+  },
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/GeneratePropsJavaDelegate.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GeneratePropsJavaDelegate.js
new file mode 100644
index 0000000..9f35f8e
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GeneratePropsJavaDelegate.js
@@ -0,0 +1,331 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+import type {
+  NamedShape,
+  CommandTypeAnnotation,
+  ComponentShape,
+  PropTypeAnnotation,
+  SchemaType,
+} from '../../CodegenSchema';
+const {
+  getImports,
+  toSafeJavaString,
+  getInterfaceJavaClassName,
+  getDelegateJavaClassName,
+} = require('./JavaHelpers');
+
+// File path -> contents
+type FilesOutput = Map<string, string>;
+
+const template = `/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* ${'@'}generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package ::_PACKAGE_NAME_::;
+
+::_IMPORTS_::
+
+public class ::_CLASSNAME_::<T extends ::_EXTEND_CLASSES_::, U extends BaseViewManagerInterface<T> & ::_INTERFACE_CLASSNAME_::<T>> extends BaseViewManagerDelegate<T, U> {
+  public ::_CLASSNAME_::(U viewManager) {
+    super(viewManager);
+  }
+  ::_METHODS_::
+}
+`;
+
+const propSetterTemplate = `
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    ::_PROP_CASES_::
+  }
+`;
+
+const commandsTemplate = `
+  @Override
+  public void receiveCommand(T view, String commandName, ReadableArray args) {
+    switch (commandName) {
+      ::_COMMAND_CASES_::
+    }
+  }
+`;
+
+function getJavaValueForProp(
+  prop: NamedShape<PropTypeAnnotation>,
+  componentName: string,
+): string {
+  const typeAnnotation = prop.typeAnnotation;
+
+  switch (typeAnnotation.type) {
+    case 'BooleanTypeAnnotation':
+      if (typeAnnotation.default === null) {
+        return 'value == null ? null : (Boolean) value';
+      } else {
+        return `value == null ? ${typeAnnotation.default.toString()} : (boolean) value`;
+      }
+    case 'StringTypeAnnotation':
+      const defaultValueString =
+        typeAnnotation.default === null
+          ? 'null'
+          : `"${typeAnnotation.default}"`;
+      return `value == null ? ${defaultValueString} : (String) value`;
+    case 'Int32TypeAnnotation':
+      return `value == null ? ${typeAnnotation.default} : ((Double) value).intValue()`;
+    case 'DoubleTypeAnnotation':
+      if (prop.optional) {
+        return `value == null ? ${typeAnnotation.default}f : ((Double) value).doubleValue()`;
+      } else {
+        return 'value == null ? Double.NaN : ((Double) value).doubleValue()';
+      }
+    case 'FloatTypeAnnotation':
+      if (typeAnnotation.default === null) {
+        return 'value == null ? null : ((Double) value).floatValue()';
+      } else if (prop.optional) {
+        return `value == null ? ${typeAnnotation.default}f : ((Double) value).floatValue()`;
+      } else {
+        return 'value == null ? Float.NaN : ((Double) value).floatValue()';
+      }
+    case 'ReservedPropTypeAnnotation':
+      switch (typeAnnotation.name) {
+        case 'ColorPrimitive':
+          return 'ColorPropConverter.getColor(value, view.getContext())';
+        case 'ImageSourcePrimitive':
+          return '(ReadableMap) value';
+        case 'PointPrimitive':
+          return '(ReadableMap) value';
+        case 'EdgeInsetsPrimitive':
+          return '(ReadableMap) value';
+        default:
+          (typeAnnotation.name: empty);
+          throw new Error('Received unknown ReservedPropTypeAnnotation');
+      }
+    case 'ArrayTypeAnnotation': {
+      return '(ReadableArray) value';
+    }
+    case 'ObjectTypeAnnotation': {
+      return '(ReadableMap) value';
+    }
+    case 'StringEnumTypeAnnotation':
+      return '(String) value';
+    case 'Int32EnumTypeAnnotation':
+      return `value == null ? ${typeAnnotation.default} : ((Double) value).intValue()`;
+    default:
+      (typeAnnotation: empty);
+      throw new Error('Received invalid typeAnnotation');
+  }
+}
+
+function generatePropCasesString(
+  component: ComponentShape,
+  componentName: string,
+) {
+  if (component.props.length === 0) {
+    return 'super.setProperty(view, propName, value);';
+  }
+
+  const cases = component.props
+    .map(prop => {
+      return `case "${prop.name}":
+        mViewManager.set${toSafeJavaString(
+          prop.name,
+        )}(view, ${getJavaValueForProp(prop, componentName)});
+        break;`;
+    })
+    .join('\n' + '      ');
+
+  return `switch (propName) {
+      ${cases}
+      default:
+        super.setProperty(view, propName, value);
+    }`;
+}
+
+function getCommandArgJavaType(param, index) {
+  const {typeAnnotation} = param;
+
+  switch (typeAnnotation.type) {
+    case 'ReservedTypeAnnotation':
+      switch (typeAnnotation.name) {
+        case 'RootTag':
+          return `args.getDouble(${index})`;
+        default:
+          (typeAnnotation.name: empty);
+          throw new Error(`Receieved invalid type: ${typeAnnotation.name}`);
+      }
+    case 'BooleanTypeAnnotation':
+      return `args.getBoolean(${index})`;
+    case 'DoubleTypeAnnotation':
+      return `args.getDouble(${index})`;
+    case 'FloatTypeAnnotation':
+      return `(float) args.getDouble(${index})`;
+    case 'Int32TypeAnnotation':
+      return `args.getInt(${index})`;
+    case 'StringTypeAnnotation':
+      return `args.getString(${index})`;
+    default:
+      (typeAnnotation.type: empty);
+      throw new Error(`Receieved invalid type: ${typeAnnotation.type}`);
+  }
+}
+
+function getCommandArguments(
+  command: NamedShape<CommandTypeAnnotation>,
+): string {
+  return [
+    'view',
+    ...command.typeAnnotation.params.map(getCommandArgJavaType),
+  ].join(', ');
+}
+
+function generateCommandCasesString(
+  component: ComponentShape,
+  componentName: string,
+) {
+  if (component.commands.length === 0) {
+    return null;
+  }
+
+  const commandMethods = component.commands
+    .map(command => {
+      return `case "${command.name}":
+        mViewManager.${toSafeJavaString(
+          command.name,
+          false,
+        )}(${getCommandArguments(command)});
+        break;`;
+    })
+    .join('\n' + '      ');
+
+  return commandMethods;
+}
+
+function getClassExtendString(component): string {
+  const extendString = component.extendsProps
+    .map(extendProps => {
+      switch (extendProps.type) {
+        case 'ReactNativeBuiltInType':
+          switch (extendProps.knownTypeName) {
+            case 'ReactNativeCoreViewProps':
+              return 'View';
+            default:
+              (extendProps.knownTypeName: empty);
+              throw new Error('Invalid knownTypeName');
+          }
+        default:
+          (extendProps.type: empty);
+          throw new Error('Invalid extended type');
+      }
+    })
+    .join('');
+
+  return extendString;
+}
+
+function getDelegateImports(component) {
+  const imports = getImports(component, 'delegate');
+  // The delegate needs ReadableArray for commands always.
+  // The interface doesn't always need it
+  if (component.commands.length > 0) {
+    imports.add('import com.facebook.react.bridge.ReadableArray;');
+  }
+  imports.add('import androidx.annotation.Nullable;');
+  imports.add('import com.facebook.react.uimanager.BaseViewManagerDelegate;');
+  imports.add('import com.facebook.react.uimanager.BaseViewManagerInterface;');
+
+  return imports;
+}
+
+function generateMethods(propsString, commandsString): string {
+  return [
+    propSetterTemplate.trim().replace('::_PROP_CASES_::', propsString),
+    commandsString != null
+      ? commandsTemplate.trim().replace('::_COMMAND_CASES_::', commandsString)
+      : '',
+  ]
+    .join('\n\n  ')
+    .trimRight();
+}
+
+module.exports = {
+  generate(
+    libraryName: string,
+    schema: SchemaType,
+    packageName?: string,
+    assumeNonnull: boolean = false,
+  ): FilesOutput {
+    // TODO: This doesn't support custom package name yet.
+    const normalizedPackageName = 'com.facebook.react.viewmanagers';
+    const outputDir = `java/${normalizedPackageName.replace(/\./g, '/')}`;
+
+    const files = new Map();
+    Object.keys(schema.modules).forEach(moduleName => {
+      const module = schema.modules[moduleName];
+      if (module.type !== 'Component') {
+        return;
+      }
+
+      const {components} = module;
+      // No components in this module
+      if (components == null) {
+        return;
+      }
+
+      return Object.keys(components)
+        .filter(componentName => {
+          const component = components[componentName];
+          return !(
+            component.excludedPlatforms &&
+            component.excludedPlatforms.includes('android')
+          );
+        })
+        .forEach(componentName => {
+          const component = components[componentName];
+          const className = getDelegateJavaClassName(componentName);
+          const interfaceClassName = getInterfaceJavaClassName(componentName);
+
+          const imports = getDelegateImports(component);
+          const propsString = generatePropCasesString(component, componentName);
+          const commandsString = generateCommandCasesString(
+            component,
+            componentName,
+          );
+          const extendString = getClassExtendString(component);
+
+          const replacedTemplate = template
+            .replace(
+              /::_IMPORTS_::/g,
+              Array.from(imports)
+                .sort()
+                .join('\n'),
+            )
+            .replace(/::_PACKAGE_NAME_::/g, normalizedPackageName)
+            .replace(/::_CLASSNAME_::/g, className)
+            .replace('::_EXTEND_CLASSES_::', extendString)
+            .replace('::_PROP_CASES_::', propsString)
+            .replace(
+              '::_METHODS_::',
+              generateMethods(propsString, commandsString),
+            )
+            .replace(/::_INTERFACE_CLASSNAME_::/g, interfaceClassName);
+
+          files.set(`${outputDir}/${className}.java`, replacedTemplate);
+        });
+    });
+
+    return files;
+  },
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/GeneratePropsJavaInterface.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GeneratePropsJavaInterface.js
new file mode 100644
index 0000000..fd4e891
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GeneratePropsJavaInterface.js
@@ -0,0 +1,278 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+import type {
+  NamedShape,
+  CommandTypeAnnotation,
+  ComponentShape,
+  PropTypeAnnotation,
+  SchemaType,
+} from '../../CodegenSchema';
+const {
+  getImports,
+  toSafeJavaString,
+  getInterfaceJavaClassName,
+} = require('./JavaHelpers');
+
+// File path -> contents
+type FilesOutput = Map<string, string>;
+
+const template = `/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* ${'@'}generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package ::_PACKAGE_NAME_::;
+
+::_IMPORTS_::
+
+public interface ::_CLASSNAME_::<T extends ::_EXTEND_CLASSES_::> {
+  ::_METHODS_::
+}
+`;
+
+function addNullable(imports) {
+  imports.add('import androidx.annotation.Nullable;');
+}
+
+function getJavaValueForProp(
+  prop: NamedShape<PropTypeAnnotation>,
+  imports,
+): string {
+  const typeAnnotation = prop.typeAnnotation;
+
+  switch (typeAnnotation.type) {
+    case 'BooleanTypeAnnotation':
+      if (typeAnnotation.default === null) {
+        addNullable(imports);
+        return '@Nullable Boolean value';
+      } else {
+        return 'boolean value';
+      }
+    case 'StringTypeAnnotation':
+      addNullable(imports);
+      return '@Nullable String value';
+    case 'Int32TypeAnnotation':
+      return 'int value';
+    case 'DoubleTypeAnnotation':
+      return 'double value';
+    case 'FloatTypeAnnotation':
+      if (typeAnnotation.default === null) {
+        addNullable(imports);
+        return '@Nullable Float value';
+      } else {
+        return 'float value';
+      }
+    case 'ReservedPropTypeAnnotation':
+      switch (typeAnnotation.name) {
+        case 'ColorPrimitive':
+          addNullable(imports);
+          return '@Nullable Integer value';
+        case 'ImageSourcePrimitive':
+          addNullable(imports);
+          return '@Nullable ReadableMap value';
+        case 'PointPrimitive':
+          addNullable(imports);
+          return '@Nullable ReadableMap value';
+        case 'EdgeInsetsPrimitive':
+          addNullable(imports);
+          return '@Nullable ReadableMap value';
+        default:
+          (typeAnnotation.name: empty);
+          throw new Error('Received unknown ReservedPropTypeAnnotation');
+      }
+    case 'ArrayTypeAnnotation': {
+      addNullable(imports);
+      return '@Nullable ReadableArray value';
+    }
+    case 'ObjectTypeAnnotation': {
+      addNullable(imports);
+      return '@Nullable ReadableMap value';
+    }
+    case 'StringEnumTypeAnnotation':
+      addNullable(imports);
+      return '@Nullable String value';
+    case 'Int32EnumTypeAnnotation':
+      addNullable(imports);
+      return '@Nullable Integer value';
+    default:
+      (typeAnnotation: empty);
+      throw new Error('Received invalid typeAnnotation');
+  }
+}
+
+function generatePropsString(component: ComponentShape, imports) {
+  if (component.props.length === 0) {
+    return '// No props';
+  }
+
+  return component.props
+    .map(prop => {
+      return `void set${toSafeJavaString(
+        prop.name,
+      )}(T view, ${getJavaValueForProp(prop, imports)});`;
+    })
+    .join('\n' + '  ');
+}
+
+function getCommandArgJavaType(param) {
+  const {typeAnnotation} = param;
+
+  switch (typeAnnotation.type) {
+    case 'ReservedTypeAnnotation':
+      switch (typeAnnotation.name) {
+        case 'RootTag':
+          return 'double';
+        default:
+          (typeAnnotation.name: empty);
+          throw new Error(`Receieved invalid type: ${typeAnnotation.name}`);
+      }
+    case 'BooleanTypeAnnotation':
+      return 'boolean';
+    case 'DoubleTypeAnnotation':
+      return 'double';
+    case 'FloatTypeAnnotation':
+      return 'float';
+    case 'Int32TypeAnnotation':
+      return 'int';
+    case 'StringTypeAnnotation':
+      return 'String';
+    default:
+      (typeAnnotation.type: empty);
+      throw new Error('Receieved invalid typeAnnotation');
+  }
+}
+
+function getCommandArguments(
+  command: NamedShape<CommandTypeAnnotation>,
+  componentName: string,
+): string {
+  return [
+    'T view',
+    ...command.typeAnnotation.params.map(param => {
+      const commandArgJavaType = getCommandArgJavaType(param);
+
+      return `${commandArgJavaType} ${param.name}`;
+    }),
+  ].join(', ');
+}
+
+function generateCommandsString(
+  component: ComponentShape,
+  componentName: string,
+) {
+  return component.commands
+    .map(command => {
+      const safeJavaName = toSafeJavaString(command.name, false);
+
+      return `void ${safeJavaName}(${getCommandArguments(
+        command,
+        componentName,
+      )});`;
+    })
+    .join('\n' + '  ');
+}
+
+function getClassExtendString(component): string {
+  const extendString = component.extendsProps
+    .map(extendProps => {
+      switch (extendProps.type) {
+        case 'ReactNativeBuiltInType':
+          switch (extendProps.knownTypeName) {
+            case 'ReactNativeCoreViewProps':
+              return 'View';
+            default:
+              (extendProps.knownTypeName: empty);
+              throw new Error('Invalid knownTypeName');
+          }
+        default:
+          (extendProps.type: empty);
+          throw new Error('Invalid extended type');
+      }
+    })
+    .join('');
+
+  return extendString;
+}
+
+module.exports = {
+  generate(
+    libraryName: string,
+    schema: SchemaType,
+    packageName?: string,
+    assumeNonnull: boolean = false,
+  ): FilesOutput {
+    // TODO: This doesn't support custom package name yet.
+    const normalizedPackageName = 'com.facebook.react.viewmanagers';
+    const outputDir = `java/${normalizedPackageName.replace(/\./g, '/')}`;
+
+    const files = new Map();
+    Object.keys(schema.modules).forEach(moduleName => {
+      const module = schema.modules[moduleName];
+      if (module.type !== 'Component') {
+        return;
+      }
+
+      const {components} = module;
+
+      // No components in this module
+      if (components == null) {
+        return;
+      }
+
+      return Object.keys(components)
+        .filter(componentName => {
+          const component = components[componentName];
+          return !(
+            component.excludedPlatforms &&
+            component.excludedPlatforms.includes('android')
+          );
+        })
+        .forEach(componentName => {
+          const component = components[componentName];
+          const className = getInterfaceJavaClassName(componentName);
+
+          const imports = getImports(component, 'interface');
+          const propsString = generatePropsString(component, imports);
+          const commandsString = generateCommandsString(
+            component,
+            componentName,
+          );
+          const extendString = getClassExtendString(component);
+
+          const replacedTemplate = template
+            .replace(
+              /::_IMPORTS_::/g,
+              Array.from(imports)
+                .sort()
+                .join('\n'),
+            )
+            .replace(/::_PACKAGE_NAME_::/g, normalizedPackageName)
+            .replace(/::_CLASSNAME_::/g, className)
+            .replace('::_EXTEND_CLASSES_::', extendString)
+            .replace(
+              '::_METHODS_::',
+              [propsString, commandsString].join('\n' + '  ').trimRight(),
+            )
+            .replace('::_COMMAND_HANDLERS_::', commandsString);
+
+          files.set(`${outputDir}/${className}.java`, replacedTemplate);
+        });
+    });
+
+    return files;
+  },
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/GeneratePropsJavaPojo/PojoCollector.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GeneratePropsJavaPojo/PojoCollector.js
new file mode 100644
index 0000000..f80ad58
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GeneratePropsJavaPojo/PojoCollector.js
@@ -0,0 +1,187 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+import type {
+  ReservedPropTypeAnnotation,
+  NamedShape,
+  ObjectTypeAnnotation,
+  BooleanTypeAnnotation,
+  StringTypeAnnotation,
+  DoubleTypeAnnotation,
+  FloatTypeAnnotation,
+  Int32TypeAnnotation,
+  PropTypeAnnotation,
+} from '../../../CodegenSchema';
+
+const {capitalize} = require('../../Utils');
+
+export type Pojo = {
+  name: string,
+  namespace: string,
+  properties: $ReadOnlyArray<PojoProperty>,
+};
+
+export type PojoProperty = NamedShape<PojoTypeAnnotation>;
+
+export type PojoTypeAliasAnnotation = {
+  type: 'PojoTypeAliasTypeAnnotation',
+  name: string,
+};
+
+export type PojoTypeAnnotation =
+  | $ReadOnly<{
+      type: 'BooleanTypeAnnotation',
+      default: boolean | null,
+    }>
+  | $ReadOnly<{
+      type: 'StringTypeAnnotation',
+      default: string | null,
+    }>
+  | $ReadOnly<{
+      type: 'DoubleTypeAnnotation',
+      default: number,
+    }>
+  | $ReadOnly<{
+      type: 'FloatTypeAnnotation',
+      default: number | null,
+    }>
+  | $ReadOnly<{
+      type: 'Int32TypeAnnotation',
+      default: number,
+    }>
+  | $ReadOnly<{
+      type: 'StringEnumTypeAnnotation',
+      default: string,
+      options: $ReadOnlyArray<string>,
+    }>
+  | $ReadOnly<{
+      type: 'Int32EnumTypeAnnotation',
+      default: number,
+      options: $ReadOnlyArray<number>,
+    }>
+  | ReservedPropTypeAnnotation
+  | PojoTypeAliasAnnotation
+  | $ReadOnly<{
+      type: 'ArrayTypeAnnotation',
+      elementType:
+        | BooleanTypeAnnotation
+        | StringTypeAnnotation
+        | DoubleTypeAnnotation
+        | FloatTypeAnnotation
+        | Int32TypeAnnotation
+        | $ReadOnly<{
+            type: 'StringEnumTypeAnnotation',
+            default: string,
+            options: $ReadOnlyArray<string>,
+          }>
+        | PojoTypeAliasAnnotation
+        | ReservedPropTypeAnnotation
+        | $ReadOnly<{
+            type: 'ArrayTypeAnnotation',
+            elementType: PojoTypeAliasAnnotation,
+          }>,
+    }>;
+
+class PojoCollector {
+  _pojos: Map<string, Pojo> = new Map();
+  process(
+    namespace: string,
+    pojoName: string,
+    typeAnnotation: PropTypeAnnotation,
+  ): PojoTypeAnnotation {
+    switch (typeAnnotation.type) {
+      case 'ObjectTypeAnnotation': {
+        this._insertPojo(namespace, pojoName, typeAnnotation);
+        return {
+          type: 'PojoTypeAliasTypeAnnotation',
+          name: pojoName,
+        };
+      }
+      case 'ArrayTypeAnnotation': {
+        const arrayTypeAnnotation = typeAnnotation;
+        // TODO: Flow assumes elementType can be any. Fix this.
+        const elementType: $PropertyType<
+          typeof arrayTypeAnnotation,
+          'elementType',
+        > = arrayTypeAnnotation.elementType;
+
+        const pojoElementType = (() => {
+          switch (elementType.type) {
+            case 'ObjectTypeAnnotation': {
+              this._insertPojo(namespace, `${pojoName}Element`, elementType);
+              return {
+                type: 'PojoTypeAliasTypeAnnotation',
+                name: `${pojoName}Element`,
+              };
+            }
+            case 'ArrayTypeAnnotation': {
+              const {elementType: objectTypeAnnotation} = elementType;
+              this._insertPojo(
+                namespace,
+                `${pojoName}ElementElement`,
+                objectTypeAnnotation,
+              );
+              return {
+                type: 'ArrayTypeAnnotation',
+                elementType: {
+                  type: 'PojoTypeAliasTypeAnnotation',
+                  name: `${pojoName}ElementElement`,
+                },
+              };
+            }
+            default: {
+              return elementType;
+            }
+          }
+        })();
+
+        return {
+          type: 'ArrayTypeAnnotation',
+          elementType: pojoElementType,
+        };
+      }
+      default:
+        return typeAnnotation;
+    }
+  }
+
+  _insertPojo(
+    namespace: string,
+    pojoName: string,
+    objectTypeAnnotation: ObjectTypeAnnotation<PropTypeAnnotation>,
+  ) {
+    const properties = objectTypeAnnotation.properties.map(property => {
+      const propertyPojoName = pojoName + capitalize(property.name);
+
+      return {
+        ...property,
+        typeAnnotation: this.process(
+          namespace,
+          propertyPojoName,
+          property.typeAnnotation,
+        ),
+      };
+    });
+
+    this._pojos.set(pojoName, {
+      name: pojoName,
+      namespace,
+      properties,
+    });
+  }
+
+  getAllPojos(): $ReadOnlyArray<Pojo> {
+    return [...this._pojos.values()];
+  }
+}
+
+module.exports = PojoCollector;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/GeneratePropsJavaPojo/index.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GeneratePropsJavaPojo/index.js
new file mode 100644
index 0000000..f5fa8c7
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GeneratePropsJavaPojo/index.js
@@ -0,0 +1,80 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+import type {SchemaType} from '../../../CodegenSchema';
+
+const PojoCollector = require('./PojoCollector');
+const {capitalize} = require('../../Utils');
+const {serializePojo} = require('./serializePojo');
+
+type FilesOutput = Map<string, string>;
+
+module.exports = {
+  generate(
+    libraryName: string,
+    schema: SchemaType,
+    packageName?: string,
+  ): FilesOutput {
+    const pojoCollector = new PojoCollector();
+    const basePackageName = 'com.facebook.react.viewmanagers';
+
+    Object.keys(schema.modules).forEach(hasteModuleName => {
+      const module = schema.modules[hasteModuleName];
+      if (module.type !== 'Component') {
+        return;
+      }
+
+      const {components} = module;
+      // No components in this module
+      if (components == null) {
+        return null;
+      }
+
+      Object.keys(components)
+        .filter(componentName => {
+          const component = components[componentName];
+          return !(
+            component.excludedPlatforms &&
+            component.excludedPlatforms.includes('android')
+          );
+        })
+        .forEach(componentName => {
+          const component = components[componentName];
+          if (component == null) {
+            return;
+          }
+
+          const {props} = component;
+
+          pojoCollector.process(
+            capitalize(hasteModuleName),
+            `${capitalize(componentName)}Props`,
+            {
+              type: 'ObjectTypeAnnotation',
+              properties: props,
+            },
+          );
+        });
+    });
+
+    const pojoDir = basePackageName.split('.').join('/');
+
+    return new Map(
+      pojoCollector.getAllPojos().map(pojo => {
+        return [
+          `java/${pojoDir}/${pojo.namespace}/${pojo.name}.java`,
+          serializePojo(pojo, basePackageName),
+        ];
+      }),
+    );
+  },
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/GeneratePropsJavaPojo/serializePojo.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GeneratePropsJavaPojo/serializePojo.js
new file mode 100644
index 0000000..72829ec
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GeneratePropsJavaPojo/serializePojo.js
@@ -0,0 +1,285 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+import type {Pojo, PojoProperty, PojoTypeAnnotation} from './PojoCollector';
+const {capitalize} = require('../../Utils');
+
+type ImportCollector = ($import: string) => void;
+
+function toJavaType(
+  typeAnnotation: PojoTypeAnnotation,
+  addImport: ImportCollector,
+): string {
+  const importNullable = () => addImport('androidx.annotation.Nullable');
+  const importReadableMap = () =>
+    addImport('com.facebook.react.bridge.ReadableMap');
+  const importArrayList = () => addImport('java.util.ArrayList');
+  switch (typeAnnotation.type) {
+    /**
+     * Primitives
+     */
+    case 'BooleanTypeAnnotation': {
+      if (typeAnnotation.default === null) {
+        importNullable();
+        return '@Nullable Boolean';
+      } else {
+        return 'boolean';
+      }
+    }
+    case 'StringTypeAnnotation': {
+      importNullable();
+      return '@Nullable String';
+    }
+    case 'DoubleTypeAnnotation': {
+      return 'double';
+    }
+    case 'FloatTypeAnnotation': {
+      if (typeAnnotation.default === null) {
+        importNullable();
+        return '@Nullable Float';
+      } else {
+        return 'float';
+      }
+    }
+    case 'Int32TypeAnnotation': {
+      return 'int';
+    }
+
+    /**
+     * Enums
+     */
+    // TODO: Make StringEnumTypeAnnotation type-safe?
+    case 'StringEnumTypeAnnotation':
+      importNullable();
+      return '@Nullable String';
+    // TODO: Make Int32EnumTypeAnnotation type-safe?
+    case 'Int32EnumTypeAnnotation':
+      importNullable();
+      return '@Nullable Integer';
+
+    /**
+     * Reserved types
+     */
+    case 'ReservedPropTypeAnnotation': {
+      switch (typeAnnotation.name) {
+        case 'ColorPrimitive':
+          importNullable();
+          return '@Nullable Integer';
+
+        // TODO: Make ImageSourcePrimitive type-safe
+        case 'ImageSourcePrimitive':
+          importNullable();
+          importReadableMap();
+          return '@Nullable ReadableMap';
+
+        // TODO: Make PointPrimitive type-safe
+        case 'PointPrimitive':
+          importNullable();
+          importReadableMap();
+          return '@Nullable ReadableMap';
+
+        // TODO: Make EdgeInsetsPrimitive type-safe
+        case 'EdgeInsetsPrimitive':
+          importNullable();
+          importReadableMap();
+          return '@Nullable ReadableMap';
+        default:
+          (typeAnnotation.name: empty);
+          throw new Error(
+            `Received unknown ReservedPropTypeAnnotation ${typeAnnotation.name}`,
+          );
+      }
+    }
+
+    /**
+     * Other Pojo objects
+     */
+    case 'PojoTypeAliasTypeAnnotation': {
+      return typeAnnotation.name;
+    }
+
+    /**
+     * Arrays
+     */
+    case 'ArrayTypeAnnotation': {
+      const {elementType} = typeAnnotation;
+
+      const elementTypeString = (() => {
+        switch (elementType.type) {
+          /**
+           * Primitives
+           */
+          case 'BooleanTypeAnnotation': {
+            return 'Boolean';
+          }
+          case 'StringTypeAnnotation': {
+            return 'String';
+          }
+          case 'DoubleTypeAnnotation': {
+            return 'Double';
+          }
+          case 'FloatTypeAnnotation': {
+            return 'Float';
+          }
+          case 'Int32TypeAnnotation': {
+            return 'Integer';
+          }
+
+          /**
+           * Enums
+           */
+          // TODO: Make StringEnums type-safe in Pojos
+          case 'StringEnumTypeAnnotation': {
+            return 'String';
+          }
+
+          /**
+           * Other Pojo objects
+           */
+          case 'PojoTypeAliasTypeAnnotation': {
+            return elementType.name;
+          }
+
+          /**
+           * Reserved types
+           */
+          case 'ReservedPropTypeAnnotation': {
+            switch (elementType.name) {
+              case 'ColorPrimitive':
+                return 'Integer';
+
+              // TODO: Make ImageSourcePrimitive type-safe
+              case 'ImageSourcePrimitive':
+                importReadableMap();
+                return 'ReadableMap';
+
+              // TODO: Make PointPrimitive type-safe
+              case 'PointPrimitive':
+                importReadableMap();
+                return 'ReadableMap';
+
+              // TODO: Make EdgeInsetsPrimitive type-safe
+              case 'EdgeInsetsPrimitive':
+                importReadableMap();
+                return 'ReadableMap';
+              default:
+                (elementType.name: empty);
+                throw new Error(
+                  `Received unknown ReservedPropTypeAnnotation ${elementType.name}`,
+                );
+            }
+          }
+
+          // Arrays
+          case 'ArrayTypeAnnotation': {
+            const {elementType: pojoTypeAliasTypeAnnotation} = elementType;
+
+            importArrayList();
+            return `ArrayList<${pojoTypeAliasTypeAnnotation.name}>`;
+          }
+          default: {
+            (elementType.type: empty);
+            throw new Error(
+              `Unrecognized PojoTypeAnnotation Array element type annotation '${typeAnnotation.type}'`,
+            );
+          }
+        }
+      })();
+
+      importArrayList();
+      return `ArrayList<${elementTypeString}>`;
+    }
+
+    default: {
+      (typeAnnotation.type: empty);
+      throw new Error(
+        `Unrecognized PojoTypeAnnotation '${typeAnnotation.type}'`,
+      );
+    }
+  }
+}
+
+function toJavaMemberName(property: PojoProperty): string {
+  return `m${capitalize(property.name)}`;
+}
+
+function toJavaMemberDeclaration(
+  property: PojoProperty,
+  addImport: ImportCollector,
+): string {
+  const type = toJavaType(property.typeAnnotation, addImport);
+  const memberName = toJavaMemberName(property);
+  return `private ${type} ${memberName};`;
+}
+
+function toJavaGetter(property: PojoProperty, addImport: ImportCollector) {
+  const type = toJavaType(property.typeAnnotation, addImport);
+  const getterName = `get${capitalize(property.name)}`;
+  const memberName = toJavaMemberName(property);
+
+  addImport('com.facebook.proguard.annotations.DoNotStrip');
+  return `@DoNotStrip
+public ${type} ${getterName}() {
+  return ${memberName};
+}`;
+}
+
+function serializePojo(pojo: Pojo, basePackageName: string): string {
+  const importSet: Set<string> = new Set();
+  const addImport = ($import: string) => {
+    importSet.add($import);
+  };
+
+  addImport('com.facebook.proguard.annotations.DoNotStrip');
+
+  const indent = ' '.repeat(2);
+
+  const members = pojo.properties
+    .map(property => toJavaMemberDeclaration(property, addImport))
+    .map(member => `${indent}${member}`)
+    .join('\n');
+
+  const getters = pojo.properties
+    .map(property => toJavaGetter(property, addImport))
+    .map(getter =>
+      getter
+        .split('\n')
+        .map(line => `${indent}${line}`)
+        .join('\n'),
+    )
+    .join('\n');
+
+  const imports = [...importSet]
+    .map($import => `import ${$import};`)
+    .sort()
+    .join('\n');
+
+  return `/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* ${'@'}generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package ${basePackageName}.${pojo.namespace};
+${imports === '' ? '' : `\n${imports}\n`}
+@DoNotStrip
+public class ${pojo.name} {
+${members}
+${getters}
+}
+`;
+}
+
+module.exports = {serializePojo};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/GenerateShadowNodeCpp.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GenerateShadowNodeCpp.js
new file mode 100644
index 0000000..4c11da4
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GenerateShadowNodeCpp.js
@@ -0,0 +1,88 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+import type {SchemaType} from '../../CodegenSchema';
+
+// File path -> contents
+type FilesOutput = Map<string, string>;
+
+const template = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * ${'@'}generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/::_LIBRARY_::/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+::_COMPONENT_NAMES_::
+
+} // namespace react
+} // namespace facebook
+`;
+
+const componentTemplate = `
+extern const char ::_CLASSNAME_::ComponentName[] = "::_CLASSNAME_::";
+`.trim();
+
+module.exports = {
+  generate(
+    libraryName: string,
+    schema: SchemaType,
+    packageName?: string,
+    assumeNonnull: boolean = false,
+  ): FilesOutput {
+    const fileName = 'ShadowNodes.cpp';
+
+    const componentNames = Object.keys(schema.modules)
+      .map(moduleName => {
+        const module = schema.modules[moduleName];
+        if (module.type !== 'Component') {
+          return;
+        }
+
+        const {components} = module;
+        // No components in this module
+        if (components == null) {
+          return null;
+        }
+
+        return Object.keys(components)
+          .map(componentName => {
+            if (components[componentName].interfaceOnly === true) {
+              return;
+            }
+            const replacedTemplate = componentTemplate.replace(
+              /::_CLASSNAME_::/g,
+              componentName,
+            );
+
+            return replacedTemplate;
+          })
+          .join('\n');
+      })
+      .filter(Boolean)
+      .join('\n');
+
+    const replacedTemplate = template
+      .replace(/::_COMPONENT_NAMES_::/g, componentNames)
+      .replace('::_LIBRARY_::', libraryName);
+
+    return new Map([[fileName, replacedTemplate]]);
+  },
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/GenerateShadowNodeH.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GenerateShadowNodeH.js
new file mode 100644
index 0000000..c976955
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GenerateShadowNodeH.js
@@ -0,0 +1,114 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+import type {SchemaType} from '../../CodegenSchema';
+
+// File path -> contents
+type FilesOutput = Map<string, string>;
+
+const template = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * ${'@'}generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+::_IMPORTS_::#include <react/renderer/components/::_LIBRARY_::/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+::_COMPONENT_CLASSES_::
+
+} // namespace react
+} // namespace facebook
+`;
+
+const componentTemplate = `
+extern const char ::_CLASSNAME_::ComponentName[];
+
+/*
+ * \`ShadowNode\` for <::_CLASSNAME_::> component.
+ */
+using ::_CLASSNAME_::ShadowNode = ConcreteViewShadowNode<
+    ::_CLASSNAME_::ComponentName,
+    ::_CLASSNAME_::Props::_EVENT_EMITTER_::>;
+`.trim();
+
+module.exports = {
+  generate(
+    libraryName: string,
+    schema: SchemaType,
+    packageName?: string,
+    assumeNonnull: boolean = false,
+  ): FilesOutput {
+    const fileName = 'ShadowNodes.h';
+
+    let hasAnyEvents = false;
+
+    const moduleResults = Object.keys(schema.modules)
+      .map(moduleName => {
+        const module = schema.modules[moduleName];
+        if (module.type !== 'Component') {
+          return;
+        }
+
+        const {components} = module;
+        // No components in this module
+        if (components == null) {
+          return null;
+        }
+
+        return Object.keys(components)
+          .map(componentName => {
+            const component = components[componentName];
+            if (component.interfaceOnly === true) {
+              return;
+            }
+
+            const hasEvents = component.events.length > 0;
+
+            if (hasEvents) {
+              hasAnyEvents = true;
+            }
+
+            const eventEmitter = hasEvents
+              ? `,\n${componentName}EventEmitter`
+              : '';
+
+            const replacedTemplate = componentTemplate
+              .replace(/::_CLASSNAME_::/g, componentName)
+              .replace('::_EVENT_EMITTER_::', eventEmitter);
+
+            return replacedTemplate;
+          })
+          .join('\n\n');
+      })
+      .filter(Boolean)
+      .join('\n\n');
+
+    const eventEmitterImport = `#include <react/renderer/components/${libraryName}/EventEmitters.h>\n`;
+
+    const replacedTemplate = template
+      .replace(/::_COMPONENT_CLASSES_::/g, moduleResults)
+      .replace('::_LIBRARY_::', libraryName)
+      .replace('::_IMPORTS_::', hasAnyEvents ? eventEmitterImport : '');
+
+    return new Map([[fileName, replacedTemplate]]);
+  },
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/GenerateTests.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GenerateTests.js
new file mode 100644
index 0000000..1681fd9
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GenerateTests.js
@@ -0,0 +1,198 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+import type {SchemaType} from '../../CodegenSchema';
+const {getImports, toSafeCppString} = require('./CppHelpers');
+
+type FilesOutput = Map<string, string>;
+type PropValueType = string | number | boolean;
+
+type TestCase = $ReadOnly<{
+  propName: string,
+  propValue: ?PropValueType,
+  testName?: string,
+  raw?: boolean,
+}>;
+
+const fileTemplate = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * ${'@'}generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/::_LIBRARY_NAME_::/Props.h>
+::_IMPORTS_::
+
+using namespace facebook::react;
+::_COMPONENT_TESTS_::
+`;
+
+const testTemplate = `
+TEST(::_COMPONENT_NAME_::_::_TEST_NAME_::, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<::_COMPONENT_NAME_::>();
+  auto const &sourceProps = ::_COMPONENT_NAME_::();
+  auto const &rawProps = RawProps(folly::dynamic::object("::_PROP_NAME_::", ::_PROP_VALUE_::));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  ::_COMPONENT_NAME_::(parserContext, sourceProps, rawProps);
+}
+`;
+
+function getTestCasesForProp(propName, typeAnnotation) {
+  const cases = [];
+  if (typeAnnotation.type === 'StringEnumTypeAnnotation') {
+    typeAnnotation.options.forEach(option =>
+      cases.push({
+        propName,
+        testName: `${propName}_${toSafeCppString(option)}`,
+        propValue: option,
+      }),
+    );
+  } else if (typeAnnotation.type === 'StringTypeAnnotation') {
+    cases.push({
+      propName,
+      propValue:
+        typeAnnotation.default != null && typeAnnotation.default !== ''
+          ? typeAnnotation.default
+          : 'foo',
+    });
+  } else if (typeAnnotation.type === 'BooleanTypeAnnotation') {
+    cases.push({
+      propName: propName,
+      propValue: typeAnnotation.default != null ? typeAnnotation.default : true,
+    });
+    // $FlowFixMe[incompatible-type]
+  } else if (typeAnnotation.type === 'IntegerTypeAnnotation') {
+    cases.push({
+      propName,
+      propValue: typeAnnotation.default || 10,
+    });
+  } else if (typeAnnotation.type === 'FloatTypeAnnotation') {
+    cases.push({
+      propName,
+      propValue: typeAnnotation.default != null ? typeAnnotation.default : 0.1,
+    });
+  } else if (typeAnnotation.type === 'ReservedPropTypeAnnotation') {
+    if (typeAnnotation.name === 'ColorPrimitive') {
+      cases.push({
+        propName,
+        propValue: 1,
+      });
+    } else if (typeAnnotation.name === 'PointPrimitive') {
+      cases.push({
+        propName,
+        propValue: 'folly::dynamic::object("x", 1)("y", 1)',
+        raw: true,
+      });
+    } else if (typeAnnotation.name === 'ImageSourcePrimitive') {
+      cases.push({
+        propName,
+        propValue: 'folly::dynamic::object("url", "testurl")',
+        raw: true,
+      });
+    }
+  }
+
+  return cases;
+}
+
+function generateTestsString(name, component) {
+  function createTest({testName, propName, propValue, raw = false}: TestCase) {
+    const value =
+      !raw && typeof propValue === 'string' ? `"${propValue}"` : propValue;
+
+    return testTemplate
+      .replace(/::_COMPONENT_NAME_::/g, name)
+      .replace(/::_TEST_NAME_::/g, testName != null ? testName : propName)
+      .replace(/::_PROP_NAME_::/g, propName)
+      .replace(/::_PROP_VALUE_::/g, String(value));
+  }
+
+  const testCases = component.props.reduce((cases, prop) => {
+    return cases.concat(getTestCasesForProp(prop.name, prop.typeAnnotation));
+  }, []);
+
+  const baseTest = {
+    testName: 'DoesNotDie',
+    propName: 'xx_invalid_xx',
+    propValue: 'xx_invalid_xx',
+  };
+
+  return [baseTest, ...testCases].map(createTest).join('');
+}
+
+module.exports = {
+  generate(
+    libraryName: string,
+    schema: SchemaType,
+    packageName?: string,
+    assumeNonnull: boolean = false,
+  ): FilesOutput {
+    const fileName = 'Tests.cpp';
+    const allImports = new Set([
+      '#include <react/renderer/core/propsConversions.h>',
+      '#include <react/renderer/core/RawProps.h>',
+      '#include <react/renderer/core/RawPropsParser.h>',
+    ]);
+
+    const componentTests = Object.keys(schema.modules)
+      .map(moduleName => {
+        const module = schema.modules[moduleName];
+        if (module.type !== 'Component') {
+          return;
+        }
+
+        const {components} = module;
+        if (components == null) {
+          return null;
+        }
+
+        return Object.keys(components)
+          .map(componentName => {
+            const component = components[componentName];
+            const name = `${componentName}Props`;
+
+            const imports = getImports(component.props);
+            // $FlowFixMe[method-unbinding] added when improving typing for this parameters
+            imports.forEach(allImports.add, allImports);
+
+            return generateTestsString(name, component);
+          })
+          .join('');
+      })
+      .filter(Boolean)
+      .join('');
+
+    const imports = Array.from(allImports)
+      .sort()
+      .join('\n')
+      .trim();
+
+    const replacedTemplate = fileTemplate
+      .replace(/::_IMPORTS_::/g, imports)
+      .replace(/::_LIBRARY_NAME_::/g, libraryName)
+      .replace(/::_COMPONENT_TESTS_::/g, componentTests)
+      .trim();
+
+    return new Map([[fileName, replacedTemplate]]);
+  },
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/GenerateViewConfigJs.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GenerateViewConfigJs.js
new file mode 100644
index 0000000..a95cce3
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/GenerateViewConfigJs.js
@@ -0,0 +1,425 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ * @format
+ */
+
+'use strict';
+
+const j = require('jscodeshift');
+
+import type {SchemaType} from '../../CodegenSchema';
+
+// File path -> contents
+type FilesOutput = Map<string, string>;
+
+const template = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * ${'@'}generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+::_IMPORTS_::
+
+::_COMPONENT_CONFIG_::
+`;
+
+// We use this to add to a set. Need to make sure we aren't importing
+// this multiple times.
+const UIMANAGER_IMPORT = 'const {UIManager} = require("react-native")';
+
+function getReactDiffProcessValue(typeAnnotation) {
+  switch (typeAnnotation.type) {
+    case 'BooleanTypeAnnotation':
+    case 'StringTypeAnnotation':
+    case 'Int32TypeAnnotation':
+    case 'DoubleTypeAnnotation':
+    case 'FloatTypeAnnotation':
+    case 'ObjectTypeAnnotation':
+    case 'StringEnumTypeAnnotation':
+    case 'Int32EnumTypeAnnotation':
+      return j.literal(true);
+    case 'ReservedPropTypeAnnotation':
+      switch (typeAnnotation.name) {
+        case 'ColorPrimitive':
+          return j.template.expression`{ process: require('processColor') }`;
+        case 'ImageSourcePrimitive':
+          return j.template
+            .expression`{ process: require('resolveAssetSource') }`;
+        case 'PointPrimitive':
+          return j.template.expression`{ diff: require('pointsDiffer') }`;
+        case 'EdgeInsetsPrimitive':
+          return j.template.expression`{ diff: require('insetsDiffer') }`;
+        default:
+          (typeAnnotation.name: empty);
+          throw new Error(
+            `Received unknown native typeAnnotation: "${typeAnnotation.name}"`,
+          );
+      }
+    case 'ArrayTypeAnnotation':
+      if (typeAnnotation.elementType.type === 'ReservedPropTypeAnnotation') {
+        switch (typeAnnotation.elementType.name) {
+          case 'ColorPrimitive':
+            return j.template
+              .expression`{ process: require('processColorArray') }`;
+          case 'ImageSourcePrimitive':
+            return j.literal(true);
+          case 'PointPrimitive':
+            return j.literal(true);
+          default:
+            throw new Error(
+              `Received unknown array native typeAnnotation: "${typeAnnotation.elementType.name}"`,
+            );
+        }
+      }
+      return j.literal(true);
+    default:
+      (typeAnnotation: empty);
+      throw new Error(
+        `Received unknown typeAnnotation: "${typeAnnotation.type}"`,
+      );
+  }
+}
+
+const componentTemplate = `
+let nativeComponentName = '::_COMPONENT_NAME_WITH_COMPAT_SUPPORT_::';
+::_DEPRECATION_CHECK_::
+export default NativeComponentRegistry.get(nativeComponentName, () => VIEW_CONFIG);
+`.trim();
+
+const deprecatedComponentTemplate = `
+if (UIManager.getViewManagerConfig('::_COMPONENT_NAME_::')) {
+  nativeComponentName = '::_COMPONENT_NAME_::';
+} else if (UIManager.getViewManagerConfig('::_COMPONENT_NAME_DEPRECATED_::')) {
+  nativeComponentName = '::_COMPONENT_NAME_DEPRECATED_::';
+} else {
+  throw new Error('Failed to find native component for either "::_COMPONENT_NAME_::" or "::_COMPONENT_NAME_DEPRECATED_::"');
+}
+`.trim();
+
+// Replicates the behavior of RCTNormalizeInputEventName in RCTEventDispatcher.m
+function normalizeInputEventName(name) {
+  if (name.startsWith('on')) {
+    return name.replace(/^on/, 'top');
+  } else if (!name.startsWith('top')) {
+    return `top${name[0].toUpperCase()}${name.slice(1)}`;
+  }
+
+  return name;
+}
+
+// Replicates the behavior of viewConfig in RCTComponentData.m
+function getValidAttributesForEvents(events) {
+  return events.map(eventType => {
+    return j.property('init', j.identifier(eventType.name), j.literal(true));
+  });
+}
+
+function generateBubblingEventInfo(event, nameOveride) {
+  return j.property(
+    'init',
+    j.identifier(nameOveride || normalizeInputEventName(event.name)),
+    j.objectExpression([
+      j.property(
+        'init',
+        j.identifier('phasedRegistrationNames'),
+        j.objectExpression([
+          j.property(
+            'init',
+            j.identifier('captured'),
+            j.literal(`${event.name}Capture`),
+          ),
+          j.property('init', j.identifier('bubbled'), j.literal(event.name)),
+        ]),
+      ),
+    ]),
+  );
+}
+
+function generateDirectEventInfo(event, nameOveride) {
+  return j.property(
+    'init',
+    j.identifier(nameOveride || normalizeInputEventName(event.name)),
+    j.objectExpression([
+      j.property(
+        'init',
+        j.identifier('registrationName'),
+        j.literal(event.name),
+      ),
+    ]),
+  );
+}
+
+function buildViewConfig(
+  schema: SchemaType,
+  componentName: string,
+  component,
+  imports,
+) {
+  const componentProps = component.props;
+  const componentEvents = component.events;
+
+  component.extendsProps.forEach(extendProps => {
+    switch (extendProps.type) {
+      case 'ReactNativeBuiltInType':
+        switch (extendProps.knownTypeName) {
+          case 'ReactNativeCoreViewProps':
+            imports.add(
+              "const NativeComponentRegistry = require('NativeComponentRegistry');",
+            );
+
+            return;
+          default:
+            (extendProps.knownTypeName: empty);
+            throw new Error('Invalid knownTypeName');
+        }
+      default:
+        (extendProps.type: empty);
+        throw new Error('Invalid extended type');
+    }
+  });
+
+  const validAttributes = j.objectExpression([
+    ...componentProps.map(schemaProp => {
+      return j.property(
+        'init',
+        j.identifier(schemaProp.name),
+        getReactDiffProcessValue(schemaProp.typeAnnotation),
+      );
+    }),
+    ...getValidAttributesForEvents(componentEvents),
+  ]);
+
+  const bubblingEventNames = component.events
+    .filter(event => event.bubblingType === 'bubble')
+    .reduce((bubblingEvents, event) => {
+      // We add in the deprecated paper name so that it is in the view config.
+      // This means either the old event name or the new event name can fire
+      // and be sent to the listener until the old top level name is removed.
+      if (event.paperTopLevelNameDeprecated) {
+        bubblingEvents.push(
+          generateBubblingEventInfo(event, event.paperTopLevelNameDeprecated),
+        );
+      }
+      bubblingEvents.push(generateBubblingEventInfo(event));
+      return bubblingEvents;
+    }, []);
+
+  const bubblingEvents =
+    bubblingEventNames.length > 0
+      ? j.property(
+          'init',
+          j.identifier('bubblingEventTypes'),
+          j.objectExpression(bubblingEventNames),
+        )
+      : null;
+
+  const directEventNames = component.events
+    .filter(event => event.bubblingType === 'direct')
+    .reduce((directEvents, event) => {
+      // We add in the deprecated paper name so that it is in the view config.
+      // This means either the old event name or the new event name can fire
+      // and be sent to the listener until the old top level name is removed.
+      if (event.paperTopLevelNameDeprecated) {
+        directEvents.push(
+          generateDirectEventInfo(event, event.paperTopLevelNameDeprecated),
+        );
+      }
+      directEvents.push(generateDirectEventInfo(event));
+      return directEvents;
+    }, []);
+
+  const directEvents =
+    directEventNames.length > 0
+      ? j.property(
+          'init',
+          j.identifier('directEventTypes'),
+          j.objectExpression(directEventNames),
+        )
+      : null;
+
+  const properties = [
+    j.property(
+      'init',
+      j.identifier('uiViewClassName'),
+      j.literal(componentName),
+    ),
+    bubblingEvents,
+    directEvents,
+    j.property('init', j.identifier('validAttributes'), validAttributes),
+  ].filter(Boolean);
+
+  return j.objectExpression(properties);
+}
+
+function buildCommands(
+  schema: SchemaType,
+  componentName: string,
+  component,
+  imports,
+) {
+  const commands = component.commands;
+
+  if (commands.length === 0) {
+    return null;
+  }
+
+  imports.add(
+    'const {dispatchCommand} = require("react-native/Libraries/Renderer/shims/ReactNative");',
+  );
+
+  const properties = commands.map(command => {
+    const commandName = command.name;
+    const params = command.typeAnnotation.params;
+
+    const commandNameLiteral = j.literal(commandName);
+    const commandNameIdentifier = j.identifier(commandName);
+    const arrayParams = j.arrayExpression(
+      params.map(param => {
+        return j.identifier(param.name);
+      }),
+    );
+
+    const expression = j.template
+      .expression`dispatchCommand(ref, ${commandNameLiteral}, ${arrayParams})`;
+
+    const functionParams = params.map(param => {
+      return j.identifier(param.name);
+    });
+
+    const property = j.property(
+      'init',
+      commandNameIdentifier,
+      j.functionExpression(
+        null,
+        [j.identifier('ref'), ...functionParams],
+        j.blockStatement([j.expressionStatement(expression)]),
+      ),
+    );
+    property.method = true;
+
+    return property;
+  });
+
+  return j.exportNamedDeclaration(
+    j.variableDeclaration('const', [
+      j.variableDeclarator(
+        j.identifier('Commands'),
+        j.objectExpression(properties),
+      ),
+    ]),
+  );
+}
+
+module.exports = {
+  generate(libraryName: string, schema: SchemaType): FilesOutput {
+    try {
+      const fileName = `${libraryName}NativeViewConfig.js`;
+      const imports: Set<string> = new Set();
+
+      const moduleResults = Object.keys(schema.modules)
+        .map(moduleName => {
+          const module = schema.modules[moduleName];
+          if (module.type !== 'Component') {
+            return;
+          }
+
+          const {components} = module;
+
+          return Object.keys(components)
+            .map((componentName: string) => {
+              const component = components[componentName];
+
+              const paperComponentName = component.paperComponentName
+                ? component.paperComponentName
+                : componentName;
+
+              if (component.paperComponentNameDeprecated) {
+                imports.add(UIMANAGER_IMPORT);
+              }
+
+              const deprecatedCheckBlock = component.paperComponentNameDeprecated
+                ? deprecatedComponentTemplate
+                    .replace(/::_COMPONENT_NAME_::/g, componentName)
+                    .replace(
+                      /::_COMPONENT_NAME_DEPRECATED_::/g,
+                      component.paperComponentNameDeprecated || '',
+                    )
+                : '';
+
+              const replacedTemplate = componentTemplate
+                .replace(/::_COMPONENT_NAME_::/g, componentName)
+                .replace(
+                  /::_COMPONENT_NAME_WITH_COMPAT_SUPPORT_::/g,
+                  paperComponentName,
+                )
+                .replace(/::_DEPRECATION_CHECK_::/, deprecatedCheckBlock);
+
+              const replacedSourceRoot = j.withParser('flow')(replacedTemplate);
+
+              replacedSourceRoot
+                .find(j.Identifier, {
+                  name: 'VIEW_CONFIG',
+                })
+                .replaceWith(
+                  buildViewConfig(
+                    schema,
+                    paperComponentName,
+                    component,
+                    imports,
+                  ),
+                );
+
+              const commands = buildCommands(
+                schema,
+                paperComponentName,
+                component,
+                imports,
+              );
+              if (commands) {
+                replacedSourceRoot
+                  .find(j.ExportDefaultDeclaration)
+                  .insertAfter(j(commands).toSource());
+              }
+
+              const replacedSource: string = replacedSourceRoot.toSource({
+                quote: 'single',
+                trailingComma: true,
+              });
+
+              return replacedSource;
+            })
+            .join('\n\n');
+        })
+        .filter(Boolean)
+        .join('\n\n');
+
+      const replacedTemplate = template
+        .replace(/::_COMPONENT_CONFIG_::/g, moduleResults)
+        .replace(
+          '::_IMPORTS_::',
+          Array.from(imports)
+            .sort()
+            .join('\n'),
+        );
+
+      return new Map([[fileName, replacedTemplate]]);
+    } catch (error) {
+      console.error(`\nError parsing schema for ${libraryName}\n`);
+      console.error(JSON.stringify(schema));
+      throw error;
+    }
+  },
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/JavaHelpers.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/JavaHelpers.js
new file mode 100644
index 0000000..e59fe7d
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/JavaHelpers.js
@@ -0,0 +1,109 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+import type {ComponentShape} from '../../CodegenSchema';
+
+function upperCaseFirst(inString: string): string {
+  return inString[0].toUpperCase() + inString.slice(1);
+}
+
+function getInterfaceJavaClassName(componentName: string): string {
+  return `${componentName.replace(/^RCT/, '')}ManagerInterface`;
+}
+
+function getDelegateJavaClassName(componentName: string): string {
+  return `${componentName.replace(/^RCT/, '')}ManagerDelegate`;
+}
+
+function toSafeJavaString(
+  input: string,
+  shouldUpperCaseFirst?: boolean,
+): string {
+  const parts = input.split('-');
+
+  if (shouldUpperCaseFirst === false) {
+    return parts.join('');
+  }
+
+  return parts.map(upperCaseFirst).join('');
+}
+
+function getImports(
+  component: ComponentShape,
+  type: 'interface' | 'delegate',
+): Set<string> {
+  const imports: Set<string> = new Set();
+
+  component.extendsProps.forEach(extendProps => {
+    switch (extendProps.type) {
+      case 'ReactNativeBuiltInType':
+        switch (extendProps.knownTypeName) {
+          case 'ReactNativeCoreViewProps':
+            imports.add('import android.view.View;');
+            return;
+          default:
+            (extendProps.knownTypeName: empty);
+            throw new Error('Invalid knownTypeName');
+        }
+      default:
+        (extendProps.type: empty);
+        throw new Error('Invalid extended type');
+    }
+  });
+
+  function addImportsForNativeName(name) {
+    switch (name) {
+      case 'ColorPrimitive':
+        if (type === 'delegate') {
+          imports.add('import com.facebook.react.bridge.ColorPropConverter;');
+        }
+        return;
+      case 'ImageSourcePrimitive':
+        imports.add('import com.facebook.react.bridge.ReadableMap;');
+        return;
+      case 'PointPrimitive':
+        imports.add('import com.facebook.react.bridge.ReadableMap;');
+        return;
+      case 'EdgeInsetsPrimitive':
+        imports.add('import com.facebook.react.bridge.ReadableMap;');
+        return;
+      default:
+        (name: empty);
+        throw new Error(`Invalid ReservedPropTypeAnnotation name, got ${name}`);
+    }
+  }
+
+  component.props.forEach(prop => {
+    const typeAnnotation = prop.typeAnnotation;
+
+    if (typeAnnotation.type === 'ReservedPropTypeAnnotation') {
+      addImportsForNativeName(typeAnnotation.name);
+    }
+
+    if (typeAnnotation.type === 'ArrayTypeAnnotation') {
+      imports.add('import com.facebook.react.bridge.ReadableArray;');
+    }
+
+    if (typeAnnotation.type === 'ObjectTypeAnnotation') {
+      imports.add('import com.facebook.react.bridge.ReadableMap;');
+    }
+  });
+
+  return imports;
+}
+
+module.exports = {
+  getInterfaceJavaClassName,
+  getDelegateJavaClassName,
+  toSafeJavaString,
+  getImports,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__test_fixtures__/fixtures.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__test_fixtures__/fixtures.js
new file mode 100644
index 0000000..6952964
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__test_fixtures__/fixtures.js
@@ -0,0 +1,1624 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {SchemaType} from '../../../CodegenSchema.js';
+
+const NO_PROPS_NO_EVENTS: SchemaType = {
+  modules: {
+    NoPropsNoEvents: {
+      type: 'Component',
+      components: {
+        NoPropsNoEventsComponent: {
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [],
+          props: [],
+          commands: [],
+        },
+      },
+    },
+  },
+};
+
+const INTERFACE_ONLY: SchemaType = {
+  modules: {
+    Switch: {
+      type: 'Component',
+      components: {
+        InterfaceOnlyComponent: {
+          interfaceOnly: true,
+          paperComponentName: 'RCTInterfaceOnlyComponent',
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [
+            {
+              name: 'onChange',
+              optional: true,
+              bubblingType: 'bubble',
+              typeAnnotation: {
+                type: 'EventTypeAnnotation',
+                argument: {
+                  type: 'ObjectTypeAnnotation',
+                  properties: [
+                    {
+                      name: 'value',
+                      optional: false,
+                      typeAnnotation: {
+                        type: 'BooleanTypeAnnotation',
+                      },
+                    },
+                  ],
+                },
+              },
+            },
+          ],
+          props: [
+            {
+              name: 'accessibilityHint',
+              optional: true,
+              typeAnnotation: {
+                type: 'StringTypeAnnotation',
+                default: '',
+              },
+            },
+          ],
+          commands: [],
+        },
+      },
+    },
+  },
+};
+
+const EVENTS_WITH_PAPER_NAME: SchemaType = {
+  modules: {
+    Switch: {
+      type: 'Component',
+      components: {
+        InterfaceOnlyComponent: {
+          interfaceOnly: true,
+          paperComponentName: 'RCTInterfaceOnlyComponent',
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [
+            {
+              name: 'onChange',
+              paperTopLevelNameDeprecated: 'paperChange',
+              optional: true,
+              bubblingType: 'bubble',
+              typeAnnotation: {
+                type: 'EventTypeAnnotation',
+                argument: {
+                  type: 'ObjectTypeAnnotation',
+                  properties: [
+                    {
+                      name: 'value',
+                      optional: false,
+                      typeAnnotation: {
+                        type: 'BooleanTypeAnnotation',
+                      },
+                    },
+                  ],
+                },
+              },
+            },
+            {
+              name: 'onDire tChange',
+              paperTopLevelNameDeprecated: 'paperDirectChange',
+              optional: true,
+              bubblingType: 'direct',
+              typeAnnotation: {
+                type: 'EventTypeAnnotation',
+                argument: {
+                  type: 'ObjectTypeAnnotation',
+                  properties: [
+                    {
+                      name: 'value',
+                      optional: false,
+                      typeAnnotation: {
+                        type: 'BooleanTypeAnnotation',
+                      },
+                    },
+                  ],
+                },
+              },
+            },
+          ],
+          props: [],
+          commands: [],
+        },
+      },
+    },
+  },
+};
+
+const BOOLEAN_PROP: SchemaType = {
+  modules: {
+    Switch: {
+      type: 'Component',
+      components: {
+        BooleanPropNativeComponent: {
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [],
+          props: [
+            {
+              name: 'disabled',
+              optional: true,
+              typeAnnotation: {
+                type: 'BooleanTypeAnnotation',
+                default: false,
+              },
+            },
+          ],
+          commands: [],
+        },
+      },
+    },
+  },
+};
+
+const STRING_PROP: SchemaType = {
+  modules: {
+    Switch: {
+      type: 'Component',
+      components: {
+        StringPropComponent: {
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [],
+          props: [
+            {
+              name: 'accessibilityHint',
+              optional: true,
+              typeAnnotation: {
+                type: 'StringTypeAnnotation',
+                default: '',
+              },
+            },
+            {
+              name: 'accessibilityRole',
+              optional: true,
+              typeAnnotation: {
+                type: 'StringTypeAnnotation',
+                default: null,
+              },
+            },
+          ],
+          commands: [],
+        },
+      },
+    },
+  },
+};
+
+const INTEGER_PROPS: SchemaType = {
+  modules: {
+    Switch: {
+      type: 'Component',
+      components: {
+        IntegerPropNativeComponent: {
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [],
+          props: [
+            {
+              name: 'progress1',
+              optional: true,
+              typeAnnotation: {
+                type: 'Int32TypeAnnotation',
+                default: 0,
+              },
+            },
+            {
+              name: 'progress2',
+              optional: true,
+              typeAnnotation: {
+                type: 'Int32TypeAnnotation',
+                default: -1,
+              },
+            },
+            {
+              name: 'progress3',
+              optional: true,
+              typeAnnotation: {
+                type: 'Int32TypeAnnotation',
+                default: 10,
+              },
+            },
+          ],
+          commands: [],
+        },
+      },
+    },
+  },
+};
+
+const FLOAT_PROPS: SchemaType = {
+  modules: {
+    Switch: {
+      type: 'Component',
+      components: {
+        FloatPropNativeComponent: {
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [],
+          props: [
+            {
+              name: 'blurRadius',
+              optional: false,
+              typeAnnotation: {
+                type: 'FloatTypeAnnotation',
+                default: 0.0,
+              },
+            },
+            {
+              name: 'blurRadius2',
+              optional: true,
+              typeAnnotation: {
+                type: 'FloatTypeAnnotation',
+                default: 0.001,
+              },
+            },
+            {
+              name: 'blurRadius3',
+              optional: true,
+              typeAnnotation: {
+                type: 'FloatTypeAnnotation',
+                default: 2.1,
+              },
+            },
+            {
+              name: 'blurRadius4',
+              optional: true,
+              typeAnnotation: {
+                type: 'FloatTypeAnnotation',
+                default: 0,
+              },
+            },
+            {
+              name: 'blurRadius5',
+              optional: true,
+              typeAnnotation: {
+                type: 'FloatTypeAnnotation',
+                default: 1,
+              },
+            },
+            {
+              name: 'blurRadius6',
+              optional: true,
+              typeAnnotation: {
+                type: 'FloatTypeAnnotation',
+                default: -0.0,
+              },
+            },
+          ],
+          commands: [],
+        },
+      },
+    },
+  },
+};
+
+const DOUBLE_PROPS: SchemaType = {
+  modules: {
+    Switch: {
+      type: 'Component',
+      components: {
+        DoublePropNativeComponent: {
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [],
+          props: [
+            {
+              name: 'blurRadius',
+              optional: false,
+              typeAnnotation: {
+                type: 'DoubleTypeAnnotation',
+                default: 0.0,
+              },
+            },
+            {
+              name: 'blurRadius2',
+              optional: true,
+              typeAnnotation: {
+                type: 'DoubleTypeAnnotation',
+                default: 0.001,
+              },
+            },
+            {
+              name: 'blurRadius3',
+              optional: true,
+              typeAnnotation: {
+                type: 'DoubleTypeAnnotation',
+                default: 2.1,
+              },
+            },
+            {
+              name: 'blurRadius4',
+              optional: true,
+              typeAnnotation: {
+                type: 'DoubleTypeAnnotation',
+                default: 0,
+              },
+            },
+            {
+              name: 'blurRadius5',
+              optional: true,
+              typeAnnotation: {
+                type: 'DoubleTypeAnnotation',
+                default: 1,
+              },
+            },
+            {
+              name: 'blurRadius6',
+              optional: true,
+              typeAnnotation: {
+                type: 'DoubleTypeAnnotation',
+                default: -0.0,
+              },
+            },
+          ],
+          commands: [],
+        },
+      },
+    },
+  },
+};
+
+const COLOR_PROP: SchemaType = {
+  modules: {
+    Switch: {
+      type: 'Component',
+      components: {
+        ColorPropNativeComponent: {
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [],
+          props: [
+            {
+              name: 'tintColor',
+              optional: true,
+              typeAnnotation: {
+                type: 'ReservedPropTypeAnnotation',
+                name: 'ColorPrimitive',
+              },
+            },
+          ],
+          commands: [],
+        },
+      },
+    },
+  },
+};
+
+const IMAGE_PROP: SchemaType = {
+  modules: {
+    Slider: {
+      type: 'Component',
+      components: {
+        ImagePropNativeComponent: {
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [],
+          props: [
+            {
+              name: 'thumbImage',
+              optional: true,
+              typeAnnotation: {
+                type: 'ReservedPropTypeAnnotation',
+                name: 'ImageSourcePrimitive',
+              },
+            },
+          ],
+          commands: [],
+        },
+      },
+    },
+  },
+};
+
+const POINT_PROP: SchemaType = {
+  modules: {
+    Switch: {
+      type: 'Component',
+      components: {
+        PointPropNativeComponent: {
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [],
+          props: [
+            {
+              name: 'startPoint',
+              optional: true,
+              typeAnnotation: {
+                type: 'ReservedPropTypeAnnotation',
+                name: 'PointPrimitive',
+              },
+            },
+          ],
+          commands: [],
+        },
+      },
+    },
+  },
+};
+
+const INSETS_PROP: SchemaType = {
+  modules: {
+    ScrollView: {
+      type: 'Component',
+      components: {
+        InsetsPropNativeComponent: {
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [],
+          props: [
+            {
+              name: 'contentInset',
+              optional: true,
+              typeAnnotation: {
+                type: 'ReservedPropTypeAnnotation',
+                name: 'EdgeInsetsPrimitive',
+              },
+            },
+          ],
+          commands: [],
+        },
+      },
+    },
+  },
+};
+
+const ARRAY_PROPS: SchemaType = {
+  modules: {
+    Slider: {
+      type: 'Component',
+      components: {
+        ArrayPropsNativeComponent: {
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [],
+          props: [
+            {
+              name: 'names',
+              optional: true,
+              typeAnnotation: {
+                type: 'ArrayTypeAnnotation',
+                elementType: {
+                  type: 'StringTypeAnnotation',
+                },
+              },
+            },
+            {
+              name: 'disableds',
+              optional: true,
+              typeAnnotation: {
+                type: 'ArrayTypeAnnotation',
+                elementType: {
+                  type: 'BooleanTypeAnnotation',
+                },
+              },
+            },
+            {
+              name: 'progress',
+              optional: true,
+              typeAnnotation: {
+                type: 'ArrayTypeAnnotation',
+                elementType: {
+                  type: 'Int32TypeAnnotation',
+                },
+              },
+            },
+            {
+              name: 'radii',
+              optional: true,
+              typeAnnotation: {
+                type: 'ArrayTypeAnnotation',
+                elementType: {
+                  type: 'FloatTypeAnnotation',
+                },
+              },
+            },
+            {
+              name: 'colors',
+              optional: true,
+              typeAnnotation: {
+                type: 'ArrayTypeAnnotation',
+                elementType: {
+                  type: 'ReservedPropTypeAnnotation',
+                  name: 'ColorPrimitive',
+                },
+              },
+            },
+            {
+              name: 'srcs',
+              optional: true,
+              typeAnnotation: {
+                type: 'ArrayTypeAnnotation',
+                elementType: {
+                  type: 'ReservedPropTypeAnnotation',
+                  name: 'ImageSourcePrimitive',
+                },
+              },
+            },
+            {
+              name: 'points',
+              optional: true,
+              typeAnnotation: {
+                type: 'ArrayTypeAnnotation',
+                elementType: {
+                  type: 'ReservedPropTypeAnnotation',
+                  name: 'PointPrimitive',
+                },
+              },
+            },
+            {
+              name: 'sizes',
+              optional: true,
+              typeAnnotation: {
+                type: 'ArrayTypeAnnotation',
+                elementType: {
+                  type: 'StringEnumTypeAnnotation',
+                  default: 'small',
+                  options: ['small', 'large'],
+                },
+              },
+            },
+            {
+              name: 'object',
+              optional: true,
+              typeAnnotation: {
+                type: 'ArrayTypeAnnotation',
+                elementType: {
+                  type: 'ObjectTypeAnnotation',
+                  properties: [
+                    {
+                      name: 'stringProp',
+                      optional: true,
+                      typeAnnotation: {
+                        type: 'StringTypeAnnotation',
+                        default: '',
+                      },
+                    },
+                  ],
+                },
+              },
+            },
+            {
+              name: 'array',
+              optional: true,
+              typeAnnotation: {
+                type: 'ArrayTypeAnnotation',
+                elementType: {
+                  type: 'ObjectTypeAnnotation',
+                  properties: [
+                    {
+                      // This needs to stay the same as the object above
+                      // to confirm that the structs are generated
+                      // with unique non-colliding names
+                      name: 'object',
+                      optional: true,
+                      typeAnnotation: {
+                        type: 'ArrayTypeAnnotation',
+                        elementType: {
+                          type: 'ObjectTypeAnnotation',
+                          properties: [
+                            {
+                              name: 'stringProp',
+                              optional: true,
+                              typeAnnotation: {
+                                type: 'StringTypeAnnotation',
+                                default: '',
+                              },
+                            },
+                          ],
+                        },
+                      },
+                    },
+                  ],
+                },
+              },
+            },
+            {
+              name: 'arrayOfArrayOfObject',
+              optional: true,
+              typeAnnotation: {
+                type: 'ArrayTypeAnnotation',
+                elementType: {
+                  type: 'ArrayTypeAnnotation',
+                  elementType: {
+                    type: 'ObjectTypeAnnotation',
+                    properties: [
+                      {
+                        name: 'stringProp',
+                        optional: true,
+                        typeAnnotation: {
+                          type: 'StringTypeAnnotation',
+                          default: '',
+                        },
+                      },
+                    ],
+                  },
+                },
+              },
+            },
+          ],
+          commands: [],
+        },
+      },
+    },
+  },
+};
+
+const ARRAY_PROPS_WITH_NESTED_OBJECT: SchemaType = {
+  modules: {
+    Slider: {
+      type: 'Component',
+      components: {
+        ArrayPropsNativeComponent: {
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [],
+          props: [
+            {
+              name: 'nativePrimitives',
+              optional: true,
+              typeAnnotation: {
+                type: 'ArrayTypeAnnotation',
+                elementType: {
+                  type: 'ObjectTypeAnnotation',
+                  properties: [
+                    {
+                      name: 'colors',
+                      optional: true,
+                      typeAnnotation: {
+                        type: 'ArrayTypeAnnotation',
+                        elementType: {
+                          type: 'ReservedPropTypeAnnotation',
+                          name: 'ColorPrimitive',
+                        },
+                      },
+                    },
+                    {
+                      name: 'srcs',
+                      optional: true,
+                      typeAnnotation: {
+                        type: 'ArrayTypeAnnotation',
+                        elementType: {
+                          type: 'ReservedPropTypeAnnotation',
+                          name: 'ImageSourcePrimitive',
+                        },
+                      },
+                    },
+                    {
+                      name: 'points',
+                      optional: true,
+                      typeAnnotation: {
+                        type: 'ArrayTypeAnnotation',
+                        elementType: {
+                          type: 'ReservedPropTypeAnnotation',
+                          name: 'PointPrimitive',
+                        },
+                      },
+                    },
+                  ],
+                },
+              },
+            },
+          ],
+          commands: [],
+        },
+      },
+    },
+  },
+};
+
+const OBJECT_PROPS: SchemaType = {
+  modules: {
+    ObjectPropsNativeComponent: {
+      type: 'Component',
+      components: {
+        ObjectProps: {
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [],
+          props: [
+            {
+              name: 'objectProp',
+              optional: true,
+              typeAnnotation: {
+                type: 'ObjectTypeAnnotation',
+                properties: [
+                  {
+                    name: 'stringProp',
+                    optional: true,
+                    typeAnnotation: {
+                      type: 'StringTypeAnnotation',
+                      default: '',
+                    },
+                  },
+                  {
+                    name: 'booleanProp',
+                    optional: true,
+                    typeAnnotation: {
+                      type: 'BooleanTypeAnnotation',
+                      default: false,
+                    },
+                  },
+                  {
+                    name: 'floatProp',
+                    optional: true,
+                    typeAnnotation: {
+                      type: 'FloatTypeAnnotation',
+                      default: 0.0,
+                    },
+                  },
+                  {
+                    name: 'intProp',
+                    optional: true,
+                    typeAnnotation: {
+                      type: 'Int32TypeAnnotation',
+                      default: 0,
+                    },
+                  },
+                  {
+                    name: 'stringEnumProp',
+                    optional: true,
+                    typeAnnotation: {
+                      type: 'StringEnumTypeAnnotation',
+                      default: 'option1',
+                      options: ['option1'],
+                    },
+                  },
+                  {
+                    name: 'intEnumProp',
+                    optional: true,
+                    typeAnnotation: {
+                      type: 'Int32EnumTypeAnnotation',
+                      default: 0,
+                      options: [0],
+                    },
+                  },
+                  {
+                    name: 'objectArrayProp',
+                    optional: false,
+                    typeAnnotation: {
+                      type: 'ObjectTypeAnnotation',
+                      properties: [
+                        {
+                          name: 'array',
+                          optional: true,
+                          typeAnnotation: {
+                            type: 'ArrayTypeAnnotation',
+                            elementType: {
+                              type: 'StringTypeAnnotation',
+                            },
+                          },
+                        },
+                      ],
+                    },
+                  },
+                  {
+                    name: 'objectPrimitiveRequiredProp',
+                    optional: false,
+                    typeAnnotation: {
+                      type: 'ObjectTypeAnnotation',
+                      properties: [
+                        {
+                          name: 'image',
+                          optional: true,
+                          typeAnnotation: {
+                            type: 'ReservedPropTypeAnnotation',
+                            name: 'ImageSourcePrimitive',
+                          },
+                        },
+                        {
+                          name: 'color',
+                          optional: true,
+                          typeAnnotation: {
+                            type: 'ReservedPropTypeAnnotation',
+                            name: 'ColorPrimitive',
+                          },
+                        },
+                        {
+                          name: 'point',
+                          optional: true,
+                          typeAnnotation: {
+                            type: 'ReservedPropTypeAnnotation',
+                            name: 'PointPrimitive',
+                          },
+                        },
+                      ],
+                    },
+                  },
+                  {
+                    name: 'nestedPropA',
+                    optional: false,
+                    typeAnnotation: {
+                      type: 'ObjectTypeAnnotation',
+                      properties: [
+                        {
+                          name: 'nestedPropB',
+                          optional: false,
+                          typeAnnotation: {
+                            type: 'ObjectTypeAnnotation',
+                            properties: [
+                              {
+                                name: 'nestedPropC',
+                                optional: true,
+                                typeAnnotation: {
+                                  type: 'StringTypeAnnotation',
+                                  default: '',
+                                },
+                              },
+                            ],
+                          },
+                        },
+                      ],
+                    },
+                  },
+                  {
+                    name: 'nestedArrayAsProperty',
+                    optional: false,
+                    typeAnnotation: {
+                      type: 'ObjectTypeAnnotation',
+                      properties: [
+                        {
+                          name: 'arrayProp',
+                          optional: false,
+                          typeAnnotation: {
+                            type: 'ArrayTypeAnnotation',
+                            elementType: {
+                              type: 'ObjectTypeAnnotation',
+                              properties: [
+                                {
+                                  name: 'stringProp',
+                                  optional: false,
+                                  typeAnnotation: {
+                                    type: 'StringTypeAnnotation',
+                                    default: '',
+                                  },
+                                },
+                              ],
+                            },
+                          },
+                        },
+                      ],
+                    },
+                  },
+                ],
+              },
+            },
+          ],
+          commands: [],
+        },
+      },
+    },
+  },
+};
+
+const MULTI_NATIVE_PROP: SchemaType = {
+  modules: {
+    Slider: {
+      type: 'Component',
+      components: {
+        ImageColorPropNativeComponent: {
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [],
+          props: [
+            {
+              name: 'thumbImage',
+              optional: true,
+              typeAnnotation: {
+                type: 'ReservedPropTypeAnnotation',
+                name: 'ImageSourcePrimitive',
+              },
+            },
+            {
+              name: 'color',
+              optional: true,
+              typeAnnotation: {
+                type: 'ReservedPropTypeAnnotation',
+                name: 'ColorPrimitive',
+              },
+            },
+            {
+              name: 'thumbTintColor',
+              optional: true,
+              typeAnnotation: {
+                type: 'ReservedPropTypeAnnotation',
+                name: 'ColorPrimitive',
+              },
+            },
+            {
+              name: 'point',
+              optional: true,
+              typeAnnotation: {
+                type: 'ReservedPropTypeAnnotation',
+                name: 'PointPrimitive',
+              },
+            },
+          ],
+          commands: [],
+        },
+      },
+    },
+  },
+};
+
+const STRING_ENUM_PROP: SchemaType = {
+  modules: {
+    Switch: {
+      type: 'Component',
+      components: {
+        StringEnumPropsNativeComponent: {
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [],
+          props: [
+            {
+              name: 'alignment',
+              optional: true,
+              typeAnnotation: {
+                type: 'StringEnumTypeAnnotation',
+                default: 'center',
+                options: ['top', 'center', 'bottom-right'],
+              },
+            },
+          ],
+          commands: [],
+        },
+      },
+    },
+  },
+};
+
+const INT32_ENUM_PROP: SchemaType = {
+  modules: {
+    Switch: {
+      type: 'Component',
+      components: {
+        Int32EnumPropsNativeComponent: {
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [],
+          props: [
+            {
+              name: 'maxInterval',
+              optional: true,
+              typeAnnotation: {
+                type: 'Int32EnumTypeAnnotation',
+                default: 0,
+                options: [0, 1, 2],
+              },
+            },
+          ],
+          commands: [],
+        },
+      },
+    },
+  },
+};
+
+const EVENT_PROPS: SchemaType = {
+  modules: {
+    Switch: {
+      type: 'Component',
+      components: {
+        EventsNativeComponent: {
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [
+            {
+              name: 'onChange',
+              optional: true,
+              bubblingType: 'bubble',
+              typeAnnotation: {
+                type: 'EventTypeAnnotation',
+                argument: {
+                  type: 'ObjectTypeAnnotation',
+                  properties: [
+                    {
+                      name: 'value',
+                      optional: false,
+                      typeAnnotation: {
+                        type: 'BooleanTypeAnnotation',
+                      },
+                    },
+                    {
+                      name: 'source',
+                      optional: true,
+                      typeAnnotation: {
+                        type: 'StringTypeAnnotation',
+                      },
+                    },
+                    {
+                      name: 'progress',
+                      optional: true,
+                      typeAnnotation: {
+                        type: 'Int32TypeAnnotation',
+                      },
+                    },
+                    {
+                      name: 'scale',
+                      optional: true,
+                      typeAnnotation: {
+                        type: 'FloatTypeAnnotation',
+                      },
+                    },
+                  ],
+                },
+              },
+            },
+            {
+              name: 'onEventDirect',
+              optional: true,
+              bubblingType: 'direct',
+              typeAnnotation: {
+                type: 'EventTypeAnnotation',
+                argument: {
+                  type: 'ObjectTypeAnnotation',
+                  properties: [
+                    {
+                      name: 'value',
+                      optional: false,
+                      typeAnnotation: {
+                        type: 'BooleanTypeAnnotation',
+                      },
+                    },
+                  ],
+                },
+              },
+            },
+            {
+              name: 'onOrientationChange',
+              optional: true,
+              bubblingType: 'direct',
+              typeAnnotation: {
+                type: 'EventTypeAnnotation',
+                argument: {
+                  type: 'ObjectTypeAnnotation',
+                  properties: [
+                    {
+                      name: 'orientation',
+                      optional: false,
+                      typeAnnotation: {
+                        type: 'StringEnumTypeAnnotation',
+                        options: ['landscape', 'portrait'],
+                      },
+                    },
+                  ],
+                },
+              },
+            },
+            {
+              name: 'onEnd',
+              optional: true,
+              bubblingType: 'bubble',
+              typeAnnotation: {
+                type: 'EventTypeAnnotation',
+              },
+            },
+          ],
+          props: [
+            {
+              name: 'disabled',
+              optional: true,
+              typeAnnotation: {
+                type: 'BooleanTypeAnnotation',
+                default: false,
+              },
+            },
+          ],
+          commands: [],
+        },
+      },
+    },
+  },
+};
+
+const EVENT_NESTED_OBJECT_PROPS: SchemaType = {
+  modules: {
+    Switch: {
+      type: 'Component',
+      components: {
+        EventsNestedObjectNativeComponent: {
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [
+            {
+              name: 'onChange',
+              optional: true,
+              bubblingType: 'bubble',
+              typeAnnotation: {
+                type: 'EventTypeAnnotation',
+                argument: {
+                  type: 'ObjectTypeAnnotation',
+                  properties: [
+                    {
+                      name: 'location',
+                      optional: false,
+                      typeAnnotation: {
+                        type: 'ObjectTypeAnnotation',
+                        properties: [
+                          {
+                            name: 'source',
+                            optional: false,
+                            typeAnnotation: {
+                              type: 'ObjectTypeAnnotation',
+                              properties: [
+                                {
+                                  name: 'url',
+                                  optional: false,
+                                  typeAnnotation: {
+                                    type: 'StringTypeAnnotation',
+                                  },
+                                },
+                              ],
+                            },
+                          },
+                          {
+                            name: 'x',
+                            optional: false,
+                            typeAnnotation: {
+                              type: 'Int32TypeAnnotation',
+                            },
+                          },
+                          {
+                            name: 'y',
+                            optional: false,
+                            typeAnnotation: {
+                              type: 'Int32TypeAnnotation',
+                            },
+                          },
+                        ],
+                      },
+                    },
+                  ],
+                },
+              },
+            },
+          ],
+          props: [
+            {
+              name: 'disabled',
+              optional: true,
+              typeAnnotation: {
+                type: 'BooleanTypeAnnotation',
+                default: false,
+              },
+            },
+          ],
+          commands: [],
+        },
+      },
+    },
+  },
+};
+
+const TWO_COMPONENTS_SAME_FILE: SchemaType = {
+  modules: {
+    MyComponents: {
+      type: 'Component',
+      components: {
+        MultiComponent1NativeComponent: {
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [],
+          props: [
+            {
+              name: 'disabled',
+              optional: true,
+              typeAnnotation: {
+                type: 'BooleanTypeAnnotation',
+                default: false,
+              },
+            },
+          ],
+          commands: [],
+        },
+
+        MultiComponent2NativeComponent: {
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [],
+          props: [
+            {
+              name: 'disabled',
+              optional: true,
+              typeAnnotation: {
+                type: 'BooleanTypeAnnotation',
+                default: true,
+              },
+            },
+          ],
+          commands: [],
+        },
+      },
+    },
+  },
+};
+
+const TWO_COMPONENTS_DIFFERENT_FILES: SchemaType = {
+  modules: {
+    ComponentFile1: {
+      type: 'Component',
+      components: {
+        MultiFile1NativeComponent: {
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [],
+          props: [
+            {
+              name: 'disabled',
+              optional: true,
+              typeAnnotation: {
+                type: 'BooleanTypeAnnotation',
+                default: false,
+              },
+            },
+          ],
+          commands: [],
+        },
+      },
+    },
+
+    ComponentFile2: {
+      type: 'Component',
+      components: {
+        MultiFile2NativeComponent: {
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [],
+          props: [
+            {
+              name: 'disabled',
+              optional: true,
+              typeAnnotation: {
+                type: 'BooleanTypeAnnotation',
+                default: true,
+              },
+            },
+          ],
+          commands: [],
+        },
+      },
+    },
+  },
+};
+
+const COMMANDS: SchemaType = {
+  modules: {
+    Switch: {
+      type: 'Component',
+      components: {
+        CommandNativeComponent: {
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [],
+          props: [],
+          commands: [
+            {
+              name: 'flashScrollIndicators',
+              optional: false,
+              typeAnnotation: {
+                type: 'FunctionTypeAnnotation',
+                params: [],
+                returnTypeAnnotation: {
+                  type: 'VoidTypeAnnotation',
+                },
+              },
+            },
+            {
+              name: 'allTypes',
+              optional: false,
+              typeAnnotation: {
+                type: 'FunctionTypeAnnotation',
+                params: [
+                  {
+                    name: 'x',
+                    optional: false,
+                    typeAnnotation: {
+                      type: 'Int32TypeAnnotation',
+                    },
+                  },
+                  {
+                    name: 'y',
+                    optional: false,
+                    typeAnnotation: {
+                      type: 'FloatTypeAnnotation',
+                    },
+                  },
+                  {
+                    name: 'z',
+                    optional: false,
+                    typeAnnotation: {
+                      type: 'DoubleTypeAnnotation',
+                    },
+                  },
+                  {
+                    name: 'message',
+                    optional: false,
+                    typeAnnotation: {
+                      type: 'StringTypeAnnotation',
+                    },
+                  },
+                  {
+                    name: 'animated',
+                    optional: false,
+                    typeAnnotation: {
+                      type: 'BooleanTypeAnnotation',
+                    },
+                  },
+                ],
+                returnTypeAnnotation: {
+                  type: 'VoidTypeAnnotation',
+                },
+              },
+            },
+          ],
+        },
+      },
+    },
+  },
+};
+
+const COMMANDS_AND_PROPS: SchemaType = {
+  modules: {
+    Switch: {
+      type: 'Component',
+      components: {
+        CommandNativeComponent: {
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [],
+          props: [
+            {
+              name: 'accessibilityHint',
+              optional: true,
+              typeAnnotation: {
+                type: 'StringTypeAnnotation',
+                default: '',
+              },
+            },
+          ],
+          commands: [
+            {
+              name: 'handleRootTag',
+              optional: false,
+              typeAnnotation: {
+                type: 'FunctionTypeAnnotation',
+                params: [
+                  {
+                    name: 'rootTag',
+                    optional: false,
+                    typeAnnotation: {
+                      type: 'ReservedTypeAnnotation',
+                      name: 'RootTag',
+                    },
+                  },
+                ],
+                returnTypeAnnotation: {
+                  type: 'VoidTypeAnnotation',
+                },
+              },
+            },
+            {
+              name: 'hotspotUpdate',
+              optional: false,
+              typeAnnotation: {
+                type: 'FunctionTypeAnnotation',
+                params: [
+                  {
+                    name: 'x',
+                    optional: false,
+                    typeAnnotation: {
+                      type: 'Int32TypeAnnotation',
+                    },
+                  },
+                  {
+                    name: 'y',
+                    optional: false,
+                    typeAnnotation: {
+                      type: 'Int32TypeAnnotation',
+                    },
+                  },
+                ],
+                returnTypeAnnotation: {
+                  type: 'VoidTypeAnnotation',
+                },
+              },
+            },
+          ],
+        },
+      },
+    },
+  },
+};
+
+const EXCLUDE_ANDROID: SchemaType = {
+  modules: {
+    ExcludedAndroid: {
+      type: 'Component',
+      components: {
+        ExcludedAndroidComponent: {
+          excludedPlatforms: ['android'],
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [],
+          props: [],
+          commands: [],
+        },
+      },
+    },
+  },
+};
+
+const EXCLUDE_ANDROID_IOS: SchemaType = {
+  modules: {
+    ExcludedAndroidIos: {
+      type: 'Component',
+      components: {
+        ExcludedAndroidIosComponent: {
+          excludedPlatforms: ['android', 'iOS'],
+          extendsProps: [
+            {
+              type: 'ReactNativeBuiltInType',
+              knownTypeName: 'ReactNativeCoreViewProps',
+            },
+          ],
+          events: [],
+          props: [],
+          commands: [],
+        },
+      },
+    },
+  },
+};
+
+module.exports = {
+  NO_PROPS_NO_EVENTS,
+  INTERFACE_ONLY,
+  BOOLEAN_PROP,
+  STRING_PROP,
+  INTEGER_PROPS,
+  DOUBLE_PROPS,
+  FLOAT_PROPS,
+  COLOR_PROP,
+  IMAGE_PROP,
+  POINT_PROP,
+  INSETS_PROP,
+  ARRAY_PROPS,
+  ARRAY_PROPS_WITH_NESTED_OBJECT,
+  OBJECT_PROPS,
+  MULTI_NATIVE_PROP,
+  STRING_ENUM_PROP,
+  INT32_ENUM_PROP,
+  EVENT_PROPS,
+  EVENTS_WITH_PAPER_NAME,
+  EVENT_NESTED_OBJECT_PROPS,
+  TWO_COMPONENTS_SAME_FILE,
+  TWO_COMPONENTS_DIFFERENT_FILES,
+  COMMANDS,
+  COMMANDS_AND_PROPS,
+  EXCLUDE_ANDROID,
+  EXCLUDE_ANDROID_IOS,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GenerateComponentDescriptorH-test.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GenerateComponentDescriptorH-test.js
new file mode 100644
index 0000000..02133c7
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GenerateComponentDescriptorH-test.js
@@ -0,0 +1,27 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @emails oncall+react_native
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const fixtures = require('../__test_fixtures__/fixtures.js');
+const generator = require('../GenerateComponentDescriptorH.js');
+
+describe('GenerateComponentDescriptorH', () => {
+  Object.keys(fixtures)
+    .sort()
+    .forEach(fixtureName => {
+      const fixture = fixtures[fixtureName];
+
+      it(`can generate fixture ${fixtureName}`, () => {
+        expect(generator.generate(fixtureName, fixture)).toMatchSnapshot();
+      });
+    });
+});
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GenerateComponentHObjCpp-test.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GenerateComponentHObjCpp-test.js
new file mode 100644
index 0000000..52b6389
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GenerateComponentHObjCpp-test.js
@@ -0,0 +1,27 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @emails oncall+react_native
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const fixtures = require('../__test_fixtures__/fixtures.js');
+const generator = require('../GenerateComponentHObjCpp.js');
+
+describe('GenerateComponentHObjCpp', () => {
+  Object.keys(fixtures)
+    .sort()
+    .forEach(fixtureName => {
+      const fixture = fixtures[fixtureName];
+
+      it(`can generate fixture ${fixtureName}`, () => {
+        expect(generator.generate(fixtureName, fixture)).toMatchSnapshot();
+      });
+    });
+});
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GenerateEventEmitterCpp-test.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GenerateEventEmitterCpp-test.js
new file mode 100644
index 0000000..14ac106
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GenerateEventEmitterCpp-test.js
@@ -0,0 +1,27 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @emails oncall+react_native
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const fixtures = require('../__test_fixtures__/fixtures.js');
+const generator = require('../GenerateEventEmitterCpp.js');
+
+describe('GenerateEventEmitterCpp', () => {
+  Object.keys(fixtures)
+    .sort()
+    .forEach(fixtureName => {
+      const fixture = fixtures[fixtureName];
+
+      it(`can generate fixture ${fixtureName}`, () => {
+        expect(generator.generate(fixtureName, fixture)).toMatchSnapshot();
+      });
+    });
+});
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GenerateEventEmitterH-test.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GenerateEventEmitterH-test.js
new file mode 100644
index 0000000..2b6a264
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GenerateEventEmitterH-test.js
@@ -0,0 +1,27 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @emails oncall+react_native
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const fixtures = require('../__test_fixtures__/fixtures.js');
+const generator = require('../GenerateEventEmitterH.js');
+
+describe('GenerateEventEmitterH', () => {
+  Object.keys(fixtures)
+    .sort()
+    .forEach(fixtureName => {
+      const fixture = fixtures[fixtureName];
+
+      it(`can generate fixture ${fixtureName}`, () => {
+        expect(generator.generate(fixtureName, fixture)).toMatchSnapshot();
+      });
+    });
+});
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GeneratePropsCpp-test.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GeneratePropsCpp-test.js
new file mode 100644
index 0000000..f9b9332
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GeneratePropsCpp-test.js
@@ -0,0 +1,27 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @emails oncall+react_native
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const fixtures = require('../__test_fixtures__/fixtures.js');
+const generator = require('../GeneratePropsCpp.js');
+
+describe('GeneratePropsCpp', () => {
+  Object.keys(fixtures)
+    .sort()
+    .forEach(fixtureName => {
+      const fixture = fixtures[fixtureName];
+
+      it(`can generate fixture ${fixtureName}`, () => {
+        expect(generator.generate(fixtureName, fixture)).toMatchSnapshot();
+      });
+    });
+});
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GeneratePropsH-test.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GeneratePropsH-test.js
new file mode 100644
index 0000000..77305fc
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GeneratePropsH-test.js
@@ -0,0 +1,27 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @emails oncall+react_native
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const fixtures = require('../__test_fixtures__/fixtures.js');
+const generator = require('../GeneratePropsH.js');
+
+describe('GeneratePropsH', () => {
+  Object.keys(fixtures)
+    .sort()
+    .forEach(fixtureName => {
+      const fixture = fixtures[fixtureName];
+
+      it(`can generate fixture ${fixtureName}`, () => {
+        expect(generator.generate(fixtureName, fixture)).toMatchSnapshot();
+      });
+    });
+});
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GeneratePropsJavaDelegate-test.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GeneratePropsJavaDelegate-test.js
new file mode 100644
index 0000000..36f1f9e
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GeneratePropsJavaDelegate-test.js
@@ -0,0 +1,27 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @emails oncall+react_native
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const fixtures = require('../__test_fixtures__/fixtures.js');
+const generator = require('../GeneratePropsJavaDelegate.js');
+
+describe('GeneratePropsJavaDelegate', () => {
+  Object.keys(fixtures)
+    .sort()
+    .forEach(fixtureName => {
+      const fixture = fixtures[fixtureName];
+
+      it(`can generate fixture ${fixtureName}`, () => {
+        expect(generator.generate(fixtureName, fixture)).toMatchSnapshot();
+      });
+    });
+});
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GeneratePropsJavaInterface-test.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GeneratePropsJavaInterface-test.js
new file mode 100644
index 0000000..cc1eada
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GeneratePropsJavaInterface-test.js
@@ -0,0 +1,27 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @emails oncall+react_native
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const fixtures = require('../__test_fixtures__/fixtures.js');
+const generator = require('../GeneratePropsJavaInterface.js');
+
+describe('GeneratePropsJavaInterface', () => {
+  Object.keys(fixtures)
+    .sort()
+    .forEach(fixtureName => {
+      const fixture = fixtures[fixtureName];
+
+      it(`can generate fixture ${fixtureName}`, () => {
+        expect(generator.generate(fixtureName, fixture)).toMatchSnapshot();
+      });
+    });
+});
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GeneratePropsJavaPojo-test.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GeneratePropsJavaPojo-test.js
new file mode 100644
index 0000000..80b2df4
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GeneratePropsJavaPojo-test.js
@@ -0,0 +1,27 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @emails oncall+react_native
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const fixtures = require('../__test_fixtures__/fixtures.js');
+const generator = require('../GeneratePropsJavaPojo');
+
+describe('GeneratePropsJavaPojo', () => {
+  Object.keys(fixtures)
+    .sort()
+    .forEach(fixtureName => {
+      const fixture = fixtures[fixtureName];
+
+      it(`can generate fixture ${fixtureName}`, () => {
+        expect(generator.generate(fixtureName, fixture)).toMatchSnapshot();
+      });
+    });
+});
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GenerateShadowNodeCpp-test.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GenerateShadowNodeCpp-test.js
new file mode 100644
index 0000000..b3cc7ef
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GenerateShadowNodeCpp-test.js
@@ -0,0 +1,29 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @emails oncall+react_native
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const fixtures = require('../__test_fixtures__/fixtures.js');
+const generator = require('../GenerateShadowNodeCpp.js');
+
+describe('GenerateShadowNodeCpp', () => {
+  Object.keys(fixtures)
+    .sort()
+    .forEach(fixtureName => {
+      const fixture = fixtures[fixtureName];
+
+      it(`can generate fixture ${fixtureName}`, () => {
+        expect(
+          generator.generate(fixtureName, fixture, 'SampleSpec'),
+        ).toMatchSnapshot();
+      });
+    });
+});
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GenerateShadowNodeH-test.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GenerateShadowNodeH-test.js
new file mode 100644
index 0000000..ea704d4
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GenerateShadowNodeH-test.js
@@ -0,0 +1,27 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @emails oncall+react_native
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const fixtures = require('../__test_fixtures__/fixtures.js');
+const generator = require('../GenerateShadowNodeH.js');
+
+describe('GenerateShadowNodeH', () => {
+  Object.keys(fixtures)
+    .sort()
+    .forEach(fixtureName => {
+      const fixture = fixtures[fixtureName];
+
+      it(`can generate fixture ${fixtureName}`, () => {
+        expect(generator.generate(fixtureName, fixture)).toMatchSnapshot();
+      });
+    });
+});
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GenerateTests-test.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GenerateTests-test.js
new file mode 100644
index 0000000..6961d0b
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GenerateTests-test.js
@@ -0,0 +1,27 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @emails oncall+react_native
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const fixtures = require('../__test_fixtures__/fixtures.js');
+const generator = require('../GenerateTests.js');
+
+describe('GenerateTests', () => {
+  Object.keys(fixtures)
+    .sort()
+    .forEach(fixtureName => {
+      const fixture = fixtures[fixtureName];
+
+      it(`can generate fixture ${fixtureName}`, () => {
+        expect(generator.generate(fixtureName, fixture)).toMatchSnapshot();
+      });
+    });
+});
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GenerateViewConfigJs-test.js b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GenerateViewConfigJs-test.js
new file mode 100644
index 0000000..dbb69c0
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/GenerateViewConfigJs-test.js
@@ -0,0 +1,53 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @emails oncall+react_native
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const fixtures = require('../__test_fixtures__/fixtures.js');
+const generator = require('../GenerateViewConfigJs.js');
+
+describe('GenerateViewConfigJs', () => {
+  Object.keys(fixtures)
+    .sort()
+    .forEach(fixtureName => {
+      const fixture = fixtures[fixtureName];
+
+      it(`can generate fixture ${fixtureName}`, () => {
+        expect(generator.generate(fixtureName, fixture)).toMatchSnapshot();
+      });
+    });
+
+  it('can generate fixture with a deprecated view config name', () => {
+    expect(
+      generator.generate('DEPRECATED_VIEW_CONFIG_NAME', {
+        modules: {
+          Component: {
+            type: 'Component',
+            components: {
+              NativeComponentName: {
+                paperComponentNameDeprecated: 'DeprecatedNativeComponentName',
+                extendsProps: [
+                  {
+                    type: 'ReactNativeBuiltInType',
+                    knownTypeName: 'ReactNativeCoreViewProps',
+                  },
+                ],
+                events: [],
+                props: [],
+                commands: [],
+              },
+            },
+          },
+        },
+      }),
+    ).toMatchSnapshot();
+  });
+});
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GenerateComponentDescriptorH-test.js.snap b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GenerateComponentDescriptorH-test.js.snap
new file mode 100644
index 0000000..34b1f42
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GenerateComponentDescriptorH-test.js.snap
@@ -0,0 +1,731 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GenerateComponentDescriptorH can generate fixture ARRAY_PROPS 1`] = `
+Map {
+  "ComponentDescriptors.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/ARRAY_PROPS/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+using ArrayPropsNativeComponentComponentDescriptor = ConcreteComponentDescriptor<ArrayPropsNativeComponentShadowNode>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateComponentDescriptorH can generate fixture ARRAY_PROPS_WITH_NESTED_OBJECT 1`] = `
+Map {
+  "ComponentDescriptors.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/ARRAY_PROPS_WITH_NESTED_OBJECT/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+using ArrayPropsNativeComponentComponentDescriptor = ConcreteComponentDescriptor<ArrayPropsNativeComponentShadowNode>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateComponentDescriptorH can generate fixture BOOLEAN_PROP 1`] = `
+Map {
+  "ComponentDescriptors.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/BOOLEAN_PROP/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+using BooleanPropNativeComponentComponentDescriptor = ConcreteComponentDescriptor<BooleanPropNativeComponentShadowNode>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateComponentDescriptorH can generate fixture COLOR_PROP 1`] = `
+Map {
+  "ComponentDescriptors.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/COLOR_PROP/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+using ColorPropNativeComponentComponentDescriptor = ConcreteComponentDescriptor<ColorPropNativeComponentShadowNode>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateComponentDescriptorH can generate fixture COMMANDS 1`] = `
+Map {
+  "ComponentDescriptors.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/COMMANDS/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+using CommandNativeComponentComponentDescriptor = ConcreteComponentDescriptor<CommandNativeComponentShadowNode>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateComponentDescriptorH can generate fixture COMMANDS_AND_PROPS 1`] = `
+Map {
+  "ComponentDescriptors.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/COMMANDS_AND_PROPS/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+using CommandNativeComponentComponentDescriptor = ConcreteComponentDescriptor<CommandNativeComponentShadowNode>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateComponentDescriptorH can generate fixture DOUBLE_PROPS 1`] = `
+Map {
+  "ComponentDescriptors.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/DOUBLE_PROPS/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+using DoublePropNativeComponentComponentDescriptor = ConcreteComponentDescriptor<DoublePropNativeComponentShadowNode>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateComponentDescriptorH can generate fixture EVENT_NESTED_OBJECT_PROPS 1`] = `
+Map {
+  "ComponentDescriptors.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/EVENT_NESTED_OBJECT_PROPS/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+using EventsNestedObjectNativeComponentComponentDescriptor = ConcreteComponentDescriptor<EventsNestedObjectNativeComponentShadowNode>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateComponentDescriptorH can generate fixture EVENT_PROPS 1`] = `
+Map {
+  "ComponentDescriptors.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/EVENT_PROPS/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+using EventsNativeComponentComponentDescriptor = ConcreteComponentDescriptor<EventsNativeComponentShadowNode>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateComponentDescriptorH can generate fixture EVENTS_WITH_PAPER_NAME 1`] = `
+Map {
+  "ComponentDescriptors.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/EVENTS_WITH_PAPER_NAME/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateComponentDescriptorH can generate fixture EXCLUDE_ANDROID 1`] = `
+Map {
+  "ComponentDescriptors.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/EXCLUDE_ANDROID/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+using ExcludedAndroidComponentComponentDescriptor = ConcreteComponentDescriptor<ExcludedAndroidComponentShadowNode>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateComponentDescriptorH can generate fixture EXCLUDE_ANDROID_IOS 1`] = `
+Map {
+  "ComponentDescriptors.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/EXCLUDE_ANDROID_IOS/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+using ExcludedAndroidIosComponentComponentDescriptor = ConcreteComponentDescriptor<ExcludedAndroidIosComponentShadowNode>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateComponentDescriptorH can generate fixture FLOAT_PROPS 1`] = `
+Map {
+  "ComponentDescriptors.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/FLOAT_PROPS/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+using FloatPropNativeComponentComponentDescriptor = ConcreteComponentDescriptor<FloatPropNativeComponentShadowNode>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateComponentDescriptorH can generate fixture IMAGE_PROP 1`] = `
+Map {
+  "ComponentDescriptors.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/IMAGE_PROP/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+using ImagePropNativeComponentComponentDescriptor = ConcreteComponentDescriptor<ImagePropNativeComponentShadowNode>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateComponentDescriptorH can generate fixture INSETS_PROP 1`] = `
+Map {
+  "ComponentDescriptors.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/INSETS_PROP/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+using InsetsPropNativeComponentComponentDescriptor = ConcreteComponentDescriptor<InsetsPropNativeComponentShadowNode>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateComponentDescriptorH can generate fixture INT32_ENUM_PROP 1`] = `
+Map {
+  "ComponentDescriptors.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/INT32_ENUM_PROP/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+using Int32EnumPropsNativeComponentComponentDescriptor = ConcreteComponentDescriptor<Int32EnumPropsNativeComponentShadowNode>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateComponentDescriptorH can generate fixture INTEGER_PROPS 1`] = `
+Map {
+  "ComponentDescriptors.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/INTEGER_PROPS/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+using IntegerPropNativeComponentComponentDescriptor = ConcreteComponentDescriptor<IntegerPropNativeComponentShadowNode>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateComponentDescriptorH can generate fixture INTERFACE_ONLY 1`] = `
+Map {
+  "ComponentDescriptors.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/INTERFACE_ONLY/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateComponentDescriptorH can generate fixture MULTI_NATIVE_PROP 1`] = `
+Map {
+  "ComponentDescriptors.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/MULTI_NATIVE_PROP/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+using ImageColorPropNativeComponentComponentDescriptor = ConcreteComponentDescriptor<ImageColorPropNativeComponentShadowNode>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateComponentDescriptorH can generate fixture NO_PROPS_NO_EVENTS 1`] = `
+Map {
+  "ComponentDescriptors.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/NO_PROPS_NO_EVENTS/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+using NoPropsNoEventsComponentComponentDescriptor = ConcreteComponentDescriptor<NoPropsNoEventsComponentShadowNode>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateComponentDescriptorH can generate fixture OBJECT_PROPS 1`] = `
+Map {
+  "ComponentDescriptors.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/OBJECT_PROPS/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+using ObjectPropsComponentDescriptor = ConcreteComponentDescriptor<ObjectPropsShadowNode>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateComponentDescriptorH can generate fixture POINT_PROP 1`] = `
+Map {
+  "ComponentDescriptors.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/POINT_PROP/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+using PointPropNativeComponentComponentDescriptor = ConcreteComponentDescriptor<PointPropNativeComponentShadowNode>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateComponentDescriptorH can generate fixture STRING_ENUM_PROP 1`] = `
+Map {
+  "ComponentDescriptors.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/STRING_ENUM_PROP/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+using StringEnumPropsNativeComponentComponentDescriptor = ConcreteComponentDescriptor<StringEnumPropsNativeComponentShadowNode>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateComponentDescriptorH can generate fixture STRING_PROP 1`] = `
+Map {
+  "ComponentDescriptors.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/STRING_PROP/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+using StringPropComponentComponentDescriptor = ConcreteComponentDescriptor<StringPropComponentShadowNode>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateComponentDescriptorH can generate fixture TWO_COMPONENTS_DIFFERENT_FILES 1`] = `
+Map {
+  "ComponentDescriptors.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/TWO_COMPONENTS_DIFFERENT_FILES/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+using MultiFile1NativeComponentComponentDescriptor = ConcreteComponentDescriptor<MultiFile1NativeComponentShadowNode>;
+using MultiFile2NativeComponentComponentDescriptor = ConcreteComponentDescriptor<MultiFile2NativeComponentShadowNode>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateComponentDescriptorH can generate fixture TWO_COMPONENTS_SAME_FILE 1`] = `
+Map {
+  "ComponentDescriptors.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/TWO_COMPONENTS_SAME_FILE/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook {
+namespace react {
+
+using MultiComponent1NativeComponentComponentDescriptor = ConcreteComponentDescriptor<MultiComponent1NativeComponentShadowNode>;
+using MultiComponent2NativeComponentComponentDescriptor = ConcreteComponentDescriptor<MultiComponent2NativeComponentShadowNode>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GenerateComponentHObjCpp-test.js.snap b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GenerateComponentHObjCpp-test.js.snap
new file mode 100644
index 0000000..68e1b8f
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GenerateComponentHObjCpp-test.js.snap
@@ -0,0 +1,793 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GenerateComponentHObjCpp can generate fixture ARRAY_PROPS 1`] = `
+Map {
+  "RCTComponentViewHelpers.h" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol RCTArrayPropsNativeComponentViewProtocol <NSObject>
+
+@end
+
+NS_ASSUME_NONNULL_END",
+}
+`;
+
+exports[`GenerateComponentHObjCpp can generate fixture ARRAY_PROPS_WITH_NESTED_OBJECT 1`] = `
+Map {
+  "RCTComponentViewHelpers.h" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol RCTArrayPropsNativeComponentViewProtocol <NSObject>
+
+@end
+
+NS_ASSUME_NONNULL_END",
+}
+`;
+
+exports[`GenerateComponentHObjCpp can generate fixture BOOLEAN_PROP 1`] = `
+Map {
+  "RCTComponentViewHelpers.h" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol RCTBooleanPropNativeComponentViewProtocol <NSObject>
+
+@end
+
+NS_ASSUME_NONNULL_END",
+}
+`;
+
+exports[`GenerateComponentHObjCpp can generate fixture COLOR_PROP 1`] = `
+Map {
+  "RCTComponentViewHelpers.h" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol RCTColorPropNativeComponentViewProtocol <NSObject>
+
+@end
+
+NS_ASSUME_NONNULL_END",
+}
+`;
+
+exports[`GenerateComponentHObjCpp can generate fixture COMMANDS 1`] = `
+Map {
+  "RCTComponentViewHelpers.h" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol RCTCommandNativeComponentViewProtocol <NSObject>
+- (void)flashScrollIndicators;
+- (void)allTypes:(NSInteger)x y:(float)y z:(double)z message:(NSString *)message animated:(BOOL)animated;
+@end
+
+RCT_EXTERN inline void RCTCommandNativeComponentHandleCommand(
+  id<RCTCommandNativeComponentViewProtocol> componentView,
+  NSString const *commandName,
+  NSArray const *args)
+{
+  if ([commandName isEqualToString:@\\"flashScrollIndicators\\"]) {
+#if RCT_DEBUG
+  if ([args count] != 0) {
+    RCTLogError(@\\"%@ command %@ received %d arguments, expected %d.\\", @\\"CommandNativeComponent\\", commandName, (int)[args count], 0);
+    return;
+  }
+#endif
+
+  
+
+  [componentView flashScrollIndicators];
+  return;
+}
+
+if ([commandName isEqualToString:@\\"allTypes\\"]) {
+#if RCT_DEBUG
+  if ([args count] != 5) {
+    RCTLogError(@\\"%@ command %@ received %d arguments, expected %d.\\", @\\"CommandNativeComponent\\", commandName, (int)[args count], 5);
+    return;
+  }
+#endif
+
+  NSObject *arg0 = args[0];
+#if RCT_DEBUG
+  if (!RCTValidateTypeOfViewCommandArgument(arg0, [NSNumber class], @\\"number\\", @\\"CommandNativeComponent\\", commandName, @\\"1st\\")) {
+    return;
+  }
+#endif
+  NSInteger x = [(NSNumber *)arg0 intValue];
+
+NSObject *arg1 = args[1];
+#if RCT_DEBUG
+  if (!RCTValidateTypeOfViewCommandArgument(arg1, [NSNumber class], @\\"float\\", @\\"CommandNativeComponent\\", commandName, @\\"2nd\\")) {
+    return;
+  }
+#endif
+  float y = [(NSNumber *)arg1 floatValue];
+
+NSObject *arg2 = args[2];
+#if RCT_DEBUG
+  if (!RCTValidateTypeOfViewCommandArgument(arg2, [NSNumber class], @\\"double\\", @\\"CommandNativeComponent\\", commandName, @\\"3rd\\")) {
+    return;
+  }
+#endif
+  double z = [(NSNumber *)arg2 doubleValue];
+
+NSObject *arg3 = args[3];
+#if RCT_DEBUG
+  if (!RCTValidateTypeOfViewCommandArgument(arg3, [NSString class], @\\"string\\", @\\"CommandNativeComponent\\", commandName, @\\"4th\\")) {
+    return;
+  }
+#endif
+  NSString * message = (NSString *)arg3;
+
+NSObject *arg4 = args[4];
+#if RCT_DEBUG
+  if (!RCTValidateTypeOfViewCommandArgument(arg4, [NSNumber class], @\\"boolean\\", @\\"CommandNativeComponent\\", commandName, @\\"5th\\")) {
+    return;
+  }
+#endif
+  BOOL animated = [(NSNumber *)arg4 boolValue];
+
+  [componentView allTypes:x y:y z:z message:message animated:animated];
+  return;
+}
+
+#if RCT_DEBUG
+  RCTLogError(@\\"%@ received command %@, which is not a supported command.\\", @\\"CommandNativeComponent\\", commandName);
+#endif
+}
+
+NS_ASSUME_NONNULL_END",
+}
+`;
+
+exports[`GenerateComponentHObjCpp can generate fixture COMMANDS_AND_PROPS 1`] = `
+Map {
+  "RCTComponentViewHelpers.h" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol RCTCommandNativeComponentViewProtocol <NSObject>
+- (void)handleRootTag:(double)rootTag;
+- (void)hotspotUpdate:(NSInteger)x y:(NSInteger)y;
+@end
+
+RCT_EXTERN inline void RCTCommandNativeComponentHandleCommand(
+  id<RCTCommandNativeComponentViewProtocol> componentView,
+  NSString const *commandName,
+  NSArray const *args)
+{
+  if ([commandName isEqualToString:@\\"handleRootTag\\"]) {
+#if RCT_DEBUG
+  if ([args count] != 1) {
+    RCTLogError(@\\"%@ command %@ received %d arguments, expected %d.\\", @\\"CommandNativeComponent\\", commandName, (int)[args count], 1);
+    return;
+  }
+#endif
+
+  NSObject *arg0 = args[0];
+#if RCT_DEBUG
+  if (!RCTValidateTypeOfViewCommandArgument(arg0, [NSNumber class], @\\"double\\", @\\"CommandNativeComponent\\", commandName, @\\"1st\\")) {
+    return;
+  }
+#endif
+  double rootTag = [(NSNumber *)arg0 doubleValue];
+
+  [componentView handleRootTag:rootTag];
+  return;
+}
+
+if ([commandName isEqualToString:@\\"hotspotUpdate\\"]) {
+#if RCT_DEBUG
+  if ([args count] != 2) {
+    RCTLogError(@\\"%@ command %@ received %d arguments, expected %d.\\", @\\"CommandNativeComponent\\", commandName, (int)[args count], 2);
+    return;
+  }
+#endif
+
+  NSObject *arg0 = args[0];
+#if RCT_DEBUG
+  if (!RCTValidateTypeOfViewCommandArgument(arg0, [NSNumber class], @\\"number\\", @\\"CommandNativeComponent\\", commandName, @\\"1st\\")) {
+    return;
+  }
+#endif
+  NSInteger x = [(NSNumber *)arg0 intValue];
+
+NSObject *arg1 = args[1];
+#if RCT_DEBUG
+  if (!RCTValidateTypeOfViewCommandArgument(arg1, [NSNumber class], @\\"number\\", @\\"CommandNativeComponent\\", commandName, @\\"2nd\\")) {
+    return;
+  }
+#endif
+  NSInteger y = [(NSNumber *)arg1 intValue];
+
+  [componentView hotspotUpdate:x y:y];
+  return;
+}
+
+#if RCT_DEBUG
+  RCTLogError(@\\"%@ received command %@, which is not a supported command.\\", @\\"CommandNativeComponent\\", commandName);
+#endif
+}
+
+NS_ASSUME_NONNULL_END",
+}
+`;
+
+exports[`GenerateComponentHObjCpp can generate fixture DOUBLE_PROPS 1`] = `
+Map {
+  "RCTComponentViewHelpers.h" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol RCTDoublePropNativeComponentViewProtocol <NSObject>
+
+@end
+
+NS_ASSUME_NONNULL_END",
+}
+`;
+
+exports[`GenerateComponentHObjCpp can generate fixture EVENT_NESTED_OBJECT_PROPS 1`] = `
+Map {
+  "RCTComponentViewHelpers.h" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol RCTEventsNestedObjectNativeComponentViewProtocol <NSObject>
+
+@end
+
+NS_ASSUME_NONNULL_END",
+}
+`;
+
+exports[`GenerateComponentHObjCpp can generate fixture EVENT_PROPS 1`] = `
+Map {
+  "RCTComponentViewHelpers.h" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol RCTEventsNativeComponentViewProtocol <NSObject>
+
+@end
+
+NS_ASSUME_NONNULL_END",
+}
+`;
+
+exports[`GenerateComponentHObjCpp can generate fixture EVENTS_WITH_PAPER_NAME 1`] = `
+Map {
+  "RCTComponentViewHelpers.h" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol RCTInterfaceOnlyComponentViewProtocol <NSObject>
+
+@end
+
+NS_ASSUME_NONNULL_END",
+}
+`;
+
+exports[`GenerateComponentHObjCpp can generate fixture EXCLUDE_ANDROID 1`] = `
+Map {
+  "RCTComponentViewHelpers.h" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol RCTExcludedAndroidComponentViewProtocol <NSObject>
+
+@end
+
+NS_ASSUME_NONNULL_END",
+}
+`;
+
+exports[`GenerateComponentHObjCpp can generate fixture EXCLUDE_ANDROID_IOS 1`] = `
+Map {
+  "RCTComponentViewHelpers.h" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+
+
+NS_ASSUME_NONNULL_END",
+}
+`;
+
+exports[`GenerateComponentHObjCpp can generate fixture FLOAT_PROPS 1`] = `
+Map {
+  "RCTComponentViewHelpers.h" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol RCTFloatPropNativeComponentViewProtocol <NSObject>
+
+@end
+
+NS_ASSUME_NONNULL_END",
+}
+`;
+
+exports[`GenerateComponentHObjCpp can generate fixture IMAGE_PROP 1`] = `
+Map {
+  "RCTComponentViewHelpers.h" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol RCTImagePropNativeComponentViewProtocol <NSObject>
+
+@end
+
+NS_ASSUME_NONNULL_END",
+}
+`;
+
+exports[`GenerateComponentHObjCpp can generate fixture INSETS_PROP 1`] = `
+Map {
+  "RCTComponentViewHelpers.h" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol RCTInsetsPropNativeComponentViewProtocol <NSObject>
+
+@end
+
+NS_ASSUME_NONNULL_END",
+}
+`;
+
+exports[`GenerateComponentHObjCpp can generate fixture INT32_ENUM_PROP 1`] = `
+Map {
+  "RCTComponentViewHelpers.h" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol RCTInt32EnumPropsNativeComponentViewProtocol <NSObject>
+
+@end
+
+NS_ASSUME_NONNULL_END",
+}
+`;
+
+exports[`GenerateComponentHObjCpp can generate fixture INTEGER_PROPS 1`] = `
+Map {
+  "RCTComponentViewHelpers.h" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol RCTIntegerPropNativeComponentViewProtocol <NSObject>
+
+@end
+
+NS_ASSUME_NONNULL_END",
+}
+`;
+
+exports[`GenerateComponentHObjCpp can generate fixture INTERFACE_ONLY 1`] = `
+Map {
+  "RCTComponentViewHelpers.h" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol RCTInterfaceOnlyComponentViewProtocol <NSObject>
+
+@end
+
+NS_ASSUME_NONNULL_END",
+}
+`;
+
+exports[`GenerateComponentHObjCpp can generate fixture MULTI_NATIVE_PROP 1`] = `
+Map {
+  "RCTComponentViewHelpers.h" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol RCTImageColorPropNativeComponentViewProtocol <NSObject>
+
+@end
+
+NS_ASSUME_NONNULL_END",
+}
+`;
+
+exports[`GenerateComponentHObjCpp can generate fixture NO_PROPS_NO_EVENTS 1`] = `
+Map {
+  "RCTComponentViewHelpers.h" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol RCTNoPropsNoEventsComponentViewProtocol <NSObject>
+
+@end
+
+NS_ASSUME_NONNULL_END",
+}
+`;
+
+exports[`GenerateComponentHObjCpp can generate fixture OBJECT_PROPS 1`] = `
+Map {
+  "RCTComponentViewHelpers.h" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol RCTObjectPropsViewProtocol <NSObject>
+
+@end
+
+NS_ASSUME_NONNULL_END",
+}
+`;
+
+exports[`GenerateComponentHObjCpp can generate fixture POINT_PROP 1`] = `
+Map {
+  "RCTComponentViewHelpers.h" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol RCTPointPropNativeComponentViewProtocol <NSObject>
+
+@end
+
+NS_ASSUME_NONNULL_END",
+}
+`;
+
+exports[`GenerateComponentHObjCpp can generate fixture STRING_ENUM_PROP 1`] = `
+Map {
+  "RCTComponentViewHelpers.h" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol RCTStringEnumPropsNativeComponentViewProtocol <NSObject>
+
+@end
+
+NS_ASSUME_NONNULL_END",
+}
+`;
+
+exports[`GenerateComponentHObjCpp can generate fixture STRING_PROP 1`] = `
+Map {
+  "RCTComponentViewHelpers.h" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol RCTStringPropComponentViewProtocol <NSObject>
+
+@end
+
+NS_ASSUME_NONNULL_END",
+}
+`;
+
+exports[`GenerateComponentHObjCpp can generate fixture TWO_COMPONENTS_DIFFERENT_FILES 1`] = `
+Map {
+  "RCTComponentViewHelpers.h" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol RCTMultiFile1NativeComponentViewProtocol <NSObject>
+
+@end
+
+@protocol RCTMultiFile2NativeComponentViewProtocol <NSObject>
+
+@end
+
+NS_ASSUME_NONNULL_END",
+}
+`;
+
+exports[`GenerateComponentHObjCpp can generate fixture TWO_COMPONENTS_SAME_FILE 1`] = `
+Map {
+  "RCTComponentViewHelpers.h" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GenerateComponentHObjCpp.js
+*/
+
+#import <Foundation/Foundation.h>
+#import <React/RCTDefines.h>
+#import <React/RCTLog.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol RCTMultiComponent1NativeComponentViewProtocol <NSObject>
+
+@end
+
+@protocol RCTMultiComponent2NativeComponentViewProtocol <NSObject>
+
+@end
+
+NS_ASSUME_NONNULL_END",
+}
+`;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GenerateEventEmitterCpp-test.js.snap b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GenerateEventEmitterCpp-test.js.snap
new file mode 100644
index 0000000..04c0873
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GenerateEventEmitterCpp-test.js.snap
@@ -0,0 +1,716 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GenerateEventEmitterCpp can generate fixture ARRAY_PROPS 1`] = `
+Map {
+  "EventEmitters.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/ARRAY_PROPS/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterCpp can generate fixture ARRAY_PROPS_WITH_NESTED_OBJECT 1`] = `
+Map {
+  "EventEmitters.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/ARRAY_PROPS_WITH_NESTED_OBJECT/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterCpp can generate fixture BOOLEAN_PROP 1`] = `
+Map {
+  "EventEmitters.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/BOOLEAN_PROP/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterCpp can generate fixture COLOR_PROP 1`] = `
+Map {
+  "EventEmitters.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/COLOR_PROP/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterCpp can generate fixture COMMANDS 1`] = `
+Map {
+  "EventEmitters.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/COMMANDS/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterCpp can generate fixture COMMANDS_AND_PROPS 1`] = `
+Map {
+  "EventEmitters.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/COMMANDS_AND_PROPS/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterCpp can generate fixture DOUBLE_PROPS 1`] = `
+Map {
+  "EventEmitters.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/DOUBLE_PROPS/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterCpp can generate fixture EVENT_NESTED_OBJECT_PROPS 1`] = `
+Map {
+  "EventEmitters.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/EVENT_NESTED_OBJECT_PROPS/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+void EventsNestedObjectNativeComponentEventEmitter::onChange(OnChange event) const {
+  dispatchEvent(\\"change\\", [event=std::move(event)](jsi::Runtime &runtime) {
+    auto payload = jsi::Object(runtime);
+    {
+              auto location = jsi::Object(runtime);
+              {
+              auto source = jsi::Object(runtime);
+              source.setProperty(runtime, \\"url\\", event.location.source.url);
+
+              location.setProperty(runtime, \\"source\\", source);
+            }
+location.setProperty(runtime, \\"x\\", event.location.x);
+location.setProperty(runtime, \\"y\\", event.location.y);
+
+              payload.setProperty(runtime, \\"location\\", location);
+            }
+    return payload;
+  });
+}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterCpp can generate fixture EVENT_PROPS 1`] = `
+Map {
+  "EventEmitters.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/EVENT_PROPS/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+void EventsNativeComponentEventEmitter::onChange(OnChange event) const {
+  dispatchEvent(\\"change\\", [event=std::move(event)](jsi::Runtime &runtime) {
+    auto payload = jsi::Object(runtime);
+    payload.setProperty(runtime, \\"value\\", event.value);
+payload.setProperty(runtime, \\"source\\", event.source);
+payload.setProperty(runtime, \\"progress\\", event.progress);
+payload.setProperty(runtime, \\"scale\\", event.scale);
+    return payload;
+  });
+}
+void EventsNativeComponentEventEmitter::onEventDirect(OnEventDirect event) const {
+  dispatchEvent(\\"eventDirect\\", [event=std::move(event)](jsi::Runtime &runtime) {
+    auto payload = jsi::Object(runtime);
+    payload.setProperty(runtime, \\"value\\", event.value);
+    return payload;
+  });
+}
+void EventsNativeComponentEventEmitter::onOrientationChange(OnOrientationChange event) const {
+  dispatchEvent(\\"orientationChange\\", [event=std::move(event)](jsi::Runtime &runtime) {
+    auto payload = jsi::Object(runtime);
+    payload.setProperty(runtime, \\"orientation\\", toString(event.orientation));
+    return payload;
+  });
+}
+void EventsNativeComponentEventEmitter::onEnd() const {
+  dispatchEvent(\\"end\\");
+}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterCpp can generate fixture EVENTS_WITH_PAPER_NAME 1`] = `
+Map {
+  "EventEmitters.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/EVENTS_WITH_PAPER_NAME/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+void InterfaceOnlyComponentEventEmitter::onChange(OnChange event) const {
+  dispatchEvent(\\"change\\", [event=std::move(event)](jsi::Runtime &runtime) {
+    auto payload = jsi::Object(runtime);
+    payload.setProperty(runtime, \\"value\\", event.value);
+    return payload;
+  });
+}
+void InterfaceOnlyComponentEventEmitter::onDire tChange(OnDire tChange event) const {
+  dispatchEvent(\\"dire tChange\\", [event=std::move(event)](jsi::Runtime &runtime) {
+    auto payload = jsi::Object(runtime);
+    payload.setProperty(runtime, \\"value\\", event.value);
+    return payload;
+  });
+}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterCpp can generate fixture EXCLUDE_ANDROID 1`] = `
+Map {
+  "EventEmitters.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/EXCLUDE_ANDROID/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterCpp can generate fixture EXCLUDE_ANDROID_IOS 1`] = `
+Map {
+  "EventEmitters.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/EXCLUDE_ANDROID_IOS/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterCpp can generate fixture FLOAT_PROPS 1`] = `
+Map {
+  "EventEmitters.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/FLOAT_PROPS/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterCpp can generate fixture IMAGE_PROP 1`] = `
+Map {
+  "EventEmitters.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/IMAGE_PROP/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterCpp can generate fixture INSETS_PROP 1`] = `
+Map {
+  "EventEmitters.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/INSETS_PROP/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterCpp can generate fixture INT32_ENUM_PROP 1`] = `
+Map {
+  "EventEmitters.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/INT32_ENUM_PROP/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterCpp can generate fixture INTEGER_PROPS 1`] = `
+Map {
+  "EventEmitters.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/INTEGER_PROPS/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterCpp can generate fixture INTERFACE_ONLY 1`] = `
+Map {
+  "EventEmitters.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/INTERFACE_ONLY/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+void InterfaceOnlyComponentEventEmitter::onChange(OnChange event) const {
+  dispatchEvent(\\"change\\", [event=std::move(event)](jsi::Runtime &runtime) {
+    auto payload = jsi::Object(runtime);
+    payload.setProperty(runtime, \\"value\\", event.value);
+    return payload;
+  });
+}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterCpp can generate fixture MULTI_NATIVE_PROP 1`] = `
+Map {
+  "EventEmitters.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/MULTI_NATIVE_PROP/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterCpp can generate fixture NO_PROPS_NO_EVENTS 1`] = `
+Map {
+  "EventEmitters.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/NO_PROPS_NO_EVENTS/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterCpp can generate fixture OBJECT_PROPS 1`] = `
+Map {
+  "EventEmitters.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/OBJECT_PROPS/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterCpp can generate fixture POINT_PROP 1`] = `
+Map {
+  "EventEmitters.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/POINT_PROP/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterCpp can generate fixture STRING_ENUM_PROP 1`] = `
+Map {
+  "EventEmitters.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/STRING_ENUM_PROP/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterCpp can generate fixture STRING_PROP 1`] = `
+Map {
+  "EventEmitters.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/STRING_PROP/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterCpp can generate fixture TWO_COMPONENTS_DIFFERENT_FILES 1`] = `
+Map {
+  "EventEmitters.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/TWO_COMPONENTS_DIFFERENT_FILES/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterCpp can generate fixture TWO_COMPONENTS_SAME_FILE 1`] = `
+Map {
+  "EventEmitters.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/TWO_COMPONENTS_SAME_FILE/EventEmitters.h>
+
+namespace facebook {
+namespace react {
+
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GenerateEventEmitterH-test.js.snap b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GenerateEventEmitterH-test.js.snap
new file mode 100644
index 0000000..18e1a2c
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GenerateEventEmitterH-test.js.snap
@@ -0,0 +1,758 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GenerateEventEmitterH can generate fixture ARRAY_PROPS 1`] = `
+Map {
+  "EventEmitters.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterH can generate fixture ARRAY_PROPS_WITH_NESTED_OBJECT 1`] = `
+Map {
+  "EventEmitters.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterH can generate fixture BOOLEAN_PROP 1`] = `
+Map {
+  "EventEmitters.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterH can generate fixture COLOR_PROP 1`] = `
+Map {
+  "EventEmitters.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterH can generate fixture COMMANDS 1`] = `
+Map {
+  "EventEmitters.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterH can generate fixture COMMANDS_AND_PROPS 1`] = `
+Map {
+  "EventEmitters.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterH can generate fixture DOUBLE_PROPS 1`] = `
+Map {
+  "EventEmitters.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterH can generate fixture EVENT_NESTED_OBJECT_PROPS 1`] = `
+Map {
+  "EventEmitters.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+class EventsNestedObjectNativeComponentEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  struct OnChangeLocationSource {
+      std::string url;
+    };
+
+  struct OnChangeLocation {
+      OnChangeLocationSource source;
+    int x;
+    int y;
+    };
+
+  struct OnChange {
+      OnChangeLocation location;
+    };
+
+  void onChange(OnChange value) const;
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterH can generate fixture EVENT_PROPS 1`] = `
+Map {
+  "EventEmitters.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+class EventsNativeComponentEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  struct OnChange {
+      bool value;
+    std::string source;
+    int progress;
+    Float scale;
+    };
+
+  struct OnEventDirect {
+      bool value;
+    };
+
+  enum class OnOrientationChangeOrientation {
+    Landscape,
+    Portrait
+  };
+
+  static char const *toString(const OnOrientationChangeOrientation value) {
+    switch (value) {
+      case OnOrientationChangeOrientation::Landscape: return \\"landscape\\";
+      case OnOrientationChangeOrientation::Portrait: return \\"portrait\\";
+    }
+  }
+
+  struct OnOrientationChange {
+      OnOrientationChangeOrientation orientation;
+    };
+
+  void onChange(OnChange value) const;
+
+  void onEventDirect(OnEventDirect value) const;
+
+  void onOrientationChange(OnOrientationChange value) const;
+
+  void onEnd() const;
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterH can generate fixture EVENTS_WITH_PAPER_NAME 1`] = `
+Map {
+  "EventEmitters.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+class InterfaceOnlyComponentEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  struct OnChange {
+      bool value;
+    };
+
+  struct OnDire tChange {
+      bool value;
+    };
+
+  void onChange(OnChange value) const;
+
+  void onDire tChange(OnDire tChange value) const;
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterH can generate fixture EXCLUDE_ANDROID 1`] = `
+Map {
+  "EventEmitters.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterH can generate fixture EXCLUDE_ANDROID_IOS 1`] = `
+Map {
+  "EventEmitters.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterH can generate fixture FLOAT_PROPS 1`] = `
+Map {
+  "EventEmitters.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterH can generate fixture IMAGE_PROP 1`] = `
+Map {
+  "EventEmitters.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterH can generate fixture INSETS_PROP 1`] = `
+Map {
+  "EventEmitters.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterH can generate fixture INT32_ENUM_PROP 1`] = `
+Map {
+  "EventEmitters.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterH can generate fixture INTEGER_PROPS 1`] = `
+Map {
+  "EventEmitters.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterH can generate fixture INTERFACE_ONLY 1`] = `
+Map {
+  "EventEmitters.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+class InterfaceOnlyComponentEventEmitter : public ViewEventEmitter {
+ public:
+  using ViewEventEmitter::ViewEventEmitter;
+
+  struct OnChange {
+      bool value;
+    };
+
+  void onChange(OnChange value) const;
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterH can generate fixture MULTI_NATIVE_PROP 1`] = `
+Map {
+  "EventEmitters.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterH can generate fixture NO_PROPS_NO_EVENTS 1`] = `
+Map {
+  "EventEmitters.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterH can generate fixture OBJECT_PROPS 1`] = `
+Map {
+  "EventEmitters.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterH can generate fixture POINT_PROP 1`] = `
+Map {
+  "EventEmitters.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterH can generate fixture STRING_ENUM_PROP 1`] = `
+Map {
+  "EventEmitters.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterH can generate fixture STRING_PROP 1`] = `
+Map {
+  "EventEmitters.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterH can generate fixture TWO_COMPONENTS_DIFFERENT_FILES 1`] = `
+Map {
+  "EventEmitters.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateEventEmitterH can generate fixture TWO_COMPONENTS_SAME_FILE 1`] = `
+Map {
+  "EventEmitters.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GeneratePropsCpp-test.js.snap b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GeneratePropsCpp-test.js.snap
new file mode 100644
index 0000000..3e5a5b0
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GeneratePropsCpp-test.js.snap
@@ -0,0 +1,897 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GeneratePropsCpp can generate fixture ARRAY_PROPS 1`] = `
+Map {
+  "Props.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/ARRAY_PROPS/Props.h>
+#include <react/renderer/components/image/conversions.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+ArrayPropsNativeComponentProps::ArrayPropsNativeComponentProps(
+    const PropsParserContext &context,
+    const ArrayPropsNativeComponentProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    names(convertRawProp(context, rawProps, \\"names\\", sourceProps.names, {})),
+    disableds(convertRawProp(context, rawProps, \\"disableds\\", sourceProps.disableds, {})),
+    progress(convertRawProp(context, rawProps, \\"progress\\", sourceProps.progress, {})),
+    radii(convertRawProp(context, rawProps, \\"radii\\", sourceProps.radii, {})),
+    colors(convertRawProp(context, rawProps, \\"colors\\", sourceProps.colors, {})),
+    srcs(convertRawProp(context, rawProps, \\"srcs\\", sourceProps.srcs, {})),
+    points(convertRawProp(context, rawProps, \\"points\\", sourceProps.points, {})),
+    sizes(convertRawProp(context, rawProps, \\"sizes\\", sourceProps.sizes, {static_cast<ArrayPropsNativeComponentSizesMask>(ArrayPropsNativeComponentSizes::Small)})),
+    object(convertRawProp(context, rawProps, \\"object\\", sourceProps.object, {})),
+    array(convertRawProp(context, rawProps, \\"array\\", sourceProps.array, {})),
+    arrayOfArrayOfObject(convertRawProp(context, rawProps, \\"arrayOfArrayOfObject\\", sourceProps.arrayOfArrayOfObject, {}))
+      {}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsCpp can generate fixture ARRAY_PROPS_WITH_NESTED_OBJECT 1`] = `
+Map {
+  "Props.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/ARRAY_PROPS_WITH_NESTED_OBJECT/Props.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+ArrayPropsNativeComponentProps::ArrayPropsNativeComponentProps(
+    const PropsParserContext &context,
+    const ArrayPropsNativeComponentProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    nativePrimitives(convertRawProp(context, rawProps, \\"nativePrimitives\\", sourceProps.nativePrimitives, {}))
+      {}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsCpp can generate fixture BOOLEAN_PROP 1`] = `
+Map {
+  "Props.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/BOOLEAN_PROP/Props.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+BooleanPropNativeComponentProps::BooleanPropNativeComponentProps(
+    const PropsParserContext &context,
+    const BooleanPropNativeComponentProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    disabled(convertRawProp(context, rawProps, \\"disabled\\", sourceProps.disabled, {false}))
+      {}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsCpp can generate fixture COLOR_PROP 1`] = `
+Map {
+  "Props.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/COLOR_PROP/Props.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+ColorPropNativeComponentProps::ColorPropNativeComponentProps(
+    const PropsParserContext &context,
+    const ColorPropNativeComponentProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    tintColor(convertRawProp(context, rawProps, \\"tintColor\\", sourceProps.tintColor, {}))
+      {}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsCpp can generate fixture COMMANDS 1`] = `
+Map {
+  "Props.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/COMMANDS/Props.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+CommandNativeComponentProps::CommandNativeComponentProps(
+    const PropsParserContext &context,
+    const CommandNativeComponentProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps)
+
+    
+      {}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsCpp can generate fixture COMMANDS_AND_PROPS 1`] = `
+Map {
+  "Props.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/COMMANDS_AND_PROPS/Props.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+CommandNativeComponentProps::CommandNativeComponentProps(
+    const PropsParserContext &context,
+    const CommandNativeComponentProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    accessibilityHint(convertRawProp(context, rawProps, \\"accessibilityHint\\", sourceProps.accessibilityHint, {\\"\\"}))
+      {}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsCpp can generate fixture DOUBLE_PROPS 1`] = `
+Map {
+  "Props.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/DOUBLE_PROPS/Props.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+DoublePropNativeComponentProps::DoublePropNativeComponentProps(
+    const PropsParserContext &context,
+    const DoublePropNativeComponentProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    blurRadius(convertRawProp(context, rawProps, \\"blurRadius\\", sourceProps.blurRadius, {0.0})),
+    blurRadius2(convertRawProp(context, rawProps, \\"blurRadius2\\", sourceProps.blurRadius2, {0.001})),
+    blurRadius3(convertRawProp(context, rawProps, \\"blurRadius3\\", sourceProps.blurRadius3, {2.1})),
+    blurRadius4(convertRawProp(context, rawProps, \\"blurRadius4\\", sourceProps.blurRadius4, {0.0})),
+    blurRadius5(convertRawProp(context, rawProps, \\"blurRadius5\\", sourceProps.blurRadius5, {1.0})),
+    blurRadius6(convertRawProp(context, rawProps, \\"blurRadius6\\", sourceProps.blurRadius6, {0.0}))
+      {}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsCpp can generate fixture EVENT_NESTED_OBJECT_PROPS 1`] = `
+Map {
+  "Props.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/EVENT_NESTED_OBJECT_PROPS/Props.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+EventsNestedObjectNativeComponentProps::EventsNestedObjectNativeComponentProps(
+    const PropsParserContext &context,
+    const EventsNestedObjectNativeComponentProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    disabled(convertRawProp(context, rawProps, \\"disabled\\", sourceProps.disabled, {false}))
+      {}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsCpp can generate fixture EVENT_PROPS 1`] = `
+Map {
+  "Props.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/EVENT_PROPS/Props.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+EventsNativeComponentProps::EventsNativeComponentProps(
+    const PropsParserContext &context,
+    const EventsNativeComponentProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    disabled(convertRawProp(context, rawProps, \\"disabled\\", sourceProps.disabled, {false}))
+      {}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsCpp can generate fixture EVENTS_WITH_PAPER_NAME 1`] = `
+Map {
+  "Props.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/EVENTS_WITH_PAPER_NAME/Props.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+InterfaceOnlyComponentProps::InterfaceOnlyComponentProps(
+    const PropsParserContext &context,
+    const InterfaceOnlyComponentProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps)
+
+    
+      {}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsCpp can generate fixture EXCLUDE_ANDROID 1`] = `
+Map {
+  "Props.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/EXCLUDE_ANDROID/Props.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+ExcludedAndroidComponentProps::ExcludedAndroidComponentProps(
+    const PropsParserContext &context,
+    const ExcludedAndroidComponentProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps)
+
+    
+      {}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsCpp can generate fixture EXCLUDE_ANDROID_IOS 1`] = `
+Map {
+  "Props.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/EXCLUDE_ANDROID_IOS/Props.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsCpp can generate fixture FLOAT_PROPS 1`] = `
+Map {
+  "Props.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/FLOAT_PROPS/Props.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+FloatPropNativeComponentProps::FloatPropNativeComponentProps(
+    const PropsParserContext &context,
+    const FloatPropNativeComponentProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    blurRadius(convertRawProp(context, rawProps, \\"blurRadius\\", sourceProps.blurRadius, {0.0})),
+    blurRadius2(convertRawProp(context, rawProps, \\"blurRadius2\\", sourceProps.blurRadius2, {0.001})),
+    blurRadius3(convertRawProp(context, rawProps, \\"blurRadius3\\", sourceProps.blurRadius3, {2.1})),
+    blurRadius4(convertRawProp(context, rawProps, \\"blurRadius4\\", sourceProps.blurRadius4, {0.0})),
+    blurRadius5(convertRawProp(context, rawProps, \\"blurRadius5\\", sourceProps.blurRadius5, {1.0})),
+    blurRadius6(convertRawProp(context, rawProps, \\"blurRadius6\\", sourceProps.blurRadius6, {0.0}))
+      {}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsCpp can generate fixture IMAGE_PROP 1`] = `
+Map {
+  "Props.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/IMAGE_PROP/Props.h>
+#include <react/renderer/components/image/conversions.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+ImagePropNativeComponentProps::ImagePropNativeComponentProps(
+    const PropsParserContext &context,
+    const ImagePropNativeComponentProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    thumbImage(convertRawProp(context, rawProps, \\"thumbImage\\", sourceProps.thumbImage, {}))
+      {}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsCpp can generate fixture INSETS_PROP 1`] = `
+Map {
+  "Props.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/INSETS_PROP/Props.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+InsetsPropNativeComponentProps::InsetsPropNativeComponentProps(
+    const PropsParserContext &context,
+    const InsetsPropNativeComponentProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    contentInset(convertRawProp(context, rawProps, \\"contentInset\\", sourceProps.contentInset, {}))
+      {}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsCpp can generate fixture INT32_ENUM_PROP 1`] = `
+Map {
+  "Props.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/INT32_ENUM_PROP/Props.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+Int32EnumPropsNativeComponentProps::Int32EnumPropsNativeComponentProps(
+    const PropsParserContext &context,
+    const Int32EnumPropsNativeComponentProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    maxInterval(convertRawProp(context, rawProps, \\"maxInterval\\", sourceProps.maxInterval, {Int32EnumPropsNativeComponentMaxInterval::MaxInterval0}))
+      {}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsCpp can generate fixture INTEGER_PROPS 1`] = `
+Map {
+  "Props.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/INTEGER_PROPS/Props.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+IntegerPropNativeComponentProps::IntegerPropNativeComponentProps(
+    const PropsParserContext &context,
+    const IntegerPropNativeComponentProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    progress1(convertRawProp(context, rawProps, \\"progress1\\", sourceProps.progress1, {0})),
+    progress2(convertRawProp(context, rawProps, \\"progress2\\", sourceProps.progress2, {-1})),
+    progress3(convertRawProp(context, rawProps, \\"progress3\\", sourceProps.progress3, {10}))
+      {}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsCpp can generate fixture INTERFACE_ONLY 1`] = `
+Map {
+  "Props.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/INTERFACE_ONLY/Props.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+InterfaceOnlyComponentProps::InterfaceOnlyComponentProps(
+    const PropsParserContext &context,
+    const InterfaceOnlyComponentProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    accessibilityHint(convertRawProp(context, rawProps, \\"accessibilityHint\\", sourceProps.accessibilityHint, {\\"\\"}))
+      {}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsCpp can generate fixture MULTI_NATIVE_PROP 1`] = `
+Map {
+  "Props.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/MULTI_NATIVE_PROP/Props.h>
+#include <react/renderer/components/image/conversions.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+ImageColorPropNativeComponentProps::ImageColorPropNativeComponentProps(
+    const PropsParserContext &context,
+    const ImageColorPropNativeComponentProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    thumbImage(convertRawProp(context, rawProps, \\"thumbImage\\", sourceProps.thumbImage, {})),
+    color(convertRawProp(context, rawProps, \\"color\\", sourceProps.color, {})),
+    thumbTintColor(convertRawProp(context, rawProps, \\"thumbTintColor\\", sourceProps.thumbTintColor, {})),
+    point(convertRawProp(context, rawProps, \\"point\\", sourceProps.point, {}))
+      {}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsCpp can generate fixture NO_PROPS_NO_EVENTS 1`] = `
+Map {
+  "Props.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/NO_PROPS_NO_EVENTS/Props.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+NoPropsNoEventsComponentProps::NoPropsNoEventsComponentProps(
+    const PropsParserContext &context,
+    const NoPropsNoEventsComponentProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps)
+
+    
+      {}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsCpp can generate fixture OBJECT_PROPS 1`] = `
+Map {
+  "Props.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/OBJECT_PROPS/Props.h>
+#include <react/renderer/components/image/conversions.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+ObjectPropsProps::ObjectPropsProps(
+    const PropsParserContext &context,
+    const ObjectPropsProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    objectProp(convertRawProp(context, rawProps, \\"objectProp\\", sourceProps.objectProp, {}))
+      {}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsCpp can generate fixture POINT_PROP 1`] = `
+Map {
+  "Props.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/POINT_PROP/Props.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+PointPropNativeComponentProps::PointPropNativeComponentProps(
+    const PropsParserContext &context,
+    const PointPropNativeComponentProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    startPoint(convertRawProp(context, rawProps, \\"startPoint\\", sourceProps.startPoint, {}))
+      {}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsCpp can generate fixture STRING_ENUM_PROP 1`] = `
+Map {
+  "Props.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/STRING_ENUM_PROP/Props.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+StringEnumPropsNativeComponentProps::StringEnumPropsNativeComponentProps(
+    const PropsParserContext &context,
+    const StringEnumPropsNativeComponentProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    alignment(convertRawProp(context, rawProps, \\"alignment\\", sourceProps.alignment, {StringEnumPropsNativeComponentAlignment::Center}))
+      {}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsCpp can generate fixture STRING_PROP 1`] = `
+Map {
+  "Props.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/STRING_PROP/Props.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+StringPropComponentProps::StringPropComponentProps(
+    const PropsParserContext &context,
+    const StringPropComponentProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    accessibilityHint(convertRawProp(context, rawProps, \\"accessibilityHint\\", sourceProps.accessibilityHint, {\\"\\"})),
+    accessibilityRole(convertRawProp(context, rawProps, \\"accessibilityRole\\", sourceProps.accessibilityRole, {}))
+      {}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsCpp can generate fixture TWO_COMPONENTS_DIFFERENT_FILES 1`] = `
+Map {
+  "Props.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/TWO_COMPONENTS_DIFFERENT_FILES/Props.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+MultiFile1NativeComponentProps::MultiFile1NativeComponentProps(
+    const PropsParserContext &context,
+    const MultiFile1NativeComponentProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    disabled(convertRawProp(context, rawProps, \\"disabled\\", sourceProps.disabled, {false}))
+      {}
+MultiFile2NativeComponentProps::MultiFile2NativeComponentProps(
+    const PropsParserContext &context,
+    const MultiFile2NativeComponentProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    disabled(convertRawProp(context, rawProps, \\"disabled\\", sourceProps.disabled, {true}))
+      {}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsCpp can generate fixture TWO_COMPONENTS_SAME_FILE 1`] = `
+Map {
+  "Props.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/TWO_COMPONENTS_SAME_FILE/Props.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook {
+namespace react {
+
+MultiComponent1NativeComponentProps::MultiComponent1NativeComponentProps(
+    const PropsParserContext &context,
+    const MultiComponent1NativeComponentProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    disabled(convertRawProp(context, rawProps, \\"disabled\\", sourceProps.disabled, {false}))
+      {}
+MultiComponent2NativeComponentProps::MultiComponent2NativeComponentProps(
+    const PropsParserContext &context,
+    const MultiComponent2NativeComponentProps &sourceProps,
+    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),
+
+    disabled(convertRawProp(context, rawProps, \\"disabled\\", sourceProps.disabled, {true}))
+      {}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GeneratePropsH-test.js.snap b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GeneratePropsH-test.js.snap
new file mode 100644
index 0000000..707ce40
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GeneratePropsH-test.js.snap
@@ -0,0 +1,1432 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GeneratePropsH can generate fixture ARRAY_PROPS 1`] = `
+Map {
+  "Props.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <cinttypes>
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/graphics/Color.h>
+#include <react/renderer/graphics/Geometry.h>
+#include <react/renderer/imagemanager/primitives.h>
+#include <vector>
+
+namespace facebook {
+namespace react {
+
+using ArrayPropsNativeComponentSizesMask = uint32_t;
+
+enum class ArrayPropsNativeComponentSizes: ArrayPropsNativeComponentSizesMask {
+  Small = 1 << 0,
+  Large = 1 << 1
+};
+
+constexpr bool operator&(
+  ArrayPropsNativeComponentSizesMask const lhs,
+  enum ArrayPropsNativeComponentSizes const rhs) {
+  return lhs & static_cast<ArrayPropsNativeComponentSizesMask>(rhs);
+}
+
+constexpr ArrayPropsNativeComponentSizesMask operator|(
+  ArrayPropsNativeComponentSizesMask const lhs,
+  enum ArrayPropsNativeComponentSizes const rhs) {
+  return lhs | static_cast<ArrayPropsNativeComponentSizesMask>(rhs);
+}
+
+constexpr void operator|=(
+  ArrayPropsNativeComponentSizesMask &lhs,
+  enum ArrayPropsNativeComponentSizes const rhs) {
+  lhs = lhs | static_cast<ArrayPropsNativeComponentSizesMask>(rhs);
+}
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ArrayPropsNativeComponentSizesMask &result) {
+  auto items = std::vector<std::string>{value};
+  for (const auto &item : items) {
+    if (item == \\"small\\") {
+      result |= ArrayPropsNativeComponentSizes::Small;
+      continue;
+    }
+    if (item == \\"large\\") {
+      result |= ArrayPropsNativeComponentSizes::Large;
+      continue;
+    }
+    abort();
+  }
+}
+
+static inline std::string toString(const ArrayPropsNativeComponentSizesMask &value) {
+    auto result = std::string{};
+    auto separator = std::string{\\", \\"};
+
+    if (value & ArrayPropsNativeComponentSizes::Small) {
+      result += \\"small\\" + separator;
+    }
+    if (value & ArrayPropsNativeComponentSizes::Large) {
+      result += \\"large\\" + separator;
+    }
+    if (!result.empty()) {
+      result.erase(result.length() - separator.length());
+    }
+    return result;
+}
+struct ArrayPropsNativeComponentObjectStruct {
+  std::string stringProp;
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ArrayPropsNativeComponentObjectStruct &result) {
+  auto map = (better::map<std::string, RawValue>)value;
+
+  auto stringProp = map.find(\\"stringProp\\");
+  if (stringProp != map.end()) {
+    fromRawValue(context, stringProp->second, result.stringProp);
+  }
+}
+
+static inline std::string toString(const ArrayPropsNativeComponentObjectStruct &value) {
+  return \\"[Object ArrayPropsNativeComponentObjectStruct]\\";
+}
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, std::vector<ArrayPropsNativeComponentObjectStruct> &result) {
+  auto items = (std::vector<RawValue>)value;
+  for (const auto &item : items) {
+    ArrayPropsNativeComponentObjectStruct newItem;
+    fromRawValue(context, item, newItem);
+    result.emplace_back(newItem);
+  }
+}
+
+
+struct ArrayPropsNativeComponentArrayObjectStruct {
+  std::string stringProp;
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ArrayPropsNativeComponentArrayObjectStruct &result) {
+  auto map = (better::map<std::string, RawValue>)value;
+
+  auto stringProp = map.find(\\"stringProp\\");
+  if (stringProp != map.end()) {
+    fromRawValue(context, stringProp->second, result.stringProp);
+  }
+}
+
+static inline std::string toString(const ArrayPropsNativeComponentArrayObjectStruct &value) {
+  return \\"[Object ArrayPropsNativeComponentArrayObjectStruct]\\";
+}
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, std::vector<ArrayPropsNativeComponentArrayObjectStruct> &result) {
+  auto items = (std::vector<RawValue>)value;
+  for (const auto &item : items) {
+    ArrayPropsNativeComponentArrayObjectStruct newItem;
+    fromRawValue(context, item, newItem);
+    result.emplace_back(newItem);
+  }
+}
+
+
+struct ArrayPropsNativeComponentArrayStruct {
+  std::vector<ArrayPropsNativeComponentArrayObjectStruct> object;
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ArrayPropsNativeComponentArrayStruct &result) {
+  auto map = (better::map<std::string, RawValue>)value;
+
+  auto object = map.find(\\"object\\");
+  if (object != map.end()) {
+    fromRawValue(context, object->second, result.object);
+  }
+}
+
+static inline std::string toString(const ArrayPropsNativeComponentArrayStruct &value) {
+  return \\"[Object ArrayPropsNativeComponentArrayStruct]\\";
+}
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, std::vector<ArrayPropsNativeComponentArrayStruct> &result) {
+  auto items = (std::vector<RawValue>)value;
+  for (const auto &item : items) {
+    ArrayPropsNativeComponentArrayStruct newItem;
+    fromRawValue(context, item, newItem);
+    result.emplace_back(newItem);
+  }
+}
+
+
+struct ArrayPropsNativeComponentArrayOfArrayOfObjectStruct {
+  std::string stringProp;
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ArrayPropsNativeComponentArrayOfArrayOfObjectStruct &result) {
+  auto map = (better::map<std::string, RawValue>)value;
+
+  auto stringProp = map.find(\\"stringProp\\");
+  if (stringProp != map.end()) {
+    fromRawValue(context, stringProp->second, result.stringProp);
+  }
+}
+
+static inline std::string toString(const ArrayPropsNativeComponentArrayOfArrayOfObjectStruct &value) {
+  return \\"[Object ArrayPropsNativeComponentArrayOfArrayOfObjectStruct]\\";
+}
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, std::vector<std::vector<ArrayPropsNativeComponentArrayOfArrayOfObjectStruct>> &result) {
+  auto items = (std::vector<std::vector<RawValue>>)value;
+  for (const std::vector<RawValue> &item : items) {
+    auto nestedArray = std::vector<ArrayPropsNativeComponentArrayOfArrayOfObjectStruct>{};
+    for (const RawValue &nestedItem : item) {
+      ArrayPropsNativeComponentArrayOfArrayOfObjectStruct newItem;
+      fromRawValue(context, nestedItem, newItem);
+      nestedArray.emplace_back(newItem);
+    }
+    result.emplace_back(nestedArray);
+  }
+}
+
+class ArrayPropsNativeComponentProps final : public ViewProps {
+ public:
+  ArrayPropsNativeComponentProps() = default;
+  ArrayPropsNativeComponentProps(const PropsParserContext& context, const ArrayPropsNativeComponentProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::vector<std::string> names{};
+  std::vector<bool> disableds{};
+  std::vector<int> progress{};
+  std::vector<Float> radii{};
+  std::vector<SharedColor> colors{};
+  std::vector<ImageSource> srcs{};
+  std::vector<Point> points{};
+  ArrayPropsNativeComponentSizesMask sizes{static_cast<ArrayPropsNativeComponentSizesMask>(ArrayPropsNativeComponentSizes::Small)};
+  std::vector<ArrayPropsNativeComponentObjectStruct> object{};
+  std::vector<ArrayPropsNativeComponentArrayStruct> array{};
+  std::vector<std::vector<ArrayPropsNativeComponentArrayOfArrayOfObjectStruct>> arrayOfArrayOfObject{};
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsH can generate fixture ARRAY_PROPS_WITH_NESTED_OBJECT 1`] = `
+Map {
+  "Props.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <react/renderer/components/image/conversions.h>
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/graphics/Color.h>
+#include <react/renderer/graphics/Geometry.h>
+#include <react/renderer/imagemanager/primitives.h>
+#include <vector>
+
+namespace facebook {
+namespace react {
+
+struct ArrayPropsNativeComponentNativePrimitivesStruct {
+  std::vector<SharedColor> colors;
+  std::vector<ImageSource> srcs;
+  std::vector<Point> points;
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ArrayPropsNativeComponentNativePrimitivesStruct &result) {
+  auto map = (better::map<std::string, RawValue>)value;
+
+  auto colors = map.find(\\"colors\\");
+  if (colors != map.end()) {
+    fromRawValue(context, colors->second, result.colors);
+  }
+  auto srcs = map.find(\\"srcs\\");
+  if (srcs != map.end()) {
+    fromRawValue(context, srcs->second, result.srcs);
+  }
+  auto points = map.find(\\"points\\");
+  if (points != map.end()) {
+    fromRawValue(context, points->second, result.points);
+  }
+}
+
+static inline std::string toString(const ArrayPropsNativeComponentNativePrimitivesStruct &value) {
+  return \\"[Object ArrayPropsNativeComponentNativePrimitivesStruct]\\";
+}
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, std::vector<ArrayPropsNativeComponentNativePrimitivesStruct> &result) {
+  auto items = (std::vector<RawValue>)value;
+  for (const auto &item : items) {
+    ArrayPropsNativeComponentNativePrimitivesStruct newItem;
+    fromRawValue(context, item, newItem);
+    result.emplace_back(newItem);
+  }
+}
+
+class ArrayPropsNativeComponentProps final : public ViewProps {
+ public:
+  ArrayPropsNativeComponentProps() = default;
+  ArrayPropsNativeComponentProps(const PropsParserContext& context, const ArrayPropsNativeComponentProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::vector<ArrayPropsNativeComponentNativePrimitivesStruct> nativePrimitives{};
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsH can generate fixture BOOLEAN_PROP 1`] = `
+Map {
+  "Props.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+
+namespace facebook {
+namespace react {
+
+class BooleanPropNativeComponentProps final : public ViewProps {
+ public:
+  BooleanPropNativeComponentProps() = default;
+  BooleanPropNativeComponentProps(const PropsParserContext& context, const BooleanPropNativeComponentProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  bool disabled{false};
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsH can generate fixture COLOR_PROP 1`] = `
+Map {
+  "Props.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/graphics/Color.h>
+
+namespace facebook {
+namespace react {
+
+class ColorPropNativeComponentProps final : public ViewProps {
+ public:
+  ColorPropNativeComponentProps() = default;
+  ColorPropNativeComponentProps(const PropsParserContext& context, const ColorPropNativeComponentProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  SharedColor tintColor{};
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsH can generate fixture COMMANDS 1`] = `
+Map {
+  "Props.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+
+namespace facebook {
+namespace react {
+
+class CommandNativeComponentProps final : public ViewProps {
+ public:
+  CommandNativeComponentProps() = default;
+  CommandNativeComponentProps(const PropsParserContext& context, const CommandNativeComponentProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsH can generate fixture COMMANDS_AND_PROPS 1`] = `
+Map {
+  "Props.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+
+namespace facebook {
+namespace react {
+
+class CommandNativeComponentProps final : public ViewProps {
+ public:
+  CommandNativeComponentProps() = default;
+  CommandNativeComponentProps(const PropsParserContext& context, const CommandNativeComponentProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string accessibilityHint{\\"\\"};
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsH can generate fixture DOUBLE_PROPS 1`] = `
+Map {
+  "Props.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+
+namespace facebook {
+namespace react {
+
+class DoublePropNativeComponentProps final : public ViewProps {
+ public:
+  DoublePropNativeComponentProps() = default;
+  DoublePropNativeComponentProps(const PropsParserContext& context, const DoublePropNativeComponentProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  double blurRadius{0.0};
+  double blurRadius2{0.001};
+  double blurRadius3{2.1};
+  double blurRadius4{0.0};
+  double blurRadius5{1.0};
+  double blurRadius6{0.0};
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsH can generate fixture EVENT_NESTED_OBJECT_PROPS 1`] = `
+Map {
+  "Props.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+
+namespace facebook {
+namespace react {
+
+class EventsNestedObjectNativeComponentProps final : public ViewProps {
+ public:
+  EventsNestedObjectNativeComponentProps() = default;
+  EventsNestedObjectNativeComponentProps(const PropsParserContext& context, const EventsNestedObjectNativeComponentProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  bool disabled{false};
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsH can generate fixture EVENT_PROPS 1`] = `
+Map {
+  "Props.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+
+namespace facebook {
+namespace react {
+
+class EventsNativeComponentProps final : public ViewProps {
+ public:
+  EventsNativeComponentProps() = default;
+  EventsNativeComponentProps(const PropsParserContext& context, const EventsNativeComponentProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  bool disabled{false};
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsH can generate fixture EVENTS_WITH_PAPER_NAME 1`] = `
+Map {
+  "Props.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+
+namespace facebook {
+namespace react {
+
+class InterfaceOnlyComponentProps final : public ViewProps {
+ public:
+  InterfaceOnlyComponentProps() = default;
+  InterfaceOnlyComponentProps(const PropsParserContext& context, const InterfaceOnlyComponentProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsH can generate fixture EXCLUDE_ANDROID 1`] = `
+Map {
+  "Props.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+
+namespace facebook {
+namespace react {
+
+class ExcludedAndroidComponentProps final : public ViewProps {
+ public:
+  ExcludedAndroidComponentProps() = default;
+  ExcludedAndroidComponentProps(const PropsParserContext& context, const ExcludedAndroidComponentProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsH can generate fixture EXCLUDE_ANDROID_IOS 1`] = `
+Map {
+  "Props.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsH can generate fixture FLOAT_PROPS 1`] = `
+Map {
+  "Props.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+
+namespace facebook {
+namespace react {
+
+class FloatPropNativeComponentProps final : public ViewProps {
+ public:
+  FloatPropNativeComponentProps() = default;
+  FloatPropNativeComponentProps(const PropsParserContext& context, const FloatPropNativeComponentProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  Float blurRadius{0.0};
+  Float blurRadius2{0.001};
+  Float blurRadius3{2.1};
+  Float blurRadius4{0.0};
+  Float blurRadius5{1.0};
+  Float blurRadius6{0.0};
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsH can generate fixture IMAGE_PROP 1`] = `
+Map {
+  "Props.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/imagemanager/primitives.h>
+
+namespace facebook {
+namespace react {
+
+class ImagePropNativeComponentProps final : public ViewProps {
+ public:
+  ImagePropNativeComponentProps() = default;
+  ImagePropNativeComponentProps(const PropsParserContext& context, const ImagePropNativeComponentProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  ImageSource thumbImage{};
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsH can generate fixture INSETS_PROP 1`] = `
+Map {
+  "Props.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/graphics/Geometry.h>
+
+namespace facebook {
+namespace react {
+
+class InsetsPropNativeComponentProps final : public ViewProps {
+ public:
+  InsetsPropNativeComponentProps() = default;
+  InsetsPropNativeComponentProps(const PropsParserContext& context, const InsetsPropNativeComponentProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  EdgeInsets contentInset{};
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsH can generate fixture INT32_ENUM_PROP 1`] = `
+Map {
+  "Props.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+
+namespace facebook {
+namespace react {
+
+enum class Int32EnumPropsNativeComponentMaxInterval { MaxInterval0 = 0, MaxInterval1 = 1, MaxInterval2 = 2 };
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, Int32EnumPropsNativeComponentMaxInterval &result) {
+  assert(value.hasType<int>());
+  auto integerValue = (int)value;
+  switch (integerValue) {
+    case 0:
+      result = Int32EnumPropsNativeComponentMaxInterval::MaxInterval0;
+      return;
+    case 1:
+      result = Int32EnumPropsNativeComponentMaxInterval::MaxInterval1;
+      return;
+    case 2:
+      result = Int32EnumPropsNativeComponentMaxInterval::MaxInterval2;
+      return;
+  }
+  abort();
+}
+
+static inline std::string toString(const Int32EnumPropsNativeComponentMaxInterval &value) {
+  switch (value) {
+    case Int32EnumPropsNativeComponentMaxInterval::MaxInterval0: return \\"0\\";
+    case Int32EnumPropsNativeComponentMaxInterval::MaxInterval1: return \\"1\\";
+    case Int32EnumPropsNativeComponentMaxInterval::MaxInterval2: return \\"2\\";
+  }
+}
+
+class Int32EnumPropsNativeComponentProps final : public ViewProps {
+ public:
+  Int32EnumPropsNativeComponentProps() = default;
+  Int32EnumPropsNativeComponentProps(const PropsParserContext& context, const Int32EnumPropsNativeComponentProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  Int32EnumPropsNativeComponentMaxInterval maxInterval{Int32EnumPropsNativeComponentMaxInterval::MaxInterval0};
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsH can generate fixture INTEGER_PROPS 1`] = `
+Map {
+  "Props.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+
+namespace facebook {
+namespace react {
+
+class IntegerPropNativeComponentProps final : public ViewProps {
+ public:
+  IntegerPropNativeComponentProps() = default;
+  IntegerPropNativeComponentProps(const PropsParserContext& context, const IntegerPropNativeComponentProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  int progress1{0};
+  int progress2{-1};
+  int progress3{10};
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsH can generate fixture INTERFACE_ONLY 1`] = `
+Map {
+  "Props.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+
+namespace facebook {
+namespace react {
+
+class InterfaceOnlyComponentProps final : public ViewProps {
+ public:
+  InterfaceOnlyComponentProps() = default;
+  InterfaceOnlyComponentProps(const PropsParserContext& context, const InterfaceOnlyComponentProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string accessibilityHint{\\"\\"};
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsH can generate fixture MULTI_NATIVE_PROP 1`] = `
+Map {
+  "Props.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/graphics/Color.h>
+#include <react/renderer/graphics/Geometry.h>
+#include <react/renderer/imagemanager/primitives.h>
+
+namespace facebook {
+namespace react {
+
+class ImageColorPropNativeComponentProps final : public ViewProps {
+ public:
+  ImageColorPropNativeComponentProps() = default;
+  ImageColorPropNativeComponentProps(const PropsParserContext& context, const ImageColorPropNativeComponentProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  ImageSource thumbImage{};
+  SharedColor color{};
+  SharedColor thumbTintColor{};
+  Point point{};
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsH can generate fixture NO_PROPS_NO_EVENTS 1`] = `
+Map {
+  "Props.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+
+namespace facebook {
+namespace react {
+
+class NoPropsNoEventsComponentProps final : public ViewProps {
+ public:
+  NoPropsNoEventsComponentProps() = default;
+  NoPropsNoEventsComponentProps(const PropsParserContext& context, const NoPropsNoEventsComponentProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsH can generate fixture OBJECT_PROPS 1`] = `
+Map {
+  "Props.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <react/renderer/components/image/conversions.h>
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+#include <react/renderer/graphics/Color.h>
+#include <react/renderer/graphics/Geometry.h>
+#include <react/renderer/imagemanager/primitives.h>
+#include <vector>
+
+namespace facebook {
+namespace react {
+
+enum class ObjectPropsStringEnumProp { Option1 };
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ObjectPropsStringEnumProp &result) {
+  auto string = (std::string)value;
+  if (string == \\"option1\\") { result = ObjectPropsStringEnumProp::Option1; return; }
+  abort();
+}
+
+static inline std::string toString(const ObjectPropsStringEnumProp &value) {
+  switch (value) {
+    case ObjectPropsStringEnumProp::Option1: return \\"option1\\";
+  }
+}
+enum class ObjectPropsIntEnumProp { IntEnumProp0 = 0 };
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ObjectPropsIntEnumProp &result) {
+  assert(value.hasType<int>());
+  auto integerValue = (int)value;
+  switch (integerValue) {
+    case 0:
+      result = ObjectPropsIntEnumProp::IntEnumProp0;
+      return;
+  }
+  abort();
+}
+
+static inline std::string toString(const ObjectPropsIntEnumProp &value) {
+  switch (value) {
+    case ObjectPropsIntEnumProp::IntEnumProp0: return \\"0\\";
+  }
+}
+struct ObjectPropsObjectPropObjectArrayPropStruct {
+  std::vector<std::string> array;
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ObjectPropsObjectPropObjectArrayPropStruct &result) {
+  auto map = (better::map<std::string, RawValue>)value;
+
+  auto array = map.find(\\"array\\");
+  if (array != map.end()) {
+    fromRawValue(context, array->second, result.array);
+  }
+}
+
+static inline std::string toString(const ObjectPropsObjectPropObjectArrayPropStruct &value) {
+  return \\"[Object ObjectPropsObjectPropObjectArrayPropStruct]\\";
+}
+
+struct ObjectPropsObjectPropObjectPrimitiveRequiredPropStruct {
+  ImageSource image;
+  SharedColor color;
+  Point point;
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ObjectPropsObjectPropObjectPrimitiveRequiredPropStruct &result) {
+  auto map = (better::map<std::string, RawValue>)value;
+
+  auto image = map.find(\\"image\\");
+  if (image != map.end()) {
+    fromRawValue(context, image->second, result.image);
+  }
+  auto color = map.find(\\"color\\");
+  if (color != map.end()) {
+    fromRawValue(context, color->second, result.color);
+  }
+  auto point = map.find(\\"point\\");
+  if (point != map.end()) {
+    fromRawValue(context, point->second, result.point);
+  }
+}
+
+static inline std::string toString(const ObjectPropsObjectPropObjectPrimitiveRequiredPropStruct &value) {
+  return \\"[Object ObjectPropsObjectPropObjectPrimitiveRequiredPropStruct]\\";
+}
+
+struct ObjectPropsObjectPropNestedPropANestedPropBStruct {
+  std::string nestedPropC;
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ObjectPropsObjectPropNestedPropANestedPropBStruct &result) {
+  auto map = (better::map<std::string, RawValue>)value;
+
+  auto nestedPropC = map.find(\\"nestedPropC\\");
+  if (nestedPropC != map.end()) {
+    fromRawValue(context, nestedPropC->second, result.nestedPropC);
+  }
+}
+
+static inline std::string toString(const ObjectPropsObjectPropNestedPropANestedPropBStruct &value) {
+  return \\"[Object ObjectPropsObjectPropNestedPropANestedPropBStruct]\\";
+}
+
+struct ObjectPropsObjectPropNestedPropAStruct {
+  ObjectPropsObjectPropNestedPropANestedPropBStruct nestedPropB;
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ObjectPropsObjectPropNestedPropAStruct &result) {
+  auto map = (better::map<std::string, RawValue>)value;
+
+  auto nestedPropB = map.find(\\"nestedPropB\\");
+  if (nestedPropB != map.end()) {
+    fromRawValue(context, nestedPropB->second, result.nestedPropB);
+  }
+}
+
+static inline std::string toString(const ObjectPropsObjectPropNestedPropAStruct &value) {
+  return \\"[Object ObjectPropsObjectPropNestedPropAStruct]\\";
+}
+
+struct ObjectPropsObjectPropNestedArrayAsPropertyArrayPropStruct {
+  std::string stringProp;
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ObjectPropsObjectPropNestedArrayAsPropertyArrayPropStruct &result) {
+  auto map = (better::map<std::string, RawValue>)value;
+
+  auto stringProp = map.find(\\"stringProp\\");
+  if (stringProp != map.end()) {
+    fromRawValue(context, stringProp->second, result.stringProp);
+  }
+}
+
+static inline std::string toString(const ObjectPropsObjectPropNestedArrayAsPropertyArrayPropStruct &value) {
+  return \\"[Object ObjectPropsObjectPropNestedArrayAsPropertyArrayPropStruct]\\";
+}
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, std::vector<ObjectPropsObjectPropNestedArrayAsPropertyArrayPropStruct> &result) {
+  auto items = (std::vector<RawValue>)value;
+  for (const auto &item : items) {
+    ObjectPropsObjectPropNestedArrayAsPropertyArrayPropStruct newItem;
+    fromRawValue(context, item, newItem);
+    result.emplace_back(newItem);
+  }
+}
+
+
+struct ObjectPropsObjectPropNestedArrayAsPropertyStruct {
+  std::vector<ObjectPropsObjectPropNestedArrayAsPropertyArrayPropStruct> arrayProp;
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ObjectPropsObjectPropNestedArrayAsPropertyStruct &result) {
+  auto map = (better::map<std::string, RawValue>)value;
+
+  auto arrayProp = map.find(\\"arrayProp\\");
+  if (arrayProp != map.end()) {
+    fromRawValue(context, arrayProp->second, result.arrayProp);
+  }
+}
+
+static inline std::string toString(const ObjectPropsObjectPropNestedArrayAsPropertyStruct &value) {
+  return \\"[Object ObjectPropsObjectPropNestedArrayAsPropertyStruct]\\";
+}
+
+struct ObjectPropsObjectPropStruct {
+  std::string stringProp;
+  bool booleanProp;
+  Float floatProp;
+  int intProp;
+  ObjectPropsStringEnumProp stringEnumProp;
+  ObjectPropsIntEnumProp intEnumProp;
+  ObjectPropsObjectPropObjectArrayPropStruct objectArrayProp;
+  ObjectPropsObjectPropObjectPrimitiveRequiredPropStruct objectPrimitiveRequiredProp;
+  ObjectPropsObjectPropNestedPropAStruct nestedPropA;
+  ObjectPropsObjectPropNestedArrayAsPropertyStruct nestedArrayAsProperty;
+};
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ObjectPropsObjectPropStruct &result) {
+  auto map = (better::map<std::string, RawValue>)value;
+
+  auto stringProp = map.find(\\"stringProp\\");
+  if (stringProp != map.end()) {
+    fromRawValue(context, stringProp->second, result.stringProp);
+  }
+  auto booleanProp = map.find(\\"booleanProp\\");
+  if (booleanProp != map.end()) {
+    fromRawValue(context, booleanProp->second, result.booleanProp);
+  }
+  auto floatProp = map.find(\\"floatProp\\");
+  if (floatProp != map.end()) {
+    fromRawValue(context, floatProp->second, result.floatProp);
+  }
+  auto intProp = map.find(\\"intProp\\");
+  if (intProp != map.end()) {
+    fromRawValue(context, intProp->second, result.intProp);
+  }
+  auto stringEnumProp = map.find(\\"stringEnumProp\\");
+  if (stringEnumProp != map.end()) {
+    fromRawValue(context, stringEnumProp->second, result.stringEnumProp);
+  }
+  auto intEnumProp = map.find(\\"intEnumProp\\");
+  if (intEnumProp != map.end()) {
+    fromRawValue(context, intEnumProp->second, result.intEnumProp);
+  }
+  auto objectArrayProp = map.find(\\"objectArrayProp\\");
+  if (objectArrayProp != map.end()) {
+    fromRawValue(context, objectArrayProp->second, result.objectArrayProp);
+  }
+  auto objectPrimitiveRequiredProp = map.find(\\"objectPrimitiveRequiredProp\\");
+  if (objectPrimitiveRequiredProp != map.end()) {
+    fromRawValue(context, objectPrimitiveRequiredProp->second, result.objectPrimitiveRequiredProp);
+  }
+  auto nestedPropA = map.find(\\"nestedPropA\\");
+  if (nestedPropA != map.end()) {
+    fromRawValue(context, nestedPropA->second, result.nestedPropA);
+  }
+  auto nestedArrayAsProperty = map.find(\\"nestedArrayAsProperty\\");
+  if (nestedArrayAsProperty != map.end()) {
+    fromRawValue(context, nestedArrayAsProperty->second, result.nestedArrayAsProperty);
+  }
+}
+
+static inline std::string toString(const ObjectPropsObjectPropStruct &value) {
+  return \\"[Object ObjectPropsObjectPropStruct]\\";
+}
+class ObjectPropsProps final : public ViewProps {
+ public:
+  ObjectPropsProps() = default;
+  ObjectPropsProps(const PropsParserContext& context, const ObjectPropsProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  ObjectPropsObjectPropStruct objectProp{};
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsH can generate fixture POINT_PROP 1`] = `
+Map {
+  "Props.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/graphics/Geometry.h>
+
+namespace facebook {
+namespace react {
+
+class PointPropNativeComponentProps final : public ViewProps {
+ public:
+  PointPropNativeComponentProps() = default;
+  PointPropNativeComponentProps(const PropsParserContext& context, const PointPropNativeComponentProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  Point startPoint{};
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsH can generate fixture STRING_ENUM_PROP 1`] = `
+Map {
+  "Props.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+
+namespace facebook {
+namespace react {
+
+enum class StringEnumPropsNativeComponentAlignment { Top, Center, BottomRight };
+
+static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, StringEnumPropsNativeComponentAlignment &result) {
+  auto string = (std::string)value;
+  if (string == \\"top\\") { result = StringEnumPropsNativeComponentAlignment::Top; return; }
+  if (string == \\"center\\") { result = StringEnumPropsNativeComponentAlignment::Center; return; }
+  if (string == \\"bottom-right\\") { result = StringEnumPropsNativeComponentAlignment::BottomRight; return; }
+  abort();
+}
+
+static inline std::string toString(const StringEnumPropsNativeComponentAlignment &value) {
+  switch (value) {
+    case StringEnumPropsNativeComponentAlignment::Top: return \\"top\\";
+    case StringEnumPropsNativeComponentAlignment::Center: return \\"center\\";
+    case StringEnumPropsNativeComponentAlignment::BottomRight: return \\"bottom-right\\";
+  }
+}
+
+class StringEnumPropsNativeComponentProps final : public ViewProps {
+ public:
+  StringEnumPropsNativeComponentProps() = default;
+  StringEnumPropsNativeComponentProps(const PropsParserContext& context, const StringEnumPropsNativeComponentProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  StringEnumPropsNativeComponentAlignment alignment{StringEnumPropsNativeComponentAlignment::Center};
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsH can generate fixture STRING_PROP 1`] = `
+Map {
+  "Props.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+
+namespace facebook {
+namespace react {
+
+class StringPropComponentProps final : public ViewProps {
+ public:
+  StringPropComponentProps() = default;
+  StringPropComponentProps(const PropsParserContext& context, const StringPropComponentProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  std::string accessibilityHint{\\"\\"};
+  std::string accessibilityRole{};
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsH can generate fixture TWO_COMPONENTS_DIFFERENT_FILES 1`] = `
+Map {
+  "Props.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+
+namespace facebook {
+namespace react {
+
+class MultiFile1NativeComponentProps final : public ViewProps {
+ public:
+  MultiFile1NativeComponentProps() = default;
+  MultiFile1NativeComponentProps(const PropsParserContext& context, const MultiFile1NativeComponentProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  bool disabled{false};
+};
+
+class MultiFile2NativeComponentProps final : public ViewProps {
+ public:
+  MultiFile2NativeComponentProps() = default;
+  MultiFile2NativeComponentProps(const PropsParserContext& context, const MultiFile2NativeComponentProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  bool disabled{true};
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GeneratePropsH can generate fixture TWO_COMPONENTS_SAME_FILE 1`] = `
+Map {
+  "Props.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewProps.h>
+#include <react/renderer/core/PropsParserContext.h>
+
+namespace facebook {
+namespace react {
+
+class MultiComponent1NativeComponentProps final : public ViewProps {
+ public:
+  MultiComponent1NativeComponentProps() = default;
+  MultiComponent1NativeComponentProps(const PropsParserContext& context, const MultiComponent1NativeComponentProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  bool disabled{false};
+};
+
+class MultiComponent2NativeComponentProps final : public ViewProps {
+ public:
+  MultiComponent2NativeComponentProps() = default;
+  MultiComponent2NativeComponentProps(const PropsParserContext& context, const MultiComponent2NativeComponentProps &sourceProps, const RawProps &rawProps);
+
+#pragma mark - Props
+
+  bool disabled{true};
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GeneratePropsJavaDelegate-test.js.snap b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GeneratePropsJavaDelegate-test.js.snap
new file mode 100644
index 0000000..2b062c4
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GeneratePropsJavaDelegate-test.js.snap
@@ -0,0 +1,1052 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GeneratePropsJavaDelegate can generate fixture ARRAY_PROPS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/ArrayPropsNativeComponentManagerDelegate.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class ArrayPropsNativeComponentManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & ArrayPropsNativeComponentManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public ArrayPropsNativeComponentManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case \\"names\\":
+        mViewManager.setNames(view, (ReadableArray) value);
+        break;
+      case \\"disableds\\":
+        mViewManager.setDisableds(view, (ReadableArray) value);
+        break;
+      case \\"progress\\":
+        mViewManager.setProgress(view, (ReadableArray) value);
+        break;
+      case \\"radii\\":
+        mViewManager.setRadii(view, (ReadableArray) value);
+        break;
+      case \\"colors\\":
+        mViewManager.setColors(view, (ReadableArray) value);
+        break;
+      case \\"srcs\\":
+        mViewManager.setSrcs(view, (ReadableArray) value);
+        break;
+      case \\"points\\":
+        mViewManager.setPoints(view, (ReadableArray) value);
+        break;
+      case \\"sizes\\":
+        mViewManager.setSizes(view, (ReadableArray) value);
+        break;
+      case \\"object\\":
+        mViewManager.setObject(view, (ReadableArray) value);
+        break;
+      case \\"array\\":
+        mViewManager.setArray(view, (ReadableArray) value);
+        break;
+      case \\"arrayOfArrayOfObject\\":
+        mViewManager.setArrayOfArrayOfObject(view, (ReadableArray) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaDelegate can generate fixture ARRAY_PROPS_WITH_NESTED_OBJECT 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/ArrayPropsNativeComponentManagerDelegate.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class ArrayPropsNativeComponentManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & ArrayPropsNativeComponentManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public ArrayPropsNativeComponentManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case \\"nativePrimitives\\":
+        mViewManager.setNativePrimitives(view, (ReadableArray) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaDelegate can generate fixture BOOLEAN_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/BooleanPropNativeComponentManagerDelegate.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class BooleanPropNativeComponentManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & BooleanPropNativeComponentManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public BooleanPropNativeComponentManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case \\"disabled\\":
+        mViewManager.setDisabled(view, value == null ? false : (boolean) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaDelegate can generate fixture COLOR_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/ColorPropNativeComponentManagerDelegate.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ColorPropConverter;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class ColorPropNativeComponentManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & ColorPropNativeComponentManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public ColorPropNativeComponentManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case \\"tintColor\\":
+        mViewManager.setTintColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaDelegate can generate fixture COMMANDS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/CommandNativeComponentManagerDelegate.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class CommandNativeComponentManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & CommandNativeComponentManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public CommandNativeComponentManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    super.setProperty(view, propName, value);
+  }
+
+  @Override
+  public void receiveCommand(T view, String commandName, ReadableArray args) {
+    switch (commandName) {
+      case \\"flashScrollIndicators\\":
+        mViewManager.flashScrollIndicators(view);
+        break;
+      case \\"allTypes\\":
+        mViewManager.allTypes(view, args.getInt(0), (float) args.getDouble(1), args.getDouble(2), args.getString(3), args.getBoolean(4));
+        break;
+    }
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaDelegate can generate fixture COMMANDS_AND_PROPS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/CommandNativeComponentManagerDelegate.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class CommandNativeComponentManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & CommandNativeComponentManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public CommandNativeComponentManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case \\"accessibilityHint\\":
+        mViewManager.setAccessibilityHint(view, value == null ? \\"\\" : (String) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+
+  @Override
+  public void receiveCommand(T view, String commandName, ReadableArray args) {
+    switch (commandName) {
+      case \\"handleRootTag\\":
+        mViewManager.handleRootTag(view, args.getDouble(0));
+        break;
+      case \\"hotspotUpdate\\":
+        mViewManager.hotspotUpdate(view, args.getInt(0), args.getInt(1));
+        break;
+    }
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaDelegate can generate fixture DOUBLE_PROPS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/DoublePropNativeComponentManagerDelegate.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class DoublePropNativeComponentManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & DoublePropNativeComponentManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public DoublePropNativeComponentManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case \\"blurRadius\\":
+        mViewManager.setBlurRadius(view, value == null ? Double.NaN : ((Double) value).doubleValue());
+        break;
+      case \\"blurRadius2\\":
+        mViewManager.setBlurRadius2(view, value == null ? 0.001f : ((Double) value).doubleValue());
+        break;
+      case \\"blurRadius3\\":
+        mViewManager.setBlurRadius3(view, value == null ? 2.1f : ((Double) value).doubleValue());
+        break;
+      case \\"blurRadius4\\":
+        mViewManager.setBlurRadius4(view, value == null ? 0f : ((Double) value).doubleValue());
+        break;
+      case \\"blurRadius5\\":
+        mViewManager.setBlurRadius5(view, value == null ? 1f : ((Double) value).doubleValue());
+        break;
+      case \\"blurRadius6\\":
+        mViewManager.setBlurRadius6(view, value == null ? 0f : ((Double) value).doubleValue());
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaDelegate can generate fixture EVENT_NESTED_OBJECT_PROPS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/EventsNestedObjectNativeComponentManagerDelegate.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class EventsNestedObjectNativeComponentManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & EventsNestedObjectNativeComponentManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public EventsNestedObjectNativeComponentManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case \\"disabled\\":
+        mViewManager.setDisabled(view, value == null ? false : (boolean) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaDelegate can generate fixture EVENT_PROPS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/EventsNativeComponentManagerDelegate.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class EventsNativeComponentManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & EventsNativeComponentManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public EventsNativeComponentManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case \\"disabled\\":
+        mViewManager.setDisabled(view, value == null ? false : (boolean) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaDelegate can generate fixture EVENTS_WITH_PAPER_NAME 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/InterfaceOnlyComponentManagerDelegate.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class InterfaceOnlyComponentManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & InterfaceOnlyComponentManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public InterfaceOnlyComponentManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    super.setProperty(view, propName, value);
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaDelegate can generate fixture EXCLUDE_ANDROID 1`] = `Map {}`;
+
+exports[`GeneratePropsJavaDelegate can generate fixture EXCLUDE_ANDROID_IOS 1`] = `Map {}`;
+
+exports[`GeneratePropsJavaDelegate can generate fixture FLOAT_PROPS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/FloatPropNativeComponentManagerDelegate.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class FloatPropNativeComponentManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & FloatPropNativeComponentManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public FloatPropNativeComponentManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case \\"blurRadius\\":
+        mViewManager.setBlurRadius(view, value == null ? Float.NaN : ((Double) value).floatValue());
+        break;
+      case \\"blurRadius2\\":
+        mViewManager.setBlurRadius2(view, value == null ? 0.001f : ((Double) value).floatValue());
+        break;
+      case \\"blurRadius3\\":
+        mViewManager.setBlurRadius3(view, value == null ? 2.1f : ((Double) value).floatValue());
+        break;
+      case \\"blurRadius4\\":
+        mViewManager.setBlurRadius4(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      case \\"blurRadius5\\":
+        mViewManager.setBlurRadius5(view, value == null ? 1f : ((Double) value).floatValue());
+        break;
+      case \\"blurRadius6\\":
+        mViewManager.setBlurRadius6(view, value == null ? 0f : ((Double) value).floatValue());
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaDelegate can generate fixture IMAGE_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/ImagePropNativeComponentManagerDelegate.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class ImagePropNativeComponentManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & ImagePropNativeComponentManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public ImagePropNativeComponentManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case \\"thumbImage\\":
+        mViewManager.setThumbImage(view, (ReadableMap) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaDelegate can generate fixture INSETS_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/InsetsPropNativeComponentManagerDelegate.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class InsetsPropNativeComponentManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & InsetsPropNativeComponentManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public InsetsPropNativeComponentManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case \\"contentInset\\":
+        mViewManager.setContentInset(view, (ReadableMap) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaDelegate can generate fixture INT32_ENUM_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/Int32EnumPropsNativeComponentManagerDelegate.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class Int32EnumPropsNativeComponentManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & Int32EnumPropsNativeComponentManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public Int32EnumPropsNativeComponentManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case \\"maxInterval\\":
+        mViewManager.setMaxInterval(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaDelegate can generate fixture INTEGER_PROPS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/IntegerPropNativeComponentManagerDelegate.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class IntegerPropNativeComponentManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & IntegerPropNativeComponentManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public IntegerPropNativeComponentManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case \\"progress1\\":
+        mViewManager.setProgress1(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case \\"progress2\\":
+        mViewManager.setProgress2(view, value == null ? -1 : ((Double) value).intValue());
+        break;
+      case \\"progress3\\":
+        mViewManager.setProgress3(view, value == null ? 10 : ((Double) value).intValue());
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaDelegate can generate fixture INTERFACE_ONLY 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/InterfaceOnlyComponentManagerDelegate.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class InterfaceOnlyComponentManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & InterfaceOnlyComponentManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public InterfaceOnlyComponentManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case \\"accessibilityHint\\":
+        mViewManager.setAccessibilityHint(view, value == null ? \\"\\" : (String) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaDelegate can generate fixture MULTI_NATIVE_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/ImageColorPropNativeComponentManagerDelegate.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ColorPropConverter;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class ImageColorPropNativeComponentManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & ImageColorPropNativeComponentManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public ImageColorPropNativeComponentManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case \\"thumbImage\\":
+        mViewManager.setThumbImage(view, (ReadableMap) value);
+        break;
+      case \\"color\\":
+        mViewManager.setColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case \\"thumbTintColor\\":
+        mViewManager.setThumbTintColor(view, ColorPropConverter.getColor(value, view.getContext()));
+        break;
+      case \\"point\\":
+        mViewManager.setPoint(view, (ReadableMap) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaDelegate can generate fixture NO_PROPS_NO_EVENTS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/NoPropsNoEventsComponentManagerDelegate.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class NoPropsNoEventsComponentManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & NoPropsNoEventsComponentManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public NoPropsNoEventsComponentManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    super.setProperty(view, propName, value);
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaDelegate can generate fixture OBJECT_PROPS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/ObjectPropsManagerDelegate.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class ObjectPropsManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & ObjectPropsManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public ObjectPropsManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case \\"objectProp\\":
+        mViewManager.setObjectProp(view, (ReadableMap) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaDelegate can generate fixture POINT_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/PointPropNativeComponentManagerDelegate.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class PointPropNativeComponentManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & PointPropNativeComponentManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public PointPropNativeComponentManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case \\"startPoint\\":
+        mViewManager.setStartPoint(view, (ReadableMap) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaDelegate can generate fixture STRING_ENUM_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/StringEnumPropsNativeComponentManagerDelegate.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class StringEnumPropsNativeComponentManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & StringEnumPropsNativeComponentManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public StringEnumPropsNativeComponentManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case \\"alignment\\":
+        mViewManager.setAlignment(view, (String) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaDelegate can generate fixture STRING_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/StringPropComponentManagerDelegate.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class StringPropComponentManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & StringPropComponentManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public StringPropComponentManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case \\"accessibilityHint\\":
+        mViewManager.setAccessibilityHint(view, value == null ? \\"\\" : (String) value);
+        break;
+      case \\"accessibilityRole\\":
+        mViewManager.setAccessibilityRole(view, value == null ? null : (String) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaDelegate can generate fixture TWO_COMPONENTS_DIFFERENT_FILES 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/MultiFile1NativeComponentManagerDelegate.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class MultiFile1NativeComponentManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & MultiFile1NativeComponentManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public MultiFile1NativeComponentManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case \\"disabled\\":
+        mViewManager.setDisabled(view, value == null ? false : (boolean) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
+",
+  "java/com/facebook/react/viewmanagers/MultiFile2NativeComponentManagerDelegate.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class MultiFile2NativeComponentManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & MultiFile2NativeComponentManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public MultiFile2NativeComponentManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case \\"disabled\\":
+        mViewManager.setDisabled(view, value == null ? true : (boolean) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaDelegate can generate fixture TWO_COMPONENTS_SAME_FILE 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/MultiComponent1NativeComponentManagerDelegate.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class MultiComponent1NativeComponentManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & MultiComponent1NativeComponentManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public MultiComponent1NativeComponentManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case \\"disabled\\":
+        mViewManager.setDisabled(view, value == null ? false : (boolean) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
+",
+  "java/com/facebook/react/viewmanagers/MultiComponent2NativeComponentManagerDelegate.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class MultiComponent2NativeComponentManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & MultiComponent2NativeComponentManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
+  public MultiComponent2NativeComponentManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case \\"disabled\\":
+        mViewManager.setDisabled(view, value == null ? true : (boolean) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
+",
+}
+`;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GeneratePropsJavaInterface-test.js.snap b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GeneratePropsJavaInterface-test.js.snap
new file mode 100644
index 0000000..2add988
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GeneratePropsJavaInterface-test.js.snap
@@ -0,0 +1,617 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GeneratePropsJavaInterface can generate fixture ARRAY_PROPS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/ArrayPropsNativeComponentManagerInterface.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+
+public interface ArrayPropsNativeComponentManagerInterface<T extends View> {
+  void setNames(T view, @Nullable ReadableArray value);
+  void setDisableds(T view, @Nullable ReadableArray value);
+  void setProgress(T view, @Nullable ReadableArray value);
+  void setRadii(T view, @Nullable ReadableArray value);
+  void setColors(T view, @Nullable ReadableArray value);
+  void setSrcs(T view, @Nullable ReadableArray value);
+  void setPoints(T view, @Nullable ReadableArray value);
+  void setSizes(T view, @Nullable ReadableArray value);
+  void setObject(T view, @Nullable ReadableArray value);
+  void setArray(T view, @Nullable ReadableArray value);
+  void setArrayOfArrayOfObject(T view, @Nullable ReadableArray value);
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaInterface can generate fixture ARRAY_PROPS_WITH_NESTED_OBJECT 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/ArrayPropsNativeComponentManagerInterface.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableArray;
+
+public interface ArrayPropsNativeComponentManagerInterface<T extends View> {
+  void setNativePrimitives(T view, @Nullable ReadableArray value);
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaInterface can generate fixture BOOLEAN_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/BooleanPropNativeComponentManagerInterface.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+
+public interface BooleanPropNativeComponentManagerInterface<T extends View> {
+  void setDisabled(T view, boolean value);
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaInterface can generate fixture COLOR_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/ColorPropNativeComponentManagerInterface.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+
+public interface ColorPropNativeComponentManagerInterface<T extends View> {
+  void setTintColor(T view, @Nullable Integer value);
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaInterface can generate fixture COMMANDS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/CommandNativeComponentManagerInterface.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+
+public interface CommandNativeComponentManagerInterface<T extends View> {
+  // No props
+  void flashScrollIndicators(T view);
+  void allTypes(T view, int x, float y, double z, String message, boolean animated);
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaInterface can generate fixture COMMANDS_AND_PROPS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/CommandNativeComponentManagerInterface.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+
+public interface CommandNativeComponentManagerInterface<T extends View> {
+  void setAccessibilityHint(T view, @Nullable String value);
+  void handleRootTag(T view, double rootTag);
+  void hotspotUpdate(T view, int x, int y);
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaInterface can generate fixture DOUBLE_PROPS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/DoublePropNativeComponentManagerInterface.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+
+public interface DoublePropNativeComponentManagerInterface<T extends View> {
+  void setBlurRadius(T view, double value);
+  void setBlurRadius2(T view, double value);
+  void setBlurRadius3(T view, double value);
+  void setBlurRadius4(T view, double value);
+  void setBlurRadius5(T view, double value);
+  void setBlurRadius6(T view, double value);
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaInterface can generate fixture EVENT_NESTED_OBJECT_PROPS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/EventsNestedObjectNativeComponentManagerInterface.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+
+public interface EventsNestedObjectNativeComponentManagerInterface<T extends View> {
+  void setDisabled(T view, boolean value);
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaInterface can generate fixture EVENT_PROPS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/EventsNativeComponentManagerInterface.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+
+public interface EventsNativeComponentManagerInterface<T extends View> {
+  void setDisabled(T view, boolean value);
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaInterface can generate fixture EVENTS_WITH_PAPER_NAME 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/InterfaceOnlyComponentManagerInterface.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+
+public interface InterfaceOnlyComponentManagerInterface<T extends View> {
+  // No props
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaInterface can generate fixture EXCLUDE_ANDROID 1`] = `Map {}`;
+
+exports[`GeneratePropsJavaInterface can generate fixture EXCLUDE_ANDROID_IOS 1`] = `Map {}`;
+
+exports[`GeneratePropsJavaInterface can generate fixture FLOAT_PROPS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/FloatPropNativeComponentManagerInterface.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+
+public interface FloatPropNativeComponentManagerInterface<T extends View> {
+  void setBlurRadius(T view, float value);
+  void setBlurRadius2(T view, float value);
+  void setBlurRadius3(T view, float value);
+  void setBlurRadius4(T view, float value);
+  void setBlurRadius5(T view, float value);
+  void setBlurRadius6(T view, float value);
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaInterface can generate fixture IMAGE_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/ImagePropNativeComponentManagerInterface.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableMap;
+
+public interface ImagePropNativeComponentManagerInterface<T extends View> {
+  void setThumbImage(T view, @Nullable ReadableMap value);
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaInterface can generate fixture INSETS_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/InsetsPropNativeComponentManagerInterface.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableMap;
+
+public interface InsetsPropNativeComponentManagerInterface<T extends View> {
+  void setContentInset(T view, @Nullable ReadableMap value);
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaInterface can generate fixture INT32_ENUM_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/Int32EnumPropsNativeComponentManagerInterface.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+
+public interface Int32EnumPropsNativeComponentManagerInterface<T extends View> {
+  void setMaxInterval(T view, @Nullable Integer value);
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaInterface can generate fixture INTEGER_PROPS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/IntegerPropNativeComponentManagerInterface.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+
+public interface IntegerPropNativeComponentManagerInterface<T extends View> {
+  void setProgress1(T view, int value);
+  void setProgress2(T view, int value);
+  void setProgress3(T view, int value);
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaInterface can generate fixture INTERFACE_ONLY 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/InterfaceOnlyComponentManagerInterface.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+
+public interface InterfaceOnlyComponentManagerInterface<T extends View> {
+  void setAccessibilityHint(T view, @Nullable String value);
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaInterface can generate fixture MULTI_NATIVE_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/ImageColorPropNativeComponentManagerInterface.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableMap;
+
+public interface ImageColorPropNativeComponentManagerInterface<T extends View> {
+  void setThumbImage(T view, @Nullable ReadableMap value);
+  void setColor(T view, @Nullable Integer value);
+  void setThumbTintColor(T view, @Nullable Integer value);
+  void setPoint(T view, @Nullable ReadableMap value);
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaInterface can generate fixture NO_PROPS_NO_EVENTS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/NoPropsNoEventsComponentManagerInterface.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+
+public interface NoPropsNoEventsComponentManagerInterface<T extends View> {
+  // No props
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaInterface can generate fixture OBJECT_PROPS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/ObjectPropsManagerInterface.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableMap;
+
+public interface ObjectPropsManagerInterface<T extends View> {
+  void setObjectProp(T view, @Nullable ReadableMap value);
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaInterface can generate fixture POINT_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/PointPropNativeComponentManagerInterface.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableMap;
+
+public interface PointPropNativeComponentManagerInterface<T extends View> {
+  void setStartPoint(T view, @Nullable ReadableMap value);
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaInterface can generate fixture STRING_ENUM_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/StringEnumPropsNativeComponentManagerInterface.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+
+public interface StringEnumPropsNativeComponentManagerInterface<T extends View> {
+  void setAlignment(T view, @Nullable String value);
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaInterface can generate fixture STRING_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/StringPropComponentManagerInterface.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+
+public interface StringPropComponentManagerInterface<T extends View> {
+  void setAccessibilityHint(T view, @Nullable String value);
+  void setAccessibilityRole(T view, @Nullable String value);
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaInterface can generate fixture TWO_COMPONENTS_DIFFERENT_FILES 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/MultiFile1NativeComponentManagerInterface.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+
+public interface MultiFile1NativeComponentManagerInterface<T extends View> {
+  void setDisabled(T view, boolean value);
+}
+",
+  "java/com/facebook/react/viewmanagers/MultiFile2NativeComponentManagerInterface.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+
+public interface MultiFile2NativeComponentManagerInterface<T extends View> {
+  void setDisabled(T view, boolean value);
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaInterface can generate fixture TWO_COMPONENTS_SAME_FILE 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/MultiComponent1NativeComponentManagerInterface.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+
+public interface MultiComponent1NativeComponentManagerInterface<T extends View> {
+  void setDisabled(T view, boolean value);
+}
+",
+  "java/com/facebook/react/viewmanagers/MultiComponent2NativeComponentManagerInterface.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+
+public interface MultiComponent2NativeComponentManagerInterface<T extends View> {
+  void setDisabled(T view, boolean value);
+}
+",
+}
+`;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GeneratePropsJavaPojo-test.js.snap b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GeneratePropsJavaPojo-test.js.snap
new file mode 100644
index 0000000..bc6b903
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GeneratePropsJavaPojo-test.js.snap
@@ -0,0 +1,1177 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GeneratePropsJavaPojo can generate fixture ARRAY_PROPS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/Slider/ArrayPropsNativeComponentPropsObjectElement.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.Slider;
+
+import androidx.annotation.Nullable;
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class ArrayPropsNativeComponentPropsObjectElement {
+  private @Nullable String mStringProp;
+  @DoNotStrip
+  public @Nullable String getStringProp() {
+    return mStringProp;
+  }
+}
+",
+  "java/com/facebook/react/viewmanagers/Slider/ArrayPropsNativeComponentPropsArrayElementObjectElement.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.Slider;
+
+import androidx.annotation.Nullable;
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class ArrayPropsNativeComponentPropsArrayElementObjectElement {
+  private @Nullable String mStringProp;
+  @DoNotStrip
+  public @Nullable String getStringProp() {
+    return mStringProp;
+  }
+}
+",
+  "java/com/facebook/react/viewmanagers/Slider/ArrayPropsNativeComponentPropsArrayElement.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.Slider;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+import java.util.ArrayList;
+
+@DoNotStrip
+public class ArrayPropsNativeComponentPropsArrayElement {
+  private ArrayList<ArrayPropsNativeComponentPropsArrayElementObjectElement> mObject;
+  @DoNotStrip
+  public ArrayList<ArrayPropsNativeComponentPropsArrayElementObjectElement> getObject() {
+    return mObject;
+  }
+}
+",
+  "java/com/facebook/react/viewmanagers/Slider/ArrayPropsNativeComponentPropsArrayOfArrayOfObjectElementElement.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.Slider;
+
+import androidx.annotation.Nullable;
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class ArrayPropsNativeComponentPropsArrayOfArrayOfObjectElementElement {
+  private @Nullable String mStringProp;
+  @DoNotStrip
+  public @Nullable String getStringProp() {
+    return mStringProp;
+  }
+}
+",
+  "java/com/facebook/react/viewmanagers/Slider/ArrayPropsNativeComponentProps.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.Slider;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+import com.facebook.react.bridge.ReadableMap;
+import java.util.ArrayList;
+
+@DoNotStrip
+public class ArrayPropsNativeComponentProps {
+  private ArrayList<String> mNames;
+  private ArrayList<Boolean> mDisableds;
+  private ArrayList<Integer> mProgress;
+  private ArrayList<Float> mRadii;
+  private ArrayList<Integer> mColors;
+  private ArrayList<ReadableMap> mSrcs;
+  private ArrayList<ReadableMap> mPoints;
+  private ArrayList<String> mSizes;
+  private ArrayList<ArrayPropsNativeComponentPropsObjectElement> mObject;
+  private ArrayList<ArrayPropsNativeComponentPropsArrayElement> mArray;
+  private ArrayList<ArrayList<ArrayPropsNativeComponentPropsArrayOfArrayOfObjectElementElement>> mArrayOfArrayOfObject;
+  @DoNotStrip
+  public ArrayList<String> getNames() {
+    return mNames;
+  }
+  @DoNotStrip
+  public ArrayList<Boolean> getDisableds() {
+    return mDisableds;
+  }
+  @DoNotStrip
+  public ArrayList<Integer> getProgress() {
+    return mProgress;
+  }
+  @DoNotStrip
+  public ArrayList<Float> getRadii() {
+    return mRadii;
+  }
+  @DoNotStrip
+  public ArrayList<Integer> getColors() {
+    return mColors;
+  }
+  @DoNotStrip
+  public ArrayList<ReadableMap> getSrcs() {
+    return mSrcs;
+  }
+  @DoNotStrip
+  public ArrayList<ReadableMap> getPoints() {
+    return mPoints;
+  }
+  @DoNotStrip
+  public ArrayList<String> getSizes() {
+    return mSizes;
+  }
+  @DoNotStrip
+  public ArrayList<ArrayPropsNativeComponentPropsObjectElement> getObject() {
+    return mObject;
+  }
+  @DoNotStrip
+  public ArrayList<ArrayPropsNativeComponentPropsArrayElement> getArray() {
+    return mArray;
+  }
+  @DoNotStrip
+  public ArrayList<ArrayList<ArrayPropsNativeComponentPropsArrayOfArrayOfObjectElementElement>> getArrayOfArrayOfObject() {
+    return mArrayOfArrayOfObject;
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaPojo can generate fixture ARRAY_PROPS_WITH_NESTED_OBJECT 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/Slider/ArrayPropsNativeComponentPropsNativePrimitivesElement.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.Slider;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+import com.facebook.react.bridge.ReadableMap;
+import java.util.ArrayList;
+
+@DoNotStrip
+public class ArrayPropsNativeComponentPropsNativePrimitivesElement {
+  private ArrayList<Integer> mColors;
+  private ArrayList<ReadableMap> mSrcs;
+  private ArrayList<ReadableMap> mPoints;
+  @DoNotStrip
+  public ArrayList<Integer> getColors() {
+    return mColors;
+  }
+  @DoNotStrip
+  public ArrayList<ReadableMap> getSrcs() {
+    return mSrcs;
+  }
+  @DoNotStrip
+  public ArrayList<ReadableMap> getPoints() {
+    return mPoints;
+  }
+}
+",
+  "java/com/facebook/react/viewmanagers/Slider/ArrayPropsNativeComponentProps.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.Slider;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+import java.util.ArrayList;
+
+@DoNotStrip
+public class ArrayPropsNativeComponentProps {
+  private ArrayList<ArrayPropsNativeComponentPropsNativePrimitivesElement> mNativePrimitives;
+  @DoNotStrip
+  public ArrayList<ArrayPropsNativeComponentPropsNativePrimitivesElement> getNativePrimitives() {
+    return mNativePrimitives;
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaPojo can generate fixture BOOLEAN_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/Switch/BooleanPropNativeComponentProps.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.Switch;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class BooleanPropNativeComponentProps {
+  private boolean mDisabled;
+  @DoNotStrip
+  public boolean getDisabled() {
+    return mDisabled;
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaPojo can generate fixture COLOR_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/Switch/ColorPropNativeComponentProps.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.Switch;
+
+import androidx.annotation.Nullable;
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class ColorPropNativeComponentProps {
+  private @Nullable Integer mTintColor;
+  @DoNotStrip
+  public @Nullable Integer getTintColor() {
+    return mTintColor;
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaPojo can generate fixture COMMANDS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/Switch/CommandNativeComponentProps.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.Switch;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class CommandNativeComponentProps {
+
+
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaPojo can generate fixture COMMANDS_AND_PROPS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/Switch/CommandNativeComponentProps.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.Switch;
+
+import androidx.annotation.Nullable;
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class CommandNativeComponentProps {
+  private @Nullable String mAccessibilityHint;
+  @DoNotStrip
+  public @Nullable String getAccessibilityHint() {
+    return mAccessibilityHint;
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaPojo can generate fixture DOUBLE_PROPS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/Switch/DoublePropNativeComponentProps.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.Switch;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class DoublePropNativeComponentProps {
+  private double mBlurRadius;
+  private double mBlurRadius2;
+  private double mBlurRadius3;
+  private double mBlurRadius4;
+  private double mBlurRadius5;
+  private double mBlurRadius6;
+  @DoNotStrip
+  public double getBlurRadius() {
+    return mBlurRadius;
+  }
+  @DoNotStrip
+  public double getBlurRadius2() {
+    return mBlurRadius2;
+  }
+  @DoNotStrip
+  public double getBlurRadius3() {
+    return mBlurRadius3;
+  }
+  @DoNotStrip
+  public double getBlurRadius4() {
+    return mBlurRadius4;
+  }
+  @DoNotStrip
+  public double getBlurRadius5() {
+    return mBlurRadius5;
+  }
+  @DoNotStrip
+  public double getBlurRadius6() {
+    return mBlurRadius6;
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaPojo can generate fixture EVENT_NESTED_OBJECT_PROPS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/Switch/EventsNestedObjectNativeComponentProps.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.Switch;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class EventsNestedObjectNativeComponentProps {
+  private boolean mDisabled;
+  @DoNotStrip
+  public boolean getDisabled() {
+    return mDisabled;
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaPojo can generate fixture EVENT_PROPS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/Switch/EventsNativeComponentProps.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.Switch;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class EventsNativeComponentProps {
+  private boolean mDisabled;
+  @DoNotStrip
+  public boolean getDisabled() {
+    return mDisabled;
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaPojo can generate fixture EVENTS_WITH_PAPER_NAME 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/Switch/InterfaceOnlyComponentProps.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.Switch;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class InterfaceOnlyComponentProps {
+
+
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaPojo can generate fixture EXCLUDE_ANDROID 1`] = `Map {}`;
+
+exports[`GeneratePropsJavaPojo can generate fixture EXCLUDE_ANDROID_IOS 1`] = `Map {}`;
+
+exports[`GeneratePropsJavaPojo can generate fixture FLOAT_PROPS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/Switch/FloatPropNativeComponentProps.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.Switch;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class FloatPropNativeComponentProps {
+  private float mBlurRadius;
+  private float mBlurRadius2;
+  private float mBlurRadius3;
+  private float mBlurRadius4;
+  private float mBlurRadius5;
+  private float mBlurRadius6;
+  @DoNotStrip
+  public float getBlurRadius() {
+    return mBlurRadius;
+  }
+  @DoNotStrip
+  public float getBlurRadius2() {
+    return mBlurRadius2;
+  }
+  @DoNotStrip
+  public float getBlurRadius3() {
+    return mBlurRadius3;
+  }
+  @DoNotStrip
+  public float getBlurRadius4() {
+    return mBlurRadius4;
+  }
+  @DoNotStrip
+  public float getBlurRadius5() {
+    return mBlurRadius5;
+  }
+  @DoNotStrip
+  public float getBlurRadius6() {
+    return mBlurRadius6;
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaPojo can generate fixture IMAGE_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/Slider/ImagePropNativeComponentProps.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.Slider;
+
+import androidx.annotation.Nullable;
+import com.facebook.proguard.annotations.DoNotStrip;
+import com.facebook.react.bridge.ReadableMap;
+
+@DoNotStrip
+public class ImagePropNativeComponentProps {
+  private @Nullable ReadableMap mThumbImage;
+  @DoNotStrip
+  public @Nullable ReadableMap getThumbImage() {
+    return mThumbImage;
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaPojo can generate fixture INSETS_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/ScrollView/InsetsPropNativeComponentProps.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.ScrollView;
+
+import androidx.annotation.Nullable;
+import com.facebook.proguard.annotations.DoNotStrip;
+import com.facebook.react.bridge.ReadableMap;
+
+@DoNotStrip
+public class InsetsPropNativeComponentProps {
+  private @Nullable ReadableMap mContentInset;
+  @DoNotStrip
+  public @Nullable ReadableMap getContentInset() {
+    return mContentInset;
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaPojo can generate fixture INT32_ENUM_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/Switch/Int32EnumPropsNativeComponentProps.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.Switch;
+
+import androidx.annotation.Nullable;
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class Int32EnumPropsNativeComponentProps {
+  private @Nullable Integer mMaxInterval;
+  @DoNotStrip
+  public @Nullable Integer getMaxInterval() {
+    return mMaxInterval;
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaPojo can generate fixture INTEGER_PROPS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/Switch/IntegerPropNativeComponentProps.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.Switch;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class IntegerPropNativeComponentProps {
+  private int mProgress1;
+  private int mProgress2;
+  private int mProgress3;
+  @DoNotStrip
+  public int getProgress1() {
+    return mProgress1;
+  }
+  @DoNotStrip
+  public int getProgress2() {
+    return mProgress2;
+  }
+  @DoNotStrip
+  public int getProgress3() {
+    return mProgress3;
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaPojo can generate fixture INTERFACE_ONLY 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/Switch/InterfaceOnlyComponentProps.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.Switch;
+
+import androidx.annotation.Nullable;
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class InterfaceOnlyComponentProps {
+  private @Nullable String mAccessibilityHint;
+  @DoNotStrip
+  public @Nullable String getAccessibilityHint() {
+    return mAccessibilityHint;
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaPojo can generate fixture MULTI_NATIVE_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/Slider/ImageColorPropNativeComponentProps.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.Slider;
+
+import androidx.annotation.Nullable;
+import com.facebook.proguard.annotations.DoNotStrip;
+import com.facebook.react.bridge.ReadableMap;
+
+@DoNotStrip
+public class ImageColorPropNativeComponentProps {
+  private @Nullable ReadableMap mThumbImage;
+  private @Nullable Integer mColor;
+  private @Nullable Integer mThumbTintColor;
+  private @Nullable ReadableMap mPoint;
+  @DoNotStrip
+  public @Nullable ReadableMap getThumbImage() {
+    return mThumbImage;
+  }
+  @DoNotStrip
+  public @Nullable Integer getColor() {
+    return mColor;
+  }
+  @DoNotStrip
+  public @Nullable Integer getThumbTintColor() {
+    return mThumbTintColor;
+  }
+  @DoNotStrip
+  public @Nullable ReadableMap getPoint() {
+    return mPoint;
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaPojo can generate fixture NO_PROPS_NO_EVENTS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/NoPropsNoEvents/NoPropsNoEventsComponentProps.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.NoPropsNoEvents;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class NoPropsNoEventsComponentProps {
+
+
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaPojo can generate fixture OBJECT_PROPS 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/ObjectPropsNativeComponent/ObjectPropsPropsObjectPropObjectArrayProp.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.ObjectPropsNativeComponent;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+import java.util.ArrayList;
+
+@DoNotStrip
+public class ObjectPropsPropsObjectPropObjectArrayProp {
+  private ArrayList<String> mArray;
+  @DoNotStrip
+  public ArrayList<String> getArray() {
+    return mArray;
+  }
+}
+",
+  "java/com/facebook/react/viewmanagers/ObjectPropsNativeComponent/ObjectPropsPropsObjectPropObjectPrimitiveRequiredProp.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.ObjectPropsNativeComponent;
+
+import androidx.annotation.Nullable;
+import com.facebook.proguard.annotations.DoNotStrip;
+import com.facebook.react.bridge.ReadableMap;
+
+@DoNotStrip
+public class ObjectPropsPropsObjectPropObjectPrimitiveRequiredProp {
+  private @Nullable ReadableMap mImage;
+  private @Nullable Integer mColor;
+  private @Nullable ReadableMap mPoint;
+  @DoNotStrip
+  public @Nullable ReadableMap getImage() {
+    return mImage;
+  }
+  @DoNotStrip
+  public @Nullable Integer getColor() {
+    return mColor;
+  }
+  @DoNotStrip
+  public @Nullable ReadableMap getPoint() {
+    return mPoint;
+  }
+}
+",
+  "java/com/facebook/react/viewmanagers/ObjectPropsNativeComponent/ObjectPropsPropsObjectPropNestedPropANestedPropB.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.ObjectPropsNativeComponent;
+
+import androidx.annotation.Nullable;
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class ObjectPropsPropsObjectPropNestedPropANestedPropB {
+  private @Nullable String mNestedPropC;
+  @DoNotStrip
+  public @Nullable String getNestedPropC() {
+    return mNestedPropC;
+  }
+}
+",
+  "java/com/facebook/react/viewmanagers/ObjectPropsNativeComponent/ObjectPropsPropsObjectPropNestedPropA.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.ObjectPropsNativeComponent;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class ObjectPropsPropsObjectPropNestedPropA {
+  private ObjectPropsPropsObjectPropNestedPropANestedPropB mNestedPropB;
+  @DoNotStrip
+  public ObjectPropsPropsObjectPropNestedPropANestedPropB getNestedPropB() {
+    return mNestedPropB;
+  }
+}
+",
+  "java/com/facebook/react/viewmanagers/ObjectPropsNativeComponent/ObjectPropsPropsObjectPropNestedArrayAsPropertyArrayPropElement.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.ObjectPropsNativeComponent;
+
+import androidx.annotation.Nullable;
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class ObjectPropsPropsObjectPropNestedArrayAsPropertyArrayPropElement {
+  private @Nullable String mStringProp;
+  @DoNotStrip
+  public @Nullable String getStringProp() {
+    return mStringProp;
+  }
+}
+",
+  "java/com/facebook/react/viewmanagers/ObjectPropsNativeComponent/ObjectPropsPropsObjectPropNestedArrayAsProperty.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.ObjectPropsNativeComponent;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+import java.util.ArrayList;
+
+@DoNotStrip
+public class ObjectPropsPropsObjectPropNestedArrayAsProperty {
+  private ArrayList<ObjectPropsPropsObjectPropNestedArrayAsPropertyArrayPropElement> mArrayProp;
+  @DoNotStrip
+  public ArrayList<ObjectPropsPropsObjectPropNestedArrayAsPropertyArrayPropElement> getArrayProp() {
+    return mArrayProp;
+  }
+}
+",
+  "java/com/facebook/react/viewmanagers/ObjectPropsNativeComponent/ObjectPropsPropsObjectProp.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.ObjectPropsNativeComponent;
+
+import androidx.annotation.Nullable;
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class ObjectPropsPropsObjectProp {
+  private @Nullable String mStringProp;
+  private boolean mBooleanProp;
+  private float mFloatProp;
+  private int mIntProp;
+  private @Nullable String mStringEnumProp;
+  private @Nullable Integer mIntEnumProp;
+  private ObjectPropsPropsObjectPropObjectArrayProp mObjectArrayProp;
+  private ObjectPropsPropsObjectPropObjectPrimitiveRequiredProp mObjectPrimitiveRequiredProp;
+  private ObjectPropsPropsObjectPropNestedPropA mNestedPropA;
+  private ObjectPropsPropsObjectPropNestedArrayAsProperty mNestedArrayAsProperty;
+  @DoNotStrip
+  public @Nullable String getStringProp() {
+    return mStringProp;
+  }
+  @DoNotStrip
+  public boolean getBooleanProp() {
+    return mBooleanProp;
+  }
+  @DoNotStrip
+  public float getFloatProp() {
+    return mFloatProp;
+  }
+  @DoNotStrip
+  public int getIntProp() {
+    return mIntProp;
+  }
+  @DoNotStrip
+  public @Nullable String getStringEnumProp() {
+    return mStringEnumProp;
+  }
+  @DoNotStrip
+  public @Nullable Integer getIntEnumProp() {
+    return mIntEnumProp;
+  }
+  @DoNotStrip
+  public ObjectPropsPropsObjectPropObjectArrayProp getObjectArrayProp() {
+    return mObjectArrayProp;
+  }
+  @DoNotStrip
+  public ObjectPropsPropsObjectPropObjectPrimitiveRequiredProp getObjectPrimitiveRequiredProp() {
+    return mObjectPrimitiveRequiredProp;
+  }
+  @DoNotStrip
+  public ObjectPropsPropsObjectPropNestedPropA getNestedPropA() {
+    return mNestedPropA;
+  }
+  @DoNotStrip
+  public ObjectPropsPropsObjectPropNestedArrayAsProperty getNestedArrayAsProperty() {
+    return mNestedArrayAsProperty;
+  }
+}
+",
+  "java/com/facebook/react/viewmanagers/ObjectPropsNativeComponent/ObjectPropsProps.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.ObjectPropsNativeComponent;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class ObjectPropsProps {
+  private ObjectPropsPropsObjectProp mObjectProp;
+  @DoNotStrip
+  public ObjectPropsPropsObjectProp getObjectProp() {
+    return mObjectProp;
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaPojo can generate fixture POINT_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/Switch/PointPropNativeComponentProps.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.Switch;
+
+import androidx.annotation.Nullable;
+import com.facebook.proguard.annotations.DoNotStrip;
+import com.facebook.react.bridge.ReadableMap;
+
+@DoNotStrip
+public class PointPropNativeComponentProps {
+  private @Nullable ReadableMap mStartPoint;
+  @DoNotStrip
+  public @Nullable ReadableMap getStartPoint() {
+    return mStartPoint;
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaPojo can generate fixture STRING_ENUM_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/Switch/StringEnumPropsNativeComponentProps.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.Switch;
+
+import androidx.annotation.Nullable;
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class StringEnumPropsNativeComponentProps {
+  private @Nullable String mAlignment;
+  @DoNotStrip
+  public @Nullable String getAlignment() {
+    return mAlignment;
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaPojo can generate fixture STRING_PROP 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/Switch/StringPropComponentProps.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.Switch;
+
+import androidx.annotation.Nullable;
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class StringPropComponentProps {
+  private @Nullable String mAccessibilityHint;
+  private @Nullable String mAccessibilityRole;
+  @DoNotStrip
+  public @Nullable String getAccessibilityHint() {
+    return mAccessibilityHint;
+  }
+  @DoNotStrip
+  public @Nullable String getAccessibilityRole() {
+    return mAccessibilityRole;
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaPojo can generate fixture TWO_COMPONENTS_DIFFERENT_FILES 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/ComponentFile1/MultiFile1NativeComponentProps.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.ComponentFile1;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class MultiFile1NativeComponentProps {
+  private boolean mDisabled;
+  @DoNotStrip
+  public boolean getDisabled() {
+    return mDisabled;
+  }
+}
+",
+  "java/com/facebook/react/viewmanagers/ComponentFile2/MultiFile2NativeComponentProps.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.ComponentFile2;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class MultiFile2NativeComponentProps {
+  private boolean mDisabled;
+  @DoNotStrip
+  public boolean getDisabled() {
+    return mDisabled;
+  }
+}
+",
+}
+`;
+
+exports[`GeneratePropsJavaPojo can generate fixture TWO_COMPONENTS_SAME_FILE 1`] = `
+Map {
+  "java/com/facebook/react/viewmanagers/MyComponents/MultiComponent1NativeComponentProps.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.MyComponents;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class MultiComponent1NativeComponentProps {
+  private boolean mDisabled;
+  @DoNotStrip
+  public boolean getDisabled() {
+    return mDisabled;
+  }
+}
+",
+  "java/com/facebook/react/viewmanagers/MyComponents/MultiComponent2NativeComponentProps.java" => "/**
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* This source code is licensed under the MIT license found in the
+* LICENSE file in the root directory of this source tree.
+*
+* @generated by codegen project: GeneratePropsJavaPojo.js
+*/
+
+package com.facebook.react.viewmanagers.MyComponents;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+
+@DoNotStrip
+public class MultiComponent2NativeComponentProps {
+  private boolean mDisabled;
+  @DoNotStrip
+  public boolean getDisabled() {
+    return mDisabled;
+  }
+}
+",
+}
+`;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GenerateShadowNodeCpp-test.js.snap b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GenerateShadowNodeCpp-test.js.snap
new file mode 100644
index 0000000..f953c29
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GenerateShadowNodeCpp-test.js.snap
@@ -0,0 +1,653 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GenerateShadowNodeCpp can generate fixture ARRAY_PROPS 1`] = `
+Map {
+  "ShadowNodes.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/ARRAY_PROPS/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+extern const char ArrayPropsNativeComponentComponentName[] = \\"ArrayPropsNativeComponent\\";
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeCpp can generate fixture ARRAY_PROPS_WITH_NESTED_OBJECT 1`] = `
+Map {
+  "ShadowNodes.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/ARRAY_PROPS_WITH_NESTED_OBJECT/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+extern const char ArrayPropsNativeComponentComponentName[] = \\"ArrayPropsNativeComponent\\";
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeCpp can generate fixture BOOLEAN_PROP 1`] = `
+Map {
+  "ShadowNodes.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/BOOLEAN_PROP/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+extern const char BooleanPropNativeComponentComponentName[] = \\"BooleanPropNativeComponent\\";
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeCpp can generate fixture COLOR_PROP 1`] = `
+Map {
+  "ShadowNodes.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/COLOR_PROP/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+extern const char ColorPropNativeComponentComponentName[] = \\"ColorPropNativeComponent\\";
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeCpp can generate fixture COMMANDS 1`] = `
+Map {
+  "ShadowNodes.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/COMMANDS/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+extern const char CommandNativeComponentComponentName[] = \\"CommandNativeComponent\\";
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeCpp can generate fixture COMMANDS_AND_PROPS 1`] = `
+Map {
+  "ShadowNodes.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/COMMANDS_AND_PROPS/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+extern const char CommandNativeComponentComponentName[] = \\"CommandNativeComponent\\";
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeCpp can generate fixture DOUBLE_PROPS 1`] = `
+Map {
+  "ShadowNodes.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/DOUBLE_PROPS/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+extern const char DoublePropNativeComponentComponentName[] = \\"DoublePropNativeComponent\\";
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeCpp can generate fixture EVENT_NESTED_OBJECT_PROPS 1`] = `
+Map {
+  "ShadowNodes.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/EVENT_NESTED_OBJECT_PROPS/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+extern const char EventsNestedObjectNativeComponentComponentName[] = \\"EventsNestedObjectNativeComponent\\";
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeCpp can generate fixture EVENT_PROPS 1`] = `
+Map {
+  "ShadowNodes.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/EVENT_PROPS/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+extern const char EventsNativeComponentComponentName[] = \\"EventsNativeComponent\\";
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeCpp can generate fixture EVENTS_WITH_PAPER_NAME 1`] = `
+Map {
+  "ShadowNodes.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/EVENTS_WITH_PAPER_NAME/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeCpp can generate fixture EXCLUDE_ANDROID 1`] = `
+Map {
+  "ShadowNodes.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/EXCLUDE_ANDROID/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+extern const char ExcludedAndroidComponentComponentName[] = \\"ExcludedAndroidComponent\\";
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeCpp can generate fixture EXCLUDE_ANDROID_IOS 1`] = `
+Map {
+  "ShadowNodes.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/EXCLUDE_ANDROID_IOS/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+extern const char ExcludedAndroidIosComponentComponentName[] = \\"ExcludedAndroidIosComponent\\";
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeCpp can generate fixture FLOAT_PROPS 1`] = `
+Map {
+  "ShadowNodes.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/FLOAT_PROPS/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+extern const char FloatPropNativeComponentComponentName[] = \\"FloatPropNativeComponent\\";
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeCpp can generate fixture IMAGE_PROP 1`] = `
+Map {
+  "ShadowNodes.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/IMAGE_PROP/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+extern const char ImagePropNativeComponentComponentName[] = \\"ImagePropNativeComponent\\";
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeCpp can generate fixture INSETS_PROP 1`] = `
+Map {
+  "ShadowNodes.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/INSETS_PROP/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+extern const char InsetsPropNativeComponentComponentName[] = \\"InsetsPropNativeComponent\\";
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeCpp can generate fixture INT32_ENUM_PROP 1`] = `
+Map {
+  "ShadowNodes.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/INT32_ENUM_PROP/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+extern const char Int32EnumPropsNativeComponentComponentName[] = \\"Int32EnumPropsNativeComponent\\";
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeCpp can generate fixture INTEGER_PROPS 1`] = `
+Map {
+  "ShadowNodes.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/INTEGER_PROPS/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+extern const char IntegerPropNativeComponentComponentName[] = \\"IntegerPropNativeComponent\\";
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeCpp can generate fixture INTERFACE_ONLY 1`] = `
+Map {
+  "ShadowNodes.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/INTERFACE_ONLY/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeCpp can generate fixture MULTI_NATIVE_PROP 1`] = `
+Map {
+  "ShadowNodes.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/MULTI_NATIVE_PROP/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+extern const char ImageColorPropNativeComponentComponentName[] = \\"ImageColorPropNativeComponent\\";
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeCpp can generate fixture NO_PROPS_NO_EVENTS 1`] = `
+Map {
+  "ShadowNodes.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/NO_PROPS_NO_EVENTS/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+extern const char NoPropsNoEventsComponentComponentName[] = \\"NoPropsNoEventsComponent\\";
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeCpp can generate fixture OBJECT_PROPS 1`] = `
+Map {
+  "ShadowNodes.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/OBJECT_PROPS/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+extern const char ObjectPropsComponentName[] = \\"ObjectProps\\";
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeCpp can generate fixture POINT_PROP 1`] = `
+Map {
+  "ShadowNodes.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/POINT_PROP/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+extern const char PointPropNativeComponentComponentName[] = \\"PointPropNativeComponent\\";
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeCpp can generate fixture STRING_ENUM_PROP 1`] = `
+Map {
+  "ShadowNodes.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/STRING_ENUM_PROP/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+extern const char StringEnumPropsNativeComponentComponentName[] = \\"StringEnumPropsNativeComponent\\";
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeCpp can generate fixture STRING_PROP 1`] = `
+Map {
+  "ShadowNodes.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/STRING_PROP/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+extern const char StringPropComponentComponentName[] = \\"StringPropComponent\\";
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeCpp can generate fixture TWO_COMPONENTS_DIFFERENT_FILES 1`] = `
+Map {
+  "ShadowNodes.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/TWO_COMPONENTS_DIFFERENT_FILES/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+extern const char MultiFile1NativeComponentComponentName[] = \\"MultiFile1NativeComponent\\";
+extern const char MultiFile2NativeComponentComponentName[] = \\"MultiFile2NativeComponent\\";
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeCpp can generate fixture TWO_COMPONENTS_SAME_FILE 1`] = `
+Map {
+  "ShadowNodes.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/TWO_COMPONENTS_SAME_FILE/ShadowNodes.h>
+
+namespace facebook {
+namespace react {
+
+extern const char MultiComponent1NativeComponentComponentName[] = \\"MultiComponent1NativeComponent\\";
+extern const char MultiComponent2NativeComponentComponentName[] = \\"MultiComponent2NativeComponent\\";
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GenerateShadowNodeH-test.js.snap b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GenerateShadowNodeH-test.js.snap
new file mode 100644
index 0000000..bb34cfb
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GenerateShadowNodeH-test.js.snap
@@ -0,0 +1,919 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GenerateShadowNodeH can generate fixture ARRAY_PROPS 1`] = `
+Map {
+  "ShadowNodes.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/ARRAY_PROPS/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+extern const char ArrayPropsNativeComponentComponentName[];
+
+/*
+ * \`ShadowNode\` for <ArrayPropsNativeComponent> component.
+ */
+using ArrayPropsNativeComponentShadowNode = ConcreteViewShadowNode<
+    ArrayPropsNativeComponentComponentName,
+    ArrayPropsNativeComponentProps>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeH can generate fixture ARRAY_PROPS_WITH_NESTED_OBJECT 1`] = `
+Map {
+  "ShadowNodes.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/ARRAY_PROPS_WITH_NESTED_OBJECT/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+extern const char ArrayPropsNativeComponentComponentName[];
+
+/*
+ * \`ShadowNode\` for <ArrayPropsNativeComponent> component.
+ */
+using ArrayPropsNativeComponentShadowNode = ConcreteViewShadowNode<
+    ArrayPropsNativeComponentComponentName,
+    ArrayPropsNativeComponentProps>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeH can generate fixture BOOLEAN_PROP 1`] = `
+Map {
+  "ShadowNodes.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/BOOLEAN_PROP/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+extern const char BooleanPropNativeComponentComponentName[];
+
+/*
+ * \`ShadowNode\` for <BooleanPropNativeComponent> component.
+ */
+using BooleanPropNativeComponentShadowNode = ConcreteViewShadowNode<
+    BooleanPropNativeComponentComponentName,
+    BooleanPropNativeComponentProps>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeH can generate fixture COLOR_PROP 1`] = `
+Map {
+  "ShadowNodes.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/COLOR_PROP/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+extern const char ColorPropNativeComponentComponentName[];
+
+/*
+ * \`ShadowNode\` for <ColorPropNativeComponent> component.
+ */
+using ColorPropNativeComponentShadowNode = ConcreteViewShadowNode<
+    ColorPropNativeComponentComponentName,
+    ColorPropNativeComponentProps>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeH can generate fixture COMMANDS 1`] = `
+Map {
+  "ShadowNodes.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/COMMANDS/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+extern const char CommandNativeComponentComponentName[];
+
+/*
+ * \`ShadowNode\` for <CommandNativeComponent> component.
+ */
+using CommandNativeComponentShadowNode = ConcreteViewShadowNode<
+    CommandNativeComponentComponentName,
+    CommandNativeComponentProps>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeH can generate fixture COMMANDS_AND_PROPS 1`] = `
+Map {
+  "ShadowNodes.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/COMMANDS_AND_PROPS/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+extern const char CommandNativeComponentComponentName[];
+
+/*
+ * \`ShadowNode\` for <CommandNativeComponent> component.
+ */
+using CommandNativeComponentShadowNode = ConcreteViewShadowNode<
+    CommandNativeComponentComponentName,
+    CommandNativeComponentProps>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeH can generate fixture DOUBLE_PROPS 1`] = `
+Map {
+  "ShadowNodes.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/DOUBLE_PROPS/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+extern const char DoublePropNativeComponentComponentName[];
+
+/*
+ * \`ShadowNode\` for <DoublePropNativeComponent> component.
+ */
+using DoublePropNativeComponentShadowNode = ConcreteViewShadowNode<
+    DoublePropNativeComponentComponentName,
+    DoublePropNativeComponentProps>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeH can generate fixture EVENT_NESTED_OBJECT_PROPS 1`] = `
+Map {
+  "ShadowNodes.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/EVENT_NESTED_OBJECT_PROPS/EventEmitters.h>
+#include <react/renderer/components/EVENT_NESTED_OBJECT_PROPS/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+extern const char EventsNestedObjectNativeComponentComponentName[];
+
+/*
+ * \`ShadowNode\` for <EventsNestedObjectNativeComponent> component.
+ */
+using EventsNestedObjectNativeComponentShadowNode = ConcreteViewShadowNode<
+    EventsNestedObjectNativeComponentComponentName,
+    EventsNestedObjectNativeComponentProps,
+EventsNestedObjectNativeComponentEventEmitter>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeH can generate fixture EVENT_PROPS 1`] = `
+Map {
+  "ShadowNodes.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/EVENT_PROPS/EventEmitters.h>
+#include <react/renderer/components/EVENT_PROPS/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+extern const char EventsNativeComponentComponentName[];
+
+/*
+ * \`ShadowNode\` for <EventsNativeComponent> component.
+ */
+using EventsNativeComponentShadowNode = ConcreteViewShadowNode<
+    EventsNativeComponentComponentName,
+    EventsNativeComponentProps,
+EventsNativeComponentEventEmitter>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeH can generate fixture EVENTS_WITH_PAPER_NAME 1`] = `
+Map {
+  "ShadowNodes.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/EVENTS_WITH_PAPER_NAME/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeH can generate fixture EXCLUDE_ANDROID 1`] = `
+Map {
+  "ShadowNodes.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/EXCLUDE_ANDROID/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+extern const char ExcludedAndroidComponentComponentName[];
+
+/*
+ * \`ShadowNode\` for <ExcludedAndroidComponent> component.
+ */
+using ExcludedAndroidComponentShadowNode = ConcreteViewShadowNode<
+    ExcludedAndroidComponentComponentName,
+    ExcludedAndroidComponentProps>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeH can generate fixture EXCLUDE_ANDROID_IOS 1`] = `
+Map {
+  "ShadowNodes.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/EXCLUDE_ANDROID_IOS/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+extern const char ExcludedAndroidIosComponentComponentName[];
+
+/*
+ * \`ShadowNode\` for <ExcludedAndroidIosComponent> component.
+ */
+using ExcludedAndroidIosComponentShadowNode = ConcreteViewShadowNode<
+    ExcludedAndroidIosComponentComponentName,
+    ExcludedAndroidIosComponentProps>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeH can generate fixture FLOAT_PROPS 1`] = `
+Map {
+  "ShadowNodes.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/FLOAT_PROPS/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+extern const char FloatPropNativeComponentComponentName[];
+
+/*
+ * \`ShadowNode\` for <FloatPropNativeComponent> component.
+ */
+using FloatPropNativeComponentShadowNode = ConcreteViewShadowNode<
+    FloatPropNativeComponentComponentName,
+    FloatPropNativeComponentProps>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeH can generate fixture IMAGE_PROP 1`] = `
+Map {
+  "ShadowNodes.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/IMAGE_PROP/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+extern const char ImagePropNativeComponentComponentName[];
+
+/*
+ * \`ShadowNode\` for <ImagePropNativeComponent> component.
+ */
+using ImagePropNativeComponentShadowNode = ConcreteViewShadowNode<
+    ImagePropNativeComponentComponentName,
+    ImagePropNativeComponentProps>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeH can generate fixture INSETS_PROP 1`] = `
+Map {
+  "ShadowNodes.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/INSETS_PROP/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+extern const char InsetsPropNativeComponentComponentName[];
+
+/*
+ * \`ShadowNode\` for <InsetsPropNativeComponent> component.
+ */
+using InsetsPropNativeComponentShadowNode = ConcreteViewShadowNode<
+    InsetsPropNativeComponentComponentName,
+    InsetsPropNativeComponentProps>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeH can generate fixture INT32_ENUM_PROP 1`] = `
+Map {
+  "ShadowNodes.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/INT32_ENUM_PROP/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+extern const char Int32EnumPropsNativeComponentComponentName[];
+
+/*
+ * \`ShadowNode\` for <Int32EnumPropsNativeComponent> component.
+ */
+using Int32EnumPropsNativeComponentShadowNode = ConcreteViewShadowNode<
+    Int32EnumPropsNativeComponentComponentName,
+    Int32EnumPropsNativeComponentProps>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeH can generate fixture INTEGER_PROPS 1`] = `
+Map {
+  "ShadowNodes.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/INTEGER_PROPS/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+extern const char IntegerPropNativeComponentComponentName[];
+
+/*
+ * \`ShadowNode\` for <IntegerPropNativeComponent> component.
+ */
+using IntegerPropNativeComponentShadowNode = ConcreteViewShadowNode<
+    IntegerPropNativeComponentComponentName,
+    IntegerPropNativeComponentProps>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeH can generate fixture INTERFACE_ONLY 1`] = `
+Map {
+  "ShadowNodes.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/INTERFACE_ONLY/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeH can generate fixture MULTI_NATIVE_PROP 1`] = `
+Map {
+  "ShadowNodes.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/MULTI_NATIVE_PROP/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+extern const char ImageColorPropNativeComponentComponentName[];
+
+/*
+ * \`ShadowNode\` for <ImageColorPropNativeComponent> component.
+ */
+using ImageColorPropNativeComponentShadowNode = ConcreteViewShadowNode<
+    ImageColorPropNativeComponentComponentName,
+    ImageColorPropNativeComponentProps>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeH can generate fixture NO_PROPS_NO_EVENTS 1`] = `
+Map {
+  "ShadowNodes.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/NO_PROPS_NO_EVENTS/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+extern const char NoPropsNoEventsComponentComponentName[];
+
+/*
+ * \`ShadowNode\` for <NoPropsNoEventsComponent> component.
+ */
+using NoPropsNoEventsComponentShadowNode = ConcreteViewShadowNode<
+    NoPropsNoEventsComponentComponentName,
+    NoPropsNoEventsComponentProps>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeH can generate fixture OBJECT_PROPS 1`] = `
+Map {
+  "ShadowNodes.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/OBJECT_PROPS/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+extern const char ObjectPropsComponentName[];
+
+/*
+ * \`ShadowNode\` for <ObjectProps> component.
+ */
+using ObjectPropsShadowNode = ConcreteViewShadowNode<
+    ObjectPropsComponentName,
+    ObjectPropsProps>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeH can generate fixture POINT_PROP 1`] = `
+Map {
+  "ShadowNodes.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/POINT_PROP/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+extern const char PointPropNativeComponentComponentName[];
+
+/*
+ * \`ShadowNode\` for <PointPropNativeComponent> component.
+ */
+using PointPropNativeComponentShadowNode = ConcreteViewShadowNode<
+    PointPropNativeComponentComponentName,
+    PointPropNativeComponentProps>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeH can generate fixture STRING_ENUM_PROP 1`] = `
+Map {
+  "ShadowNodes.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/STRING_ENUM_PROP/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+extern const char StringEnumPropsNativeComponentComponentName[];
+
+/*
+ * \`ShadowNode\` for <StringEnumPropsNativeComponent> component.
+ */
+using StringEnumPropsNativeComponentShadowNode = ConcreteViewShadowNode<
+    StringEnumPropsNativeComponentComponentName,
+    StringEnumPropsNativeComponentProps>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeH can generate fixture STRING_PROP 1`] = `
+Map {
+  "ShadowNodes.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/STRING_PROP/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+extern const char StringPropComponentComponentName[];
+
+/*
+ * \`ShadowNode\` for <StringPropComponent> component.
+ */
+using StringPropComponentShadowNode = ConcreteViewShadowNode<
+    StringPropComponentComponentName,
+    StringPropComponentProps>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeH can generate fixture TWO_COMPONENTS_DIFFERENT_FILES 1`] = `
+Map {
+  "ShadowNodes.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/TWO_COMPONENTS_DIFFERENT_FILES/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+extern const char MultiFile1NativeComponentComponentName[];
+
+/*
+ * \`ShadowNode\` for <MultiFile1NativeComponent> component.
+ */
+using MultiFile1NativeComponentShadowNode = ConcreteViewShadowNode<
+    MultiFile1NativeComponentComponentName,
+    MultiFile1NativeComponentProps>;
+
+extern const char MultiFile2NativeComponentComponentName[];
+
+/*
+ * \`ShadowNode\` for <MultiFile2NativeComponent> component.
+ */
+using MultiFile2NativeComponentShadowNode = ConcreteViewShadowNode<
+    MultiFile2NativeComponentComponentName,
+    MultiFile2NativeComponentProps>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateShadowNodeH can generate fixture TWO_COMPONENTS_SAME_FILE 1`] = `
+Map {
+  "ShadowNodes.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/TWO_COMPONENTS_SAME_FILE/Props.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+
+namespace facebook {
+namespace react {
+
+extern const char MultiComponent1NativeComponentComponentName[];
+
+/*
+ * \`ShadowNode\` for <MultiComponent1NativeComponent> component.
+ */
+using MultiComponent1NativeComponentShadowNode = ConcreteViewShadowNode<
+    MultiComponent1NativeComponentComponentName,
+    MultiComponent1NativeComponentProps>;
+
+extern const char MultiComponent2NativeComponentComponentName[];
+
+/*
+ * \`ShadowNode\` for <MultiComponent2NativeComponent> component.
+ */
+using MultiComponent2NativeComponentShadowNode = ConcreteViewShadowNode<
+    MultiComponent2NativeComponentComponentName,
+    MultiComponent2NativeComponentProps>;
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GenerateTests-test.js.snap b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GenerateTests-test.js.snap
new file mode 100644
index 0000000..a798127
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GenerateTests-test.js.snap
@@ -0,0 +1,1292 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GenerateTests can generate fixture ARRAY_PROPS 1`] = `
+Map {
+  "Tests.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/ARRAY_PROPS/Props.h>
+#include <react/renderer/components/image/conversions.h>
+#include <react/renderer/core/RawProps.h>
+#include <react/renderer/core/RawPropsParser.h>
+#include <react/renderer/core/propsConversions.h>
+
+using namespace facebook::react;
+
+TEST(ArrayPropsNativeComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<ArrayPropsNativeComponentProps>();
+  auto const &sourceProps = ArrayPropsNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  ArrayPropsNativeComponentProps(parserContext, sourceProps, rawProps);
+}",
+}
+`;
+
+exports[`GenerateTests can generate fixture ARRAY_PROPS_WITH_NESTED_OBJECT 1`] = `
+Map {
+  "Tests.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/ARRAY_PROPS_WITH_NESTED_OBJECT/Props.h>
+#include <react/renderer/core/RawProps.h>
+#include <react/renderer/core/RawPropsParser.h>
+#include <react/renderer/core/propsConversions.h>
+
+using namespace facebook::react;
+
+TEST(ArrayPropsNativeComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<ArrayPropsNativeComponentProps>();
+  auto const &sourceProps = ArrayPropsNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  ArrayPropsNativeComponentProps(parserContext, sourceProps, rawProps);
+}",
+}
+`;
+
+exports[`GenerateTests can generate fixture BOOLEAN_PROP 1`] = `
+Map {
+  "Tests.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/BOOLEAN_PROP/Props.h>
+#include <react/renderer/core/RawProps.h>
+#include <react/renderer/core/RawPropsParser.h>
+#include <react/renderer/core/propsConversions.h>
+
+using namespace facebook::react;
+
+TEST(BooleanPropNativeComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<BooleanPropNativeComponentProps>();
+  auto const &sourceProps = BooleanPropNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  BooleanPropNativeComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(BooleanPropNativeComponentProps_disabled, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<BooleanPropNativeComponentProps>();
+  auto const &sourceProps = BooleanPropNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"disabled\\", false));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  BooleanPropNativeComponentProps(parserContext, sourceProps, rawProps);
+}",
+}
+`;
+
+exports[`GenerateTests can generate fixture COLOR_PROP 1`] = `
+Map {
+  "Tests.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/COLOR_PROP/Props.h>
+#include <react/renderer/core/RawProps.h>
+#include <react/renderer/core/RawPropsParser.h>
+#include <react/renderer/core/propsConversions.h>
+
+using namespace facebook::react;
+
+TEST(ColorPropNativeComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<ColorPropNativeComponentProps>();
+  auto const &sourceProps = ColorPropNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  ColorPropNativeComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(ColorPropNativeComponentProps_tintColor, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<ColorPropNativeComponentProps>();
+  auto const &sourceProps = ColorPropNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"tintColor\\", 1));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  ColorPropNativeComponentProps(parserContext, sourceProps, rawProps);
+}",
+}
+`;
+
+exports[`GenerateTests can generate fixture COMMANDS 1`] = `
+Map {
+  "Tests.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/COMMANDS/Props.h>
+#include <react/renderer/core/RawProps.h>
+#include <react/renderer/core/RawPropsParser.h>
+#include <react/renderer/core/propsConversions.h>
+
+using namespace facebook::react;
+
+TEST(CommandNativeComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<CommandNativeComponentProps>();
+  auto const &sourceProps = CommandNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  CommandNativeComponentProps(parserContext, sourceProps, rawProps);
+}",
+}
+`;
+
+exports[`GenerateTests can generate fixture COMMANDS_AND_PROPS 1`] = `
+Map {
+  "Tests.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/COMMANDS_AND_PROPS/Props.h>
+#include <react/renderer/core/RawProps.h>
+#include <react/renderer/core/RawPropsParser.h>
+#include <react/renderer/core/propsConversions.h>
+
+using namespace facebook::react;
+
+TEST(CommandNativeComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<CommandNativeComponentProps>();
+  auto const &sourceProps = CommandNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  CommandNativeComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(CommandNativeComponentProps_accessibilityHint, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<CommandNativeComponentProps>();
+  auto const &sourceProps = CommandNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"accessibilityHint\\", \\"foo\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  CommandNativeComponentProps(parserContext, sourceProps, rawProps);
+}",
+}
+`;
+
+exports[`GenerateTests can generate fixture DOUBLE_PROPS 1`] = `
+Map {
+  "Tests.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/DOUBLE_PROPS/Props.h>
+#include <react/renderer/core/RawProps.h>
+#include <react/renderer/core/RawPropsParser.h>
+#include <react/renderer/core/propsConversions.h>
+
+using namespace facebook::react;
+
+TEST(DoublePropNativeComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<DoublePropNativeComponentProps>();
+  auto const &sourceProps = DoublePropNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  DoublePropNativeComponentProps(parserContext, sourceProps, rawProps);
+}",
+}
+`;
+
+exports[`GenerateTests can generate fixture EVENT_NESTED_OBJECT_PROPS 1`] = `
+Map {
+  "Tests.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/EVENT_NESTED_OBJECT_PROPS/Props.h>
+#include <react/renderer/core/RawProps.h>
+#include <react/renderer/core/RawPropsParser.h>
+#include <react/renderer/core/propsConversions.h>
+
+using namespace facebook::react;
+
+TEST(EventsNestedObjectNativeComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<EventsNestedObjectNativeComponentProps>();
+  auto const &sourceProps = EventsNestedObjectNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  EventsNestedObjectNativeComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(EventsNestedObjectNativeComponentProps_disabled, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<EventsNestedObjectNativeComponentProps>();
+  auto const &sourceProps = EventsNestedObjectNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"disabled\\", false));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  EventsNestedObjectNativeComponentProps(parserContext, sourceProps, rawProps);
+}",
+}
+`;
+
+exports[`GenerateTests can generate fixture EVENT_PROPS 1`] = `
+Map {
+  "Tests.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/EVENT_PROPS/Props.h>
+#include <react/renderer/core/RawProps.h>
+#include <react/renderer/core/RawPropsParser.h>
+#include <react/renderer/core/propsConversions.h>
+
+using namespace facebook::react;
+
+TEST(EventsNativeComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<EventsNativeComponentProps>();
+  auto const &sourceProps = EventsNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  EventsNativeComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(EventsNativeComponentProps_disabled, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<EventsNativeComponentProps>();
+  auto const &sourceProps = EventsNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"disabled\\", false));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  EventsNativeComponentProps(parserContext, sourceProps, rawProps);
+}",
+}
+`;
+
+exports[`GenerateTests can generate fixture EVENTS_WITH_PAPER_NAME 1`] = `
+Map {
+  "Tests.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/EVENTS_WITH_PAPER_NAME/Props.h>
+#include <react/renderer/core/RawProps.h>
+#include <react/renderer/core/RawPropsParser.h>
+#include <react/renderer/core/propsConversions.h>
+
+using namespace facebook::react;
+
+TEST(InterfaceOnlyComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<InterfaceOnlyComponentProps>();
+  auto const &sourceProps = InterfaceOnlyComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  InterfaceOnlyComponentProps(parserContext, sourceProps, rawProps);
+}",
+}
+`;
+
+exports[`GenerateTests can generate fixture EXCLUDE_ANDROID 1`] = `
+Map {
+  "Tests.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/EXCLUDE_ANDROID/Props.h>
+#include <react/renderer/core/RawProps.h>
+#include <react/renderer/core/RawPropsParser.h>
+#include <react/renderer/core/propsConversions.h>
+
+using namespace facebook::react;
+
+TEST(ExcludedAndroidComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<ExcludedAndroidComponentProps>();
+  auto const &sourceProps = ExcludedAndroidComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  ExcludedAndroidComponentProps(parserContext, sourceProps, rawProps);
+}",
+}
+`;
+
+exports[`GenerateTests can generate fixture EXCLUDE_ANDROID_IOS 1`] = `
+Map {
+  "Tests.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/EXCLUDE_ANDROID_IOS/Props.h>
+#include <react/renderer/core/RawProps.h>
+#include <react/renderer/core/RawPropsParser.h>
+#include <react/renderer/core/propsConversions.h>
+
+using namespace facebook::react;
+
+TEST(ExcludedAndroidIosComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<ExcludedAndroidIosComponentProps>();
+  auto const &sourceProps = ExcludedAndroidIosComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  ExcludedAndroidIosComponentProps(parserContext, sourceProps, rawProps);
+}",
+}
+`;
+
+exports[`GenerateTests can generate fixture FLOAT_PROPS 1`] = `
+Map {
+  "Tests.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/FLOAT_PROPS/Props.h>
+#include <react/renderer/core/RawProps.h>
+#include <react/renderer/core/RawPropsParser.h>
+#include <react/renderer/core/propsConversions.h>
+
+using namespace facebook::react;
+
+TEST(FloatPropNativeComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<FloatPropNativeComponentProps>();
+  auto const &sourceProps = FloatPropNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  FloatPropNativeComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(FloatPropNativeComponentProps_blurRadius, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<FloatPropNativeComponentProps>();
+  auto const &sourceProps = FloatPropNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"blurRadius\\", 0));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  FloatPropNativeComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(FloatPropNativeComponentProps_blurRadius2, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<FloatPropNativeComponentProps>();
+  auto const &sourceProps = FloatPropNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"blurRadius2\\", 0.001));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  FloatPropNativeComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(FloatPropNativeComponentProps_blurRadius3, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<FloatPropNativeComponentProps>();
+  auto const &sourceProps = FloatPropNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"blurRadius3\\", 2.1));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  FloatPropNativeComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(FloatPropNativeComponentProps_blurRadius4, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<FloatPropNativeComponentProps>();
+  auto const &sourceProps = FloatPropNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"blurRadius4\\", 0));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  FloatPropNativeComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(FloatPropNativeComponentProps_blurRadius5, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<FloatPropNativeComponentProps>();
+  auto const &sourceProps = FloatPropNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"blurRadius5\\", 1));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  FloatPropNativeComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(FloatPropNativeComponentProps_blurRadius6, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<FloatPropNativeComponentProps>();
+  auto const &sourceProps = FloatPropNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"blurRadius6\\", 0));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  FloatPropNativeComponentProps(parserContext, sourceProps, rawProps);
+}",
+}
+`;
+
+exports[`GenerateTests can generate fixture IMAGE_PROP 1`] = `
+Map {
+  "Tests.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/IMAGE_PROP/Props.h>
+#include <react/renderer/components/image/conversions.h>
+#include <react/renderer/core/RawProps.h>
+#include <react/renderer/core/RawPropsParser.h>
+#include <react/renderer/core/propsConversions.h>
+
+using namespace facebook::react;
+
+TEST(ImagePropNativeComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<ImagePropNativeComponentProps>();
+  auto const &sourceProps = ImagePropNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  ImagePropNativeComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(ImagePropNativeComponentProps_thumbImage, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<ImagePropNativeComponentProps>();
+  auto const &sourceProps = ImagePropNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"thumbImage\\", folly::dynamic::object(\\"url\\", \\"testurl\\")));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  ImagePropNativeComponentProps(parserContext, sourceProps, rawProps);
+}",
+}
+`;
+
+exports[`GenerateTests can generate fixture INSETS_PROP 1`] = `
+Map {
+  "Tests.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/INSETS_PROP/Props.h>
+#include <react/renderer/core/RawProps.h>
+#include <react/renderer/core/RawPropsParser.h>
+#include <react/renderer/core/propsConversions.h>
+
+using namespace facebook::react;
+
+TEST(InsetsPropNativeComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<InsetsPropNativeComponentProps>();
+  auto const &sourceProps = InsetsPropNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  InsetsPropNativeComponentProps(parserContext, sourceProps, rawProps);
+}",
+}
+`;
+
+exports[`GenerateTests can generate fixture INT32_ENUM_PROP 1`] = `
+Map {
+  "Tests.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/INT32_ENUM_PROP/Props.h>
+#include <react/renderer/core/RawProps.h>
+#include <react/renderer/core/RawPropsParser.h>
+#include <react/renderer/core/propsConversions.h>
+
+using namespace facebook::react;
+
+TEST(Int32EnumPropsNativeComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<Int32EnumPropsNativeComponentProps>();
+  auto const &sourceProps = Int32EnumPropsNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  Int32EnumPropsNativeComponentProps(parserContext, sourceProps, rawProps);
+}",
+}
+`;
+
+exports[`GenerateTests can generate fixture INTEGER_PROPS 1`] = `
+Map {
+  "Tests.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/INTEGER_PROPS/Props.h>
+#include <react/renderer/core/RawProps.h>
+#include <react/renderer/core/RawPropsParser.h>
+#include <react/renderer/core/propsConversions.h>
+
+using namespace facebook::react;
+
+TEST(IntegerPropNativeComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<IntegerPropNativeComponentProps>();
+  auto const &sourceProps = IntegerPropNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  IntegerPropNativeComponentProps(parserContext, sourceProps, rawProps);
+}",
+}
+`;
+
+exports[`GenerateTests can generate fixture INTERFACE_ONLY 1`] = `
+Map {
+  "Tests.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/INTERFACE_ONLY/Props.h>
+#include <react/renderer/core/RawProps.h>
+#include <react/renderer/core/RawPropsParser.h>
+#include <react/renderer/core/propsConversions.h>
+
+using namespace facebook::react;
+
+TEST(InterfaceOnlyComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<InterfaceOnlyComponentProps>();
+  auto const &sourceProps = InterfaceOnlyComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  InterfaceOnlyComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(InterfaceOnlyComponentProps_accessibilityHint, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<InterfaceOnlyComponentProps>();
+  auto const &sourceProps = InterfaceOnlyComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"accessibilityHint\\", \\"foo\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  InterfaceOnlyComponentProps(parserContext, sourceProps, rawProps);
+}",
+}
+`;
+
+exports[`GenerateTests can generate fixture MULTI_NATIVE_PROP 1`] = `
+Map {
+  "Tests.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/MULTI_NATIVE_PROP/Props.h>
+#include <react/renderer/components/image/conversions.h>
+#include <react/renderer/core/RawProps.h>
+#include <react/renderer/core/RawPropsParser.h>
+#include <react/renderer/core/propsConversions.h>
+
+using namespace facebook::react;
+
+TEST(ImageColorPropNativeComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<ImageColorPropNativeComponentProps>();
+  auto const &sourceProps = ImageColorPropNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  ImageColorPropNativeComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(ImageColorPropNativeComponentProps_thumbImage, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<ImageColorPropNativeComponentProps>();
+  auto const &sourceProps = ImageColorPropNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"thumbImage\\", folly::dynamic::object(\\"url\\", \\"testurl\\")));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  ImageColorPropNativeComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(ImageColorPropNativeComponentProps_color, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<ImageColorPropNativeComponentProps>();
+  auto const &sourceProps = ImageColorPropNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"color\\", 1));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  ImageColorPropNativeComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(ImageColorPropNativeComponentProps_thumbTintColor, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<ImageColorPropNativeComponentProps>();
+  auto const &sourceProps = ImageColorPropNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"thumbTintColor\\", 1));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  ImageColorPropNativeComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(ImageColorPropNativeComponentProps_point, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<ImageColorPropNativeComponentProps>();
+  auto const &sourceProps = ImageColorPropNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"point\\", folly::dynamic::object(\\"x\\", 1)(\\"y\\", 1)));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  ImageColorPropNativeComponentProps(parserContext, sourceProps, rawProps);
+}",
+}
+`;
+
+exports[`GenerateTests can generate fixture NO_PROPS_NO_EVENTS 1`] = `
+Map {
+  "Tests.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/NO_PROPS_NO_EVENTS/Props.h>
+#include <react/renderer/core/RawProps.h>
+#include <react/renderer/core/RawPropsParser.h>
+#include <react/renderer/core/propsConversions.h>
+
+using namespace facebook::react;
+
+TEST(NoPropsNoEventsComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<NoPropsNoEventsComponentProps>();
+  auto const &sourceProps = NoPropsNoEventsComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  NoPropsNoEventsComponentProps(parserContext, sourceProps, rawProps);
+}",
+}
+`;
+
+exports[`GenerateTests can generate fixture OBJECT_PROPS 1`] = `
+Map {
+  "Tests.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/OBJECT_PROPS/Props.h>
+#include <react/renderer/components/image/conversions.h>
+#include <react/renderer/core/RawProps.h>
+#include <react/renderer/core/RawPropsParser.h>
+#include <react/renderer/core/propsConversions.h>
+
+using namespace facebook::react;
+
+TEST(ObjectPropsProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<ObjectPropsProps>();
+  auto const &sourceProps = ObjectPropsProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  ObjectPropsProps(parserContext, sourceProps, rawProps);
+}",
+}
+`;
+
+exports[`GenerateTests can generate fixture POINT_PROP 1`] = `
+Map {
+  "Tests.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/POINT_PROP/Props.h>
+#include <react/renderer/core/RawProps.h>
+#include <react/renderer/core/RawPropsParser.h>
+#include <react/renderer/core/propsConversions.h>
+
+using namespace facebook::react;
+
+TEST(PointPropNativeComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<PointPropNativeComponentProps>();
+  auto const &sourceProps = PointPropNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  PointPropNativeComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(PointPropNativeComponentProps_startPoint, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<PointPropNativeComponentProps>();
+  auto const &sourceProps = PointPropNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"startPoint\\", folly::dynamic::object(\\"x\\", 1)(\\"y\\", 1)));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  PointPropNativeComponentProps(parserContext, sourceProps, rawProps);
+}",
+}
+`;
+
+exports[`GenerateTests can generate fixture STRING_ENUM_PROP 1`] = `
+Map {
+  "Tests.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/STRING_ENUM_PROP/Props.h>
+#include <react/renderer/core/RawProps.h>
+#include <react/renderer/core/RawPropsParser.h>
+#include <react/renderer/core/propsConversions.h>
+
+using namespace facebook::react;
+
+TEST(StringEnumPropsNativeComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<StringEnumPropsNativeComponentProps>();
+  auto const &sourceProps = StringEnumPropsNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  StringEnumPropsNativeComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(StringEnumPropsNativeComponentProps_alignment_Top, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<StringEnumPropsNativeComponentProps>();
+  auto const &sourceProps = StringEnumPropsNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"alignment\\", \\"top\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  StringEnumPropsNativeComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(StringEnumPropsNativeComponentProps_alignment_Center, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<StringEnumPropsNativeComponentProps>();
+  auto const &sourceProps = StringEnumPropsNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"alignment\\", \\"center\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  StringEnumPropsNativeComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(StringEnumPropsNativeComponentProps_alignment_BottomRight, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<StringEnumPropsNativeComponentProps>();
+  auto const &sourceProps = StringEnumPropsNativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"alignment\\", \\"bottom-right\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  StringEnumPropsNativeComponentProps(parserContext, sourceProps, rawProps);
+}",
+}
+`;
+
+exports[`GenerateTests can generate fixture STRING_PROP 1`] = `
+Map {
+  "Tests.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/STRING_PROP/Props.h>
+#include <react/renderer/core/RawProps.h>
+#include <react/renderer/core/RawPropsParser.h>
+#include <react/renderer/core/propsConversions.h>
+
+using namespace facebook::react;
+
+TEST(StringPropComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<StringPropComponentProps>();
+  auto const &sourceProps = StringPropComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  StringPropComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(StringPropComponentProps_accessibilityHint, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<StringPropComponentProps>();
+  auto const &sourceProps = StringPropComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"accessibilityHint\\", \\"foo\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  StringPropComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(StringPropComponentProps_accessibilityRole, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<StringPropComponentProps>();
+  auto const &sourceProps = StringPropComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"accessibilityRole\\", \\"foo\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  StringPropComponentProps(parserContext, sourceProps, rawProps);
+}",
+}
+`;
+
+exports[`GenerateTests can generate fixture TWO_COMPONENTS_DIFFERENT_FILES 1`] = `
+Map {
+  "Tests.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/TWO_COMPONENTS_DIFFERENT_FILES/Props.h>
+#include <react/renderer/core/RawProps.h>
+#include <react/renderer/core/RawPropsParser.h>
+#include <react/renderer/core/propsConversions.h>
+
+using namespace facebook::react;
+
+TEST(MultiFile1NativeComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<MultiFile1NativeComponentProps>();
+  auto const &sourceProps = MultiFile1NativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  MultiFile1NativeComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(MultiFile1NativeComponentProps_disabled, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<MultiFile1NativeComponentProps>();
+  auto const &sourceProps = MultiFile1NativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"disabled\\", false));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  MultiFile1NativeComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(MultiFile2NativeComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<MultiFile2NativeComponentProps>();
+  auto const &sourceProps = MultiFile2NativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  MultiFile2NativeComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(MultiFile2NativeComponentProps_disabled, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<MultiFile2NativeComponentProps>();
+  auto const &sourceProps = MultiFile2NativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"disabled\\", true));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  MultiFile2NativeComponentProps(parserContext, sourceProps, rawProps);
+}",
+}
+`;
+
+exports[`GenerateTests can generate fixture TWO_COMPONENTS_SAME_FILE 1`] = `
+Map {
+  "Tests.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateTests.js
+ * */
+
+#include <gtest/gtest.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/components/TWO_COMPONENTS_SAME_FILE/Props.h>
+#include <react/renderer/core/RawProps.h>
+#include <react/renderer/core/RawPropsParser.h>
+#include <react/renderer/core/propsConversions.h>
+
+using namespace facebook::react;
+
+TEST(MultiComponent1NativeComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<MultiComponent1NativeComponentProps>();
+  auto const &sourceProps = MultiComponent1NativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  MultiComponent1NativeComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(MultiComponent1NativeComponentProps_disabled, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<MultiComponent1NativeComponentProps>();
+  auto const &sourceProps = MultiComponent1NativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"disabled\\", false));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  MultiComponent1NativeComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(MultiComponent2NativeComponentProps_DoesNotDie, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<MultiComponent2NativeComponentProps>();
+  auto const &sourceProps = MultiComponent2NativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"xx_invalid_xx\\", \\"xx_invalid_xx\\"));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  MultiComponent2NativeComponentProps(parserContext, sourceProps, rawProps);
+}
+
+TEST(MultiComponent2NativeComponentProps_disabled, etc) {
+  auto propParser = RawPropsParser();
+  propParser.prepare<MultiComponent2NativeComponentProps>();
+  auto const &sourceProps = MultiComponent2NativeComponentProps();
+  auto const &rawProps = RawProps(folly::dynamic::object(\\"disabled\\", true));
+
+  ContextContainer contextContainer{};
+  PropsParserContext parserContext{-1, contextContainer};
+
+  rawProps.parse(propParser, parserContext);
+  MultiComponent2NativeComponentProps(parserContext, sourceProps, rawProps);
+}",
+}
+`;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GenerateViewConfigJs-test.js.snap b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GenerateViewConfigJs-test.js.snap
new file mode 100644
index 0000000..099c42e
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/components/__tests__/__snapshots__/GenerateViewConfigJs-test.js.snap
@@ -0,0 +1,998 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GenerateViewConfigJs can generate fixture ARRAY_PROPS 1`] = `
+Map {
+  "ARRAY_PROPSNativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+
+let nativeComponentName = 'ArrayPropsNativeComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'ArrayPropsNativeComponent',
+
+  validAttributes: {
+    names: true,
+    disableds: true,
+    progress: true,
+    radii: true,
+
+    colors: {
+      process: require('processColorArray'),
+    },
+
+    srcs: true,
+    points: true,
+    sizes: true,
+    object: true,
+    array: true,
+    arrayOfArrayOfObject: true,
+  },
+}));
+",
+}
+`;
+
+exports[`GenerateViewConfigJs can generate fixture ARRAY_PROPS_WITH_NESTED_OBJECT 1`] = `
+Map {
+  "ARRAY_PROPS_WITH_NESTED_OBJECTNativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+
+let nativeComponentName = 'ArrayPropsNativeComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'ArrayPropsNativeComponent',
+
+  validAttributes: {
+    nativePrimitives: true,
+  },
+}));
+",
+}
+`;
+
+exports[`GenerateViewConfigJs can generate fixture BOOLEAN_PROP 1`] = `
+Map {
+  "BOOLEAN_PROPNativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+
+let nativeComponentName = 'BooleanPropNativeComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'BooleanPropNativeComponent',
+
+  validAttributes: {
+    disabled: true,
+  },
+}));
+",
+}
+`;
+
+exports[`GenerateViewConfigJs can generate fixture COLOR_PROP 1`] = `
+Map {
+  "COLOR_PROPNativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+
+let nativeComponentName = 'ColorPropNativeComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'ColorPropNativeComponent',
+
+  validAttributes: {
+    tintColor: {
+      process: require('processColor'),
+    },
+  },
+}));
+",
+}
+`;
+
+exports[`GenerateViewConfigJs can generate fixture COMMANDS 1`] = `
+Map {
+  "COMMANDSNativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+const {dispatchCommand} = require(\\"react-native/Libraries/Renderer/shims/ReactNative\\");
+
+let nativeComponentName = 'CommandNativeComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'CommandNativeComponent',
+  validAttributes: {},
+}));
+
+export const Commands = {
+    flashScrollIndicators(ref) {
+        dispatchCommand(ref, \\"flashScrollIndicators\\", []);
+    },
+
+    allTypes(ref, x, y, z, message, animated) {
+        dispatchCommand(ref, \\"allTypes\\", [x, y, z, message, animated]);
+    }
+};
+",
+}
+`;
+
+exports[`GenerateViewConfigJs can generate fixture COMMANDS_AND_PROPS 1`] = `
+Map {
+  "COMMANDS_AND_PROPSNativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+const {dispatchCommand} = require(\\"react-native/Libraries/Renderer/shims/ReactNative\\");
+
+let nativeComponentName = 'CommandNativeComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'CommandNativeComponent',
+
+  validAttributes: {
+    accessibilityHint: true,
+  },
+}));
+
+export const Commands = {
+    handleRootTag(ref, rootTag) {
+        dispatchCommand(ref, \\"handleRootTag\\", [rootTag]);
+    },
+
+    hotspotUpdate(ref, x, y) {
+        dispatchCommand(ref, \\"hotspotUpdate\\", [x, y]);
+    }
+};
+",
+}
+`;
+
+exports[`GenerateViewConfigJs can generate fixture DOUBLE_PROPS 1`] = `
+Map {
+  "DOUBLE_PROPSNativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+
+let nativeComponentName = 'DoublePropNativeComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'DoublePropNativeComponent',
+
+  validAttributes: {
+    blurRadius: true,
+    blurRadius2: true,
+    blurRadius3: true,
+    blurRadius4: true,
+    blurRadius5: true,
+    blurRadius6: true,
+  },
+}));
+",
+}
+`;
+
+exports[`GenerateViewConfigJs can generate fixture EVENT_NESTED_OBJECT_PROPS 1`] = `
+Map {
+  "EVENT_NESTED_OBJECT_PROPSNativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+
+let nativeComponentName = 'EventsNestedObjectNativeComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'EventsNestedObjectNativeComponent',
+
+  bubblingEventTypes: {
+    topChange: {
+      phasedRegistrationNames: {
+        captured: 'onChangeCapture',
+        bubbled: 'onChange',
+      },
+    },
+  },
+
+  validAttributes: {
+    disabled: true,
+    onChange: true,
+  },
+}));
+",
+}
+`;
+
+exports[`GenerateViewConfigJs can generate fixture EVENT_PROPS 1`] = `
+Map {
+  "EVENT_PROPSNativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+
+let nativeComponentName = 'EventsNativeComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'EventsNativeComponent',
+
+  bubblingEventTypes: {
+    topChange: {
+      phasedRegistrationNames: {
+        captured: 'onChangeCapture',
+        bubbled: 'onChange',
+      },
+    },
+
+    topEnd: {
+      phasedRegistrationNames: {
+        captured: 'onEndCapture',
+        bubbled: 'onEnd',
+      },
+    },
+  },
+
+  directEventTypes: {
+    topEventDirect: {
+      registrationName: 'onEventDirect',
+    },
+
+    topOrientationChange: {
+      registrationName: 'onOrientationChange',
+    },
+  },
+
+  validAttributes: {
+    disabled: true,
+    onChange: true,
+    onEventDirect: true,
+    onOrientationChange: true,
+    onEnd: true,
+  },
+}));
+",
+}
+`;
+
+exports[`GenerateViewConfigJs can generate fixture EVENTS_WITH_PAPER_NAME 1`] = `
+Map {
+  "EVENTS_WITH_PAPER_NAMENativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+
+let nativeComponentName = 'RCTInterfaceOnlyComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'RCTInterfaceOnlyComponent',
+
+  bubblingEventTypes: {
+    paperChange: {
+      phasedRegistrationNames: {
+        captured: 'onChangeCapture',
+        bubbled: 'onChange',
+      },
+    },
+
+    topChange: {
+      phasedRegistrationNames: {
+        captured: 'onChangeCapture',
+        bubbled: 'onChange',
+      },
+    },
+  },
+
+  directEventTypes: {
+    paperDirectChange: {
+      registrationName: 'onDire tChange',
+    },
+
+    topDire tChange: {
+      registrationName: 'onDire tChange',
+    },
+  },
+
+  validAttributes: {
+    onChange: true,
+    onDire tChange: true,
+  },
+}));
+",
+}
+`;
+
+exports[`GenerateViewConfigJs can generate fixture EXCLUDE_ANDROID 1`] = `
+Map {
+  "EXCLUDE_ANDROIDNativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+
+let nativeComponentName = 'ExcludedAndroidComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'ExcludedAndroidComponent',
+  validAttributes: {},
+}));
+",
+}
+`;
+
+exports[`GenerateViewConfigJs can generate fixture EXCLUDE_ANDROID_IOS 1`] = `
+Map {
+  "EXCLUDE_ANDROID_IOSNativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+
+let nativeComponentName = 'ExcludedAndroidIosComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'ExcludedAndroidIosComponent',
+  validAttributes: {},
+}));
+",
+}
+`;
+
+exports[`GenerateViewConfigJs can generate fixture FLOAT_PROPS 1`] = `
+Map {
+  "FLOAT_PROPSNativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+
+let nativeComponentName = 'FloatPropNativeComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'FloatPropNativeComponent',
+
+  validAttributes: {
+    blurRadius: true,
+    blurRadius2: true,
+    blurRadius3: true,
+    blurRadius4: true,
+    blurRadius5: true,
+    blurRadius6: true,
+  },
+}));
+",
+}
+`;
+
+exports[`GenerateViewConfigJs can generate fixture IMAGE_PROP 1`] = `
+Map {
+  "IMAGE_PROPNativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+
+let nativeComponentName = 'ImagePropNativeComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'ImagePropNativeComponent',
+
+  validAttributes: {
+    thumbImage: {
+      process: require('resolveAssetSource'),
+    },
+  },
+}));
+",
+}
+`;
+
+exports[`GenerateViewConfigJs can generate fixture INSETS_PROP 1`] = `
+Map {
+  "INSETS_PROPNativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+
+let nativeComponentName = 'InsetsPropNativeComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'InsetsPropNativeComponent',
+
+  validAttributes: {
+    contentInset: {
+      diff: require('insetsDiffer'),
+    },
+  },
+}));
+",
+}
+`;
+
+exports[`GenerateViewConfigJs can generate fixture INT32_ENUM_PROP 1`] = `
+Map {
+  "INT32_ENUM_PROPNativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+
+let nativeComponentName = 'Int32EnumPropsNativeComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'Int32EnumPropsNativeComponent',
+
+  validAttributes: {
+    maxInterval: true,
+  },
+}));
+",
+}
+`;
+
+exports[`GenerateViewConfigJs can generate fixture INTEGER_PROPS 1`] = `
+Map {
+  "INTEGER_PROPSNativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+
+let nativeComponentName = 'IntegerPropNativeComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'IntegerPropNativeComponent',
+
+  validAttributes: {
+    progress1: true,
+    progress2: true,
+    progress3: true,
+  },
+}));
+",
+}
+`;
+
+exports[`GenerateViewConfigJs can generate fixture INTERFACE_ONLY 1`] = `
+Map {
+  "INTERFACE_ONLYNativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+
+let nativeComponentName = 'RCTInterfaceOnlyComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'RCTInterfaceOnlyComponent',
+
+  bubblingEventTypes: {
+    topChange: {
+      phasedRegistrationNames: {
+        captured: 'onChangeCapture',
+        bubbled: 'onChange',
+      },
+    },
+  },
+
+  validAttributes: {
+    accessibilityHint: true,
+    onChange: true,
+  },
+}));
+",
+}
+`;
+
+exports[`GenerateViewConfigJs can generate fixture MULTI_NATIVE_PROP 1`] = `
+Map {
+  "MULTI_NATIVE_PROPNativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+
+let nativeComponentName = 'ImageColorPropNativeComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'ImageColorPropNativeComponent',
+
+  validAttributes: {
+    thumbImage: {
+      process: require('resolveAssetSource'),
+    },
+
+    color: {
+      process: require('processColor'),
+    },
+
+    thumbTintColor: {
+      process: require('processColor'),
+    },
+
+    point: {
+      diff: require('pointsDiffer'),
+    },
+  },
+}));
+",
+}
+`;
+
+exports[`GenerateViewConfigJs can generate fixture NO_PROPS_NO_EVENTS 1`] = `
+Map {
+  "NO_PROPS_NO_EVENTSNativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+
+let nativeComponentName = 'NoPropsNoEventsComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'NoPropsNoEventsComponent',
+  validAttributes: {},
+}));
+",
+}
+`;
+
+exports[`GenerateViewConfigJs can generate fixture OBJECT_PROPS 1`] = `
+Map {
+  "OBJECT_PROPSNativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+
+let nativeComponentName = 'ObjectProps';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'ObjectProps',
+
+  validAttributes: {
+    objectProp: true,
+  },
+}));
+",
+}
+`;
+
+exports[`GenerateViewConfigJs can generate fixture POINT_PROP 1`] = `
+Map {
+  "POINT_PROPNativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+
+let nativeComponentName = 'PointPropNativeComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'PointPropNativeComponent',
+
+  validAttributes: {
+    startPoint: {
+      diff: require('pointsDiffer'),
+    },
+  },
+}));
+",
+}
+`;
+
+exports[`GenerateViewConfigJs can generate fixture STRING_ENUM_PROP 1`] = `
+Map {
+  "STRING_ENUM_PROPNativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+
+let nativeComponentName = 'StringEnumPropsNativeComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'StringEnumPropsNativeComponent',
+
+  validAttributes: {
+    alignment: true,
+  },
+}));
+",
+}
+`;
+
+exports[`GenerateViewConfigJs can generate fixture STRING_PROP 1`] = `
+Map {
+  "STRING_PROPNativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+
+let nativeComponentName = 'StringPropComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'StringPropComponent',
+
+  validAttributes: {
+    accessibilityHint: true,
+    accessibilityRole: true,
+  },
+}));
+",
+}
+`;
+
+exports[`GenerateViewConfigJs can generate fixture TWO_COMPONENTS_DIFFERENT_FILES 1`] = `
+Map {
+  "TWO_COMPONENTS_DIFFERENT_FILESNativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+
+let nativeComponentName = 'MultiFile1NativeComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'MultiFile1NativeComponent',
+
+  validAttributes: {
+    disabled: true,
+  },
+}));
+
+let nativeComponentName = 'MultiFile2NativeComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'MultiFile2NativeComponent',
+
+  validAttributes: {
+    disabled: true,
+  },
+}));
+",
+}
+`;
+
+exports[`GenerateViewConfigJs can generate fixture TWO_COMPONENTS_SAME_FILE 1`] = `
+Map {
+  "TWO_COMPONENTS_SAME_FILENativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+
+let nativeComponentName = 'MultiComponent1NativeComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'MultiComponent1NativeComponent',
+
+  validAttributes: {
+    disabled: true,
+  },
+}));
+
+let nativeComponentName = 'MultiComponent2NativeComponent';
+
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'MultiComponent2NativeComponent',
+
+  validAttributes: {
+    disabled: true,
+  },
+}));
+",
+}
+`;
+
+exports[`GenerateViewConfigJs can generate fixture with a deprecated view config name 1`] = `
+Map {
+  "DEPRECATED_VIEW_CONFIG_NAMENativeViewConfig.js" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ *
+ * @generated by codegen project: GenerateViewConfigJs.js
+ */
+
+'use strict';
+
+const NativeComponentRegistry = require('NativeComponentRegistry');
+const {UIManager} = require(\\"react-native\\")
+
+let nativeComponentName = 'NativeComponentName';
+if (UIManager.getViewManagerConfig('NativeComponentName')) {
+  nativeComponentName = 'NativeComponentName';
+} else if (UIManager.getViewManagerConfig('DeprecatedNativeComponentName')) {
+  nativeComponentName = 'DeprecatedNativeComponentName';
+} else {
+  throw new Error('Failed to find native component for either \\"NativeComponentName\\" or \\"DeprecatedNativeComponentName\\"');
+}
+export default NativeComponentRegistry.get(nativeComponentName, () => ({
+  uiViewClassName: 'NativeComponentName',
+  validAttributes: {},
+}));
+",
+}
+`;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleCpp.js b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleCpp.js
new file mode 100644
index 0000000..27eba9c
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleCpp.js
@@ -0,0 +1,234 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+import type {
+  SchemaType,
+  Nullable,
+  NamedShape,
+  NativeModulePropertyShape,
+  NativeModuleFunctionTypeAnnotation,
+  NativeModuleParamTypeAnnotation,
+} from '../../CodegenSchema';
+
+import type {AliasResolver} from './Utils';
+const {createAliasResolver, getModules} = require('./Utils');
+const {unwrapNullable} = require('../../parsers/flow/modules/utils');
+
+type FilesOutput = Map<string, string>;
+
+const HostFunctionTemplate = ({
+  hasteModuleName,
+  methodName,
+  isVoid,
+  args,
+}: $ReadOnly<{
+  hasteModuleName: string,
+  methodName: string,
+  isVoid: boolean,
+  args: Array<string>,
+}>) => {
+  const methodCallArgs = ['rt', ...args].join(', ');
+  const methodCall = `static_cast<${hasteModuleName}CxxSpecJSI *>(&turboModule)->${methodName}(${methodCallArgs});`;
+
+  return `static jsi::Value __hostFunction_${hasteModuleName}CxxSpecJSI_${methodName}(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {${
+    isVoid ? `\n  ${methodCall}` : ''
+  }
+  return ${isVoid ? 'jsi::Value::undefined();' : methodCall}
+}`;
+};
+
+const ModuleTemplate = ({
+  hasteModuleName,
+  hostFunctions,
+  moduleName,
+  methods,
+}: $ReadOnly<{
+  hasteModuleName: string,
+  hostFunctions: $ReadOnlyArray<string>,
+  moduleName: string,
+  methods: $ReadOnlyArray<$ReadOnly<{methodName: string, paramCount: number}>>,
+}>) => {
+  return `${hostFunctions.join('\n')}
+
+${hasteModuleName}CxxSpecJSI::${hasteModuleName}CxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
+  : TurboModule("${moduleName}", jsInvoker) {
+${methods
+  .map(({methodName, paramCount}) => {
+    return `  methodMap_["${methodName}"] = MethodMetadata {${paramCount}, __hostFunction_${hasteModuleName}CxxSpecJSI_${methodName}};`;
+  })
+  .join('\n')}
+}`;
+};
+
+const FileTemplate = ({
+  libraryName,
+  modules,
+}: $ReadOnly<{
+  libraryName: string,
+  modules: string,
+}>) => {
+  return `/**
+ * ${'C'}opyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * ${'@'}generated by codegen project: GenerateModuleH.js
+ */
+
+#include <react/modules/${libraryName}/NativeModules.h>
+
+namespace facebook {
+namespace react {
+
+${modules}
+
+
+} // namespace react
+} // namespace facebook
+`;
+};
+
+type Param = NamedShape<Nullable<NativeModuleParamTypeAnnotation>>;
+
+function serializeArg(
+  arg: Param,
+  index: number,
+  resolveAlias: AliasResolver,
+): string {
+  function wrap(suffix) {
+    return `args[${index}]${suffix}`;
+  }
+  const {typeAnnotation: nullableTypeAnnotation} = arg;
+  const [typeAnnotation] = unwrapNullable<NativeModuleParamTypeAnnotation>(
+    nullableTypeAnnotation,
+  );
+
+  let realTypeAnnotation = typeAnnotation;
+  if (realTypeAnnotation.type === 'TypeAliasTypeAnnotation') {
+    realTypeAnnotation = resolveAlias(realTypeAnnotation.name);
+  }
+
+  switch (realTypeAnnotation.type) {
+    case 'ReservedTypeAnnotation':
+      switch (realTypeAnnotation.name) {
+        case 'RootTag':
+          return wrap('.getNumber()');
+        default:
+          (realTypeAnnotation.name: empty);
+          throw new Error(
+            `Unknown prop type for "${arg.name}, found: ${realTypeAnnotation.name}"`,
+          );
+      }
+    case 'StringTypeAnnotation':
+      return wrap('.getString(rt)');
+    case 'BooleanTypeAnnotation':
+      return wrap('.getBool()');
+    case 'NumberTypeAnnotation':
+      return wrap('.getNumber()');
+    case 'FloatTypeAnnotation':
+      return wrap('.getNumber()');
+    case 'DoubleTypeAnnotation':
+      return wrap('.getNumber()');
+    case 'Int32TypeAnnotation':
+      return wrap('.getNumber()');
+    case 'ArrayTypeAnnotation':
+      return wrap('.getObject(rt).getArray(rt)');
+    case 'FunctionTypeAnnotation':
+      return `std::move(${wrap('.getObject(rt).getFunction(rt)')})`;
+    case 'GenericObjectTypeAnnotation':
+      return wrap('.getObject(rt)');
+    case 'ObjectTypeAnnotation':
+      return wrap('.getObject(rt)');
+    default:
+      (realTypeAnnotation.type: empty);
+      throw new Error(
+        `Unknown prop type for "${arg.name}, found: ${realTypeAnnotation.type}"`,
+      );
+  }
+}
+
+function serializePropertyIntoHostFunction(
+  hasteModuleName: string,
+  property: NativeModulePropertyShape,
+  resolveAlias: AliasResolver,
+): string {
+  const [
+    propertyTypeAnnotation,
+  ] = unwrapNullable<NativeModuleFunctionTypeAnnotation>(
+    property.typeAnnotation,
+  );
+  const isVoid =
+    propertyTypeAnnotation.returnTypeAnnotation.type === 'VoidTypeAnnotation';
+
+  return HostFunctionTemplate({
+    hasteModuleName,
+    methodName: property.name,
+    isVoid,
+    args: propertyTypeAnnotation.params.map((p, i) =>
+      serializeArg(p, i, resolveAlias),
+    ),
+  });
+}
+
+module.exports = {
+  generate(
+    libraryName: string,
+    schema: SchemaType,
+    packageName?: string,
+    assumeNonnull: boolean = false,
+  ): FilesOutput {
+    const nativeModules = getModules(schema);
+
+    const modules = Object.keys(nativeModules)
+      .map((hasteModuleName: string) => {
+        const nativeModule = nativeModules[hasteModuleName];
+        const {
+          aliases,
+          spec: {properties},
+          moduleNames,
+        } = nativeModule;
+        const resolveAlias = createAliasResolver(aliases);
+        const hostFunctions = properties.map(property =>
+          serializePropertyIntoHostFunction(
+            hasteModuleName,
+            property,
+            resolveAlias,
+          ),
+        );
+
+        return ModuleTemplate({
+          hasteModuleName,
+          hostFunctions,
+          // TODO: What happens when there are more than one NativeModule requires?
+          moduleName: moduleNames[0],
+          methods: properties.map(
+            ({name: propertyName, typeAnnotation: nullableTypeAnnotation}) => {
+              const [{params}] = unwrapNullable(nullableTypeAnnotation);
+              return {
+                methodName: propertyName,
+                paramCount: params.length,
+              };
+            },
+          ),
+        });
+      })
+      .join('\n');
+
+    const fileName = 'NativeModules.cpp';
+    const replacedTemplate = FileTemplate({
+      modules,
+      libraryName,
+    });
+    return new Map([[fileName, replacedTemplate]]);
+  },
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleH.js b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleH.js
new file mode 100644
index 0000000..fe919e9
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleH.js
@@ -0,0 +1,192 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+import type {
+  Nullable,
+  SchemaType,
+  NativeModuleTypeAnnotation,
+  NativeModuleFunctionTypeAnnotation,
+} from '../../CodegenSchema';
+
+import type {AliasResolver} from './Utils';
+const {createAliasResolver, getModules} = require('./Utils');
+const {unwrapNullable} = require('../../parsers/flow/modules/utils');
+
+type FilesOutput = Map<string, string>;
+
+const ModuleClassDeclarationTemplate = ({
+  hasteModuleName,
+  moduleProperties,
+}: $ReadOnly<{hasteModuleName: string, moduleProperties: string}>) => {
+  return `class JSI_EXPORT ${hasteModuleName}CxxSpecJSI : public TurboModule {
+protected:
+  ${hasteModuleName}CxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);
+
+public:
+${moduleProperties}
+
+};`;
+};
+
+const FileTemplate = ({
+  modules,
+}: $ReadOnly<{
+  modules: string,
+}>) => {
+  return `/**
+ * ${'C'}opyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * ${'@'}generated by codegen project: GenerateModuleH.js
+ */
+
+#pragma once
+
+#include <ReactCommon/TurboModule.h>
+
+namespace facebook {
+namespace react {
+${modules}
+
+} // namespace react
+} // namespace facebook
+`;
+};
+
+function translatePrimitiveJSTypeToCpp(
+  nullableTypeAnnotation: Nullable<NativeModuleTypeAnnotation>,
+  createErrorMessage: (typeName: string) => string,
+  resolveAlias: AliasResolver,
+) {
+  const [typeAnnotation] = unwrapNullable<NativeModuleTypeAnnotation>(
+    nullableTypeAnnotation,
+  );
+  let realTypeAnnotation = typeAnnotation;
+  if (realTypeAnnotation.type === 'TypeAliasTypeAnnotation') {
+    realTypeAnnotation = resolveAlias(realTypeAnnotation.name);
+  }
+
+  switch (realTypeAnnotation.type) {
+    case 'ReservedTypeAnnotation':
+      switch (realTypeAnnotation.name) {
+        case 'RootTag':
+          return 'double';
+        default:
+          (realTypeAnnotation.name: empty);
+          throw new Error(createErrorMessage(realTypeAnnotation.name));
+      }
+    case 'VoidTypeAnnotation':
+      return 'void';
+    case 'StringTypeAnnotation':
+      return 'jsi::String';
+    case 'NumberTypeAnnotation':
+      return 'double';
+    case 'DoubleTypeAnnotation':
+      return 'double';
+    case 'FloatTypeAnnotation':
+      return 'double';
+    case 'Int32TypeAnnotation':
+      return 'int';
+    case 'BooleanTypeAnnotation':
+      return 'bool';
+    case 'GenericObjectTypeAnnotation':
+      return 'jsi::Object';
+    case 'ObjectTypeAnnotation':
+      return 'jsi::Object';
+    case 'ArrayTypeAnnotation':
+      return 'jsi::Array';
+    case 'FunctionTypeAnnotation':
+      return 'jsi::Function';
+    case 'PromiseTypeAnnotation':
+      return 'jsi::Value';
+    default:
+      (realTypeAnnotation.type: empty);
+      throw new Error(createErrorMessage(realTypeAnnotation.type));
+  }
+}
+
+const propertyTemplate =
+  'virtual ::_RETURN_VALUE_:: ::_PROPERTY_NAME_::(jsi::Runtime &rt::_ARGS_::) = 0;';
+
+module.exports = {
+  generate(
+    libraryName: string,
+    schema: SchemaType,
+    packageName?: string,
+    assumeNonnull: boolean = false,
+  ): FilesOutput {
+    const nativeModules = getModules(schema);
+
+    const modules = Object.keys(nativeModules)
+      .map(hasteModuleName => {
+        const {
+          aliases,
+          spec: {properties},
+        } = nativeModules[hasteModuleName];
+        const resolveAlias = createAliasResolver(aliases);
+
+        const traversedProperties = properties
+          .map(prop => {
+            const [
+              propTypeAnnotation,
+            ] = unwrapNullable<NativeModuleFunctionTypeAnnotation>(
+              prop.typeAnnotation,
+            );
+            const traversedArgs = propTypeAnnotation.params
+              .map(param => {
+                const translatedParam = translatePrimitiveJSTypeToCpp(
+                  param.typeAnnotation,
+                  typeName =>
+                    `Unsupported type for param "${param.name}" in ${prop.name}. Found: ${typeName}`,
+                  resolveAlias,
+                );
+                const isObject = translatedParam.startsWith('jsi::');
+                return (
+                  (isObject
+                    ? 'const ' + translatedParam + ' &'
+                    : translatedParam + ' ') + param.name
+                );
+              })
+              .join(', ');
+            return propertyTemplate
+              .replace('::_PROPERTY_NAME_::', prop.name)
+              .replace(
+                '::_RETURN_VALUE_::',
+                translatePrimitiveJSTypeToCpp(
+                  propTypeAnnotation.returnTypeAnnotation,
+                  typeName =>
+                    `Unsupported return type for ${prop.name}. Found: ${typeName}`,
+                  resolveAlias,
+                ),
+              )
+              .replace(
+                '::_ARGS_::',
+                traversedArgs === '' ? '' : ', ' + traversedArgs,
+              );
+          })
+          .join('\n');
+
+        return ModuleClassDeclarationTemplate({
+          hasteModuleName,
+          moduleProperties: traversedProperties,
+        });
+      })
+      .join('\n');
+
+    const fileName = 'NativeModules.h';
+    const replacedTemplate = FileTemplate({modules});
+
+    return new Map([[fileName, replacedTemplate]]);
+  },
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleJavaSpec.js b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleJavaSpec.js
new file mode 100644
index 0000000..e5d5ecb
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleJavaSpec.js
@@ -0,0 +1,484 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+import type {
+  Nullable,
+  NamedShape,
+  SchemaType,
+  NativeModulePropertyShape,
+  NativeModuleReturnTypeAnnotation,
+  NativeModuleFunctionTypeAnnotation,
+  NativeModuleParamTypeAnnotation,
+} from '../../CodegenSchema';
+
+import type {AliasResolver} from './Utils';
+const {createAliasResolver, getModules} = require('./Utils');
+const {unwrapNullable} = require('../../parsers/flow/modules/utils');
+
+type FilesOutput = Map<string, string>;
+
+function FileTemplate(
+  config: $ReadOnly<{
+    packageName: string,
+    className: string,
+    methods: string,
+    imports: string,
+  }>,
+): string {
+  const {packageName, className, methods, imports} = config;
+  return `
+/**
+ * ${'C'}opyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the LICENSE file in the root
+ * directory of this source tree.
+ *
+ * ${'@'}generated by codegen project: GenerateModuleJavaSpec.js
+ *
+ * @nolint
+ */
+
+package ${packageName};
+
+${imports}
+
+public abstract class ${className} extends ReactContextBaseJavaModule implements ReactModuleWithSpec, TurboModule {
+  public ${className}(ReactApplicationContext reactContext) {
+    super(reactContext);
+  }
+
+${methods}
+}
+`;
+}
+
+function MethodTemplate(
+  config: $ReadOnly<{
+    abstract: boolean,
+    methodBody: ?string,
+    methodJavaAnnotation: string,
+    methodName: string,
+    translatedReturnType: string,
+    traversedArgs: Array<string>,
+  }>,
+): string {
+  const {
+    abstract,
+    methodBody,
+    methodJavaAnnotation,
+    methodName,
+    translatedReturnType,
+    traversedArgs,
+  } = config;
+  const methodQualifier = abstract ? 'abstract ' : '';
+  const methodClosing = abstract
+    ? ';'
+    : methodBody != null && methodBody.length > 0
+    ? ` { ${methodBody} }`
+    : ' {}';
+  return `  ${methodJavaAnnotation}
+  public ${methodQualifier}${translatedReturnType} ${methodName}(${traversedArgs.join(
+    ', ',
+  )})${methodClosing}`;
+}
+
+type Param = NamedShape<Nullable<NativeModuleParamTypeAnnotation>>;
+
+function translateFunctionParamToJavaType(
+  param: Param,
+  createErrorMessage: (typeName: string) => string,
+  resolveAlias: AliasResolver,
+  imports: Set<string>,
+): string {
+  const {optional, typeAnnotation: nullableTypeAnnotation} = param;
+  const [
+    typeAnnotation,
+    nullable,
+  ] = unwrapNullable<NativeModuleParamTypeAnnotation>(nullableTypeAnnotation);
+  const isRequired = !optional && !nullable;
+
+  function wrapIntoNullableIfNeeded(generatedType: string) {
+    if (!isRequired) {
+      imports.add('javax.annotation.Nullable');
+      return `@Nullable ${generatedType}`;
+    }
+    return generatedType;
+  }
+
+  let realTypeAnnotation = typeAnnotation;
+  if (realTypeAnnotation.type === 'TypeAliasTypeAnnotation') {
+    realTypeAnnotation = resolveAlias(realTypeAnnotation.name);
+  }
+
+  switch (realTypeAnnotation.type) {
+    case 'ReservedTypeAnnotation':
+      switch (realTypeAnnotation.name) {
+        case 'RootTag':
+          return !isRequired ? 'Double' : 'double';
+        default:
+          (realTypeAnnotation.name: empty);
+          throw new Error(createErrorMessage(realTypeAnnotation.name));
+      }
+    case 'StringTypeAnnotation':
+      return wrapIntoNullableIfNeeded('String');
+    case 'NumberTypeAnnotation':
+      return !isRequired ? 'Double' : 'double';
+    case 'FloatTypeAnnotation':
+      return !isRequired ? 'Double' : 'double';
+    case 'DoubleTypeAnnotation':
+      return !isRequired ? 'Double' : 'double';
+    case 'Int32TypeAnnotation':
+      return !isRequired ? 'Double' : 'double';
+    case 'BooleanTypeAnnotation':
+      return !isRequired ? 'Boolean' : 'boolean';
+    case 'ObjectTypeAnnotation':
+      imports.add('com.facebook.react.bridge.ReadableMap');
+      if (typeAnnotation.type === 'TypeAliasTypeAnnotation') {
+        // No class alias for args, so it still falls under ReadableMap.
+        return 'ReadableMap';
+      }
+      return 'ReadableMap';
+    case 'GenericObjectTypeAnnotation':
+      // Treat this the same as ObjectTypeAnnotation for now.
+      imports.add('com.facebook.react.bridge.ReadableMap');
+      return 'ReadableMap';
+    case 'ArrayTypeAnnotation':
+      imports.add('com.facebook.react.bridge.ReadableArray');
+      return 'ReadableArray';
+    case 'FunctionTypeAnnotation':
+      imports.add('com.facebook.react.bridge.Callback');
+      return 'Callback';
+    default:
+      (realTypeAnnotation.type: empty);
+      throw new Error(createErrorMessage(realTypeAnnotation.type));
+  }
+}
+
+function translateFunctionReturnTypeToJavaType(
+  nullableReturnTypeAnnotation: Nullable<NativeModuleReturnTypeAnnotation>,
+  createErrorMessage: (typeName: string) => string,
+  resolveAlias: AliasResolver,
+  imports: Set<string>,
+): string {
+  const [
+    returnTypeAnnotation,
+    nullable,
+  ] = unwrapNullable<NativeModuleReturnTypeAnnotation>(
+    nullableReturnTypeAnnotation,
+  );
+
+  function wrapIntoNullableIfNeeded(generatedType: string) {
+    if (nullable) {
+      imports.add('javax.annotation.Nullable');
+      return `@Nullable ${generatedType}`;
+    }
+    return generatedType;
+  }
+
+  let realTypeAnnotation = returnTypeAnnotation;
+  if (realTypeAnnotation.type === 'TypeAliasTypeAnnotation') {
+    realTypeAnnotation = resolveAlias(realTypeAnnotation.name);
+  }
+
+  switch (realTypeAnnotation.type) {
+    case 'ReservedTypeAnnotation':
+      switch (realTypeAnnotation.name) {
+        case 'RootTag':
+          return nullable ? 'Double' : 'double';
+        default:
+          (realTypeAnnotation.name: empty);
+          throw new Error(createErrorMessage(realTypeAnnotation.name));
+      }
+    case 'VoidTypeAnnotation':
+      return 'void';
+    case 'PromiseTypeAnnotation':
+      return 'void';
+    case 'StringTypeAnnotation':
+      return wrapIntoNullableIfNeeded('String');
+    case 'NumberTypeAnnotation':
+      return nullable ? 'Double' : 'double';
+    case 'FloatTypeAnnotation':
+      return nullable ? 'Double' : 'double';
+    case 'DoubleTypeAnnotation':
+      return nullable ? 'Double' : 'double';
+    case 'Int32TypeAnnotation':
+      return nullable ? 'Double' : 'double';
+    case 'BooleanTypeAnnotation':
+      return nullable ? 'Boolean' : 'boolean';
+    case 'ObjectTypeAnnotation':
+      imports.add('com.facebook.react.bridge.WritableMap');
+      return 'WritableMap';
+    case 'GenericObjectTypeAnnotation':
+      imports.add('com.facebook.react.bridge.WritableMap');
+      return 'WritableMap';
+    case 'ArrayTypeAnnotation':
+      imports.add('com.facebook.react.bridge.WritableArray');
+      return 'WritableArray';
+    default:
+      (realTypeAnnotation.type: empty);
+      throw new Error(createErrorMessage(realTypeAnnotation.type));
+  }
+}
+
+function getFalsyReturnStatementFromReturnType(
+  nullableReturnTypeAnnotation: Nullable<NativeModuleReturnTypeAnnotation>,
+  createErrorMessage: (typeName: string) => string,
+  resolveAlias: AliasResolver,
+): string {
+  const [
+    returnTypeAnnotation,
+    nullable,
+  ] = unwrapNullable<NativeModuleReturnTypeAnnotation>(
+    nullableReturnTypeAnnotation,
+  );
+
+  let realTypeAnnotation = returnTypeAnnotation;
+  if (realTypeAnnotation.type === 'TypeAliasTypeAnnotation') {
+    realTypeAnnotation = resolveAlias(realTypeAnnotation.name);
+  }
+
+  switch (realTypeAnnotation.type) {
+    case 'ReservedTypeAnnotation':
+      switch (realTypeAnnotation.name) {
+        case 'RootTag':
+          return 'return 0.0;';
+        default:
+          (realTypeAnnotation.name: empty);
+          throw new Error(createErrorMessage(realTypeAnnotation.name));
+      }
+    case 'VoidTypeAnnotation':
+      return '';
+    case 'PromiseTypeAnnotation':
+      return '';
+    case 'NumberTypeAnnotation':
+      return nullable ? 'return null;' : 'return 0;';
+    case 'FloatTypeAnnotation':
+      return nullable ? 'return null;' : 'return 0.0;';
+    case 'DoubleTypeAnnotation':
+      return nullable ? 'return null;' : 'return 0.0;';
+    case 'Int32TypeAnnotation':
+      return nullable ? 'return null;' : 'return 0;';
+    case 'BooleanTypeAnnotation':
+      return nullable ? 'return null;' : 'return false;';
+    case 'StringTypeAnnotation':
+      return nullable ? 'return null;' : 'return "";';
+    case 'ObjectTypeAnnotation':
+      return 'return null;';
+    case 'GenericObjectTypeAnnotation':
+      return 'return null;';
+    case 'ArrayTypeAnnotation':
+      return 'return null;';
+    default:
+      (realTypeAnnotation.type: empty);
+      throw new Error(createErrorMessage(realTypeAnnotation.type));
+  }
+}
+
+// Build special-cased runtime check for getConstants().
+function buildGetConstantsMethod(
+  method: NativeModulePropertyShape,
+  imports: Set<string>,
+): string {
+  const [
+    methodTypeAnnotation,
+  ] = unwrapNullable<NativeModuleFunctionTypeAnnotation>(method.typeAnnotation);
+  if (
+    methodTypeAnnotation.returnTypeAnnotation.type === 'ObjectTypeAnnotation'
+  ) {
+    const requiredProps = [];
+    const optionalProps = [];
+    const rawProperties =
+      methodTypeAnnotation.returnTypeAnnotation.properties || [];
+    rawProperties.forEach(p => {
+      if (p.optional || p.typeAnnotation.type === 'NullableTypeAnnotation') {
+        optionalProps.push(p.name);
+      } else {
+        requiredProps.push(p.name);
+      }
+    });
+    if (requiredProps.length === 0 && optionalProps.length === 0) {
+      // Nothing to validate during runtime.
+      return '';
+    }
+
+    imports.add('com.facebook.react.common.build.ReactBuildConfig');
+    imports.add('java.util.Arrays');
+    imports.add('java.util.HashSet');
+    imports.add('java.util.Map');
+    imports.add('java.util.Set');
+    imports.add('javax.annotation.Nullable');
+
+    const requiredPropsFragment =
+      requiredProps.length > 0
+        ? `Arrays.asList(
+          ${requiredProps
+            .sort()
+            .map(p => `"${p}"`)
+            .join(',\n          ')}
+      )`
+        : '';
+    const optionalPropsFragment =
+      optionalProps.length > 0
+        ? `Arrays.asList(
+          ${optionalProps
+            .sort()
+            .map(p => `"${p}"`)
+            .join(',\n          ')}
+      )`
+        : '';
+
+    return `  protected abstract Map<String, Object> getTypedExportedConstants();
+
+  @Override
+  @DoNotStrip
+  public final @Nullable Map<String, Object> getConstants() {
+    Map<String, Object> constants = getTypedExportedConstants();
+    if (ReactBuildConfig.DEBUG || ReactBuildConfig.IS_INTERNAL_BUILD) {
+      Set<String> obligatoryFlowConstants = new HashSet<>(${requiredPropsFragment});
+      Set<String> optionalFlowConstants = new HashSet<>(${optionalPropsFragment});
+      Set<String> undeclaredConstants = new HashSet<>(constants.keySet());
+      undeclaredConstants.removeAll(obligatoryFlowConstants);
+      undeclaredConstants.removeAll(optionalFlowConstants);
+      if (!undeclaredConstants.isEmpty()) {
+        throw new IllegalStateException(String.format("Native Module Flow doesn't declare constants: %s", undeclaredConstants));
+      }
+      undeclaredConstants = obligatoryFlowConstants;
+      undeclaredConstants.removeAll(constants.keySet());
+      if (!undeclaredConstants.isEmpty()) {
+        throw new IllegalStateException(String.format("Native Module doesn't fill in constants: %s", undeclaredConstants));
+      }
+    }
+    return constants;
+  }`;
+  }
+
+  return '';
+}
+
+module.exports = {
+  generate(
+    libraryName: string,
+    schema: SchemaType,
+    packageName?: string,
+    assumeNonnull: boolean = false,
+  ): FilesOutput {
+    const files = new Map();
+    const nativeModules = getModules(schema);
+
+    const normalizedPackageName =
+      packageName == null ? 'com.facebook.fbreact.specs' : packageName;
+    const outputDir = `java/${normalizedPackageName.replace(/\./g, '/')}`;
+
+    Object.keys(nativeModules).forEach(hasteModuleName => {
+      const {
+        aliases,
+        excludedPlatforms,
+        spec: {properties},
+      } = nativeModules[hasteModuleName];
+      if (excludedPlatforms != null && excludedPlatforms.includes('android')) {
+        return;
+      }
+      const resolveAlias = createAliasResolver(aliases);
+      const className = `${hasteModuleName}Spec`;
+
+      const imports: Set<string> = new Set([
+        // Always required.
+        'com.facebook.react.bridge.ReactApplicationContext',
+        'com.facebook.react.bridge.ReactContextBaseJavaModule',
+        'com.facebook.react.bridge.ReactMethod',
+        'com.facebook.react.bridge.ReactModuleWithSpec',
+        'com.facebook.react.turbomodule.core.interfaces.TurboModule',
+        'com.facebook.proguard.annotations.DoNotStrip',
+      ]);
+
+      const methods = properties.map(method => {
+        if (method.name === 'getConstants') {
+          return buildGetConstantsMethod(method, imports);
+        }
+
+        const [
+          methodTypeAnnotation,
+        ] = unwrapNullable<NativeModuleFunctionTypeAnnotation>(
+          method.typeAnnotation,
+        );
+
+        // Handle return type
+        const translatedReturnType = translateFunctionReturnTypeToJavaType(
+          methodTypeAnnotation.returnTypeAnnotation,
+          typeName =>
+            `Unsupported return type for method ${method.name}. Found: ${typeName}`,
+          resolveAlias,
+          imports,
+        );
+        const returningPromise =
+          methodTypeAnnotation.returnTypeAnnotation.type ===
+          'PromiseTypeAnnotation';
+        const isSyncMethod =
+          methodTypeAnnotation.returnTypeAnnotation.type !==
+            'VoidTypeAnnotation' && !returningPromise;
+
+        // Handle method args
+        const traversedArgs = methodTypeAnnotation.params.map(param => {
+          const translatedParam = translateFunctionParamToJavaType(
+            param,
+            typeName =>
+              `Unsupported type for param "${param.name}" in ${method.name}. Found: ${typeName}`,
+            resolveAlias,
+            imports,
+          );
+          return `${translatedParam} ${param.name}`;
+        });
+
+        if (returningPromise) {
+          // Promise return type requires an extra arg at the end.
+          imports.add('com.facebook.react.bridge.Promise');
+          traversedArgs.push('Promise promise');
+        }
+
+        const methodJavaAnnotation = `@ReactMethod${
+          isSyncMethod ? '(isBlockingSynchronousMethod = true)' : ''
+        }\n  @DoNotStrip`;
+        const methodBody = method.optional
+          ? getFalsyReturnStatementFromReturnType(
+              methodTypeAnnotation.returnTypeAnnotation,
+              typeName =>
+                `Cannot build falsy return statement for return type for method ${method.name}. Found: ${typeName}`,
+              resolveAlias,
+            )
+          : null;
+        return MethodTemplate({
+          abstract: !method.optional,
+          methodBody,
+          methodJavaAnnotation,
+          methodName: method.name,
+          translatedReturnType,
+          traversedArgs,
+        });
+      });
+
+      files.set(
+        `${outputDir}/${className}.java`,
+        FileTemplate({
+          packageName: normalizedPackageName,
+          className,
+          methods: methods.filter(Boolean).join('\n\n'),
+          imports: Array.from(imports)
+            .sort()
+            .map(p => `import ${p};`)
+            .join('\n'),
+        }),
+      );
+    });
+
+    return files;
+  },
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleJniCpp.js b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleJniCpp.js
new file mode 100644
index 0000000..60b7274
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleJniCpp.js
@@ -0,0 +1,464 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+import type {
+  Nullable,
+  NamedShape,
+  SchemaType,
+  NativeModulePropertyShape,
+  NativeModuleReturnTypeAnnotation,
+  NativeModuleParamTypeAnnotation,
+  NativeModuleFunctionTypeAnnotation,
+} from '../../CodegenSchema';
+
+import type {AliasResolver} from './Utils';
+const {createAliasResolver, getModules} = require('./Utils');
+const {unwrapNullable} = require('../../parsers/flow/modules/utils');
+
+type FilesOutput = Map<string, string>;
+
+type JSReturnType =
+  | 'VoidKind'
+  | 'StringKind'
+  | 'BooleanKind'
+  | 'NumberKind'
+  | 'PromiseKind'
+  | 'ObjectKind'
+  | 'ArrayKind';
+
+const HostFunctionTemplate = ({
+  hasteModuleName,
+  propertyName,
+  jniSignature,
+  jsReturnType,
+}: $ReadOnly<{
+  hasteModuleName: string,
+  propertyName: string,
+  jniSignature: string,
+  jsReturnType: JSReturnType,
+}>) => {
+  return `static facebook::jsi::Value __hostFunction_${hasteModuleName}SpecJSI_${propertyName}(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, ${jsReturnType}, "${propertyName}", "${jniSignature}", args, count);
+}`;
+};
+
+const ModuleClassConstructorTemplate = ({
+  hasteModuleName,
+  methods,
+}: $ReadOnly<{
+  hasteModuleName: string,
+  methods: $ReadOnlyArray<{
+    propertyName: string,
+    argCount: number,
+  }>,
+}>) => {
+  return `
+${hasteModuleName}SpecJSI::${hasteModuleName}SpecJSI(const JavaTurboModule::InitParams &params)
+  : JavaTurboModule(params) {
+${methods
+  .map(({propertyName, argCount}) => {
+    return `  methodMap_["${propertyName}"] = MethodMetadata {${argCount}, __hostFunction_${hasteModuleName}SpecJSI_${propertyName}};`;
+  })
+  .join('\n')}
+}`.trim();
+};
+
+const ModuleLookupTemplate = ({
+  moduleName,
+  hasteModuleName,
+}: $ReadOnly<{moduleName: string, hasteModuleName: string}>) => {
+  return `  if (moduleName == "${moduleName}") {
+    return std::make_shared<${hasteModuleName}SpecJSI>(params);
+  }`;
+};
+
+const FileTemplate = ({
+  libraryName,
+  include,
+  modules,
+  moduleLookups,
+}: $ReadOnly<{
+  libraryName: string,
+  include: string,
+  modules: string,
+  moduleLookups: $ReadOnlyArray<
+    $ReadOnly<{
+      hasteModuleName: string,
+      moduleName: string,
+    }>,
+  >,
+}>) => {
+  return `
+/**
+ * ${'C'}opyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * ${'@'}generated by codegen project: GenerateModuleJniCpp.js
+ */
+
+#include ${include}
+
+namespace facebook {
+namespace react {
+
+${modules}
+
+std::shared_ptr<TurboModule> ${libraryName}_ModuleProvider(const std::string moduleName, const JavaTurboModule::InitParams &params) {
+${moduleLookups.map(ModuleLookupTemplate).join('\n')}
+  return nullptr;
+}
+
+} // namespace react
+} // namespace facebook
+`;
+};
+
+function translateReturnTypeToKind(
+  nullableTypeAnnotation: Nullable<NativeModuleReturnTypeAnnotation>,
+  resolveAlias: AliasResolver,
+): JSReturnType {
+  const [typeAnnotation] = unwrapNullable<NativeModuleReturnTypeAnnotation>(
+    nullableTypeAnnotation,
+  );
+  let realTypeAnnotation = typeAnnotation;
+  if (realTypeAnnotation.type === 'TypeAliasTypeAnnotation') {
+    realTypeAnnotation = resolveAlias(realTypeAnnotation.name);
+  }
+
+  switch (realTypeAnnotation.type) {
+    case 'ReservedTypeAnnotation':
+      switch (realTypeAnnotation.name) {
+        case 'RootTag':
+          return 'NumberKind';
+        default:
+          (realTypeAnnotation.name: empty);
+          throw new Error(
+            `Invalid ReservedFunctionValueTypeName name, got ${realTypeAnnotation.name}`,
+          );
+      }
+    case 'VoidTypeAnnotation':
+      return 'VoidKind';
+    case 'StringTypeAnnotation':
+      return 'StringKind';
+    case 'BooleanTypeAnnotation':
+      return 'BooleanKind';
+    case 'NumberTypeAnnotation':
+      return 'NumberKind';
+    case 'DoubleTypeAnnotation':
+      return 'NumberKind';
+    case 'FloatTypeAnnotation':
+      return 'NumberKind';
+    case 'Int32TypeAnnotation':
+      return 'NumberKind';
+    case 'PromiseTypeAnnotation':
+      return 'PromiseKind';
+    case 'GenericObjectTypeAnnotation':
+      return 'ObjectKind';
+    case 'ObjectTypeAnnotation':
+      return 'ObjectKind';
+    case 'ArrayTypeAnnotation':
+      return 'ArrayKind';
+    default:
+      (realTypeAnnotation.type: empty);
+      throw new Error(
+        `Unknown prop type for returning value, found: ${realTypeAnnotation.type}"`,
+      );
+  }
+}
+
+type Param = NamedShape<Nullable<NativeModuleParamTypeAnnotation>>;
+
+function translateParamTypeToJniType(
+  param: Param,
+  resolveAlias: AliasResolver,
+): string {
+  const {optional, typeAnnotation: nullableTypeAnnotation} = param;
+  const [
+    typeAnnotation,
+    nullable,
+  ] = unwrapNullable<NativeModuleParamTypeAnnotation>(nullableTypeAnnotation);
+  const isRequired = !optional && !nullable;
+
+  let realTypeAnnotation = typeAnnotation;
+  if (realTypeAnnotation.type === 'TypeAliasTypeAnnotation') {
+    realTypeAnnotation = resolveAlias(realTypeAnnotation.name);
+  }
+
+  switch (realTypeAnnotation.type) {
+    case 'ReservedTypeAnnotation':
+      switch (realTypeAnnotation.name) {
+        case 'RootTag':
+          return !isRequired ? 'Ljava/lang/Double;' : 'D';
+        default:
+          (realTypeAnnotation.name: empty);
+          throw new Error(
+            `Invalid ReservedFunctionValueTypeName name, got ${realTypeAnnotation.name}`,
+          );
+      }
+    case 'StringTypeAnnotation':
+      return 'Ljava/lang/String;';
+    case 'BooleanTypeAnnotation':
+      return !isRequired ? 'Ljava/lang/Boolean;' : 'Z';
+    case 'NumberTypeAnnotation':
+      return !isRequired ? 'Ljava/lang/Double;' : 'D';
+    case 'DoubleTypeAnnotation':
+      return !isRequired ? 'Ljava/lang/Double;' : 'D';
+    case 'FloatTypeAnnotation':
+      return !isRequired ? 'Ljava/lang/Double;' : 'D';
+    case 'Int32TypeAnnotation':
+      return !isRequired ? 'Ljava/lang/Double;' : 'D';
+    case 'GenericObjectTypeAnnotation':
+      return 'Lcom/facebook/react/bridge/ReadableMap;';
+    case 'ObjectTypeAnnotation':
+      return 'Lcom/facebook/react/bridge/ReadableMap;';
+    case 'ArrayTypeAnnotation':
+      return 'Lcom/facebook/react/bridge/ReadableArray;';
+    case 'FunctionTypeAnnotation':
+      return 'Lcom/facebook/react/bridge/Callback;';
+    default:
+      (realTypeAnnotation.type: empty);
+      throw new Error(
+        `Unknown prop type for method arg, found: ${realTypeAnnotation.type}"`,
+      );
+  }
+}
+
+function translateReturnTypeToJniType(
+  nullableTypeAnnotation: Nullable<NativeModuleReturnTypeAnnotation>,
+  resolveAlias: AliasResolver,
+): string {
+  const [typeAnnotation, nullable] = unwrapNullable(nullableTypeAnnotation);
+
+  let realTypeAnnotation = typeAnnotation;
+  if (realTypeAnnotation.type === 'TypeAliasTypeAnnotation') {
+    realTypeAnnotation = resolveAlias(realTypeAnnotation.name);
+  }
+
+  switch (realTypeAnnotation.type) {
+    case 'ReservedTypeAnnotation':
+      switch (realTypeAnnotation.name) {
+        case 'RootTag':
+          return nullable ? 'Ljava/lang/Double;' : 'D';
+        default:
+          (realTypeAnnotation.name: empty);
+          throw new Error(
+            `Invalid ReservedFunctionValueTypeName name, got ${realTypeAnnotation.name}`,
+          );
+      }
+    case 'VoidTypeAnnotation':
+      return 'V';
+    case 'StringTypeAnnotation':
+      return 'Ljava/lang/String;';
+    case 'BooleanTypeAnnotation':
+      return nullable ? 'Ljava/lang/Boolean;' : 'Z';
+    case 'NumberTypeAnnotation':
+      return nullable ? 'Ljava/lang/Double;' : 'D';
+    case 'DoubleTypeAnnotation':
+      return nullable ? 'Ljava/lang/Double;' : 'D';
+    case 'FloatTypeAnnotation':
+      return nullable ? 'Ljava/lang/Double;' : 'D';
+    case 'Int32TypeAnnotation':
+      return nullable ? 'Ljava/lang/Double;' : 'D';
+    case 'PromiseTypeAnnotation':
+      return 'Lcom/facebook/react/bridge/Promise;';
+    case 'GenericObjectTypeAnnotation':
+      return 'Lcom/facebook/react/bridge/WritableMap;';
+    case 'ObjectTypeAnnotation':
+      return 'Lcom/facebook/react/bridge/WritableMap;';
+    case 'ArrayTypeAnnotation':
+      return 'Lcom/facebook/react/bridge/WritableArray;';
+    default:
+      (realTypeAnnotation.type: empty);
+      throw new Error(
+        `Unknown prop type for method return type, found: ${realTypeAnnotation.type}"`,
+      );
+  }
+}
+
+function translateMethodTypeToJniSignature(
+  property: NativeModulePropertyShape,
+  resolveAlias: AliasResolver,
+): string {
+  const {name, typeAnnotation} = property;
+  let [
+    {returnTypeAnnotation, params},
+  ] = unwrapNullable<NativeModuleFunctionTypeAnnotation>(typeAnnotation);
+
+  params = [...params];
+  let processedReturnTypeAnnotation = returnTypeAnnotation;
+  const isPromiseReturn = returnTypeAnnotation.type === 'PromiseTypeAnnotation';
+  if (isPromiseReturn) {
+    processedReturnTypeAnnotation = {
+      type: 'VoidTypeAnnotation',
+    };
+  }
+
+  const argsSignatureParts = params.map(t => {
+    return translateParamTypeToJniType(t, resolveAlias);
+  });
+  if (isPromiseReturn) {
+    // Additional promise arg for this case.
+    argsSignatureParts.push(
+      translateReturnTypeToJniType(returnTypeAnnotation, resolveAlias),
+    );
+  }
+  const argsSignature = argsSignatureParts.join('');
+  const returnSignature =
+    name === 'getConstants'
+      ? 'Ljava/util/Map;'
+      : translateReturnTypeToJniType(
+          processedReturnTypeAnnotation,
+          resolveAlias,
+        );
+
+  return `(${argsSignature})${returnSignature}`;
+}
+
+function translateMethodForImplementation(
+  hasteModuleName: string,
+  property: NativeModulePropertyShape,
+  resolveAlias: AliasResolver,
+): string {
+  const [
+    propertyTypeAnnotation,
+  ] = unwrapNullable<NativeModuleFunctionTypeAnnotation>(
+    property.typeAnnotation,
+  );
+  const {returnTypeAnnotation} = propertyTypeAnnotation;
+
+  if (
+    property.name === 'getConstants' &&
+    returnTypeAnnotation.type === 'ObjectTypeAnnotation' &&
+    returnTypeAnnotation.properties.length === 0
+  ) {
+    return '';
+  }
+
+  return HostFunctionTemplate({
+    hasteModuleName,
+    propertyName: property.name,
+    jniSignature: translateMethodTypeToJniSignature(property, resolveAlias),
+    jsReturnType: translateReturnTypeToKind(returnTypeAnnotation, resolveAlias),
+  });
+}
+
+module.exports = {
+  generate(
+    libraryName: string,
+    schema: SchemaType,
+    packageName?: string,
+    assumeNonnull: boolean = false,
+  ): FilesOutput {
+    const nativeModules = getModules(schema);
+
+    const modules = Object.keys(nativeModules)
+      .filter(hasteModuleName => {
+        const module = nativeModules[hasteModuleName];
+        return !(
+          module.excludedPlatforms != null &&
+          module.excludedPlatforms.includes('android')
+        );
+      })
+      .sort()
+      .map(hasteModuleName => {
+        const {
+          aliases,
+          spec: {properties},
+        } = nativeModules[hasteModuleName];
+        const resolveAlias = createAliasResolver(aliases);
+
+        const translatedMethods = properties
+          .map(property =>
+            translateMethodForImplementation(
+              hasteModuleName,
+              property,
+              resolveAlias,
+            ),
+          )
+          .join('\n\n');
+
+        return (
+          translatedMethods +
+          '\n\n' +
+          ModuleClassConstructorTemplate({
+            hasteModuleName,
+            methods: properties
+              .map(({name: propertyName, typeAnnotation}) => {
+                const [
+                  {returnTypeAnnotation, params},
+                ] = unwrapNullable<NativeModuleFunctionTypeAnnotation>(
+                  typeAnnotation,
+                );
+
+                if (
+                  propertyName === 'getConstants' &&
+                  returnTypeAnnotation.type === 'ObjectTypeAnnotation' &&
+                  returnTypeAnnotation.properties &&
+                  returnTypeAnnotation.properties.length === 0
+                ) {
+                  return null;
+                }
+
+                return {
+                  propertyName,
+                  argCount: params.length,
+                };
+              })
+              .filter(Boolean),
+          })
+        );
+      })
+      .join('\n');
+
+    // $FlowFixMe[missing-type-arg]
+    const moduleLookups = Object.keys(nativeModules)
+      .filter(hasteModuleName => {
+        const module = nativeModules[hasteModuleName];
+        return !(
+          module.excludedPlatforms != null &&
+          module.excludedPlatforms.includes('android')
+        );
+      })
+      .sort((a, b) => {
+        const moduleA = nativeModules[a];
+        const moduleB = nativeModules[b];
+        const nameA = moduleA.moduleNames[0];
+        const nameB = moduleB.moduleNames[0];
+        if (nameA < nameB) {
+          return -1;
+        } else if (nameA > nameB) {
+          return 1;
+        }
+        return 0;
+      })
+      .flatMap<{moduleName: string, hasteModuleName: string}>(
+        (hasteModuleName: string) => {
+          const {moduleNames} = nativeModules[hasteModuleName];
+          return moduleNames.map(moduleName => ({
+            moduleName,
+            hasteModuleName,
+          }));
+        },
+      );
+
+    const fileName = `${libraryName}-generated.cpp`;
+    const replacedTemplate = FileTemplate({
+      modules: modules,
+      libraryName: libraryName.replace(/-/g, '_'),
+      moduleLookups,
+      include: `"${libraryName}.h"`,
+    });
+    return new Map([[`jni/${fileName}`, replacedTemplate]]);
+  },
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleJniH.js b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleJniH.js
new file mode 100644
index 0000000..a893fea
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleJniH.js
@@ -0,0 +1,129 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+import type {SchemaType} from '../../CodegenSchema';
+
+type FilesOutput = Map<string, string>;
+
+const {getModules} = require('./Utils');
+
+const ModuleClassDeclarationTemplate = ({
+  hasteModuleName,
+}: $ReadOnly<{hasteModuleName: string}>) => {
+  return `/**
+ * JNI C++ class for module '${hasteModuleName}'
+ */
+class JSI_EXPORT ${hasteModuleName}SpecJSI : public JavaTurboModule {
+public:
+  ${hasteModuleName}SpecJSI(const JavaTurboModule::InitParams &params);
+};
+`;
+};
+
+const HeaderFileTemplate = ({
+  modules,
+  libraryName,
+}: $ReadOnly<{modules: string, libraryName: string}>) => {
+  return `
+/**
+ * ${'C'}opyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * ${'@'}generated by codegen project: GenerateModuleJniH.js
+ */
+
+#pragma once
+
+#include <ReactCommon/JavaTurboModule.h>
+#include <ReactCommon/TurboModule.h>
+#include <jsi/jsi.h>
+
+namespace facebook {
+namespace react {
+
+${modules}
+
+std::shared_ptr<TurboModule> ${libraryName}_ModuleProvider(const std::string moduleName, const JavaTurboModule::InitParams &params);
+
+} // namespace react
+} // namespace facebook
+`;
+};
+
+// Note: this Android.mk template includes dependencies for both NativeModule and components.
+const AndroidMkTemplate = ({libraryName}: $ReadOnly<{libraryName: string}>) => {
+  return `# Copyright (c) Facebook, Inc. and its affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+LOCAL_PATH := $(call my-dir)
+
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := react_codegen_${libraryName}
+
+LOCAL_C_INCLUDES := $(LOCAL_PATH)
+
+LOCAL_SRC_FILES := $(wildcard $(LOCAL_PATH)/*.cpp) $(wildcard $(LOCAL_PATH)/react/renderer/components/${libraryName}/*.cpp)
+
+LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH) $(LOCAL_PATH)/react/renderer/components/${libraryName}
+
+LOCAL_SHARED_LIBRARIES := libjsi libglog libfolly_json libyoga libreact_nativemodule_core librrc_view libreact_render_core libreact_render_graphics libreact_debug libreact_render_debug
+
+LOCAL_CFLAGS := \\
+  -DLOG_TAG=\\"ReactNative\\"
+
+LOCAL_CFLAGS += -fexceptions -frtti -std=c++14 -Wall
+
+include $(BUILD_SHARED_LIBRARY)
+`;
+};
+
+module.exports = {
+  generate(
+    libraryName: string,
+    schema: SchemaType,
+    packageName?: string,
+    assumeNonnull: boolean = false,
+  ): FilesOutput {
+    const nativeModules = getModules(schema);
+    const modules = Object.keys(nativeModules)
+      .filter(hasteModuleName => {
+        const module = nativeModules[hasteModuleName];
+        return !(
+          module.excludedPlatforms != null &&
+          module.excludedPlatforms.includes('android')
+        );
+      })
+      .sort()
+      .map(hasteModuleName => ModuleClassDeclarationTemplate({hasteModuleName}))
+      .join('\n');
+
+    const fileName = `${libraryName}.h`;
+    const replacedTemplate = HeaderFileTemplate({
+      modules: modules,
+      libraryName: libraryName.replace(/-/g, '_'),
+    });
+    return new Map([
+      [`jni/${fileName}`, replacedTemplate],
+      [
+        'jni/Android.mk',
+        AndroidMkTemplate({
+          libraryName: `${libraryName.toLowerCase()}`,
+        }),
+      ],
+    ]);
+  },
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleObjCpp/StructCollector.js b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleObjCpp/StructCollector.js
new file mode 100644
index 0000000..e92bcb6
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleObjCpp/StructCollector.js
@@ -0,0 +1,200 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+import type {
+  Nullable,
+  NativeModuleObjectTypeAnnotation,
+  NativeModuleStringTypeAnnotation,
+  NativeModuleNumberTypeAnnotation,
+  NativeModuleInt32TypeAnnotation,
+  NativeModuleDoubleTypeAnnotation,
+  NativeModuleFloatTypeAnnotation,
+  NativeModuleBooleanTypeAnnotation,
+  NativeModuleGenericObjectTypeAnnotation,
+  ReservedTypeAnnotation,
+  NativeModuleTypeAliasTypeAnnotation,
+  NativeModuleArrayTypeAnnotation,
+  NativeModuleBaseTypeAnnotation,
+} from '../../../CodegenSchema';
+
+import type {AliasResolver} from '../Utils';
+
+const {capitalize} = require('../../Utils');
+const {
+  unwrapNullable,
+  wrapNullable,
+} = require('../../../parsers/flow/modules/utils');
+
+type StructContext = 'CONSTANTS' | 'REGULAR';
+
+export type RegularStruct = $ReadOnly<{
+  context: 'REGULAR',
+  name: string,
+  properties: $ReadOnlyArray<StructProperty>,
+}>;
+
+export type ConstantsStruct = $ReadOnly<{
+  context: 'CONSTANTS',
+  name: string,
+  properties: $ReadOnlyArray<StructProperty>,
+}>;
+
+export type Struct = RegularStruct | ConstantsStruct;
+
+export type StructProperty = $ReadOnly<{
+  name: string,
+  optional: boolean,
+  typeAnnotation: Nullable<StructTypeAnnotation>,
+}>;
+
+export type StructTypeAnnotation =
+  | NativeModuleStringTypeAnnotation
+  | NativeModuleNumberTypeAnnotation
+  | NativeModuleInt32TypeAnnotation
+  | NativeModuleDoubleTypeAnnotation
+  | NativeModuleFloatTypeAnnotation
+  | NativeModuleBooleanTypeAnnotation
+  | NativeModuleGenericObjectTypeAnnotation
+  | ReservedTypeAnnotation
+  | NativeModuleTypeAliasTypeAnnotation
+  | NativeModuleArrayTypeAnnotation<Nullable<StructTypeAnnotation>>;
+
+class StructCollector {
+  _structs: Map<string, Struct> = new Map();
+
+  process(
+    structName: string,
+    structContext: StructContext,
+    resolveAlias: AliasResolver,
+    nullableTypeAnnotation: Nullable<NativeModuleBaseTypeAnnotation>,
+  ): Nullable<StructTypeAnnotation> {
+    const [typeAnnotation, nullable] = unwrapNullable(nullableTypeAnnotation);
+    switch (typeAnnotation.type) {
+      case 'ObjectTypeAnnotation': {
+        this._insertStruct(
+          structName,
+          structContext,
+          resolveAlias,
+          typeAnnotation,
+        );
+        return wrapNullable(nullable, {
+          type: 'TypeAliasTypeAnnotation',
+          name: structName,
+        });
+      }
+      case 'ArrayTypeAnnotation': {
+        if (typeAnnotation.elementType == null) {
+          return wrapNullable(nullable, {
+            type: 'ArrayTypeAnnotation',
+          });
+        }
+
+        return wrapNullable(nullable, {
+          type: 'ArrayTypeAnnotation',
+          elementType: this.process(
+            structName + 'Element',
+            structContext,
+            resolveAlias,
+            typeAnnotation.elementType,
+          ),
+        });
+      }
+      case 'TypeAliasTypeAnnotation': {
+        this._insertAlias(typeAnnotation.name, structContext, resolveAlias);
+        return wrapNullable(nullable, typeAnnotation);
+      }
+      default: {
+        return wrapNullable(nullable, typeAnnotation);
+      }
+    }
+  }
+
+  _insertAlias(
+    aliasName: string,
+    structContext: StructContext,
+    resolveAlias: AliasResolver,
+  ): void {
+    const usedStruct = this._structs.get(aliasName);
+    if (usedStruct == null) {
+      this._insertStruct(
+        aliasName,
+        structContext,
+        resolveAlias,
+        resolveAlias(aliasName),
+      );
+    } else if (usedStruct.context !== structContext) {
+      throw new Error(
+        `Tried to use alias '${aliasName}' in a getConstants() return type and inside a regular struct.`,
+      );
+    }
+  }
+
+  _insertStruct(
+    structName: string,
+    structContext: StructContext,
+    resolveAlias: AliasResolver,
+    objectTypeAnnotation: NativeModuleObjectTypeAnnotation,
+  ): void {
+    // $FlowFixMe[missing-type-arg]
+    const properties = objectTypeAnnotation.properties.map<
+      $ReadOnly<{
+        name: string,
+        optional: boolean,
+        typeAnnotation: Nullable<StructTypeAnnotation>,
+      }>,
+    >(property => {
+      const propertyStructName = structName + capitalize(property.name);
+
+      return {
+        ...property,
+        typeAnnotation: this.process(
+          propertyStructName,
+          structContext,
+          resolveAlias,
+          property.typeAnnotation,
+        ),
+      };
+    });
+
+    switch (structContext) {
+      case 'REGULAR':
+        this._structs.set(structName, {
+          name: structName,
+          context: 'REGULAR',
+          properties: properties,
+        });
+        break;
+      case 'CONSTANTS':
+        this._structs.set(structName, {
+          name: structName,
+          context: 'CONSTANTS',
+          properties: properties,
+        });
+        break;
+      default:
+        (structContext: empty);
+        throw new Error(`Detected an invalid struct context: ${structContext}`);
+    }
+  }
+
+  getAllStructs(): $ReadOnlyArray<Struct> {
+    return [...this._structs.values()];
+  }
+
+  getStruct(name: string): ?Struct {
+    return this._structs.get(name);
+  }
+}
+
+module.exports = {
+  StructCollector,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleObjCpp/Utils.js b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleObjCpp/Utils.js
new file mode 100644
index 0000000..ffbfea1
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleObjCpp/Utils.js
@@ -0,0 +1,32 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+import type {StructProperty} from './StructCollector';
+
+function getSafePropertyName(property: StructProperty): string {
+  if (property.name === 'id') {
+    return `${property.name}_`;
+  }
+  return property.name;
+}
+
+function getNamespacedStructName(
+  hasteModuleName: string,
+  structName: string,
+): string {
+  return `JS::${hasteModuleName}::${structName}`;
+}
+
+module.exports = {
+  getSafePropertyName,
+  getNamespacedStructName,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleObjCpp/header/serializeConstantsStruct.js b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleObjCpp/header/serializeConstantsStruct.js
new file mode 100644
index 0000000..d11a5a8
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleObjCpp/header/serializeConstantsStruct.js
@@ -0,0 +1,266 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+const {getSafePropertyName, getNamespacedStructName} = require('../Utils');
+const {capitalize} = require('../../../Utils');
+
+import type {Nullable} from '../../../../CodegenSchema';
+import type {StructTypeAnnotation, ConstantsStruct} from '../StructCollector';
+import type {StructSerilizationOutput} from './serializeStruct';
+
+const {unwrapNullable} = require('../../../../parsers/flow/modules/utils');
+
+const StructTemplate = ({
+  hasteModuleName,
+  structName,
+  builderInputProps,
+}: $ReadOnly<{
+  hasteModuleName: string,
+  structName: string,
+  builderInputProps: string,
+}>) => `namespace JS {
+  namespace ${hasteModuleName} {
+    struct ${structName} {
+
+      struct Builder {
+        struct Input {
+          ${builderInputProps}
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing ${structName} */
+        Builder(${structName} i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static ${structName} fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      ${structName}(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}`;
+
+const MethodTemplate = ({
+  hasteModuleName,
+  structName,
+  properties,
+}: $ReadOnly<{
+  hasteModuleName: string,
+  structName: string,
+  properties: string,
+}>) => `inline JS::${hasteModuleName}::${structName}::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+${properties}
+  return d;
+}) {}
+inline JS::${hasteModuleName}::${structName}::Builder::Builder(${structName} i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}`;
+
+function toObjCType(
+  hasteModuleName: string,
+  nullableTypeAnnotation: Nullable<StructTypeAnnotation>,
+  isOptional: boolean = false,
+): string {
+  const [typeAnnotation, nullable] = unwrapNullable(nullableTypeAnnotation);
+  const isRequired = !nullable && !isOptional;
+  const wrapFollyOptional = (type: string) => {
+    return isRequired ? type : `folly::Optional<${type}>`;
+  };
+
+  switch (typeAnnotation.type) {
+    case 'ReservedTypeAnnotation':
+      switch (typeAnnotation.name) {
+        case 'RootTag':
+          return wrapFollyOptional('double');
+        default:
+          (typeAnnotation.name: empty);
+          throw new Error(`Unknown prop type, found: ${typeAnnotation.name}"`);
+      }
+    case 'StringTypeAnnotation':
+      return 'NSString *';
+    case 'NumberTypeAnnotation':
+      return wrapFollyOptional('double');
+    case 'FloatTypeAnnotation':
+      return wrapFollyOptional('double');
+    case 'Int32TypeAnnotation':
+      return wrapFollyOptional('double');
+    case 'DoubleTypeAnnotation':
+      return wrapFollyOptional('double');
+    case 'BooleanTypeAnnotation':
+      return wrapFollyOptional('bool');
+    case 'GenericObjectTypeAnnotation':
+      return isRequired ? 'id<NSObject> ' : 'id<NSObject> _Nullable ';
+    case 'ArrayTypeAnnotation':
+      if (typeAnnotation.elementType == null) {
+        return isRequired ? 'id<NSObject> ' : 'id<NSObject> _Nullable ';
+      }
+
+      return wrapFollyOptional(
+        `std::vector<${toObjCType(
+          hasteModuleName,
+          typeAnnotation.elementType,
+        )}>`,
+      );
+    case 'TypeAliasTypeAnnotation':
+      const structName = capitalize(typeAnnotation.name);
+      const namespacedStructName = getNamespacedStructName(
+        hasteModuleName,
+        structName,
+      );
+      return wrapFollyOptional(`${namespacedStructName}::Builder`);
+    default:
+      (typeAnnotation.type: empty);
+      throw new Error(
+        `Couldn't convert into ObjC type: ${typeAnnotation.type}"`,
+      );
+  }
+}
+
+function toObjCValue(
+  hasteModuleName: string,
+  nullableTypeAnnotation: Nullable<StructTypeAnnotation>,
+  value: string,
+  depth: number,
+  isOptional: boolean = false,
+): string {
+  const [typeAnnotation, nullable] = unwrapNullable(nullableTypeAnnotation);
+  const isRequired = !nullable && !isOptional;
+
+  function wrapPrimitive(type: string) {
+    return !isRequired
+      ? `${value}.hasValue() ? @((${type})${value}.value()) : nil`
+      : `@(${value})`;
+  }
+
+  switch (typeAnnotation.type) {
+    case 'ReservedTypeAnnotation':
+      switch (typeAnnotation.name) {
+        case 'RootTag':
+          return wrapPrimitive('double');
+        default:
+          (typeAnnotation.name: empty);
+          throw new Error(
+            `Couldn't convert into ObjC type: ${typeAnnotation.type}"`,
+          );
+      }
+    case 'StringTypeAnnotation':
+      return value;
+    case 'NumberTypeAnnotation':
+      return wrapPrimitive('double');
+    case 'FloatTypeAnnotation':
+      return wrapPrimitive('double');
+    case 'Int32TypeAnnotation':
+      return wrapPrimitive('double');
+    case 'DoubleTypeAnnotation':
+      return wrapPrimitive('double');
+    case 'BooleanTypeAnnotation':
+      return wrapPrimitive('BOOL');
+    case 'GenericObjectTypeAnnotation':
+      return value;
+    case 'ArrayTypeAnnotation':
+      const {elementType} = typeAnnotation;
+      if (elementType == null) {
+        return value;
+      }
+
+      const localVarName = `el${'_'.repeat(depth + 1)}`;
+      const elementObjCType = toObjCType(hasteModuleName, elementType);
+      const elementObjCValue = toObjCValue(
+        hasteModuleName,
+        elementType,
+        localVarName,
+        depth + 1,
+      );
+
+      const RCTConvertVecToArray = transformer => {
+        return `RCTConvert${
+          !isRequired ? 'Optional' : ''
+        }VecToArray(${value}, ${transformer})`;
+      };
+
+      return RCTConvertVecToArray(
+        `^id(${elementObjCType} ${localVarName}) { return ${elementObjCValue}; }`,
+      );
+    case 'TypeAliasTypeAnnotation':
+      return !isRequired
+        ? `${value}.hasValue() ? ${value}.value().buildUnsafeRawValue() : nil`
+        : `${value}.buildUnsafeRawValue()`;
+    default:
+      (typeAnnotation.type: empty);
+      throw new Error(
+        `Couldn't convert into ObjC value: ${typeAnnotation.type}"`,
+      );
+  }
+}
+
+function serializeConstantsStruct(
+  hasteModuleName: string,
+  struct: ConstantsStruct,
+): StructSerilizationOutput {
+  const declaration = StructTemplate({
+    hasteModuleName,
+    structName: struct.name,
+    builderInputProps: struct.properties
+      .map(property => {
+        const {typeAnnotation, optional} = property;
+        const safePropName = getSafePropertyName(property);
+        const objCType = toObjCType(hasteModuleName, typeAnnotation, optional);
+
+        if (!optional) {
+          return `RCTRequired<${objCType}> ${safePropName};`;
+        }
+
+        const space = ' '.repeat(objCType.endsWith('*') ? 0 : 1);
+        return `${objCType}${space}${safePropName};`;
+      })
+      .join('\n          '),
+  });
+
+  const methods = MethodTemplate({
+    hasteModuleName,
+    structName: struct.name,
+    properties: struct.properties
+      .map(property => {
+        const {typeAnnotation, optional, name: propName} = property;
+        const safePropName = getSafePropertyName(property);
+        const objCValue = toObjCValue(
+          hasteModuleName,
+          typeAnnotation,
+          safePropName,
+          0,
+          optional,
+        );
+
+        let varDecl = `auto ${safePropName} = i.${safePropName}`;
+        if (!optional) {
+          varDecl += '.get()';
+        }
+
+        const assignment = `d[@"${propName}"] = ` + objCValue;
+        return `  ${varDecl};\n  ${assignment};`;
+      })
+      .join('\n'),
+  });
+
+  return {declaration, methods};
+}
+
+module.exports = {
+  serializeConstantsStruct,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleObjCpp/header/serializeRegularStruct.js b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleObjCpp/header/serializeRegularStruct.js
new file mode 100644
index 0000000..fdcb2ab
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleObjCpp/header/serializeRegularStruct.js
@@ -0,0 +1,257 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+const {getSafePropertyName, getNamespacedStructName} = require('../Utils');
+const {capitalize} = require('../../../Utils');
+
+import type {Nullable} from '../../../../CodegenSchema';
+import type {StructTypeAnnotation, RegularStruct} from '../StructCollector';
+import type {StructSerilizationOutput} from './serializeStruct';
+
+const {unwrapNullable} = require('../../../../parsers/flow/modules/utils');
+
+const StructTemplate = ({
+  hasteModuleName,
+  structName,
+  structProperties,
+}: $ReadOnly<{
+  hasteModuleName: string,
+  structName: string,
+  structProperties: string,
+}>) => `namespace JS {
+  namespace ${hasteModuleName} {
+    struct ${structName} {
+      ${structProperties}
+
+      ${structName}(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (${hasteModuleName}_${structName})
++ (RCTManagedPointer *)JS_${hasteModuleName}_${structName}:(id)json;
+@end`;
+
+const MethodTemplate = ({
+  returnType,
+  returnValue,
+  hasteModuleName,
+  structName,
+  propertyName,
+  safePropertyName,
+}: $ReadOnly<{
+  returnType: string,
+  returnValue: string,
+  hasteModuleName: string,
+  structName: string,
+  propertyName: string,
+  safePropertyName: string,
+}>) => `inline ${returnType}JS::${hasteModuleName}::${structName}::${safePropertyName}() const
+{
+  id const p = _v[@"${propertyName}"];
+  return ${returnValue};
+}`;
+
+function toObjCType(
+  hasteModuleName: string,
+  nullableTypeAnnotation: Nullable<StructTypeAnnotation>,
+  isOptional: boolean = false,
+): string {
+  const [typeAnnotation, nullable] = unwrapNullable(nullableTypeAnnotation);
+  const isRequired = !nullable && !isOptional;
+  const wrapFollyOptional = (type: string) => {
+    return isRequired ? type : `folly::Optional<${type}>`;
+  };
+
+  switch (typeAnnotation.type) {
+    case 'ReservedTypeAnnotation':
+      switch (typeAnnotation.name) {
+        case 'RootTag':
+          return wrapFollyOptional('double');
+        default:
+          (typeAnnotation.name: empty);
+          throw new Error(`Unknown prop type, found: ${typeAnnotation.name}"`);
+      }
+    case 'StringTypeAnnotation':
+      return 'NSString *';
+    case 'NumberTypeAnnotation':
+      return wrapFollyOptional('double');
+    case 'FloatTypeAnnotation':
+      return wrapFollyOptional('double');
+    case 'Int32TypeAnnotation':
+      return wrapFollyOptional('double');
+    case 'DoubleTypeAnnotation':
+      return wrapFollyOptional('double');
+    case 'BooleanTypeAnnotation':
+      return wrapFollyOptional('bool');
+    case 'GenericObjectTypeAnnotation':
+      return isRequired ? 'id<NSObject> ' : 'id<NSObject> _Nullable';
+    case 'ArrayTypeAnnotation':
+      if (typeAnnotation.elementType == null) {
+        return isRequired ? 'id<NSObject> ' : 'id<NSObject> _Nullable';
+      }
+      return wrapFollyOptional(
+        `facebook::react::LazyVector<${toObjCType(
+          hasteModuleName,
+          typeAnnotation.elementType,
+        )}>`,
+      );
+    case 'TypeAliasTypeAnnotation':
+      const structName = capitalize(typeAnnotation.name);
+      const namespacedStructName = getNamespacedStructName(
+        hasteModuleName,
+        structName,
+      );
+      return wrapFollyOptional(namespacedStructName);
+    default:
+      (typeAnnotation.type: empty);
+      throw new Error(
+        `Couldn't convert into ObjC type: ${typeAnnotation.type}"`,
+      );
+  }
+}
+
+function toObjCValue(
+  hasteModuleName: string,
+  nullableTypeAnnotation: Nullable<StructTypeAnnotation>,
+  value: string,
+  depth: number,
+  isOptional: boolean = false,
+): string {
+  const [typeAnnotation, nullable] = unwrapNullable(nullableTypeAnnotation);
+  const isRequired = !nullable && !isOptional;
+  const RCTBridgingTo = (type: string, arg?: string) => {
+    const args = [value, arg].filter(Boolean).join(', ');
+    return isRequired
+      ? `RCTBridgingTo${type}(${args})`
+      : `RCTBridgingToOptional${type}(${args})`;
+  };
+
+  switch (typeAnnotation.type) {
+    case 'ReservedTypeAnnotation':
+      switch (typeAnnotation.name) {
+        case 'RootTag':
+          return RCTBridgingTo('Double');
+        default:
+          (typeAnnotation.name: empty);
+          throw new Error(
+            `Couldn't convert into ObjC type: ${typeAnnotation.type}"`,
+          );
+      }
+    case 'StringTypeAnnotation':
+      return RCTBridgingTo('String');
+    case 'NumberTypeAnnotation':
+      return RCTBridgingTo('Double');
+    case 'FloatTypeAnnotation':
+      return RCTBridgingTo('Double');
+    case 'Int32TypeAnnotation':
+      return RCTBridgingTo('Double');
+    case 'DoubleTypeAnnotation':
+      return RCTBridgingTo('Double');
+    case 'BooleanTypeAnnotation':
+      return RCTBridgingTo('Bool');
+    case 'GenericObjectTypeAnnotation':
+      return value;
+    case 'ArrayTypeAnnotation':
+      const {elementType} = typeAnnotation;
+      if (elementType == null) {
+        return value;
+      }
+
+      const localVarName = `itemValue_${depth}`;
+      const elementObjCType = toObjCType(hasteModuleName, elementType);
+      const elementObjCValue = toObjCValue(
+        hasteModuleName,
+        elementType,
+        localVarName,
+        depth + 1,
+      );
+
+      return RCTBridgingTo(
+        'Vec',
+        `^${elementObjCType}(id ${localVarName}) { return ${elementObjCValue}; }`,
+      );
+    case 'TypeAliasTypeAnnotation':
+      const structName = capitalize(typeAnnotation.name);
+      const namespacedStructName = getNamespacedStructName(
+        hasteModuleName,
+        structName,
+      );
+
+      return !isRequired
+        ? `(${value} == nil ? folly::none : folly::make_optional(${namespacedStructName}(${value})))`
+        : `${namespacedStructName}(${value})`;
+    default:
+      (typeAnnotation.type: empty);
+      throw new Error(
+        `Couldn't convert into ObjC value: ${typeAnnotation.type}"`,
+      );
+  }
+}
+
+function serializeRegularStruct(
+  hasteModuleName: string,
+  struct: RegularStruct,
+): StructSerilizationOutput {
+  const declaration = StructTemplate({
+    hasteModuleName: hasteModuleName,
+    structName: struct.name,
+    structProperties: struct.properties
+      .map(property => {
+        const {typeAnnotation, optional} = property;
+        const safePropName = getSafePropertyName(property);
+        const returnType = toObjCType(
+          hasteModuleName,
+          typeAnnotation,
+          optional,
+        );
+
+        const padding = ' '.repeat(returnType.endsWith('*') ? 0 : 1);
+        return `${returnType}${padding}${safePropName}() const;`;
+      })
+      .join('\n      '),
+  });
+
+  // $FlowFixMe[missing-type-arg]
+  const methods = struct.properties
+    .map<string>(property => {
+      const {typeAnnotation, optional, name: propName} = property;
+      const safePropertyName = getSafePropertyName(property);
+      const returnType = toObjCType(hasteModuleName, typeAnnotation, optional);
+      const returnValue = toObjCValue(
+        hasteModuleName,
+        typeAnnotation,
+        'p',
+        0,
+        optional,
+      );
+
+      const padding = ' '.repeat(returnType.endsWith('*') ? 0 : 1);
+      return MethodTemplate({
+        hasteModuleName,
+        structName: struct.name,
+        returnType: returnType + padding,
+        returnValue: returnValue,
+        propertyName: propName,
+        safePropertyName,
+      });
+    })
+    .join('\n');
+
+  return {methods, declaration};
+}
+
+module.exports = {
+  serializeRegularStruct,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleObjCpp/header/serializeStruct.js b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleObjCpp/header/serializeStruct.js
new file mode 100644
index 0000000..170ac77
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleObjCpp/header/serializeStruct.js
@@ -0,0 +1,35 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+import type {Struct} from '../StructCollector';
+
+const {serializeConstantsStruct} = require('./serializeConstantsStruct');
+const {serializeRegularStruct} = require('./serializeRegularStruct');
+
+export type StructSerilizationOutput = $ReadOnly<{
+  methods: string,
+  declaration: string,
+}>;
+
+function serializeStruct(
+  hasteModuleName: string,
+  struct: Struct,
+): StructSerilizationOutput {
+  if (struct.context === 'REGULAR') {
+    return serializeRegularStruct(hasteModuleName, struct);
+  }
+  return serializeConstantsStruct(hasteModuleName, struct);
+}
+
+module.exports = {
+  serializeStruct,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleObjCpp/index.js b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleObjCpp/index.js
new file mode 100644
index 0000000..59a2ca9
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleObjCpp/index.js
@@ -0,0 +1,218 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+import type {SchemaType} from '../../../CodegenSchema';
+import type {MethodSerializationOutput} from './serializeMethod';
+
+const {createAliasResolver, getModules} = require('../Utils');
+
+const {StructCollector} = require('./StructCollector');
+const {serializeStruct} = require('./header/serializeStruct');
+const {serializeMethod} = require('./serializeMethod');
+const {serializeModuleSource} = require('./source/serializeModule');
+
+type FilesOutput = Map<string, string>;
+
+const ModuleDeclarationTemplate = ({
+  hasteModuleName,
+  structDeclarations,
+  protocolMethods,
+}: $ReadOnly<{
+  hasteModuleName: string,
+  structDeclarations: string,
+  protocolMethods: string,
+}>) => `${structDeclarations}
+@protocol ${hasteModuleName}Spec <RCTBridgeModule, RCTTurboModule>
+
+${protocolMethods}
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module '${hasteModuleName}'
+     */
+    class JSI_EXPORT ${hasteModuleName}SpecJSI : public ObjCTurboModule {
+    public:
+      ${hasteModuleName}SpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook`;
+
+const HeaderFileTemplate = ({
+  moduleDeclarations,
+  structInlineMethods,
+  assumeNonnull,
+}: $ReadOnly<{
+  moduleDeclarations: string,
+  structInlineMethods: string,
+  assumeNonnull: boolean,
+}>) =>
+  `/**
+ * ${'C'}opyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * ${'@'}generated by codegen project: GenerateModuleObjCpp
+ *
+ * We create an umbrella header (and corresponding implementation) here since
+ * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
+ * must have a single output. More files => more genrule()s => slower builds.
+ */
+
+#ifndef __cplusplus
+#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
+#endif
+#import <Foundation/Foundation.h>
+#import <RCTRequired/RCTRequired.h>
+#import <RCTTypeSafety/RCTConvertHelpers.h>
+#import <RCTTypeSafety/RCTTypedModuleConstants.h>
+#import <React/RCTBridgeModule.h>
+#import <React/RCTCxxConvert.h>
+#import <React/RCTManagedPointer.h>
+#import <ReactCommon/RCTTurboModule.h>
+#import <folly/Optional.h>
+#import <vector>
+
+` +
+  (assumeNonnull ? '\nNS_ASSUME_NONNULL_BEGIN\n' : '') +
+  moduleDeclarations +
+  '\n' +
+  structInlineMethods +
+  (assumeNonnull ? '\nNS_ASSUME_NONNULL_END\n' : '\n');
+
+const SourceFileTemplate = ({
+  headerFileName,
+  moduleImplementations,
+}: $ReadOnly<{
+  headerFileName: string,
+  moduleImplementations: string,
+}>) => `/**
+ * ${'C'}opyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * ${'@'}generated by codegen project: GenerateModuleObjCpp
+ *
+ * We create an umbrella header (and corresponding implementation) here since
+ * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
+ * must have a single output. More files => more genrule()s => slower builds.
+ */
+
+#import "${headerFileName}"
+
+${moduleImplementations}
+`;
+
+module.exports = {
+  generate(
+    libraryName: string,
+    schema: SchemaType,
+    packageName?: string,
+    assumeNonnull: boolean,
+  ): FilesOutput {
+    const nativeModules = getModules(schema);
+
+    const moduleDeclarations: Array<string> = [];
+    const structInlineMethods: Array<string> = [];
+    const moduleImplementations: Array<string> = [];
+
+    const hasteModuleNames: Array<string> = Object.keys(nativeModules).sort();
+    for (const hasteModuleName of hasteModuleNames) {
+      const {
+        aliases,
+        excludedPlatforms,
+        spec: {properties},
+      } = nativeModules[hasteModuleName];
+      if (excludedPlatforms != null && excludedPlatforms.includes('iOS')) {
+        continue;
+      }
+      const resolveAlias = createAliasResolver(aliases);
+      const structCollector = new StructCollector();
+
+      const methodSerializations: Array<MethodSerializationOutput> = [];
+      const serializeProperty = property => {
+        methodSerializations.push(
+          ...serializeMethod(
+            hasteModuleName,
+            property,
+            structCollector,
+            resolveAlias,
+          ),
+        );
+      };
+
+      /**
+       * Note: As we serialize NativeModule methods, we insert structs into
+       * StructCollector, as we encounter them.
+       */
+      properties
+        .filter(property => property.name !== 'getConstants')
+        .forEach(serializeProperty);
+      properties
+        .filter(property => property.name === 'getConstants')
+        .forEach(serializeProperty);
+
+      const generatedStructs = structCollector.getAllStructs();
+      const structStrs = [];
+      const methodStrs = [];
+
+      for (const struct of generatedStructs) {
+        const {methods, declaration} = serializeStruct(hasteModuleName, struct);
+        structStrs.push(declaration);
+        methodStrs.push(methods);
+      }
+
+      moduleDeclarations.push(
+        ModuleDeclarationTemplate({
+          hasteModuleName: hasteModuleName,
+          structDeclarations: structStrs.join('\n'),
+          protocolMethods: methodSerializations
+            .map(({protocolMethod}) => protocolMethod)
+            .join('\n'),
+        }),
+      );
+
+      structInlineMethods.push(methodStrs.join('\n'));
+
+      moduleImplementations.push(
+        serializeModuleSource(
+          hasteModuleName,
+          generatedStructs,
+          methodSerializations.filter(
+            ({selector}) => selector !== '@selector(constantsToExport)',
+          ),
+        ),
+      );
+    }
+
+    const headerFileName = `${libraryName}.h`;
+    const headerFile = HeaderFileTemplate({
+      moduleDeclarations: moduleDeclarations.join('\n'),
+      structInlineMethods: structInlineMethods.join('\n'),
+      assumeNonnull,
+    });
+
+    const sourceFileName = `${libraryName}-generated.mm`;
+    const sourceFile = SourceFileTemplate({
+      headerFileName,
+      moduleImplementations: moduleImplementations.join('\n'),
+    });
+
+    return new Map([
+      [headerFileName, headerFile],
+      [sourceFileName, sourceFile],
+    ]);
+  },
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleObjCpp/serializeMethod.js b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleObjCpp/serializeMethod.js
new file mode 100644
index 0000000..6f5c742
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleObjCpp/serializeMethod.js
@@ -0,0 +1,449 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+import type {
+  Nullable,
+  NamedShape,
+  NativeModuleParamTypeAnnotation,
+  NativeModuleReturnTypeAnnotation,
+  NativeModulePropertyShape,
+} from '../../../CodegenSchema';
+
+import type {AliasResolver} from '../Utils';
+
+const invariant = require('invariant');
+const {StructCollector} = require('./StructCollector');
+const {getNamespacedStructName} = require('./Utils');
+const {capitalize} = require('../../Utils');
+const {
+  wrapNullable,
+  unwrapNullable,
+} = require('../../../parsers/flow/modules/utils');
+
+const ProtocolMethodTemplate = ({
+  returnObjCType,
+  methodName,
+  params,
+}: $ReadOnly<{
+  returnObjCType: string,
+  methodName: string,
+  params: string,
+}>) => `- (${returnObjCType})${methodName}${params};`;
+
+export type StructParameterRecord = $ReadOnly<{
+  paramIndex: number,
+  structName: string,
+}>;
+
+type ReturnJSType =
+  | 'VoidKind'
+  | 'BooleanKind'
+  | 'PromiseKind'
+  | 'ObjectKind'
+  | 'ArrayKind'
+  | 'NumberKind'
+  | 'StringKind';
+
+export type MethodSerializationOutput = $ReadOnly<{
+  methodName: string,
+  protocolMethod: string,
+  selector: string,
+  structParamRecords: $ReadOnlyArray<StructParameterRecord>,
+  returnJSType: ReturnJSType,
+  argCount: number,
+}>;
+
+function serializeMethod(
+  hasteModuleName: string,
+  property: NativeModulePropertyShape,
+  structCollector: StructCollector,
+  resolveAlias: AliasResolver,
+): $ReadOnlyArray<MethodSerializationOutput> {
+  const {name: methodName, typeAnnotation: nullableTypeAnnotation} = property;
+  const [propertyTypeAnnotation] = unwrapNullable(nullableTypeAnnotation);
+  const {params} = propertyTypeAnnotation;
+
+  if (methodName === 'getConstants') {
+    return serializeConstantsProtocolMethods(
+      hasteModuleName,
+      property,
+      structCollector,
+      resolveAlias,
+    );
+  }
+
+  const methodParams: Array<{paramName: string, objCType: string}> = [];
+  const structParamRecords: Array<StructParameterRecord> = [];
+
+  params.forEach((param, index) => {
+    const structName = getParamStructName(methodName, param);
+    const {objCType, isStruct} = getParamObjCType(
+      hasteModuleName,
+      methodName,
+      param,
+      structName,
+      structCollector,
+      resolveAlias,
+    );
+
+    methodParams.push({paramName: param.name, objCType});
+
+    if (isStruct) {
+      structParamRecords.push({paramIndex: index, structName});
+    }
+  });
+
+  // Unwrap returnTypeAnnotation, so we check if the return type is Promise
+  // TODO(T76719514): Disallow nullable PromiseTypeAnnotations
+  const [returnTypeAnnotation] = unwrapNullable(
+    propertyTypeAnnotation.returnTypeAnnotation,
+  );
+
+  if (returnTypeAnnotation.type === 'PromiseTypeAnnotation') {
+    methodParams.push(
+      {paramName: 'resolve', objCType: 'RCTPromiseResolveBlock'},
+      {paramName: 'reject', objCType: 'RCTPromiseRejectBlock'},
+    );
+  }
+
+  /**
+   * Build Protocol Method
+   **/
+  const returnObjCType = getReturnObjCType(
+    methodName,
+    propertyTypeAnnotation.returnTypeAnnotation,
+  );
+  const paddingMax = `- (${returnObjCType})${methodName}`.length;
+
+  const objCParams = methodParams.reduce(
+    ($objCParams, {objCType, paramName}, i) => {
+      const rhs = `(${objCType})${paramName}`;
+      const padding = ' '.repeat(Math.max(0, paddingMax - paramName.length));
+      return i === 0
+        ? `:${rhs}`
+        : `${$objCParams}\n${padding}${paramName}:${rhs}`;
+    },
+    '',
+  );
+
+  const protocolMethod = ProtocolMethodTemplate({
+    methodName,
+    returnObjCType,
+    params: objCParams,
+  });
+
+  /**
+   * Build ObjC Selector
+   */
+  // $FlowFixMe[missing-type-arg]
+  const selector = methodParams
+    .map<string>(({paramName}) => paramName)
+    .reduce(($selector, paramName, i) => {
+      return i === 0 ? `${$selector}:` : `${$selector}${paramName}:`;
+    }, methodName);
+
+  /**
+   * Build JS Return type
+   */
+  const returnJSType = getReturnJSType(methodName, returnTypeAnnotation);
+
+  return [
+    {
+      methodName,
+      protocolMethod,
+      selector: `@selector(${selector})`,
+      structParamRecords,
+      returnJSType,
+      argCount: params.length,
+    },
+  ];
+}
+
+type Param = NamedShape<Nullable<NativeModuleParamTypeAnnotation>>;
+
+function getParamStructName(methodName: string, param: Param): string {
+  const [typeAnnotation] = unwrapNullable(param.typeAnnotation);
+  if (typeAnnotation.type === 'TypeAliasTypeAnnotation') {
+    return typeAnnotation.name;
+  }
+
+  return `Spec${capitalize(methodName)}${capitalize(param.name)}`;
+}
+
+function getParamObjCType(
+  hasteModuleName: string,
+  methodName: string,
+  param: Param,
+  structName: string,
+  structCollector: StructCollector,
+  resolveAlias: AliasResolver,
+): $ReadOnly<{objCType: string, isStruct: boolean}> {
+  const {name: paramName, typeAnnotation: nullableTypeAnnotation} = param;
+  const [typeAnnotation, nullable] = unwrapNullable(nullableTypeAnnotation);
+  const notRequired = param.optional || nullable;
+
+  function wrapIntoNullableIfNeeded(generatedType: string) {
+    return nullable ? `${generatedType} _Nullable` : generatedType;
+  }
+
+  const isStruct = (objCType: string) => ({
+    isStruct: true,
+    objCType,
+  });
+
+  const notStruct = (objCType: string) => ({
+    isStruct: false,
+    objCType,
+  });
+
+  // Handle types that can only be in parameters
+  switch (typeAnnotation.type) {
+    case 'FunctionTypeAnnotation': {
+      return notStruct('RCTResponseSenderBlock');
+    }
+    case 'ArrayTypeAnnotation': {
+      /**
+       * Array in params always codegen NSArray *
+       *
+       * TODO(T73933406): Support codegen for Arrays of structs and primitives
+       *
+       * For example:
+       *   Array<number> => NSArray<NSNumber *>
+       *   type Animal = {};
+       *   Array<Animal> => NSArray<JS::NativeSampleTurboModule::Animal *>, etc.
+       */
+      return notStruct(wrapIntoNullableIfNeeded('NSArray *'));
+    }
+  }
+
+  const [structTypeAnnotation] = unwrapNullable(
+    structCollector.process(
+      structName,
+      'REGULAR',
+      resolveAlias,
+      wrapNullable(nullable, typeAnnotation),
+    ),
+  );
+
+  invariant(
+    structTypeAnnotation.type !== 'ArrayTypeAnnotation',
+    'ArrayTypeAnnotations should have been processed earlier',
+  );
+
+  switch (structTypeAnnotation.type) {
+    case 'TypeAliasTypeAnnotation': {
+      /**
+       * TODO(T73943261): Support nullable object literals and aliases?
+       */
+      return isStruct(
+        getNamespacedStructName(hasteModuleName, structTypeAnnotation.name) +
+          ' &',
+      );
+    }
+    case 'ReservedTypeAnnotation':
+      switch (structTypeAnnotation.name) {
+        case 'RootTag':
+          return notStruct(notRequired ? 'NSNumber *' : 'double');
+        default:
+          (structTypeAnnotation.name: empty);
+          throw new Error(
+            `Unsupported type for param "${paramName}" in ${methodName}. Found: ${structTypeAnnotation.type}`,
+          );
+      }
+    case 'StringTypeAnnotation':
+      return notStruct(wrapIntoNullableIfNeeded('NSString *'));
+    case 'NumberTypeAnnotation':
+      return notStruct(notRequired ? 'NSNumber *' : 'double');
+    case 'FloatTypeAnnotation':
+      return notStruct(notRequired ? 'NSNumber *' : 'double');
+    case 'DoubleTypeAnnotation':
+      return notStruct(notRequired ? 'NSNumber *' : 'double');
+    case 'Int32TypeAnnotation':
+      return notStruct(notRequired ? 'NSNumber *' : 'double');
+    case 'BooleanTypeAnnotation':
+      return notStruct(notRequired ? 'NSNumber *' : 'BOOL');
+    case 'GenericObjectTypeAnnotation':
+      return notStruct(wrapIntoNullableIfNeeded('NSDictionary *'));
+    default:
+      (structTypeAnnotation.type: empty);
+      throw new Error(
+        `Unsupported type for param "${paramName}" in ${methodName}. Found: ${typeAnnotation.type}`,
+      );
+  }
+}
+
+function getReturnObjCType(
+  methodName: string,
+  nullableTypeAnnotation: Nullable<NativeModuleReturnTypeAnnotation>,
+) {
+  const [typeAnnotation, nullable] = unwrapNullable(nullableTypeAnnotation);
+
+  function wrapIntoNullableIfNeeded(generatedType: string) {
+    return nullable ? `${generatedType} _Nullable` : generatedType;
+  }
+
+  switch (typeAnnotation.type) {
+    case 'VoidTypeAnnotation':
+      return 'void';
+    case 'PromiseTypeAnnotation':
+      return 'void';
+    case 'ObjectTypeAnnotation':
+      return wrapIntoNullableIfNeeded('NSDictionary *');
+    case 'TypeAliasTypeAnnotation':
+      return wrapIntoNullableIfNeeded('NSDictionary *');
+    case 'ArrayTypeAnnotation':
+      if (typeAnnotation.elementType == null) {
+        return wrapIntoNullableIfNeeded('NSArray<id<NSObject>> *');
+      }
+
+      return wrapIntoNullableIfNeeded(
+        `NSArray<${getReturnObjCType(
+          methodName,
+          typeAnnotation.elementType,
+        )}> *`,
+      );
+    case 'ReservedTypeAnnotation':
+      switch (typeAnnotation.name) {
+        case 'RootTag':
+          return wrapIntoNullableIfNeeded('NSNumber *');
+        default:
+          (typeAnnotation.name: empty);
+          throw new Error(
+            `Unsupported return type for ${methodName}. Found: ${typeAnnotation.name}`,
+          );
+      }
+    case 'StringTypeAnnotation':
+      // TODO: Can NSString * returns not be _Nullable?
+      // In the legacy codegen, we don't surround NSSTring * with _Nullable
+      return wrapIntoNullableIfNeeded('NSString *');
+    case 'NumberTypeAnnotation':
+      return wrapIntoNullableIfNeeded('NSNumber *');
+    case 'FloatTypeAnnotation':
+      return wrapIntoNullableIfNeeded('NSNumber *');
+    case 'DoubleTypeAnnotation':
+      return wrapIntoNullableIfNeeded('NSNumber *');
+    case 'Int32TypeAnnotation':
+      return wrapIntoNullableIfNeeded('NSNumber *');
+    case 'BooleanTypeAnnotation':
+      return wrapIntoNullableIfNeeded('NSNumber *');
+    case 'GenericObjectTypeAnnotation':
+      return wrapIntoNullableIfNeeded('NSDictionary *');
+    default:
+      (typeAnnotation.type: empty);
+      throw new Error(
+        `Unsupported return type for ${methodName}. Found: ${typeAnnotation.type}`,
+      );
+  }
+}
+
+function getReturnJSType(
+  methodName: string,
+  nullableTypeAnnotation: Nullable<NativeModuleReturnTypeAnnotation>,
+): ReturnJSType {
+  const [typeAnnotation] = unwrapNullable(nullableTypeAnnotation);
+  switch (typeAnnotation.type) {
+    case 'VoidTypeAnnotation':
+      return 'VoidKind';
+    case 'PromiseTypeAnnotation':
+      return 'PromiseKind';
+    case 'ObjectTypeAnnotation':
+      return 'ObjectKind';
+    case 'TypeAliasTypeAnnotation':
+      return 'ObjectKind';
+    case 'ArrayTypeAnnotation':
+      return 'ArrayKind';
+    case 'ReservedTypeAnnotation':
+      return 'NumberKind';
+    case 'StringTypeAnnotation':
+      return 'StringKind';
+    case 'NumberTypeAnnotation':
+      return 'NumberKind';
+    case 'FloatTypeAnnotation':
+      return 'NumberKind';
+    case 'DoubleTypeAnnotation':
+      return 'NumberKind';
+    case 'Int32TypeAnnotation':
+      return 'NumberKind';
+    case 'BooleanTypeAnnotation':
+      return 'BooleanKind';
+    case 'GenericObjectTypeAnnotation':
+      return 'ObjectKind';
+    default:
+      (typeAnnotation.type: empty);
+      throw new Error(
+        `Unsupported return type for ${methodName}. Found: ${typeAnnotation.type}`,
+      );
+  }
+}
+
+function serializeConstantsProtocolMethods(
+  hasteModuleName: string,
+  property: NativeModulePropertyShape,
+  structCollector: StructCollector,
+  resolveAlias: AliasResolver,
+): $ReadOnlyArray<MethodSerializationOutput> {
+  const [propertyTypeAnnotation] = unwrapNullable(property.typeAnnotation);
+  if (propertyTypeAnnotation.params.length !== 0) {
+    throw new Error(
+      `${hasteModuleName}.getConstants() may only accept 0 arguments.`,
+    );
+  }
+
+  const {returnTypeAnnotation} = propertyTypeAnnotation;
+  if (returnTypeAnnotation.type !== 'ObjectTypeAnnotation') {
+    throw new Error(
+      `${hasteModuleName}.getConstants() may only return an object literal: {...}.`,
+    );
+  }
+
+  if (returnTypeAnnotation.properties.length === 0) {
+    return [];
+  }
+
+  const realTypeAnnotation = structCollector.process(
+    'Constants',
+    'CONSTANTS',
+    resolveAlias,
+    returnTypeAnnotation,
+  );
+
+  invariant(
+    realTypeAnnotation.type === 'TypeAliasTypeAnnotation',
+    "Unable to generate C++ struct from module's getConstants() method return type.",
+  );
+
+  const returnObjCType = `facebook::react::ModuleConstants<JS::${hasteModuleName}::Constants::Builder>`;
+
+  // $FlowFixMe[missing-type-arg]
+  return ['constantsToExport', 'getConstants'].map<MethodSerializationOutput>(
+    methodName => {
+      const protocolMethod = ProtocolMethodTemplate({
+        methodName,
+        returnObjCType,
+        params: '',
+      });
+
+      return {
+        methodName,
+        protocolMethod,
+        returnJSType: 'ObjectKind',
+        selector: `@selector(${methodName})`,
+        structParamRecords: [],
+        argCount: 0,
+      };
+    },
+  );
+}
+
+module.exports = {
+  serializeMethod,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleObjCpp/source/serializeModule.js b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleObjCpp/source/serializeModule.js
new file mode 100644
index 0000000..14796e8
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleObjCpp/source/serializeModule.js
@@ -0,0 +1,121 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+import type {Struct} from '../StructCollector';
+import type {
+  MethodSerializationOutput,
+  StructParameterRecord,
+} from '../serializeMethod';
+
+const ModuleTemplate = ({
+  hasteModuleName,
+  structs,
+  methodSerializationOutputs,
+}: $ReadOnly<{
+  hasteModuleName: string,
+  structs: $ReadOnlyArray<Struct>,
+  methodSerializationOutputs: $ReadOnlyArray<MethodSerializationOutput>,
+}>) => `${structs
+  .map(struct =>
+    RCTCxxConvertCategoryTemplate({hasteModuleName, structName: struct.name}),
+  )
+  .join('\n')}
+namespace facebook {
+  namespace react {
+    ${methodSerializationOutputs
+      .map(serializedMethodParts =>
+        InlineHostFunctionTemplate({
+          hasteModuleName,
+          methodName: serializedMethodParts.methodName,
+          returnJSType: serializedMethodParts.returnJSType,
+          selector: serializedMethodParts.selector,
+        }),
+      )
+      .join('\n')}
+
+    ${hasteModuleName}SpecJSI::${hasteModuleName}SpecJSI(const ObjCTurboModule::InitParams &params)
+      : ObjCTurboModule(params) {
+        ${methodSerializationOutputs
+          .map(({methodName, structParamRecords, argCount}) =>
+            MethodMapEntryTemplate({
+              hasteModuleName,
+              methodName,
+              structParamRecords,
+              argCount,
+            }),
+          )
+          .join('\n' + ' '.repeat(8))}
+    }
+  } // namespace react
+} // namespace facebook`;
+
+const RCTCxxConvertCategoryTemplate = ({
+  hasteModuleName,
+  structName,
+}: $ReadOnly<{
+  hasteModuleName: string,
+  structName: string,
+}>) => `@implementation RCTCxxConvert (${hasteModuleName}_${structName})
++ (RCTManagedPointer *)JS_${hasteModuleName}_${structName}:(id)json
+{
+  return facebook::react::managedPointer<JS::${hasteModuleName}::${structName}>(json);
+}
+@end`;
+
+const InlineHostFunctionTemplate = ({
+  hasteModuleName,
+  methodName,
+  returnJSType,
+  selector,
+}: $ReadOnly<{
+  hasteModuleName: string,
+  methodName: string,
+  returnJSType: string,
+  selector: string,
+}>) => `
+    static facebook::jsi::Value __hostFunction_${hasteModuleName}SpecJSI_${methodName}(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ${returnJSType}, "${methodName}", ${selector}, args, count);
+    }`;
+
+const MethodMapEntryTemplate = ({
+  hasteModuleName,
+  methodName,
+  structParamRecords,
+  argCount,
+}: $ReadOnly<{
+  hasteModuleName: string,
+  methodName: string,
+  structParamRecords: $ReadOnlyArray<StructParameterRecord>,
+  argCount: number,
+}>) => `
+        methodMap_["${methodName}"] = MethodMetadata {${argCount}, __hostFunction_${hasteModuleName}SpecJSI_${methodName}};
+        ${structParamRecords
+          .map(({paramIndex, structName}) => {
+            return `setMethodArgConversionSelector(@"${methodName}", ${paramIndex}, @"JS_${hasteModuleName}_${structName}:");`;
+          })
+          .join('\n' + ' '.repeat(8))}`;
+
+function serializeModuleSource(
+  hasteModuleName: string,
+  structs: $ReadOnlyArray<Struct>,
+  methodSerializationOutputs: $ReadOnlyArray<MethodSerializationOutput>,
+): string {
+  return ModuleTemplate({
+    hasteModuleName,
+    structs: structs.filter(({context}) => context !== 'CONSTANTS'),
+    methodSerializationOutputs,
+  });
+}
+
+module.exports = {
+  serializeModuleSource,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/Utils.js b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/Utils.js
new file mode 100644
index 0000000..10017bb
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/Utils.js
@@ -0,0 +1,53 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+import type {
+  SchemaType,
+  NativeModuleAliasMap,
+  NativeModuleObjectTypeAnnotation,
+  NativeModuleSchema,
+} from '../../CodegenSchema';
+
+const invariant = require('invariant');
+
+export type AliasResolver = (
+  aliasName: string,
+) => NativeModuleObjectTypeAnnotation;
+
+function createAliasResolver(aliasMap: NativeModuleAliasMap): AliasResolver {
+  return (aliasName: string) => {
+    const alias = aliasMap[aliasName];
+    invariant(alias != null, `Unable to resolve type alias '${aliasName}'.`);
+    return alias;
+  };
+}
+
+function getModules(
+  schema: SchemaType,
+): $ReadOnly<{[hasteModuleName: string]: NativeModuleSchema}> {
+  return Object.keys(schema.modules).reduce<{[string]: NativeModuleSchema}>(
+    (modules, hasteModuleName: string) => {
+      const module = schema.modules[hasteModuleName];
+      if (module == null || module.type === 'Component') {
+        return modules;
+      }
+      modules[hasteModuleName] = module;
+      return modules;
+    },
+    {},
+  );
+}
+
+module.exports = {
+  createAliasResolver,
+  getModules,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__test_fixtures__/fixtures.js b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__test_fixtures__/fixtures.js
new file mode 100644
index 0000000..eb1f8dd
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__test_fixtures__/fixtures.js
@@ -0,0 +1,1469 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {SchemaType} from '../../../CodegenSchema.js';
+
+const EMPTY_NATIVE_MODULES: SchemaType = {
+  modules: {
+    NativeSampleTurboModule: {
+      type: 'NativeModule',
+      aliases: {},
+      spec: {
+        properties: [],
+      },
+      moduleNames: ['SampleTurboModule'],
+    },
+  },
+};
+
+const SIMPLE_NATIVE_MODULES: SchemaType = {
+  modules: {
+    NativeSampleTurboModule: {
+      type: 'NativeModule',
+      aliases: {},
+      spec: {
+        properties: [
+          {
+            name: 'getConstants',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'ObjectTypeAnnotation',
+                properties: [
+                  {
+                    optional: false,
+                    name: 'const1',
+                    typeAnnotation: {
+                      type: 'BooleanTypeAnnotation',
+                    },
+                  },
+                  {
+                    optional: false,
+                    name: 'const2',
+                    typeAnnotation: {
+                      type: 'NumberTypeAnnotation',
+                    },
+                  },
+                  {
+                    optional: false,
+                    name: 'const3',
+                    typeAnnotation: {
+                      type: 'StringTypeAnnotation',
+                    },
+                  },
+                ],
+              },
+              params: [],
+            },
+          },
+          {
+            name: 'voidFunc',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'VoidTypeAnnotation',
+              },
+              params: [],
+            },
+          },
+          {
+            name: 'getBool',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'BooleanTypeAnnotation',
+              },
+              params: [
+                {
+                  optional: false,
+                  name: 'arg',
+                  typeAnnotation: {
+                    type: 'BooleanTypeAnnotation',
+                  },
+                },
+              ],
+            },
+          },
+          {
+            name: 'getNumber',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'NumberTypeAnnotation',
+              },
+              params: [
+                {
+                  optional: false,
+                  name: 'arg',
+                  typeAnnotation: {
+                    type: 'NumberTypeAnnotation',
+                  },
+                },
+              ],
+            },
+          },
+          {
+            name: 'getString',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'StringTypeAnnotation',
+              },
+              params: [
+                {
+                  optional: false,
+                  name: 'arg',
+                  typeAnnotation: {
+                    type: 'StringTypeAnnotation',
+                  },
+                },
+              ],
+            },
+          },
+          {
+            name: 'getArray',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'ArrayTypeAnnotation',
+                elementType: {
+                  type: 'GenericObjectTypeAnnotation',
+                },
+              },
+              params: [
+                {
+                  name: 'arg',
+                  optional: false,
+                  typeAnnotation: {
+                    type: 'ArrayTypeAnnotation',
+
+                    elementType: {
+                      type: 'GenericObjectTypeAnnotation',
+                    },
+                  },
+                },
+              ],
+            },
+          },
+          {
+            name: 'getObject',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'GenericObjectTypeAnnotation',
+              },
+              params: [
+                {
+                  optional: false,
+                  name: 'arg',
+                  typeAnnotation: {
+                    type: 'GenericObjectTypeAnnotation',
+                  },
+                },
+              ],
+            },
+          },
+          {
+            name: 'getRootTag',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'ReservedTypeAnnotation',
+                name: 'RootTag',
+              },
+              params: [
+                {
+                  optional: false,
+                  name: 'arg',
+                  typeAnnotation: {
+                    type: 'ReservedTypeAnnotation',
+                    name: 'RootTag',
+                  },
+                },
+              ],
+            },
+          },
+          {
+            name: 'getValue',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'GenericObjectTypeAnnotation',
+              },
+              params: [
+                {
+                  optional: false,
+                  name: 'x',
+                  typeAnnotation: {
+                    type: 'NumberTypeAnnotation',
+                  },
+                },
+                {
+                  optional: false,
+                  name: 'y',
+                  typeAnnotation: {
+                    type: 'StringTypeAnnotation',
+                  },
+                },
+                {
+                  optional: false,
+                  name: 'z',
+                  typeAnnotation: {
+                    type: 'GenericObjectTypeAnnotation',
+                  },
+                },
+              ],
+            },
+          },
+          {
+            name: 'getValueWithCallback',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'VoidTypeAnnotation',
+              },
+              params: [
+                {
+                  name: 'callback',
+                  optional: false,
+                  typeAnnotation: {
+                    type: 'FunctionTypeAnnotation',
+                    params: [],
+                    returnTypeAnnotation: {
+                      type: 'VoidTypeAnnotation',
+                    },
+                  },
+                },
+              ],
+            },
+          },
+          {
+            name: 'getValueWithPromise',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'PromiseTypeAnnotation',
+              },
+              params: [
+                {
+                  optional: false,
+                  name: 'error',
+                  typeAnnotation: {
+                    type: 'BooleanTypeAnnotation',
+                  },
+                },
+              ],
+            },
+          },
+        ],
+      },
+      moduleNames: ['SampleTurboModule'],
+    },
+  },
+};
+
+const TWO_MODULES_DIFFERENT_FILES: SchemaType = {
+  modules: {
+    NativeSampleTurboModule: {
+      type: 'NativeModule',
+      aliases: {},
+      spec: {
+        properties: [
+          {
+            name: 'voidFunc',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'VoidTypeAnnotation',
+              },
+              params: [],
+            },
+          },
+        ],
+      },
+      moduleNames: ['SampleTurboModule'],
+    },
+    NativeSampleTurboModule2: {
+      type: 'NativeModule',
+      aliases: {},
+      spec: {
+        properties: [
+          {
+            name: 'getConstants',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'ObjectTypeAnnotation',
+                properties: [],
+              },
+              params: [],
+            },
+          },
+          {
+            name: 'voidFunc',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'VoidTypeAnnotation',
+              },
+              params: [],
+            },
+          },
+        ],
+      },
+      moduleNames: ['SampleTurboModule2'],
+    },
+  },
+};
+
+const COMPLEX_OBJECTS: SchemaType = {
+  modules: {
+    NativeSampleTurboModule: {
+      type: 'NativeModule',
+      aliases: {},
+      spec: {
+        properties: [
+          {
+            name: 'difficult',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'ObjectTypeAnnotation',
+                properties: [
+                  {
+                    optional: false,
+                    name: 'D',
+                    typeAnnotation: {
+                      type: 'BooleanTypeAnnotation',
+                    },
+                  },
+                  {
+                    optional: false,
+                    name: 'E',
+                    typeAnnotation: {
+                      type: 'NumberTypeAnnotation',
+                    },
+                  },
+                  {
+                    optional: false,
+                    name: 'F',
+                    typeAnnotation: {
+                      type: 'StringTypeAnnotation',
+                    },
+                  },
+                ],
+              },
+              params: [
+                {
+                  optional: false,
+                  name: 'A',
+                  typeAnnotation: {
+                    type: 'ObjectTypeAnnotation',
+                    properties: [
+                      {
+                        optional: false,
+                        name: 'D',
+                        typeAnnotation: {
+                          type: 'BooleanTypeAnnotation',
+                        },
+                      },
+                      {
+                        optional: false,
+                        name: 'E',
+                        typeAnnotation: {
+                          type: 'ObjectTypeAnnotation',
+                          properties: [
+                            {
+                              optional: false,
+                              name: 'D',
+                              typeAnnotation: {
+                                type: 'BooleanTypeAnnotation',
+                              },
+                            },
+                            {
+                              optional: false,
+                              name: 'E',
+                              typeAnnotation: {
+                                type: 'NumberTypeAnnotation',
+                              },
+                            },
+                            {
+                              optional: false,
+                              name: 'F',
+                              typeAnnotation: {
+                                type: 'StringTypeAnnotation',
+                              },
+                            },
+                            {
+                              optional: false,
+                              name: 'id',
+                              typeAnnotation: {
+                                type: 'NumberTypeAnnotation',
+                              },
+                            },
+                          ],
+                        },
+                      },
+                      {
+                        optional: false,
+                        name: 'F',
+                        typeAnnotation: {
+                          type: 'StringTypeAnnotation',
+                        },
+                      },
+                    ],
+                  },
+                },
+              ],
+            },
+          },
+          {
+            name: 'optionals',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'VoidTypeAnnotation',
+              },
+              params: [
+                {
+                  optional: false,
+                  name: 'A',
+                  typeAnnotation: {
+                    type: 'ObjectTypeAnnotation',
+                    properties: [
+                      {
+                        optional: true,
+                        name: 'optionalNumberProperty',
+                        typeAnnotation: {
+                          type: 'NumberTypeAnnotation',
+                        },
+                      },
+                      {
+                        optional: true,
+                        name: 'optionalArrayProperty',
+                        typeAnnotation: {
+                          type: 'ArrayTypeAnnotation',
+                          elementType: {
+                            type: 'NumberTypeAnnotation',
+                          },
+                        },
+                      },
+                      {
+                        optional: true,
+                        name: 'optionalObjectProperty',
+                        typeAnnotation: {
+                          type: 'ObjectTypeAnnotation',
+                          properties: [
+                            {
+                              optional: false,
+                              name: 'x',
+                              typeAnnotation: {
+                                type: 'NumberTypeAnnotation',
+                              },
+                            },
+                            {
+                              optional: false,
+                              name: 'y',
+                              typeAnnotation: {
+                                type: 'NumberTypeAnnotation',
+                              },
+                            },
+                          ],
+                        },
+                      },
+                      {
+                        optional: true,
+                        name: 'optionalGenericObjectProperty',
+                        typeAnnotation: {
+                          type: 'GenericObjectTypeAnnotation',
+                        },
+                      },
+                      {
+                        optional: true,
+                        name: 'optionalBooleanTypeProperty',
+                        typeAnnotation: {
+                          type: 'BooleanTypeAnnotation',
+                        },
+                      },
+                    ],
+                  },
+                },
+              ],
+            },
+          },
+          {
+            name: 'optionalMethod',
+            optional: true,
+            typeAnnotation: {
+              type: 'NullableTypeAnnotation',
+              typeAnnotation: {
+                type: 'FunctionTypeAnnotation',
+                returnTypeAnnotation: {
+                  type: 'VoidTypeAnnotation',
+                },
+                params: [
+                  {
+                    optional: false,
+                    name: 'options',
+                    typeAnnotation: {
+                      type: 'GenericObjectTypeAnnotation',
+                    },
+                  },
+                  {
+                    name: 'callback',
+                    optional: false,
+                    typeAnnotation: {
+                      type: 'FunctionTypeAnnotation',
+                      params: [],
+                      returnTypeAnnotation: {
+                        type: 'VoidTypeAnnotation',
+                      },
+                    },
+                  },
+                  {
+                    name: 'extras',
+                    optional: true,
+                    typeAnnotation: {
+                      type: 'ArrayTypeAnnotation',
+                      elementType: {
+                        type: 'ObjectTypeAnnotation',
+                        properties: [
+                          {
+                            optional: false,
+                            name: 'key',
+                            typeAnnotation: {
+                              type: 'StringTypeAnnotation',
+                            },
+                          },
+                          {
+                            optional: false,
+                            name: 'value',
+                            typeAnnotation: {
+                              type: 'GenericObjectTypeAnnotation',
+                            },
+                          },
+                        ],
+                      },
+                    },
+                  },
+                ],
+              },
+            },
+          },
+          {
+            name: 'getArrays',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'VoidTypeAnnotation',
+              },
+              params: [
+                {
+                  optional: false,
+                  name: 'options',
+                  typeAnnotation: {
+                    type: 'ObjectTypeAnnotation',
+                    properties: [
+                      {
+                        optional: false,
+                        name: 'arrayOfNumbers',
+                        typeAnnotation: {
+                          type: 'ArrayTypeAnnotation',
+                          elementType: {
+                            type: 'NumberTypeAnnotation',
+                          },
+                        },
+                      },
+                      {
+                        optional: true,
+                        name: 'optionalArrayOfNumbers',
+                        typeAnnotation: {
+                          type: 'ArrayTypeAnnotation',
+                          elementType: {
+                            type: 'NumberTypeAnnotation',
+                          },
+                        },
+                      },
+                      {
+                        optional: false,
+                        name: 'arrayOfStrings',
+                        typeAnnotation: {
+                          type: 'ArrayTypeAnnotation',
+                          elementType: {
+                            type: 'StringTypeAnnotation',
+                          },
+                        },
+                      },
+                      {
+                        optional: true,
+                        name: 'optionalArrayOfStrings',
+                        typeAnnotation: {
+                          type: 'ArrayTypeAnnotation',
+                          elementType: {
+                            type: 'StringTypeAnnotation',
+                          },
+                        },
+                      },
+                      {
+                        optional: false,
+                        name: 'arrayOfObjects',
+                        typeAnnotation: {
+                          type: 'ArrayTypeAnnotation',
+                          elementType: {
+                            type: 'ObjectTypeAnnotation',
+                            properties: [
+                              {
+                                optional: false,
+                                name: 'numberProperty',
+                                typeAnnotation: {
+                                  type: 'NumberTypeAnnotation',
+                                },
+                              },
+                            ],
+                          },
+                        },
+                      },
+                    ],
+                  },
+                },
+              ],
+            },
+          },
+        ],
+      },
+      moduleNames: ['SampleTurboModule'],
+    },
+  },
+};
+
+const NATIVE_MODULES_WITH_TYPE_ALIASES: SchemaType = {
+  modules: {
+    AliasTurboModule: {
+      type: 'NativeModule',
+      aliases: {
+        Options: {
+          type: 'ObjectTypeAnnotation',
+          properties: [
+            {
+              optional: false,
+              name: 'offset',
+              typeAnnotation: {
+                type: 'ObjectTypeAnnotation',
+                properties: [
+                  {
+                    optional: false,
+                    name: 'x',
+                    typeAnnotation: {
+                      type: 'NumberTypeAnnotation',
+                    },
+                  },
+                  {
+                    optional: false,
+                    name: 'y',
+                    typeAnnotation: {
+                      type: 'NumberTypeAnnotation',
+                    },
+                  },
+                ],
+              },
+            },
+            {
+              optional: false,
+              name: 'size',
+              typeAnnotation: {
+                type: 'ObjectTypeAnnotation',
+                properties: [
+                  {
+                    optional: false,
+                    name: 'width',
+                    typeAnnotation: {
+                      type: 'NumberTypeAnnotation',
+                    },
+                  },
+                  {
+                    optional: false,
+                    name: 'height',
+                    typeAnnotation: {
+                      type: 'NumberTypeAnnotation',
+                    },
+                  },
+                ],
+              },
+            },
+            {
+              optional: true,
+              name: 'displaySize',
+              typeAnnotation: {
+                type: 'ObjectTypeAnnotation',
+                properties: [
+                  {
+                    optional: false,
+                    name: 'width',
+                    typeAnnotation: {
+                      type: 'NumberTypeAnnotation',
+                    },
+                  },
+                  {
+                    optional: false,
+                    name: 'height',
+                    typeAnnotation: {
+                      type: 'NumberTypeAnnotation',
+                    },
+                  },
+                ],
+              },
+            },
+            {
+              optional: true,
+              name: 'resizeMode',
+              typeAnnotation: {
+                type: 'StringTypeAnnotation',
+              },
+            },
+            {
+              optional: true,
+              name: 'allowExternalStorage',
+              typeAnnotation: {
+                type: 'BooleanTypeAnnotation',
+              },
+            },
+          ],
+        },
+      },
+      spec: {
+        properties: [
+          {
+            name: 'getConstants',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'ObjectTypeAnnotation',
+                properties: [],
+              },
+              params: [],
+            },
+          },
+          {
+            name: 'cropImage',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'VoidTypeAnnotation',
+              },
+              params: [
+                {
+                  optional: false,
+                  name: 'cropData',
+                  typeAnnotation: {
+                    type: 'TypeAliasTypeAnnotation',
+                    name: 'Options',
+                  },
+                },
+              ],
+            },
+          },
+        ],
+      },
+      moduleNames: ['AliasTurboModule'],
+    },
+  },
+};
+
+const REAL_MODULE_EXAMPLE: SchemaType = {
+  modules: {
+    NativeCameraRollManager: {
+      type: 'NativeModule',
+      aliases: {
+        PhotoIdentifierImage: {
+          type: 'ObjectTypeAnnotation',
+          properties: [
+            {
+              optional: false,
+              name: 'uri',
+              typeAnnotation: {
+                type: 'StringTypeAnnotation',
+              },
+            },
+            {
+              optional: false,
+              name: 'playableDuration',
+              typeAnnotation: {
+                type: 'NumberTypeAnnotation',
+              },
+            },
+            {
+              optional: false,
+              name: 'width',
+              typeAnnotation: {
+                type: 'NumberTypeAnnotation',
+              },
+            },
+            {
+              optional: false,
+              name: 'height',
+              typeAnnotation: {
+                type: 'NumberTypeAnnotation',
+              },
+            },
+            {
+              optional: true,
+              name: 'isStored',
+              typeAnnotation: {
+                type: 'BooleanTypeAnnotation',
+              },
+            },
+            {
+              optional: false,
+              name: 'filename',
+              typeAnnotation: {
+                type: 'StringTypeAnnotation',
+              },
+            },
+          ],
+        },
+        PhotoIdentifier: {
+          type: 'ObjectTypeAnnotation',
+          properties: [
+            {
+              optional: false,
+              name: 'node',
+              typeAnnotation: {
+                type: 'ObjectTypeAnnotation',
+                properties: [
+                  {
+                    optional: false,
+                    name: 'image',
+                    typeAnnotation: {
+                      type: 'TypeAliasTypeAnnotation',
+                      name: 'PhotoIdentifierImage',
+                    },
+                  },
+                  {
+                    optional: false,
+                    name: 'type',
+                    typeAnnotation: {
+                      type: 'StringTypeAnnotation',
+                    },
+                  },
+                  {
+                    optional: false,
+                    name: 'group_name',
+                    typeAnnotation: {
+                      type: 'StringTypeAnnotation',
+                    },
+                  },
+                  {
+                    optional: false,
+                    name: 'timestamp',
+                    typeAnnotation: {
+                      type: 'NumberTypeAnnotation',
+                    },
+                  },
+                  {
+                    optional: false,
+                    name: 'location',
+                    typeAnnotation: {
+                      type: 'ObjectTypeAnnotation',
+                      properties: [
+                        {
+                          optional: false,
+                          name: 'longitude',
+                          typeAnnotation: {
+                            type: 'NumberTypeAnnotation',
+                          },
+                        },
+                        {
+                          optional: false,
+                          name: 'latitude',
+                          typeAnnotation: {
+                            type: 'NumberTypeAnnotation',
+                          },
+                        },
+                        {
+                          optional: true,
+                          name: 'altitude',
+                          typeAnnotation: {
+                            type: 'NumberTypeAnnotation',
+                          },
+                        },
+                        {
+                          optional: true,
+                          name: 'heading',
+                          typeAnnotation: {
+                            type: 'NumberTypeAnnotation',
+                          },
+                        },
+                        {
+                          optional: true,
+                          name: 'speed',
+                          typeAnnotation: {
+                            type: 'NumberTypeAnnotation',
+                          },
+                        },
+                      ],
+                    },
+                  },
+                ],
+              },
+            },
+          ],
+        },
+        PhotoIdentifiersPage: {
+          type: 'ObjectTypeAnnotation',
+          properties: [
+            {
+              optional: false,
+              name: 'edges',
+              typeAnnotation: {
+                type: 'ArrayTypeAnnotation',
+                elementType: {
+                  type: 'TypeAliasTypeAnnotation',
+                  name: 'PhotoIdentifier',
+                },
+              },
+            },
+            {
+              optional: false,
+              name: 'page_info',
+              typeAnnotation: {
+                type: 'ObjectTypeAnnotation',
+                properties: [
+                  {
+                    optional: false,
+                    name: 'has_next_page',
+                    typeAnnotation: {
+                      type: 'BooleanTypeAnnotation',
+                    },
+                  },
+                  {
+                    optional: true,
+                    name: 'start_cursor',
+                    typeAnnotation: {
+                      type: 'StringTypeAnnotation',
+                    },
+                  },
+                  {
+                    optional: true,
+                    name: 'end_cursor',
+                    typeAnnotation: {
+                      type: 'StringTypeAnnotation',
+                    },
+                  },
+                ],
+              },
+            },
+          ],
+        },
+        GetPhotosParams: {
+          type: 'ObjectTypeAnnotation',
+          properties: [
+            {
+              optional: false,
+              name: 'first',
+              typeAnnotation: {
+                type: 'NumberTypeAnnotation',
+              },
+            },
+            {
+              optional: true,
+              name: 'after',
+              typeAnnotation: {
+                type: 'StringTypeAnnotation',
+              },
+            },
+            {
+              optional: true,
+              name: 'groupName',
+              typeAnnotation: {
+                type: 'StringTypeAnnotation',
+              },
+            },
+            {
+              optional: true,
+              name: 'groupTypes',
+              typeAnnotation: {
+                type: 'StringTypeAnnotation',
+              },
+            },
+            {
+              optional: true,
+              name: 'assetType',
+              typeAnnotation: {
+                type: 'StringTypeAnnotation',
+              },
+            },
+            {
+              optional: true,
+              name: 'maxSize',
+              typeAnnotation: {
+                type: 'NumberTypeAnnotation',
+              },
+            },
+            {
+              optional: true,
+              name: 'mimeTypes',
+              typeAnnotation: {
+                type: 'ArrayTypeAnnotation',
+                elementType: {
+                  type: 'StringTypeAnnotation',
+                },
+              },
+            },
+          ],
+        },
+      },
+      spec: {
+        properties: [
+          {
+            name: 'getConstants',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'ObjectTypeAnnotation',
+                properties: [],
+              },
+              params: [],
+            },
+          },
+          {
+            name: 'getPhotos',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'PromiseTypeAnnotation',
+              },
+              params: [
+                {
+                  optional: false,
+                  name: 'params',
+                  typeAnnotation: {
+                    type: 'TypeAliasTypeAnnotation',
+                    name: 'GetPhotosParams',
+                  },
+                },
+              ],
+            },
+          },
+          {
+            name: 'saveToCameraRoll',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'PromiseTypeAnnotation',
+              },
+              params: [
+                {
+                  optional: false,
+                  name: 'uri',
+                  typeAnnotation: {
+                    type: 'StringTypeAnnotation',
+                  },
+                },
+                {
+                  optional: false,
+                  name: 'type',
+                  typeAnnotation: {
+                    type: 'StringTypeAnnotation',
+                  },
+                },
+              ],
+            },
+          },
+          {
+            name: 'deletePhotos',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'PromiseTypeAnnotation',
+              },
+              params: [
+                {
+                  name: 'assets',
+                  optional: false,
+                  typeAnnotation: {
+                    type: 'ArrayTypeAnnotation',
+                    elementType: {
+                      type: 'StringTypeAnnotation',
+                    },
+                  },
+                },
+              ],
+            },
+          },
+        ],
+      },
+      moduleNames: ['CameraRollManager'],
+    },
+    NativeImagePickerIOS: {
+      type: 'NativeModule',
+      aliases: {},
+      spec: {
+        properties: [
+          {
+            name: 'openCameraDialog',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'VoidTypeAnnotation',
+              },
+              params: [
+                {
+                  optional: false,
+                  name: 'config',
+                  typeAnnotation: {
+                    type: 'ObjectTypeAnnotation',
+                    properties: [
+                      {
+                        optional: false,
+                        name: 'unmirrorFrontFacingCamera',
+                        typeAnnotation: {
+                          type: 'BooleanTypeAnnotation',
+                        },
+                      },
+                      {
+                        optional: false,
+                        name: 'videoMode',
+                        typeAnnotation: {
+                          type: 'BooleanTypeAnnotation',
+                        },
+                      },
+                    ],
+                  },
+                },
+                {
+                  name: 'successCallback',
+                  optional: false,
+                  typeAnnotation: {
+                    type: 'FunctionTypeAnnotation',
+                    params: [],
+                    returnTypeAnnotation: {
+                      type: 'VoidTypeAnnotation',
+                    },
+                  },
+                },
+                {
+                  name: 'cancelCallback',
+                  optional: false,
+                  typeAnnotation: {
+                    type: 'FunctionTypeAnnotation',
+                    params: [],
+                    returnTypeAnnotation: {
+                      type: 'VoidTypeAnnotation',
+                    },
+                  },
+                },
+              ],
+            },
+          },
+        ],
+      },
+      moduleNames: ['ImagePickerIOS'],
+      excludedPlatforms: ['android'],
+    },
+    NativeExceptionsManager: {
+      type: 'NativeModule',
+      aliases: {
+        StackFrame: {
+          properties: [
+            {
+              optional: true,
+              name: 'column',
+              typeAnnotation: {
+                type: 'NumberTypeAnnotation',
+              },
+            },
+            {
+              optional: false,
+              name: 'file',
+              typeAnnotation: {
+                type: 'StringTypeAnnotation',
+              },
+            },
+            {
+              optional: true,
+              name: 'lineNumber',
+              typeAnnotation: {
+                type: 'NumberTypeAnnotation',
+              },
+            },
+            {
+              optional: false,
+              name: 'methodName',
+              typeAnnotation: {
+                type: 'StringTypeAnnotation',
+              },
+            },
+            {
+              optional: true,
+              name: 'collapse',
+              typeAnnotation: {
+                type: 'BooleanTypeAnnotation',
+              },
+            },
+          ],
+          type: 'ObjectTypeAnnotation',
+        },
+        ExceptionData: {
+          properties: [
+            {
+              optional: false,
+              name: 'message',
+              typeAnnotation: {
+                type: 'StringTypeAnnotation',
+              },
+            },
+            {
+              optional: false,
+              name: 'originalMessage',
+              typeAnnotation: {
+                type: 'StringTypeAnnotation',
+              },
+            },
+            {
+              optional: false,
+              name: 'name',
+              typeAnnotation: {
+                type: 'StringTypeAnnotation',
+              },
+            },
+            {
+              optional: false,
+              name: 'componentStack',
+              typeAnnotation: {
+                type: 'StringTypeAnnotation',
+              },
+            },
+            {
+              optional: false,
+              name: 'stack',
+              typeAnnotation: {
+                type: 'ArrayTypeAnnotation',
+                elementType: {
+                  type: 'TypeAliasTypeAnnotation',
+                  name: 'StackFrame',
+                },
+              },
+            },
+            {
+              optional: false,
+              name: 'id',
+              typeAnnotation: {
+                type: 'NumberTypeAnnotation',
+              },
+            },
+            {
+              optional: false,
+              name: 'isFatal',
+              typeAnnotation: {
+                type: 'BooleanTypeAnnotation',
+              },
+            },
+            {
+              optional: true,
+              name: 'extraData',
+              typeAnnotation: {
+                type: 'GenericObjectTypeAnnotation',
+              },
+            },
+          ],
+          type: 'ObjectTypeAnnotation',
+        },
+      },
+      spec: {
+        properties: [
+          {
+            name: 'reportFatalException',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'VoidTypeAnnotation',
+              },
+              params: [
+                {
+                  optional: false,
+                  name: 'message',
+                  typeAnnotation: {
+                    type: 'StringTypeAnnotation',
+                  },
+                },
+                {
+                  name: 'stack',
+                  optional: false,
+                  typeAnnotation: {
+                    type: 'ArrayTypeAnnotation',
+                    elementType: {
+                      type: 'TypeAliasTypeAnnotation',
+                      name: 'StackFrame',
+                    },
+                  },
+                },
+                {
+                  optional: false,
+                  name: 'exceptionId',
+                  typeAnnotation: {
+                    type: 'NumberTypeAnnotation',
+                  },
+                },
+              ],
+            },
+          },
+          {
+            name: 'reportSoftException',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'VoidTypeAnnotation',
+              },
+              params: [
+                {
+                  optional: false,
+                  name: 'message',
+                  typeAnnotation: {
+                    type: 'StringTypeAnnotation',
+                  },
+                },
+                {
+                  name: 'stack',
+                  optional: false,
+                  typeAnnotation: {
+                    type: 'ArrayTypeAnnotation',
+                    elementType: {
+                      type: 'TypeAliasTypeAnnotation',
+                      name: 'StackFrame',
+                    },
+                  },
+                },
+                {
+                  optional: false,
+                  name: 'exceptionId',
+                  typeAnnotation: {
+                    type: 'NumberTypeAnnotation',
+                  },
+                },
+              ],
+            },
+          },
+          {
+            name: 'reportException',
+            optional: true,
+            typeAnnotation: {
+              type: 'NullableTypeAnnotation',
+              typeAnnotation: {
+                type: 'FunctionTypeAnnotation',
+                returnTypeAnnotation: {
+                  type: 'VoidTypeAnnotation',
+                },
+                params: [
+                  {
+                    optional: false,
+                    name: 'data',
+                    typeAnnotation: {
+                      type: 'TypeAliasTypeAnnotation',
+                      name: 'ExceptionData',
+                    },
+                  },
+                ],
+              },
+            },
+          },
+          {
+            name: 'updateExceptionMessage',
+            optional: false,
+            typeAnnotation: {
+              type: 'FunctionTypeAnnotation',
+              returnTypeAnnotation: {
+                type: 'VoidTypeAnnotation',
+              },
+              params: [
+                {
+                  optional: false,
+                  name: 'message',
+                  typeAnnotation: {
+                    type: 'StringTypeAnnotation',
+                  },
+                },
+                {
+                  name: 'stack',
+                  optional: false,
+                  typeAnnotation: {
+                    type: 'ArrayTypeAnnotation',
+                    elementType: {
+                      type: 'TypeAliasTypeAnnotation',
+                      name: 'StackFrame',
+                    },
+                  },
+                },
+                {
+                  optional: false,
+                  name: 'exceptionId',
+                  typeAnnotation: {
+                    type: 'NumberTypeAnnotation',
+                  },
+                },
+              ],
+            },
+          },
+          {
+            name: 'dismissRedbox',
+            optional: true,
+            typeAnnotation: {
+              type: 'NullableTypeAnnotation',
+              typeAnnotation: {
+                type: 'FunctionTypeAnnotation',
+                returnTypeAnnotation: {
+                  type: 'VoidTypeAnnotation',
+                },
+                params: [],
+              },
+            },
+          },
+        ],
+      },
+      moduleNames: ['ExceptionsManager'],
+    },
+  },
+};
+
+module.exports = {
+  COMPLEX_OBJECTS,
+  TWO_MODULES_DIFFERENT_FILES,
+  EMPTY_NATIVE_MODULES,
+  SIMPLE_NATIVE_MODULES,
+  NATIVE_MODULES_WITH_TYPE_ALIASES,
+  REAL_MODULE_EXAMPLE,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/GenerateModuleCpp-test.js b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/GenerateModuleCpp-test.js
new file mode 100644
index 0000000..a03ef05
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/GenerateModuleCpp-test.js
@@ -0,0 +1,33 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @emails oncall+react_native
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const fixtures = require('../__test_fixtures__/fixtures.js');
+const generator = require('../GenerateModuleCpp.js');
+
+describe('GenerateModuleCpp', () => {
+  Object.keys(fixtures)
+    .sort()
+    .forEach(fixtureName => {
+      const fixture = fixtures[fixtureName];
+
+      it(`can generate fixture ${fixtureName}`, () => {
+        expect(
+          generator.generate(
+            fixtureName,
+            fixture,
+            'com.facebook.fbreact.specs',
+          ),
+        ).toMatchSnapshot();
+      });
+    });
+});
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/GenerateModuleH-test.js b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/GenerateModuleH-test.js
new file mode 100644
index 0000000..3acbc7f
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/GenerateModuleH-test.js
@@ -0,0 +1,33 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @emails oncall+react_native
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const fixtures = require('../__test_fixtures__/fixtures.js');
+const generator = require('../GenerateModuleH.js');
+
+describe('GenerateModuleH', () => {
+  Object.keys(fixtures)
+    .sort()
+    .forEach(fixtureName => {
+      const fixture = fixtures[fixtureName];
+
+      it(`can generate fixture ${fixtureName}`, () => {
+        expect(
+          generator.generate(
+            fixtureName,
+            fixture,
+            'com.facebook.fbreact.specs',
+          ),
+        ).toMatchSnapshot();
+      });
+    });
+});
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/GenerateModuleHObjCpp-test.js b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/GenerateModuleHObjCpp-test.js
new file mode 100644
index 0000000..e73d46f
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/GenerateModuleHObjCpp-test.js
@@ -0,0 +1,35 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @emails oncall+react_native
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const fixtures = require('../__test_fixtures__/fixtures.js');
+const generator = require('../GenerateModuleObjCpp');
+
+describe('GenerateModuleHObjCpp', () => {
+  Object.keys(fixtures)
+    .sort()
+    .forEach(fixtureName => {
+      const fixture = fixtures[fixtureName];
+
+      it(`can generate fixture ${fixtureName}`, () => {
+        const output = generator.generate(
+          fixtureName,
+          fixture,
+          'com.facebook.fbreact.specs',
+          false,
+        );
+        expect(
+          new Map([[`${fixtureName}.h`, output.get(`${fixtureName}.h`)]]),
+        ).toMatchSnapshot();
+      });
+    });
+});
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/GenerateModuleJavaSpec-test.js b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/GenerateModuleJavaSpec-test.js
new file mode 100644
index 0000000..854d213
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/GenerateModuleJavaSpec-test.js
@@ -0,0 +1,33 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @emails oncall+react_native
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const fixtures = require('../__test_fixtures__/fixtures.js');
+const generator = require('../GenerateModuleJavaSpec.js');
+
+describe('GenerateModuleJavaSpec', () => {
+  Object.keys(fixtures)
+    .sort()
+    .forEach(fixtureName => {
+      const fixture = fixtures[fixtureName];
+
+      it(`can generate fixture ${fixtureName}`, () => {
+        expect(
+          generator.generate(
+            fixtureName,
+            fixture,
+            'com.facebook.fbreact.specs',
+          ),
+        ).toMatchSnapshot();
+      });
+    });
+});
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/GenerateModuleJniCpp-test.js b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/GenerateModuleJniCpp-test.js
new file mode 100644
index 0000000..0dfc249
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/GenerateModuleJniCpp-test.js
@@ -0,0 +1,33 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @emails oncall+react_native
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const fixtures = require('../__test_fixtures__/fixtures.js');
+const generator = require('../GenerateModuleJniCpp.js');
+
+describe('GenerateModuleJniCpp', () => {
+  Object.keys(fixtures)
+    .sort()
+    .forEach(fixtureName => {
+      const fixture = fixtures[fixtureName];
+
+      it(`can generate fixture ${fixtureName}`, () => {
+        expect(
+          generator.generate(
+            fixtureName,
+            fixture,
+            'com.facebook.fbreact.specs',
+          ),
+        ).toMatchSnapshot();
+      });
+    });
+});
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/GenerateModuleJniH-test.js b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/GenerateModuleJniH-test.js
new file mode 100644
index 0000000..4e9e116
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/GenerateModuleJniH-test.js
@@ -0,0 +1,33 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @emails oncall+react_native
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const fixtures = require('../__test_fixtures__/fixtures.js');
+const generator = require('../GenerateModuleJniH.js');
+
+describe('GenerateModuleJniH', () => {
+  Object.keys(fixtures)
+    .sort()
+    .forEach(fixtureName => {
+      const fixture = fixtures[fixtureName];
+
+      it(`can generate fixture ${fixtureName}`, () => {
+        expect(
+          generator.generate(
+            fixtureName,
+            fixture,
+            'com.facebook.fbreact.specs',
+          ),
+        ).toMatchSnapshot();
+      });
+    });
+});
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/GenerateModuleMm-test.js b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/GenerateModuleMm-test.js
new file mode 100644
index 0000000..c1a4feb
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/GenerateModuleMm-test.js
@@ -0,0 +1,40 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @emails oncall+react_native
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const fixtures = require('../__test_fixtures__/fixtures.js');
+const generator = require('../GenerateModuleObjCpp');
+
+describe('GenerateModuleMm', () => {
+  Object.keys(fixtures)
+    .sort()
+    .forEach(fixtureName => {
+      const fixture = fixtures[fixtureName];
+
+      it(`can generate fixture ${fixtureName}`, () => {
+        const output = generator.generate(
+          fixtureName,
+          fixture,
+          'com.facebook.fbreact.specs',
+          false,
+        );
+        expect(
+          new Map([
+            [
+              `${fixtureName}-generated.mm`,
+              output.get(`${fixtureName}-generated.mm`),
+            ],
+          ]),
+        ).toMatchSnapshot();
+      });
+    });
+});
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/__snapshots__/GenerateModuleCpp-test.js.snap b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/__snapshots__/GenerateModuleCpp-test.js.snap
new file mode 100644
index 0000000..4b0e7d2
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/__snapshots__/GenerateModuleCpp-test.js.snap
@@ -0,0 +1,317 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GenerateModuleCpp can generate fixture COMPLEX_OBJECTS 1`] = `
+Map {
+  "NativeModules.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleH.js
+ */
+
+#include <react/modules/COMPLEX_OBJECTS/NativeModules.h>
+
+namespace facebook {
+namespace react {
+
+static jsi::Value __hostFunction_NativeSampleTurboModuleCxxSpecJSI_difficult(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeSampleTurboModuleCxxSpecJSI *>(&turboModule)->difficult(rt, args[0].getObject(rt));
+}
+static jsi::Value __hostFunction_NativeSampleTurboModuleCxxSpecJSI_optionals(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  static_cast<NativeSampleTurboModuleCxxSpecJSI *>(&turboModule)->optionals(rt, args[0].getObject(rt));
+  return jsi::Value::undefined();
+}
+static jsi::Value __hostFunction_NativeSampleTurboModuleCxxSpecJSI_optionalMethod(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  static_cast<NativeSampleTurboModuleCxxSpecJSI *>(&turboModule)->optionalMethod(rt, args[0].getObject(rt), std::move(args[1].getObject(rt).getFunction(rt)), args[2].getObject(rt).getArray(rt));
+  return jsi::Value::undefined();
+}
+static jsi::Value __hostFunction_NativeSampleTurboModuleCxxSpecJSI_getArrays(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  static_cast<NativeSampleTurboModuleCxxSpecJSI *>(&turboModule)->getArrays(rt, args[0].getObject(rt));
+  return jsi::Value::undefined();
+}
+
+NativeSampleTurboModuleCxxSpecJSI::NativeSampleTurboModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
+  : TurboModule(\\"SampleTurboModule\\", jsInvoker) {
+  methodMap_[\\"difficult\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleCxxSpecJSI_difficult};
+  methodMap_[\\"optionals\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleCxxSpecJSI_optionals};
+  methodMap_[\\"optionalMethod\\"] = MethodMetadata {3, __hostFunction_NativeSampleTurboModuleCxxSpecJSI_optionalMethod};
+  methodMap_[\\"getArrays\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleCxxSpecJSI_getArrays};
+}
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateModuleCpp can generate fixture EMPTY_NATIVE_MODULES 1`] = `
+Map {
+  "NativeModules.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleH.js
+ */
+
+#include <react/modules/EMPTY_NATIVE_MODULES/NativeModules.h>
+
+namespace facebook {
+namespace react {
+
+
+
+NativeSampleTurboModuleCxxSpecJSI::NativeSampleTurboModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
+  : TurboModule(\\"SampleTurboModule\\", jsInvoker) {
+
+}
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateModuleCpp can generate fixture NATIVE_MODULES_WITH_TYPE_ALIASES 1`] = `
+Map {
+  "NativeModules.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleH.js
+ */
+
+#include <react/modules/NATIVE_MODULES_WITH_TYPE_ALIASES/NativeModules.h>
+
+namespace facebook {
+namespace react {
+
+static jsi::Value __hostFunction_AliasTurboModuleCxxSpecJSI_getConstants(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<AliasTurboModuleCxxSpecJSI *>(&turboModule)->getConstants(rt);
+}
+static jsi::Value __hostFunction_AliasTurboModuleCxxSpecJSI_cropImage(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  static_cast<AliasTurboModuleCxxSpecJSI *>(&turboModule)->cropImage(rt, args[0].getObject(rt));
+  return jsi::Value::undefined();
+}
+
+AliasTurboModuleCxxSpecJSI::AliasTurboModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
+  : TurboModule(\\"AliasTurboModule\\", jsInvoker) {
+  methodMap_[\\"getConstants\\"] = MethodMetadata {0, __hostFunction_AliasTurboModuleCxxSpecJSI_getConstants};
+  methodMap_[\\"cropImage\\"] = MethodMetadata {1, __hostFunction_AliasTurboModuleCxxSpecJSI_cropImage};
+}
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateModuleCpp can generate fixture REAL_MODULE_EXAMPLE 1`] = `
+Map {
+  "NativeModules.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleH.js
+ */
+
+#include <react/modules/REAL_MODULE_EXAMPLE/NativeModules.h>
+
+namespace facebook {
+namespace react {
+
+static jsi::Value __hostFunction_NativeCameraRollManagerCxxSpecJSI_getConstants(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeCameraRollManagerCxxSpecJSI *>(&turboModule)->getConstants(rt);
+}
+static jsi::Value __hostFunction_NativeCameraRollManagerCxxSpecJSI_getPhotos(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeCameraRollManagerCxxSpecJSI *>(&turboModule)->getPhotos(rt, args[0].getObject(rt));
+}
+static jsi::Value __hostFunction_NativeCameraRollManagerCxxSpecJSI_saveToCameraRoll(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeCameraRollManagerCxxSpecJSI *>(&turboModule)->saveToCameraRoll(rt, args[0].getString(rt), args[1].getString(rt));
+}
+static jsi::Value __hostFunction_NativeCameraRollManagerCxxSpecJSI_deletePhotos(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeCameraRollManagerCxxSpecJSI *>(&turboModule)->deletePhotos(rt, args[0].getObject(rt).getArray(rt));
+}
+
+NativeCameraRollManagerCxxSpecJSI::NativeCameraRollManagerCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
+  : TurboModule(\\"CameraRollManager\\", jsInvoker) {
+  methodMap_[\\"getConstants\\"] = MethodMetadata {0, __hostFunction_NativeCameraRollManagerCxxSpecJSI_getConstants};
+  methodMap_[\\"getPhotos\\"] = MethodMetadata {1, __hostFunction_NativeCameraRollManagerCxxSpecJSI_getPhotos};
+  methodMap_[\\"saveToCameraRoll\\"] = MethodMetadata {2, __hostFunction_NativeCameraRollManagerCxxSpecJSI_saveToCameraRoll};
+  methodMap_[\\"deletePhotos\\"] = MethodMetadata {1, __hostFunction_NativeCameraRollManagerCxxSpecJSI_deletePhotos};
+}
+static jsi::Value __hostFunction_NativeImagePickerIOSCxxSpecJSI_openCameraDialog(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  static_cast<NativeImagePickerIOSCxxSpecJSI *>(&turboModule)->openCameraDialog(rt, args[0].getObject(rt), std::move(args[1].getObject(rt).getFunction(rt)), std::move(args[2].getObject(rt).getFunction(rt)));
+  return jsi::Value::undefined();
+}
+
+NativeImagePickerIOSCxxSpecJSI::NativeImagePickerIOSCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
+  : TurboModule(\\"ImagePickerIOS\\", jsInvoker) {
+  methodMap_[\\"openCameraDialog\\"] = MethodMetadata {3, __hostFunction_NativeImagePickerIOSCxxSpecJSI_openCameraDialog};
+}
+static jsi::Value __hostFunction_NativeExceptionsManagerCxxSpecJSI_reportFatalException(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  static_cast<NativeExceptionsManagerCxxSpecJSI *>(&turboModule)->reportFatalException(rt, args[0].getString(rt), args[1].getObject(rt).getArray(rt), args[2].getNumber());
+  return jsi::Value::undefined();
+}
+static jsi::Value __hostFunction_NativeExceptionsManagerCxxSpecJSI_reportSoftException(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  static_cast<NativeExceptionsManagerCxxSpecJSI *>(&turboModule)->reportSoftException(rt, args[0].getString(rt), args[1].getObject(rt).getArray(rt), args[2].getNumber());
+  return jsi::Value::undefined();
+}
+static jsi::Value __hostFunction_NativeExceptionsManagerCxxSpecJSI_reportException(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  static_cast<NativeExceptionsManagerCxxSpecJSI *>(&turboModule)->reportException(rt, args[0].getObject(rt));
+  return jsi::Value::undefined();
+}
+static jsi::Value __hostFunction_NativeExceptionsManagerCxxSpecJSI_updateExceptionMessage(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  static_cast<NativeExceptionsManagerCxxSpecJSI *>(&turboModule)->updateExceptionMessage(rt, args[0].getString(rt), args[1].getObject(rt).getArray(rt), args[2].getNumber());
+  return jsi::Value::undefined();
+}
+static jsi::Value __hostFunction_NativeExceptionsManagerCxxSpecJSI_dismissRedbox(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  static_cast<NativeExceptionsManagerCxxSpecJSI *>(&turboModule)->dismissRedbox(rt);
+  return jsi::Value::undefined();
+}
+
+NativeExceptionsManagerCxxSpecJSI::NativeExceptionsManagerCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
+  : TurboModule(\\"ExceptionsManager\\", jsInvoker) {
+  methodMap_[\\"reportFatalException\\"] = MethodMetadata {3, __hostFunction_NativeExceptionsManagerCxxSpecJSI_reportFatalException};
+  methodMap_[\\"reportSoftException\\"] = MethodMetadata {3, __hostFunction_NativeExceptionsManagerCxxSpecJSI_reportSoftException};
+  methodMap_[\\"reportException\\"] = MethodMetadata {1, __hostFunction_NativeExceptionsManagerCxxSpecJSI_reportException};
+  methodMap_[\\"updateExceptionMessage\\"] = MethodMetadata {3, __hostFunction_NativeExceptionsManagerCxxSpecJSI_updateExceptionMessage};
+  methodMap_[\\"dismissRedbox\\"] = MethodMetadata {0, __hostFunction_NativeExceptionsManagerCxxSpecJSI_dismissRedbox};
+}
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateModuleCpp can generate fixture SIMPLE_NATIVE_MODULES 1`] = `
+Map {
+  "NativeModules.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleH.js
+ */
+
+#include <react/modules/SIMPLE_NATIVE_MODULES/NativeModules.h>
+
+namespace facebook {
+namespace react {
+
+static jsi::Value __hostFunction_NativeSampleTurboModuleCxxSpecJSI_getConstants(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeSampleTurboModuleCxxSpecJSI *>(&turboModule)->getConstants(rt);
+}
+static jsi::Value __hostFunction_NativeSampleTurboModuleCxxSpecJSI_voidFunc(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  static_cast<NativeSampleTurboModuleCxxSpecJSI *>(&turboModule)->voidFunc(rt);
+  return jsi::Value::undefined();
+}
+static jsi::Value __hostFunction_NativeSampleTurboModuleCxxSpecJSI_getBool(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeSampleTurboModuleCxxSpecJSI *>(&turboModule)->getBool(rt, args[0].getBool());
+}
+static jsi::Value __hostFunction_NativeSampleTurboModuleCxxSpecJSI_getNumber(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeSampleTurboModuleCxxSpecJSI *>(&turboModule)->getNumber(rt, args[0].getNumber());
+}
+static jsi::Value __hostFunction_NativeSampleTurboModuleCxxSpecJSI_getString(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeSampleTurboModuleCxxSpecJSI *>(&turboModule)->getString(rt, args[0].getString(rt));
+}
+static jsi::Value __hostFunction_NativeSampleTurboModuleCxxSpecJSI_getArray(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeSampleTurboModuleCxxSpecJSI *>(&turboModule)->getArray(rt, args[0].getObject(rt).getArray(rt));
+}
+static jsi::Value __hostFunction_NativeSampleTurboModuleCxxSpecJSI_getObject(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeSampleTurboModuleCxxSpecJSI *>(&turboModule)->getObject(rt, args[0].getObject(rt));
+}
+static jsi::Value __hostFunction_NativeSampleTurboModuleCxxSpecJSI_getRootTag(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeSampleTurboModuleCxxSpecJSI *>(&turboModule)->getRootTag(rt, args[0].getNumber());
+}
+static jsi::Value __hostFunction_NativeSampleTurboModuleCxxSpecJSI_getValue(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeSampleTurboModuleCxxSpecJSI *>(&turboModule)->getValue(rt, args[0].getNumber(), args[1].getString(rt), args[2].getObject(rt));
+}
+static jsi::Value __hostFunction_NativeSampleTurboModuleCxxSpecJSI_getValueWithCallback(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  static_cast<NativeSampleTurboModuleCxxSpecJSI *>(&turboModule)->getValueWithCallback(rt, std::move(args[0].getObject(rt).getFunction(rt)));
+  return jsi::Value::undefined();
+}
+static jsi::Value __hostFunction_NativeSampleTurboModuleCxxSpecJSI_getValueWithPromise(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeSampleTurboModuleCxxSpecJSI *>(&turboModule)->getValueWithPromise(rt, args[0].getBool());
+}
+
+NativeSampleTurboModuleCxxSpecJSI::NativeSampleTurboModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
+  : TurboModule(\\"SampleTurboModule\\", jsInvoker) {
+  methodMap_[\\"getConstants\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleCxxSpecJSI_getConstants};
+  methodMap_[\\"voidFunc\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleCxxSpecJSI_voidFunc};
+  methodMap_[\\"getBool\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleCxxSpecJSI_getBool};
+  methodMap_[\\"getNumber\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleCxxSpecJSI_getNumber};
+  methodMap_[\\"getString\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleCxxSpecJSI_getString};
+  methodMap_[\\"getArray\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleCxxSpecJSI_getArray};
+  methodMap_[\\"getObject\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleCxxSpecJSI_getObject};
+  methodMap_[\\"getRootTag\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleCxxSpecJSI_getRootTag};
+  methodMap_[\\"getValue\\"] = MethodMetadata {3, __hostFunction_NativeSampleTurboModuleCxxSpecJSI_getValue};
+  methodMap_[\\"getValueWithCallback\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleCxxSpecJSI_getValueWithCallback};
+  methodMap_[\\"getValueWithPromise\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleCxxSpecJSI_getValueWithPromise};
+}
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateModuleCpp can generate fixture TWO_MODULES_DIFFERENT_FILES 1`] = `
+Map {
+  "NativeModules.cpp" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleH.js
+ */
+
+#include <react/modules/TWO_MODULES_DIFFERENT_FILES/NativeModules.h>
+
+namespace facebook {
+namespace react {
+
+static jsi::Value __hostFunction_NativeSampleTurboModuleCxxSpecJSI_voidFunc(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  static_cast<NativeSampleTurboModuleCxxSpecJSI *>(&turboModule)->voidFunc(rt);
+  return jsi::Value::undefined();
+}
+
+NativeSampleTurboModuleCxxSpecJSI::NativeSampleTurboModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
+  : TurboModule(\\"SampleTurboModule\\", jsInvoker) {
+  methodMap_[\\"voidFunc\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleCxxSpecJSI_voidFunc};
+}
+static jsi::Value __hostFunction_NativeSampleTurboModule2CxxSpecJSI_getConstants(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeSampleTurboModule2CxxSpecJSI *>(&turboModule)->getConstants(rt);
+}
+static jsi::Value __hostFunction_NativeSampleTurboModule2CxxSpecJSI_voidFunc(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  static_cast<NativeSampleTurboModule2CxxSpecJSI *>(&turboModule)->voidFunc(rt);
+  return jsi::Value::undefined();
+}
+
+NativeSampleTurboModule2CxxSpecJSI::NativeSampleTurboModule2CxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
+  : TurboModule(\\"SampleTurboModule2\\", jsInvoker) {
+  methodMap_[\\"getConstants\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModule2CxxSpecJSI_getConstants};
+  methodMap_[\\"voidFunc\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModule2CxxSpecJSI_voidFunc};
+}
+
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/__snapshots__/GenerateModuleH-test.js.snap b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/__snapshots__/GenerateModuleH-test.js.snap
new file mode 100644
index 0000000..318f5c8
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/__snapshots__/GenerateModuleH-test.js.snap
@@ -0,0 +1,239 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GenerateModuleH can generate fixture COMPLEX_OBJECTS 1`] = `
+Map {
+  "NativeModules.h" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleH.js
+ */
+
+#pragma once
+
+#include <ReactCommon/TurboModule.h>
+
+namespace facebook {
+namespace react {
+class JSI_EXPORT NativeSampleTurboModuleCxxSpecJSI : public TurboModule {
+protected:
+  NativeSampleTurboModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);
+
+public:
+virtual jsi::Object difficult(jsi::Runtime &rt, const jsi::Object &A) = 0;
+virtual void optionals(jsi::Runtime &rt, const jsi::Object &A) = 0;
+virtual void optionalMethod(jsi::Runtime &rt, const jsi::Object &options, const jsi::Function &callback, const jsi::Array &extras) = 0;
+virtual void getArrays(jsi::Runtime &rt, const jsi::Object &options) = 0;
+
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateModuleH can generate fixture EMPTY_NATIVE_MODULES 1`] = `
+Map {
+  "NativeModules.h" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleH.js
+ */
+
+#pragma once
+
+#include <ReactCommon/TurboModule.h>
+
+namespace facebook {
+namespace react {
+class JSI_EXPORT NativeSampleTurboModuleCxxSpecJSI : public TurboModule {
+protected:
+  NativeSampleTurboModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);
+
+public:
+
+
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateModuleH can generate fixture NATIVE_MODULES_WITH_TYPE_ALIASES 1`] = `
+Map {
+  "NativeModules.h" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleH.js
+ */
+
+#pragma once
+
+#include <ReactCommon/TurboModule.h>
+
+namespace facebook {
+namespace react {
+class JSI_EXPORT AliasTurboModuleCxxSpecJSI : public TurboModule {
+protected:
+  AliasTurboModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);
+
+public:
+virtual jsi::Object getConstants(jsi::Runtime &rt) = 0;
+virtual void cropImage(jsi::Runtime &rt, const jsi::Object &cropData) = 0;
+
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateModuleH can generate fixture REAL_MODULE_EXAMPLE 1`] = `
+Map {
+  "NativeModules.h" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleH.js
+ */
+
+#pragma once
+
+#include <ReactCommon/TurboModule.h>
+
+namespace facebook {
+namespace react {
+class JSI_EXPORT NativeCameraRollManagerCxxSpecJSI : public TurboModule {
+protected:
+  NativeCameraRollManagerCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);
+
+public:
+virtual jsi::Object getConstants(jsi::Runtime &rt) = 0;
+virtual jsi::Value getPhotos(jsi::Runtime &rt, const jsi::Object &params) = 0;
+virtual jsi::Value saveToCameraRoll(jsi::Runtime &rt, const jsi::String &uri, const jsi::String &type) = 0;
+virtual jsi::Value deletePhotos(jsi::Runtime &rt, const jsi::Array &assets) = 0;
+
+};
+class JSI_EXPORT NativeImagePickerIOSCxxSpecJSI : public TurboModule {
+protected:
+  NativeImagePickerIOSCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);
+
+public:
+virtual void openCameraDialog(jsi::Runtime &rt, const jsi::Object &config, const jsi::Function &successCallback, const jsi::Function &cancelCallback) = 0;
+
+};
+class JSI_EXPORT NativeExceptionsManagerCxxSpecJSI : public TurboModule {
+protected:
+  NativeExceptionsManagerCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);
+
+public:
+virtual void reportFatalException(jsi::Runtime &rt, const jsi::String &message, const jsi::Array &stack, double exceptionId) = 0;
+virtual void reportSoftException(jsi::Runtime &rt, const jsi::String &message, const jsi::Array &stack, double exceptionId) = 0;
+virtual void reportException(jsi::Runtime &rt, const jsi::Object &data) = 0;
+virtual void updateExceptionMessage(jsi::Runtime &rt, const jsi::String &message, const jsi::Array &stack, double exceptionId) = 0;
+virtual void dismissRedbox(jsi::Runtime &rt) = 0;
+
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateModuleH can generate fixture SIMPLE_NATIVE_MODULES 1`] = `
+Map {
+  "NativeModules.h" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleH.js
+ */
+
+#pragma once
+
+#include <ReactCommon/TurboModule.h>
+
+namespace facebook {
+namespace react {
+class JSI_EXPORT NativeSampleTurboModuleCxxSpecJSI : public TurboModule {
+protected:
+  NativeSampleTurboModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);
+
+public:
+virtual jsi::Object getConstants(jsi::Runtime &rt) = 0;
+virtual void voidFunc(jsi::Runtime &rt) = 0;
+virtual bool getBool(jsi::Runtime &rt, bool arg) = 0;
+virtual double getNumber(jsi::Runtime &rt, double arg) = 0;
+virtual jsi::String getString(jsi::Runtime &rt, const jsi::String &arg) = 0;
+virtual jsi::Array getArray(jsi::Runtime &rt, const jsi::Array &arg) = 0;
+virtual jsi::Object getObject(jsi::Runtime &rt, const jsi::Object &arg) = 0;
+virtual double getRootTag(jsi::Runtime &rt, double arg) = 0;
+virtual jsi::Object getValue(jsi::Runtime &rt, double x, const jsi::String &y, const jsi::Object &z) = 0;
+virtual void getValueWithCallback(jsi::Runtime &rt, const jsi::Function &callback) = 0;
+virtual jsi::Value getValueWithPromise(jsi::Runtime &rt, bool error) = 0;
+
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateModuleH can generate fixture TWO_MODULES_DIFFERENT_FILES 1`] = `
+Map {
+  "NativeModules.h" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleH.js
+ */
+
+#pragma once
+
+#include <ReactCommon/TurboModule.h>
+
+namespace facebook {
+namespace react {
+class JSI_EXPORT NativeSampleTurboModuleCxxSpecJSI : public TurboModule {
+protected:
+  NativeSampleTurboModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);
+
+public:
+virtual void voidFunc(jsi::Runtime &rt) = 0;
+
+};
+class JSI_EXPORT NativeSampleTurboModule2CxxSpecJSI : public TurboModule {
+protected:
+  NativeSampleTurboModule2CxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);
+
+public:
+virtual jsi::Object getConstants(jsi::Runtime &rt) = 0;
+virtual void voidFunc(jsi::Runtime &rt) = 0;
+
+};
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/__snapshots__/GenerateModuleHObjCpp-test.js.snap b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/__snapshots__/GenerateModuleHObjCpp-test.js.snap
new file mode 100644
index 0000000..232d40e
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/__snapshots__/GenerateModuleHObjCpp-test.js.snap
@@ -0,0 +1,946 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GenerateModuleHObjCpp can generate fixture COMPLEX_OBJECTS 1`] = `
+Map {
+  "COMPLEX_OBJECTS.h" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleObjCpp
+ *
+ * We create an umbrella header (and corresponding implementation) here since
+ * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
+ * must have a single output. More files => more genrule()s => slower builds.
+ */
+
+#ifndef __cplusplus
+#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
+#endif
+#import <Foundation/Foundation.h>
+#import <RCTRequired/RCTRequired.h>
+#import <RCTTypeSafety/RCTConvertHelpers.h>
+#import <RCTTypeSafety/RCTTypedModuleConstants.h>
+#import <React/RCTBridgeModule.h>
+#import <React/RCTCxxConvert.h>
+#import <React/RCTManagedPointer.h>
+#import <ReactCommon/RCTTurboModule.h>
+#import <folly/Optional.h>
+#import <vector>
+
+namespace JS {
+  namespace NativeSampleTurboModule {
+    struct SpecDifficultAE {
+      bool D() const;
+      double E() const;
+      NSString *F() const;
+      double id_() const;
+
+      SpecDifficultAE(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeSampleTurboModule_SpecDifficultAE)
++ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecDifficultAE:(id)json;
+@end
+namespace JS {
+  namespace NativeSampleTurboModule {
+    struct SpecDifficultA {
+      bool D() const;
+      JS::NativeSampleTurboModule::SpecDifficultAE E() const;
+      NSString *F() const;
+
+      SpecDifficultA(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeSampleTurboModule_SpecDifficultA)
++ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecDifficultA:(id)json;
+@end
+namespace JS {
+  namespace NativeSampleTurboModule {
+    struct SpecOptionalsAOptionalObjectProperty {
+      double x() const;
+      double y() const;
+
+      SpecOptionalsAOptionalObjectProperty(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeSampleTurboModule_SpecOptionalsAOptionalObjectProperty)
++ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecOptionalsAOptionalObjectProperty:(id)json;
+@end
+namespace JS {
+  namespace NativeSampleTurboModule {
+    struct SpecOptionalsA {
+      folly::Optional<double> optionalNumberProperty() const;
+      folly::Optional<facebook::react::LazyVector<double>> optionalArrayProperty() const;
+      folly::Optional<JS::NativeSampleTurboModule::SpecOptionalsAOptionalObjectProperty> optionalObjectProperty() const;
+      id<NSObject> _Nullable optionalGenericObjectProperty() const;
+      folly::Optional<bool> optionalBooleanTypeProperty() const;
+
+      SpecOptionalsA(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeSampleTurboModule_SpecOptionalsA)
++ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecOptionalsA:(id)json;
+@end
+namespace JS {
+  namespace NativeSampleTurboModule {
+    struct SpecGetArraysOptionsArrayOfObjectsElement {
+      double numberProperty() const;
+
+      SpecGetArraysOptionsArrayOfObjectsElement(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeSampleTurboModule_SpecGetArraysOptionsArrayOfObjectsElement)
++ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecGetArraysOptionsArrayOfObjectsElement:(id)json;
+@end
+namespace JS {
+  namespace NativeSampleTurboModule {
+    struct SpecGetArraysOptions {
+      facebook::react::LazyVector<double> arrayOfNumbers() const;
+      folly::Optional<facebook::react::LazyVector<double>> optionalArrayOfNumbers() const;
+      facebook::react::LazyVector<NSString *> arrayOfStrings() const;
+      folly::Optional<facebook::react::LazyVector<NSString *>> optionalArrayOfStrings() const;
+      facebook::react::LazyVector<JS::NativeSampleTurboModule::SpecGetArraysOptionsArrayOfObjectsElement> arrayOfObjects() const;
+
+      SpecGetArraysOptions(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeSampleTurboModule_SpecGetArraysOptions)
++ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecGetArraysOptions:(id)json;
+@end
+@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
+
+- (NSDictionary *)difficult:(JS::NativeSampleTurboModule::SpecDifficultA &)A;
+- (void)optionals:(JS::NativeSampleTurboModule::SpecOptionalsA &)A;
+- (void)optionalMethod:(NSDictionary *)options
+              callback:(RCTResponseSenderBlock)callback
+                extras:(NSArray *)extras;
+- (void)getArrays:(JS::NativeSampleTurboModule::SpecGetArraysOptions &)options;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeSampleTurboModule'
+     */
+    class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
+    public:
+      NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+inline bool JS::NativeSampleTurboModule::SpecDifficultAE::D() const
+{
+  id const p = _v[@\\"D\\"];
+  return RCTBridgingToBool(p);
+}
+inline double JS::NativeSampleTurboModule::SpecDifficultAE::E() const
+{
+  id const p = _v[@\\"E\\"];
+  return RCTBridgingToDouble(p);
+}
+inline NSString *JS::NativeSampleTurboModule::SpecDifficultAE::F() const
+{
+  id const p = _v[@\\"F\\"];
+  return RCTBridgingToString(p);
+}
+inline double JS::NativeSampleTurboModule::SpecDifficultAE::id_() const
+{
+  id const p = _v[@\\"id\\"];
+  return RCTBridgingToDouble(p);
+}
+inline bool JS::NativeSampleTurboModule::SpecDifficultA::D() const
+{
+  id const p = _v[@\\"D\\"];
+  return RCTBridgingToBool(p);
+}
+inline JS::NativeSampleTurboModule::SpecDifficultAE JS::NativeSampleTurboModule::SpecDifficultA::E() const
+{
+  id const p = _v[@\\"E\\"];
+  return JS::NativeSampleTurboModule::SpecDifficultAE(p);
+}
+inline NSString *JS::NativeSampleTurboModule::SpecDifficultA::F() const
+{
+  id const p = _v[@\\"F\\"];
+  return RCTBridgingToString(p);
+}
+inline double JS::NativeSampleTurboModule::SpecOptionalsAOptionalObjectProperty::x() const
+{
+  id const p = _v[@\\"x\\"];
+  return RCTBridgingToDouble(p);
+}
+inline double JS::NativeSampleTurboModule::SpecOptionalsAOptionalObjectProperty::y() const
+{
+  id const p = _v[@\\"y\\"];
+  return RCTBridgingToDouble(p);
+}
+inline folly::Optional<double> JS::NativeSampleTurboModule::SpecOptionalsA::optionalNumberProperty() const
+{
+  id const p = _v[@\\"optionalNumberProperty\\"];
+  return RCTBridgingToOptionalDouble(p);
+}
+inline folly::Optional<facebook::react::LazyVector<double>> JS::NativeSampleTurboModule::SpecOptionalsA::optionalArrayProperty() const
+{
+  id const p = _v[@\\"optionalArrayProperty\\"];
+  return RCTBridgingToOptionalVec(p, ^double(id itemValue_0) { return RCTBridgingToDouble(itemValue_0); });
+}
+inline folly::Optional<JS::NativeSampleTurboModule::SpecOptionalsAOptionalObjectProperty> JS::NativeSampleTurboModule::SpecOptionalsA::optionalObjectProperty() const
+{
+  id const p = _v[@\\"optionalObjectProperty\\"];
+  return (p == nil ? folly::none : folly::make_optional(JS::NativeSampleTurboModule::SpecOptionalsAOptionalObjectProperty(p)));
+}
+inline id<NSObject> _Nullable JS::NativeSampleTurboModule::SpecOptionalsA::optionalGenericObjectProperty() const
+{
+  id const p = _v[@\\"optionalGenericObjectProperty\\"];
+  return p;
+}
+inline folly::Optional<bool> JS::NativeSampleTurboModule::SpecOptionalsA::optionalBooleanTypeProperty() const
+{
+  id const p = _v[@\\"optionalBooleanTypeProperty\\"];
+  return RCTBridgingToOptionalBool(p);
+}
+inline double JS::NativeSampleTurboModule::SpecGetArraysOptionsArrayOfObjectsElement::numberProperty() const
+{
+  id const p = _v[@\\"numberProperty\\"];
+  return RCTBridgingToDouble(p);
+}
+inline facebook::react::LazyVector<double> JS::NativeSampleTurboModule::SpecGetArraysOptions::arrayOfNumbers() const
+{
+  id const p = _v[@\\"arrayOfNumbers\\"];
+  return RCTBridgingToVec(p, ^double(id itemValue_0) { return RCTBridgingToDouble(itemValue_0); });
+}
+inline folly::Optional<facebook::react::LazyVector<double>> JS::NativeSampleTurboModule::SpecGetArraysOptions::optionalArrayOfNumbers() const
+{
+  id const p = _v[@\\"optionalArrayOfNumbers\\"];
+  return RCTBridgingToOptionalVec(p, ^double(id itemValue_0) { return RCTBridgingToDouble(itemValue_0); });
+}
+inline facebook::react::LazyVector<NSString *> JS::NativeSampleTurboModule::SpecGetArraysOptions::arrayOfStrings() const
+{
+  id const p = _v[@\\"arrayOfStrings\\"];
+  return RCTBridgingToVec(p, ^NSString *(id itemValue_0) { return RCTBridgingToString(itemValue_0); });
+}
+inline folly::Optional<facebook::react::LazyVector<NSString *>> JS::NativeSampleTurboModule::SpecGetArraysOptions::optionalArrayOfStrings() const
+{
+  id const p = _v[@\\"optionalArrayOfStrings\\"];
+  return RCTBridgingToOptionalVec(p, ^NSString *(id itemValue_0) { return RCTBridgingToString(itemValue_0); });
+}
+inline facebook::react::LazyVector<JS::NativeSampleTurboModule::SpecGetArraysOptionsArrayOfObjectsElement> JS::NativeSampleTurboModule::SpecGetArraysOptions::arrayOfObjects() const
+{
+  id const p = _v[@\\"arrayOfObjects\\"];
+  return RCTBridgingToVec(p, ^JS::NativeSampleTurboModule::SpecGetArraysOptionsArrayOfObjectsElement(id itemValue_0) { return JS::NativeSampleTurboModule::SpecGetArraysOptionsArrayOfObjectsElement(itemValue_0); });
+}
+",
+}
+`;
+
+exports[`GenerateModuleHObjCpp can generate fixture EMPTY_NATIVE_MODULES 1`] = `
+Map {
+  "EMPTY_NATIVE_MODULES.h" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleObjCpp
+ *
+ * We create an umbrella header (and corresponding implementation) here since
+ * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
+ * must have a single output. More files => more genrule()s => slower builds.
+ */
+
+#ifndef __cplusplus
+#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
+#endif
+#import <Foundation/Foundation.h>
+#import <RCTRequired/RCTRequired.h>
+#import <RCTTypeSafety/RCTConvertHelpers.h>
+#import <RCTTypeSafety/RCTTypedModuleConstants.h>
+#import <React/RCTBridgeModule.h>
+#import <React/RCTCxxConvert.h>
+#import <React/RCTManagedPointer.h>
+#import <ReactCommon/RCTTurboModule.h>
+#import <folly/Optional.h>
+#import <vector>
+
+
+@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
+
+
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeSampleTurboModule'
+     */
+    class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
+    public:
+      NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+
+",
+}
+`;
+
+exports[`GenerateModuleHObjCpp can generate fixture NATIVE_MODULES_WITH_TYPE_ALIASES 1`] = `
+Map {
+  "NATIVE_MODULES_WITH_TYPE_ALIASES.h" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleObjCpp
+ *
+ * We create an umbrella header (and corresponding implementation) here since
+ * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
+ * must have a single output. More files => more genrule()s => slower builds.
+ */
+
+#ifndef __cplusplus
+#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
+#endif
+#import <Foundation/Foundation.h>
+#import <RCTRequired/RCTRequired.h>
+#import <RCTTypeSafety/RCTConvertHelpers.h>
+#import <RCTTypeSafety/RCTTypedModuleConstants.h>
+#import <React/RCTBridgeModule.h>
+#import <React/RCTCxxConvert.h>
+#import <React/RCTManagedPointer.h>
+#import <ReactCommon/RCTTurboModule.h>
+#import <folly/Optional.h>
+#import <vector>
+
+namespace JS {
+  namespace AliasTurboModule {
+    struct OptionsOffset {
+      double x() const;
+      double y() const;
+
+      OptionsOffset(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (AliasTurboModule_OptionsOffset)
++ (RCTManagedPointer *)JS_AliasTurboModule_OptionsOffset:(id)json;
+@end
+namespace JS {
+  namespace AliasTurboModule {
+    struct OptionsSize {
+      double width() const;
+      double height() const;
+
+      OptionsSize(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (AliasTurboModule_OptionsSize)
++ (RCTManagedPointer *)JS_AliasTurboModule_OptionsSize:(id)json;
+@end
+namespace JS {
+  namespace AliasTurboModule {
+    struct OptionsDisplaySize {
+      double width() const;
+      double height() const;
+
+      OptionsDisplaySize(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (AliasTurboModule_OptionsDisplaySize)
++ (RCTManagedPointer *)JS_AliasTurboModule_OptionsDisplaySize:(id)json;
+@end
+namespace JS {
+  namespace AliasTurboModule {
+    struct Options {
+      JS::AliasTurboModule::OptionsOffset offset() const;
+      JS::AliasTurboModule::OptionsSize size() const;
+      folly::Optional<JS::AliasTurboModule::OptionsDisplaySize> displaySize() const;
+      NSString *resizeMode() const;
+      folly::Optional<bool> allowExternalStorage() const;
+
+      Options(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (AliasTurboModule_Options)
++ (RCTManagedPointer *)JS_AliasTurboModule_Options:(id)json;
+@end
+@protocol AliasTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
+
+- (void)cropImage:(JS::AliasTurboModule::Options &)cropData;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'AliasTurboModule'
+     */
+    class JSI_EXPORT AliasTurboModuleSpecJSI : public ObjCTurboModule {
+    public:
+      AliasTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+inline double JS::AliasTurboModule::OptionsOffset::x() const
+{
+  id const p = _v[@\\"x\\"];
+  return RCTBridgingToDouble(p);
+}
+inline double JS::AliasTurboModule::OptionsOffset::y() const
+{
+  id const p = _v[@\\"y\\"];
+  return RCTBridgingToDouble(p);
+}
+inline double JS::AliasTurboModule::OptionsSize::width() const
+{
+  id const p = _v[@\\"width\\"];
+  return RCTBridgingToDouble(p);
+}
+inline double JS::AliasTurboModule::OptionsSize::height() const
+{
+  id const p = _v[@\\"height\\"];
+  return RCTBridgingToDouble(p);
+}
+inline double JS::AliasTurboModule::OptionsDisplaySize::width() const
+{
+  id const p = _v[@\\"width\\"];
+  return RCTBridgingToDouble(p);
+}
+inline double JS::AliasTurboModule::OptionsDisplaySize::height() const
+{
+  id const p = _v[@\\"height\\"];
+  return RCTBridgingToDouble(p);
+}
+inline JS::AliasTurboModule::OptionsOffset JS::AliasTurboModule::Options::offset() const
+{
+  id const p = _v[@\\"offset\\"];
+  return JS::AliasTurboModule::OptionsOffset(p);
+}
+inline JS::AliasTurboModule::OptionsSize JS::AliasTurboModule::Options::size() const
+{
+  id const p = _v[@\\"size\\"];
+  return JS::AliasTurboModule::OptionsSize(p);
+}
+inline folly::Optional<JS::AliasTurboModule::OptionsDisplaySize> JS::AliasTurboModule::Options::displaySize() const
+{
+  id const p = _v[@\\"displaySize\\"];
+  return (p == nil ? folly::none : folly::make_optional(JS::AliasTurboModule::OptionsDisplaySize(p)));
+}
+inline NSString *JS::AliasTurboModule::Options::resizeMode() const
+{
+  id const p = _v[@\\"resizeMode\\"];
+  return RCTBridgingToOptionalString(p);
+}
+inline folly::Optional<bool> JS::AliasTurboModule::Options::allowExternalStorage() const
+{
+  id const p = _v[@\\"allowExternalStorage\\"];
+  return RCTBridgingToOptionalBool(p);
+}
+",
+}
+`;
+
+exports[`GenerateModuleHObjCpp can generate fixture REAL_MODULE_EXAMPLE 1`] = `
+Map {
+  "REAL_MODULE_EXAMPLE.h" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleObjCpp
+ *
+ * We create an umbrella header (and corresponding implementation) here since
+ * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
+ * must have a single output. More files => more genrule()s => slower builds.
+ */
+
+#ifndef __cplusplus
+#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
+#endif
+#import <Foundation/Foundation.h>
+#import <RCTRequired/RCTRequired.h>
+#import <RCTTypeSafety/RCTConvertHelpers.h>
+#import <RCTTypeSafety/RCTTypedModuleConstants.h>
+#import <React/RCTBridgeModule.h>
+#import <React/RCTCxxConvert.h>
+#import <React/RCTManagedPointer.h>
+#import <ReactCommon/RCTTurboModule.h>
+#import <folly/Optional.h>
+#import <vector>
+
+namespace JS {
+  namespace NativeCameraRollManager {
+    struct GetPhotosParams {
+      double first() const;
+      NSString *after() const;
+      NSString *groupName() const;
+      NSString *groupTypes() const;
+      NSString *assetType() const;
+      folly::Optional<double> maxSize() const;
+      folly::Optional<facebook::react::LazyVector<NSString *>> mimeTypes() const;
+
+      GetPhotosParams(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeCameraRollManager_GetPhotosParams)
++ (RCTManagedPointer *)JS_NativeCameraRollManager_GetPhotosParams:(id)json;
+@end
+@protocol NativeCameraRollManagerSpec <RCTBridgeModule, RCTTurboModule>
+
+- (void)getPhotos:(JS::NativeCameraRollManager::GetPhotosParams &)params
+          resolve:(RCTPromiseResolveBlock)resolve
+           reject:(RCTPromiseRejectBlock)reject;
+- (void)saveToCameraRoll:(NSString *)uri
+                    type:(NSString *)type
+                 resolve:(RCTPromiseResolveBlock)resolve
+                  reject:(RCTPromiseRejectBlock)reject;
+- (void)deletePhotos:(NSArray *)assets
+             resolve:(RCTPromiseResolveBlock)resolve
+              reject:(RCTPromiseRejectBlock)reject;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeCameraRollManager'
+     */
+    class JSI_EXPORT NativeCameraRollManagerSpecJSI : public ObjCTurboModule {
+    public:
+      NativeCameraRollManagerSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+namespace JS {
+  namespace NativeExceptionsManager {
+    struct StackFrame {
+      folly::Optional<double> column() const;
+      NSString *file() const;
+      folly::Optional<double> lineNumber() const;
+      NSString *methodName() const;
+      folly::Optional<bool> collapse() const;
+
+      StackFrame(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeExceptionsManager_StackFrame)
++ (RCTManagedPointer *)JS_NativeExceptionsManager_StackFrame:(id)json;
+@end
+namespace JS {
+  namespace NativeExceptionsManager {
+    struct ExceptionData {
+      NSString *message() const;
+      NSString *originalMessage() const;
+      NSString *name() const;
+      NSString *componentStack() const;
+      facebook::react::LazyVector<JS::NativeExceptionsManager::StackFrame> stack() const;
+      double id_() const;
+      bool isFatal() const;
+      id<NSObject> _Nullable extraData() const;
+
+      ExceptionData(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeExceptionsManager_ExceptionData)
++ (RCTManagedPointer *)JS_NativeExceptionsManager_ExceptionData:(id)json;
+@end
+@protocol NativeExceptionsManagerSpec <RCTBridgeModule, RCTTurboModule>
+
+- (void)reportFatalException:(NSString *)message
+                       stack:(NSArray *)stack
+                 exceptionId:(double)exceptionId;
+- (void)reportSoftException:(NSString *)message
+                      stack:(NSArray *)stack
+                exceptionId:(double)exceptionId;
+- (void)reportException:(JS::NativeExceptionsManager::ExceptionData &)data;
+- (void)updateExceptionMessage:(NSString *)message
+                         stack:(NSArray *)stack
+                   exceptionId:(double)exceptionId;
+- (void)dismissRedbox;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeExceptionsManager'
+     */
+    class JSI_EXPORT NativeExceptionsManagerSpecJSI : public ObjCTurboModule {
+    public:
+      NativeExceptionsManagerSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+namespace JS {
+  namespace NativeImagePickerIOS {
+    struct SpecOpenCameraDialogConfig {
+      bool unmirrorFrontFacingCamera() const;
+      bool videoMode() const;
+
+      SpecOpenCameraDialogConfig(NSDictionary *const v) : _v(v) {}
+    private:
+      NSDictionary *_v;
+    };
+  }
+}
+
+@interface RCTCxxConvert (NativeImagePickerIOS_SpecOpenCameraDialogConfig)
++ (RCTManagedPointer *)JS_NativeImagePickerIOS_SpecOpenCameraDialogConfig:(id)json;
+@end
+@protocol NativeImagePickerIOSSpec <RCTBridgeModule, RCTTurboModule>
+
+- (void)openCameraDialog:(JS::NativeImagePickerIOS::SpecOpenCameraDialogConfig &)config
+         successCallback:(RCTResponseSenderBlock)successCallback
+          cancelCallback:(RCTResponseSenderBlock)cancelCallback;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeImagePickerIOS'
+     */
+    class JSI_EXPORT NativeImagePickerIOSSpecJSI : public ObjCTurboModule {
+    public:
+      NativeImagePickerIOSSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+inline double JS::NativeCameraRollManager::GetPhotosParams::first() const
+{
+  id const p = _v[@\\"first\\"];
+  return RCTBridgingToDouble(p);
+}
+inline NSString *JS::NativeCameraRollManager::GetPhotosParams::after() const
+{
+  id const p = _v[@\\"after\\"];
+  return RCTBridgingToOptionalString(p);
+}
+inline NSString *JS::NativeCameraRollManager::GetPhotosParams::groupName() const
+{
+  id const p = _v[@\\"groupName\\"];
+  return RCTBridgingToOptionalString(p);
+}
+inline NSString *JS::NativeCameraRollManager::GetPhotosParams::groupTypes() const
+{
+  id const p = _v[@\\"groupTypes\\"];
+  return RCTBridgingToOptionalString(p);
+}
+inline NSString *JS::NativeCameraRollManager::GetPhotosParams::assetType() const
+{
+  id const p = _v[@\\"assetType\\"];
+  return RCTBridgingToOptionalString(p);
+}
+inline folly::Optional<double> JS::NativeCameraRollManager::GetPhotosParams::maxSize() const
+{
+  id const p = _v[@\\"maxSize\\"];
+  return RCTBridgingToOptionalDouble(p);
+}
+inline folly::Optional<facebook::react::LazyVector<NSString *>> JS::NativeCameraRollManager::GetPhotosParams::mimeTypes() const
+{
+  id const p = _v[@\\"mimeTypes\\"];
+  return RCTBridgingToOptionalVec(p, ^NSString *(id itemValue_0) { return RCTBridgingToString(itemValue_0); });
+}
+inline folly::Optional<double> JS::NativeExceptionsManager::StackFrame::column() const
+{
+  id const p = _v[@\\"column\\"];
+  return RCTBridgingToOptionalDouble(p);
+}
+inline NSString *JS::NativeExceptionsManager::StackFrame::file() const
+{
+  id const p = _v[@\\"file\\"];
+  return RCTBridgingToString(p);
+}
+inline folly::Optional<double> JS::NativeExceptionsManager::StackFrame::lineNumber() const
+{
+  id const p = _v[@\\"lineNumber\\"];
+  return RCTBridgingToOptionalDouble(p);
+}
+inline NSString *JS::NativeExceptionsManager::StackFrame::methodName() const
+{
+  id const p = _v[@\\"methodName\\"];
+  return RCTBridgingToString(p);
+}
+inline folly::Optional<bool> JS::NativeExceptionsManager::StackFrame::collapse() const
+{
+  id const p = _v[@\\"collapse\\"];
+  return RCTBridgingToOptionalBool(p);
+}
+inline NSString *JS::NativeExceptionsManager::ExceptionData::message() const
+{
+  id const p = _v[@\\"message\\"];
+  return RCTBridgingToString(p);
+}
+inline NSString *JS::NativeExceptionsManager::ExceptionData::originalMessage() const
+{
+  id const p = _v[@\\"originalMessage\\"];
+  return RCTBridgingToString(p);
+}
+inline NSString *JS::NativeExceptionsManager::ExceptionData::name() const
+{
+  id const p = _v[@\\"name\\"];
+  return RCTBridgingToString(p);
+}
+inline NSString *JS::NativeExceptionsManager::ExceptionData::componentStack() const
+{
+  id const p = _v[@\\"componentStack\\"];
+  return RCTBridgingToString(p);
+}
+inline facebook::react::LazyVector<JS::NativeExceptionsManager::StackFrame> JS::NativeExceptionsManager::ExceptionData::stack() const
+{
+  id const p = _v[@\\"stack\\"];
+  return RCTBridgingToVec(p, ^JS::NativeExceptionsManager::StackFrame(id itemValue_0) { return JS::NativeExceptionsManager::StackFrame(itemValue_0); });
+}
+inline double JS::NativeExceptionsManager::ExceptionData::id_() const
+{
+  id const p = _v[@\\"id\\"];
+  return RCTBridgingToDouble(p);
+}
+inline bool JS::NativeExceptionsManager::ExceptionData::isFatal() const
+{
+  id const p = _v[@\\"isFatal\\"];
+  return RCTBridgingToBool(p);
+}
+inline id<NSObject> _Nullable JS::NativeExceptionsManager::ExceptionData::extraData() const
+{
+  id const p = _v[@\\"extraData\\"];
+  return p;
+}
+inline bool JS::NativeImagePickerIOS::SpecOpenCameraDialogConfig::unmirrorFrontFacingCamera() const
+{
+  id const p = _v[@\\"unmirrorFrontFacingCamera\\"];
+  return RCTBridgingToBool(p);
+}
+inline bool JS::NativeImagePickerIOS::SpecOpenCameraDialogConfig::videoMode() const
+{
+  id const p = _v[@\\"videoMode\\"];
+  return RCTBridgingToBool(p);
+}
+",
+}
+`;
+
+exports[`GenerateModuleHObjCpp can generate fixture SIMPLE_NATIVE_MODULES 1`] = `
+Map {
+  "SIMPLE_NATIVE_MODULES.h" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleObjCpp
+ *
+ * We create an umbrella header (and corresponding implementation) here since
+ * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
+ * must have a single output. More files => more genrule()s => slower builds.
+ */
+
+#ifndef __cplusplus
+#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
+#endif
+#import <Foundation/Foundation.h>
+#import <RCTRequired/RCTRequired.h>
+#import <RCTTypeSafety/RCTConvertHelpers.h>
+#import <RCTTypeSafety/RCTTypedModuleConstants.h>
+#import <React/RCTBridgeModule.h>
+#import <React/RCTCxxConvert.h>
+#import <React/RCTManagedPointer.h>
+#import <ReactCommon/RCTTurboModule.h>
+#import <folly/Optional.h>
+#import <vector>
+
+namespace JS {
+  namespace NativeSampleTurboModule {
+    struct Constants {
+
+      struct Builder {
+        struct Input {
+          RCTRequired<bool> const1;
+          RCTRequired<double> const2;
+          RCTRequired<NSString *> const3;
+        };
+
+        /** Initialize with a set of values */
+        Builder(const Input i);
+        /** Initialize with an existing Constants */
+        Builder(Constants i);
+        /** Builds the object. Generally used only by the infrastructure. */
+        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
+      private:
+        NSDictionary *(^_factory)(void);
+      };
+
+      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
+      NSDictionary *unsafeRawValue() const { return _v; }
+    private:
+      Constants(NSDictionary *const v) : _v(v) {}
+      NSDictionary *_v;
+    };
+  }
+}
+@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
+
+- (void)voidFunc;
+- (NSNumber *)getBool:(BOOL)arg;
+- (NSNumber *)getNumber:(double)arg;
+- (NSString *)getString:(NSString *)arg;
+- (NSArray<NSDictionary *> *)getArray:(NSArray *)arg;
+- (NSDictionary *)getObject:(NSDictionary *)arg;
+- (NSNumber *)getRootTag:(double)arg;
+- (NSDictionary *)getValue:(double)x
+                         y:(NSString *)y
+                         z:(NSDictionary *)z;
+- (void)getValueWithCallback:(RCTResponseSenderBlock)callback;
+- (void)getValueWithPromise:(BOOL)error
+                    resolve:(RCTPromiseResolveBlock)resolve
+                     reject:(RCTPromiseRejectBlock)reject;
+- (facebook::react::ModuleConstants<JS::NativeSampleTurboModule::Constants::Builder>)constantsToExport;
+- (facebook::react::ModuleConstants<JS::NativeSampleTurboModule::Constants::Builder>)getConstants;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeSampleTurboModule'
+     */
+    class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
+    public:
+      NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+inline JS::NativeSampleTurboModule::Constants::Builder::Builder(const Input i) : _factory(^{
+  NSMutableDictionary *d = [NSMutableDictionary new];
+  auto const1 = i.const1.get();
+  d[@\\"const1\\"] = @(const1);
+  auto const2 = i.const2.get();
+  d[@\\"const2\\"] = @(const2);
+  auto const3 = i.const3.get();
+  d[@\\"const3\\"] = const3;
+  return d;
+}) {}
+inline JS::NativeSampleTurboModule::Constants::Builder::Builder(Constants i) : _factory(^{
+  return i.unsafeRawValue();
+}) {}
+",
+}
+`;
+
+exports[`GenerateModuleHObjCpp can generate fixture TWO_MODULES_DIFFERENT_FILES 1`] = `
+Map {
+  "TWO_MODULES_DIFFERENT_FILES.h" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleObjCpp
+ *
+ * We create an umbrella header (and corresponding implementation) here since
+ * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
+ * must have a single output. More files => more genrule()s => slower builds.
+ */
+
+#ifndef __cplusplus
+#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
+#endif
+#import <Foundation/Foundation.h>
+#import <RCTRequired/RCTRequired.h>
+#import <RCTTypeSafety/RCTConvertHelpers.h>
+#import <RCTTypeSafety/RCTTypedModuleConstants.h>
+#import <React/RCTBridgeModule.h>
+#import <React/RCTCxxConvert.h>
+#import <React/RCTManagedPointer.h>
+#import <ReactCommon/RCTTurboModule.h>
+#import <folly/Optional.h>
+#import <vector>
+
+
+@protocol NativeSampleTurboModuleSpec <RCTBridgeModule, RCTTurboModule>
+
+- (void)voidFunc;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeSampleTurboModule'
+     */
+    class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public ObjCTurboModule {
+    public:
+      NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+
+@protocol NativeSampleTurboModule2Spec <RCTBridgeModule, RCTTurboModule>
+
+- (void)voidFunc;
+
+@end
+namespace facebook {
+  namespace react {
+    /**
+     * ObjC++ class for module 'NativeSampleTurboModule2'
+     */
+    class JSI_EXPORT NativeSampleTurboModule2SpecJSI : public ObjCTurboModule {
+    public:
+      NativeSampleTurboModule2SpecJSI(const ObjCTurboModule::InitParams &params);
+    };
+  } // namespace react
+} // namespace facebook
+
+
+",
+}
+`;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/__snapshots__/GenerateModuleJavaSpec-test.js.snap b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/__snapshots__/GenerateModuleJavaSpec-test.js.snap
new file mode 100644
index 0000000..f7654f6
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/__snapshots__/GenerateModuleJavaSpec-test.js.snap
@@ -0,0 +1,399 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GenerateModuleJavaSpec can generate fixture COMPLEX_OBJECTS 1`] = `
+Map {
+  "java/com/facebook/fbreact/specs/NativeSampleTurboModuleSpec.java" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the LICENSE file in the root
+ * directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleJavaSpec.js
+ *
+ * @nolint
+ */
+
+package com.facebook.fbreact.specs;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+import com.facebook.react.bridge.Callback;
+import com.facebook.react.bridge.ReactApplicationContext;
+import com.facebook.react.bridge.ReactContextBaseJavaModule;
+import com.facebook.react.bridge.ReactMethod;
+import com.facebook.react.bridge.ReactModuleWithSpec;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.bridge.WritableMap;
+import com.facebook.react.turbomodule.core.interfaces.TurboModule;
+
+public abstract class NativeSampleTurboModuleSpec extends ReactContextBaseJavaModule implements ReactModuleWithSpec, TurboModule {
+  public NativeSampleTurboModuleSpec(ReactApplicationContext reactContext) {
+    super(reactContext);
+  }
+
+  @ReactMethod(isBlockingSynchronousMethod = true)
+  @DoNotStrip
+  public abstract WritableMap difficult(ReadableMap A);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void optionals(ReadableMap A);
+
+  @ReactMethod
+  @DoNotStrip
+  public void optionalMethod(ReadableMap options, Callback callback, ReadableArray extras) {}
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void getArrays(ReadableMap options);
+}
+",
+}
+`;
+
+exports[`GenerateModuleJavaSpec can generate fixture EMPTY_NATIVE_MODULES 1`] = `
+Map {
+  "java/com/facebook/fbreact/specs/NativeSampleTurboModuleSpec.java" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the LICENSE file in the root
+ * directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleJavaSpec.js
+ *
+ * @nolint
+ */
+
+package com.facebook.fbreact.specs;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+import com.facebook.react.bridge.ReactApplicationContext;
+import com.facebook.react.bridge.ReactContextBaseJavaModule;
+import com.facebook.react.bridge.ReactMethod;
+import com.facebook.react.bridge.ReactModuleWithSpec;
+import com.facebook.react.turbomodule.core.interfaces.TurboModule;
+
+public abstract class NativeSampleTurboModuleSpec extends ReactContextBaseJavaModule implements ReactModuleWithSpec, TurboModule {
+  public NativeSampleTurboModuleSpec(ReactApplicationContext reactContext) {
+    super(reactContext);
+  }
+
+
+}
+",
+}
+`;
+
+exports[`GenerateModuleJavaSpec can generate fixture NATIVE_MODULES_WITH_TYPE_ALIASES 1`] = `
+Map {
+  "java/com/facebook/fbreact/specs/AliasTurboModuleSpec.java" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the LICENSE file in the root
+ * directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleJavaSpec.js
+ *
+ * @nolint
+ */
+
+package com.facebook.fbreact.specs;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+import com.facebook.react.bridge.ReactApplicationContext;
+import com.facebook.react.bridge.ReactContextBaseJavaModule;
+import com.facebook.react.bridge.ReactMethod;
+import com.facebook.react.bridge.ReactModuleWithSpec;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.turbomodule.core.interfaces.TurboModule;
+
+public abstract class AliasTurboModuleSpec extends ReactContextBaseJavaModule implements ReactModuleWithSpec, TurboModule {
+  public AliasTurboModuleSpec(ReactApplicationContext reactContext) {
+    super(reactContext);
+  }
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void cropImage(ReadableMap cropData);
+}
+",
+}
+`;
+
+exports[`GenerateModuleJavaSpec can generate fixture REAL_MODULE_EXAMPLE 1`] = `
+Map {
+  "java/com/facebook/fbreact/specs/NativeCameraRollManagerSpec.java" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the LICENSE file in the root
+ * directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleJavaSpec.js
+ *
+ * @nolint
+ */
+
+package com.facebook.fbreact.specs;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+import com.facebook.react.bridge.Promise;
+import com.facebook.react.bridge.ReactApplicationContext;
+import com.facebook.react.bridge.ReactContextBaseJavaModule;
+import com.facebook.react.bridge.ReactMethod;
+import com.facebook.react.bridge.ReactModuleWithSpec;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.turbomodule.core.interfaces.TurboModule;
+
+public abstract class NativeCameraRollManagerSpec extends ReactContextBaseJavaModule implements ReactModuleWithSpec, TurboModule {
+  public NativeCameraRollManagerSpec(ReactApplicationContext reactContext) {
+    super(reactContext);
+  }
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void getPhotos(ReadableMap params, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void saveToCameraRoll(String uri, String type, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void deletePhotos(ReadableArray assets, Promise promise);
+}
+",
+  "java/com/facebook/fbreact/specs/NativeExceptionsManagerSpec.java" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the LICENSE file in the root
+ * directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleJavaSpec.js
+ *
+ * @nolint
+ */
+
+package com.facebook.fbreact.specs;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+import com.facebook.react.bridge.ReactApplicationContext;
+import com.facebook.react.bridge.ReactContextBaseJavaModule;
+import com.facebook.react.bridge.ReactMethod;
+import com.facebook.react.bridge.ReactModuleWithSpec;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.turbomodule.core.interfaces.TurboModule;
+
+public abstract class NativeExceptionsManagerSpec extends ReactContextBaseJavaModule implements ReactModuleWithSpec, TurboModule {
+  public NativeExceptionsManagerSpec(ReactApplicationContext reactContext) {
+    super(reactContext);
+  }
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void reportFatalException(String message, ReadableArray stack, double exceptionId);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void reportSoftException(String message, ReadableArray stack, double exceptionId);
+
+  @ReactMethod
+  @DoNotStrip
+  public void reportException(ReadableMap data) {}
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void updateExceptionMessage(String message, ReadableArray stack, double exceptionId);
+
+  @ReactMethod
+  @DoNotStrip
+  public void dismissRedbox() {}
+}
+",
+}
+`;
+
+exports[`GenerateModuleJavaSpec can generate fixture SIMPLE_NATIVE_MODULES 1`] = `
+Map {
+  "java/com/facebook/fbreact/specs/NativeSampleTurboModuleSpec.java" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the LICENSE file in the root
+ * directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleJavaSpec.js
+ *
+ * @nolint
+ */
+
+package com.facebook.fbreact.specs;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+import com.facebook.react.bridge.Callback;
+import com.facebook.react.bridge.Promise;
+import com.facebook.react.bridge.ReactApplicationContext;
+import com.facebook.react.bridge.ReactContextBaseJavaModule;
+import com.facebook.react.bridge.ReactMethod;
+import com.facebook.react.bridge.ReactModuleWithSpec;
+import com.facebook.react.bridge.ReadableArray;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.bridge.WritableArray;
+import com.facebook.react.bridge.WritableMap;
+import com.facebook.react.common.build.ReactBuildConfig;
+import com.facebook.react.turbomodule.core.interfaces.TurboModule;
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import javax.annotation.Nullable;
+
+public abstract class NativeSampleTurboModuleSpec extends ReactContextBaseJavaModule implements ReactModuleWithSpec, TurboModule {
+  public NativeSampleTurboModuleSpec(ReactApplicationContext reactContext) {
+    super(reactContext);
+  }
+
+  protected abstract Map<String, Object> getTypedExportedConstants();
+
+  @Override
+  @DoNotStrip
+  public final @Nullable Map<String, Object> getConstants() {
+    Map<String, Object> constants = getTypedExportedConstants();
+    if (ReactBuildConfig.DEBUG || ReactBuildConfig.IS_INTERNAL_BUILD) {
+      Set<String> obligatoryFlowConstants = new HashSet<>(Arrays.asList(
+          \\"const1\\",
+          \\"const2\\",
+          \\"const3\\"
+      ));
+      Set<String> optionalFlowConstants = new HashSet<>();
+      Set<String> undeclaredConstants = new HashSet<>(constants.keySet());
+      undeclaredConstants.removeAll(obligatoryFlowConstants);
+      undeclaredConstants.removeAll(optionalFlowConstants);
+      if (!undeclaredConstants.isEmpty()) {
+        throw new IllegalStateException(String.format(\\"Native Module Flow doesn't declare constants: %s\\", undeclaredConstants));
+      }
+      undeclaredConstants = obligatoryFlowConstants;
+      undeclaredConstants.removeAll(constants.keySet());
+      if (!undeclaredConstants.isEmpty()) {
+        throw new IllegalStateException(String.format(\\"Native Module doesn't fill in constants: %s\\", undeclaredConstants));
+      }
+    }
+    return constants;
+  }
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void voidFunc();
+
+  @ReactMethod(isBlockingSynchronousMethod = true)
+  @DoNotStrip
+  public abstract boolean getBool(boolean arg);
+
+  @ReactMethod(isBlockingSynchronousMethod = true)
+  @DoNotStrip
+  public abstract double getNumber(double arg);
+
+  @ReactMethod(isBlockingSynchronousMethod = true)
+  @DoNotStrip
+  public abstract String getString(String arg);
+
+  @ReactMethod(isBlockingSynchronousMethod = true)
+  @DoNotStrip
+  public abstract WritableArray getArray(ReadableArray arg);
+
+  @ReactMethod(isBlockingSynchronousMethod = true)
+  @DoNotStrip
+  public abstract WritableMap getObject(ReadableMap arg);
+
+  @ReactMethod(isBlockingSynchronousMethod = true)
+  @DoNotStrip
+  public abstract double getRootTag(double arg);
+
+  @ReactMethod(isBlockingSynchronousMethod = true)
+  @DoNotStrip
+  public abstract WritableMap getValue(double x, String y, ReadableMap z);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void getValueWithCallback(Callback callback);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void getValueWithPromise(boolean error, Promise promise);
+}
+",
+}
+`;
+
+exports[`GenerateModuleJavaSpec can generate fixture TWO_MODULES_DIFFERENT_FILES 1`] = `
+Map {
+  "java/com/facebook/fbreact/specs/NativeSampleTurboModuleSpec.java" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the LICENSE file in the root
+ * directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleJavaSpec.js
+ *
+ * @nolint
+ */
+
+package com.facebook.fbreact.specs;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+import com.facebook.react.bridge.ReactApplicationContext;
+import com.facebook.react.bridge.ReactContextBaseJavaModule;
+import com.facebook.react.bridge.ReactMethod;
+import com.facebook.react.bridge.ReactModuleWithSpec;
+import com.facebook.react.turbomodule.core.interfaces.TurboModule;
+
+public abstract class NativeSampleTurboModuleSpec extends ReactContextBaseJavaModule implements ReactModuleWithSpec, TurboModule {
+  public NativeSampleTurboModuleSpec(ReactApplicationContext reactContext) {
+    super(reactContext);
+  }
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void voidFunc();
+}
+",
+  "java/com/facebook/fbreact/specs/NativeSampleTurboModule2Spec.java" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the LICENSE file in the root
+ * directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleJavaSpec.js
+ *
+ * @nolint
+ */
+
+package com.facebook.fbreact.specs;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+import com.facebook.react.bridge.ReactApplicationContext;
+import com.facebook.react.bridge.ReactContextBaseJavaModule;
+import com.facebook.react.bridge.ReactMethod;
+import com.facebook.react.bridge.ReactModuleWithSpec;
+import com.facebook.react.turbomodule.core.interfaces.TurboModule;
+
+public abstract class NativeSampleTurboModule2Spec extends ReactContextBaseJavaModule implements ReactModuleWithSpec, TurboModule {
+  public NativeSampleTurboModule2Spec(ReactApplicationContext reactContext) {
+    super(reactContext);
+  }
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void voidFunc();
+}
+",
+}
+`;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/__snapshots__/GenerateModuleJniCpp-test.js.snap b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/__snapshots__/GenerateModuleJniCpp-test.js.snap
new file mode 100644
index 0000000..328f1a3
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/__snapshots__/GenerateModuleJniCpp-test.js.snap
@@ -0,0 +1,356 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GenerateModuleJniCpp can generate fixture COMPLEX_OBJECTS 1`] = `
+Map {
+  "jni/COMPLEX_OBJECTS-generated.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleJniCpp.js
+ */
+
+#include \\"COMPLEX_OBJECTS.h\\"
+
+namespace facebook {
+namespace react {
+
+static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_difficult(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, ObjectKind, \\"difficult\\", \\"(Lcom/facebook/react/bridge/ReadableMap;)Lcom/facebook/react/bridge/WritableMap;\\", args, count);
+}
+
+static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_optionals(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, \\"optionals\\", \\"(Lcom/facebook/react/bridge/ReadableMap;)V\\", args, count);
+}
+
+static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_optionalMethod(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, \\"optionalMethod\\", \\"(Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Callback;Lcom/facebook/react/bridge/ReadableArray;)V\\", args, count);
+}
+
+static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getArrays(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, \\"getArrays\\", \\"(Lcom/facebook/react/bridge/ReadableMap;)V\\", args, count);
+}
+
+NativeSampleTurboModuleSpecJSI::NativeSampleTurboModuleSpecJSI(const JavaTurboModule::InitParams &params)
+  : JavaTurboModule(params) {
+  methodMap_[\\"difficult\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_difficult};
+  methodMap_[\\"optionals\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_optionals};
+  methodMap_[\\"optionalMethod\\"] = MethodMetadata {3, __hostFunction_NativeSampleTurboModuleSpecJSI_optionalMethod};
+  methodMap_[\\"getArrays\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getArrays};
+}
+
+std::shared_ptr<TurboModule> COMPLEX_OBJECTS_ModuleProvider(const std::string moduleName, const JavaTurboModule::InitParams &params) {
+  if (moduleName == \\"SampleTurboModule\\") {
+    return std::make_shared<NativeSampleTurboModuleSpecJSI>(params);
+  }
+  return nullptr;
+}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateModuleJniCpp can generate fixture EMPTY_NATIVE_MODULES 1`] = `
+Map {
+  "jni/EMPTY_NATIVE_MODULES-generated.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleJniCpp.js
+ */
+
+#include \\"EMPTY_NATIVE_MODULES.h\\"
+
+namespace facebook {
+namespace react {
+
+
+
+NativeSampleTurboModuleSpecJSI::NativeSampleTurboModuleSpecJSI(const JavaTurboModule::InitParams &params)
+  : JavaTurboModule(params) {
+
+}
+
+std::shared_ptr<TurboModule> EMPTY_NATIVE_MODULES_ModuleProvider(const std::string moduleName, const JavaTurboModule::InitParams &params) {
+  if (moduleName == \\"SampleTurboModule\\") {
+    return std::make_shared<NativeSampleTurboModuleSpecJSI>(params);
+  }
+  return nullptr;
+}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateModuleJniCpp can generate fixture NATIVE_MODULES_WITH_TYPE_ALIASES 1`] = `
+Map {
+  "jni/NATIVE_MODULES_WITH_TYPE_ALIASES-generated.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleJniCpp.js
+ */
+
+#include \\"NATIVE_MODULES_WITH_TYPE_ALIASES.h\\"
+
+namespace facebook {
+namespace react {
+
+
+
+static facebook::jsi::Value __hostFunction_AliasTurboModuleSpecJSI_cropImage(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, \\"cropImage\\", \\"(Lcom/facebook/react/bridge/ReadableMap;)V\\", args, count);
+}
+
+AliasTurboModuleSpecJSI::AliasTurboModuleSpecJSI(const JavaTurboModule::InitParams &params)
+  : JavaTurboModule(params) {
+  methodMap_[\\"cropImage\\"] = MethodMetadata {1, __hostFunction_AliasTurboModuleSpecJSI_cropImage};
+}
+
+std::shared_ptr<TurboModule> NATIVE_MODULES_WITH_TYPE_ALIASES_ModuleProvider(const std::string moduleName, const JavaTurboModule::InitParams &params) {
+  if (moduleName == \\"AliasTurboModule\\") {
+    return std::make_shared<AliasTurboModuleSpecJSI>(params);
+  }
+  return nullptr;
+}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateModuleJniCpp can generate fixture REAL_MODULE_EXAMPLE 1`] = `
+Map {
+  "jni/REAL_MODULE_EXAMPLE-generated.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleJniCpp.js
+ */
+
+#include \\"REAL_MODULE_EXAMPLE.h\\"
+
+namespace facebook {
+namespace react {
+
+
+
+static facebook::jsi::Value __hostFunction_NativeCameraRollManagerSpecJSI_getPhotos(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, \\"getPhotos\\", \\"(Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V\\", args, count);
+}
+
+static facebook::jsi::Value __hostFunction_NativeCameraRollManagerSpecJSI_saveToCameraRoll(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, \\"saveToCameraRoll\\", \\"(Ljava/lang/String;Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V\\", args, count);
+}
+
+static facebook::jsi::Value __hostFunction_NativeCameraRollManagerSpecJSI_deletePhotos(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, \\"deletePhotos\\", \\"(Lcom/facebook/react/bridge/ReadableArray;Lcom/facebook/react/bridge/Promise;)V\\", args, count);
+}
+
+NativeCameraRollManagerSpecJSI::NativeCameraRollManagerSpecJSI(const JavaTurboModule::InitParams &params)
+  : JavaTurboModule(params) {
+  methodMap_[\\"getPhotos\\"] = MethodMetadata {1, __hostFunction_NativeCameraRollManagerSpecJSI_getPhotos};
+  methodMap_[\\"saveToCameraRoll\\"] = MethodMetadata {2, __hostFunction_NativeCameraRollManagerSpecJSI_saveToCameraRoll};
+  methodMap_[\\"deletePhotos\\"] = MethodMetadata {1, __hostFunction_NativeCameraRollManagerSpecJSI_deletePhotos};
+}
+static facebook::jsi::Value __hostFunction_NativeExceptionsManagerSpecJSI_reportFatalException(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, \\"reportFatalException\\", \\"(Ljava/lang/String;Lcom/facebook/react/bridge/ReadableArray;D)V\\", args, count);
+}
+
+static facebook::jsi::Value __hostFunction_NativeExceptionsManagerSpecJSI_reportSoftException(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, \\"reportSoftException\\", \\"(Ljava/lang/String;Lcom/facebook/react/bridge/ReadableArray;D)V\\", args, count);
+}
+
+static facebook::jsi::Value __hostFunction_NativeExceptionsManagerSpecJSI_reportException(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, \\"reportException\\", \\"(Lcom/facebook/react/bridge/ReadableMap;)V\\", args, count);
+}
+
+static facebook::jsi::Value __hostFunction_NativeExceptionsManagerSpecJSI_updateExceptionMessage(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, \\"updateExceptionMessage\\", \\"(Ljava/lang/String;Lcom/facebook/react/bridge/ReadableArray;D)V\\", args, count);
+}
+
+static facebook::jsi::Value __hostFunction_NativeExceptionsManagerSpecJSI_dismissRedbox(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, \\"dismissRedbox\\", \\"()V\\", args, count);
+}
+
+NativeExceptionsManagerSpecJSI::NativeExceptionsManagerSpecJSI(const JavaTurboModule::InitParams &params)
+  : JavaTurboModule(params) {
+  methodMap_[\\"reportFatalException\\"] = MethodMetadata {3, __hostFunction_NativeExceptionsManagerSpecJSI_reportFatalException};
+  methodMap_[\\"reportSoftException\\"] = MethodMetadata {3, __hostFunction_NativeExceptionsManagerSpecJSI_reportSoftException};
+  methodMap_[\\"reportException\\"] = MethodMetadata {1, __hostFunction_NativeExceptionsManagerSpecJSI_reportException};
+  methodMap_[\\"updateExceptionMessage\\"] = MethodMetadata {3, __hostFunction_NativeExceptionsManagerSpecJSI_updateExceptionMessage};
+  methodMap_[\\"dismissRedbox\\"] = MethodMetadata {0, __hostFunction_NativeExceptionsManagerSpecJSI_dismissRedbox};
+}
+
+std::shared_ptr<TurboModule> REAL_MODULE_EXAMPLE_ModuleProvider(const std::string moduleName, const JavaTurboModule::InitParams &params) {
+  if (moduleName == \\"CameraRollManager\\") {
+    return std::make_shared<NativeCameraRollManagerSpecJSI>(params);
+  }
+  if (moduleName == \\"ExceptionsManager\\") {
+    return std::make_shared<NativeExceptionsManagerSpecJSI>(params);
+  }
+  return nullptr;
+}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateModuleJniCpp can generate fixture SIMPLE_NATIVE_MODULES 1`] = `
+Map {
+  "jni/SIMPLE_NATIVE_MODULES-generated.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleJniCpp.js
+ */
+
+#include \\"SIMPLE_NATIVE_MODULES.h\\"
+
+namespace facebook {
+namespace react {
+
+static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, ObjectKind, \\"getConstants\\", \\"()Ljava/util/Map;\\", args, count);
+}
+
+static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_voidFunc(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, \\"voidFunc\\", \\"()V\\", args, count);
+}
+
+static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getBool(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, BooleanKind, \\"getBool\\", \\"(Z)Z\\", args, count);
+}
+
+static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getNumber(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, NumberKind, \\"getNumber\\", \\"(D)D\\", args, count);
+}
+
+static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, StringKind, \\"getString\\", \\"(Ljava/lang/String;)Ljava/lang/String;\\", args, count);
+}
+
+static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getArray(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, ArrayKind, \\"getArray\\", \\"(Lcom/facebook/react/bridge/ReadableArray;)Lcom/facebook/react/bridge/WritableArray;\\", args, count);
+}
+
+static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, ObjectKind, \\"getObject\\", \\"(Lcom/facebook/react/bridge/ReadableMap;)Lcom/facebook/react/bridge/WritableMap;\\", args, count);
+}
+
+static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getRootTag(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, NumberKind, \\"getRootTag\\", \\"(D)D\\", args, count);
+}
+
+static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getValue(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, ObjectKind, \\"getValue\\", \\"(DLjava/lang/String;Lcom/facebook/react/bridge/ReadableMap;)Lcom/facebook/react/bridge/WritableMap;\\", args, count);
+}
+
+static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getValueWithCallback(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, \\"getValueWithCallback\\", \\"(Lcom/facebook/react/bridge/Callback;)V\\", args, count);
+}
+
+static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getValueWithPromise(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, \\"getValueWithPromise\\", \\"(ZLcom/facebook/react/bridge/Promise;)V\\", args, count);
+}
+
+NativeSampleTurboModuleSpecJSI::NativeSampleTurboModuleSpecJSI(const JavaTurboModule::InitParams &params)
+  : JavaTurboModule(params) {
+  methodMap_[\\"getConstants\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleSpecJSI_getConstants};
+  methodMap_[\\"voidFunc\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleSpecJSI_voidFunc};
+  methodMap_[\\"getBool\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getBool};
+  methodMap_[\\"getNumber\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getNumber};
+  methodMap_[\\"getString\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getString};
+  methodMap_[\\"getArray\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getArray};
+  methodMap_[\\"getObject\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getObject};
+  methodMap_[\\"getRootTag\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getRootTag};
+  methodMap_[\\"getValue\\"] = MethodMetadata {3, __hostFunction_NativeSampleTurboModuleSpecJSI_getValue};
+  methodMap_[\\"getValueWithCallback\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getValueWithCallback};
+  methodMap_[\\"getValueWithPromise\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getValueWithPromise};
+}
+
+std::shared_ptr<TurboModule> SIMPLE_NATIVE_MODULES_ModuleProvider(const std::string moduleName, const JavaTurboModule::InitParams &params) {
+  if (moduleName == \\"SampleTurboModule\\") {
+    return std::make_shared<NativeSampleTurboModuleSpecJSI>(params);
+  }
+  return nullptr;
+}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateModuleJniCpp can generate fixture TWO_MODULES_DIFFERENT_FILES 1`] = `
+Map {
+  "jni/TWO_MODULES_DIFFERENT_FILES-generated.cpp" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleJniCpp.js
+ */
+
+#include \\"TWO_MODULES_DIFFERENT_FILES.h\\"
+
+namespace facebook {
+namespace react {
+
+static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_voidFunc(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, \\"voidFunc\\", \\"()V\\", args, count);
+}
+
+NativeSampleTurboModuleSpecJSI::NativeSampleTurboModuleSpecJSI(const JavaTurboModule::InitParams &params)
+  : JavaTurboModule(params) {
+  methodMap_[\\"voidFunc\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleSpecJSI_voidFunc};
+}
+
+
+static facebook::jsi::Value __hostFunction_NativeSampleTurboModule2SpecJSI_voidFunc(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, \\"voidFunc\\", \\"()V\\", args, count);
+}
+
+NativeSampleTurboModule2SpecJSI::NativeSampleTurboModule2SpecJSI(const JavaTurboModule::InitParams &params)
+  : JavaTurboModule(params) {
+  methodMap_[\\"voidFunc\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModule2SpecJSI_voidFunc};
+}
+
+std::shared_ptr<TurboModule> TWO_MODULES_DIFFERENT_FILES_ModuleProvider(const std::string moduleName, const JavaTurboModule::InitParams &params) {
+  if (moduleName == \\"SampleTurboModule\\") {
+    return std::make_shared<NativeSampleTurboModuleSpecJSI>(params);
+  }
+  if (moduleName == \\"SampleTurboModule2\\") {
+    return std::make_shared<NativeSampleTurboModule2SpecJSI>(params);
+  }
+  return nullptr;
+}
+
+} // namespace react
+} // namespace facebook
+",
+}
+`;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/__snapshots__/GenerateModuleJniH-test.js.snap b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/__snapshots__/GenerateModuleJniH-test.js.snap
new file mode 100644
index 0000000..5f68533
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/__snapshots__/GenerateModuleJniH-test.js.snap
@@ -0,0 +1,401 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GenerateModuleJniH can generate fixture COMPLEX_OBJECTS 1`] = `
+Map {
+  "jni/COMPLEX_OBJECTS.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleJniH.js
+ */
+
+#pragma once
+
+#include <ReactCommon/JavaTurboModule.h>
+#include <ReactCommon/TurboModule.h>
+#include <jsi/jsi.h>
+
+namespace facebook {
+namespace react {
+
+/**
+ * JNI C++ class for module 'NativeSampleTurboModule'
+ */
+class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public JavaTurboModule {
+public:
+  NativeSampleTurboModuleSpecJSI(const JavaTurboModule::InitParams &params);
+};
+
+
+std::shared_ptr<TurboModule> COMPLEX_OBJECTS_ModuleProvider(const std::string moduleName, const JavaTurboModule::InitParams &params);
+
+} // namespace react
+} // namespace facebook
+",
+  "jni/Android.mk" => "# Copyright (c) Facebook, Inc. and its affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+LOCAL_PATH := $(call my-dir)
+
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := react_codegen_complex_objects
+
+LOCAL_C_INCLUDES := $(LOCAL_PATH)
+
+LOCAL_SRC_FILES := $(wildcard $(LOCAL_PATH)/*.cpp) $(wildcard $(LOCAL_PATH)/react/renderer/components/complex_objects/*.cpp)
+
+LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH) $(LOCAL_PATH)/react/renderer/components/complex_objects
+
+LOCAL_SHARED_LIBRARIES := libjsi libglog libfolly_json libyoga libreact_nativemodule_core librrc_view libreact_render_core libreact_render_graphics libreact_debug libreact_render_debug
+
+LOCAL_CFLAGS := \\\\
+  -DLOG_TAG=\\\\\\"ReactNative\\\\\\"
+
+LOCAL_CFLAGS += -fexceptions -frtti -std=c++14 -Wall
+
+include $(BUILD_SHARED_LIBRARY)
+",
+}
+`;
+
+exports[`GenerateModuleJniH can generate fixture EMPTY_NATIVE_MODULES 1`] = `
+Map {
+  "jni/EMPTY_NATIVE_MODULES.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleJniH.js
+ */
+
+#pragma once
+
+#include <ReactCommon/JavaTurboModule.h>
+#include <ReactCommon/TurboModule.h>
+#include <jsi/jsi.h>
+
+namespace facebook {
+namespace react {
+
+/**
+ * JNI C++ class for module 'NativeSampleTurboModule'
+ */
+class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public JavaTurboModule {
+public:
+  NativeSampleTurboModuleSpecJSI(const JavaTurboModule::InitParams &params);
+};
+
+
+std::shared_ptr<TurboModule> EMPTY_NATIVE_MODULES_ModuleProvider(const std::string moduleName, const JavaTurboModule::InitParams &params);
+
+} // namespace react
+} // namespace facebook
+",
+  "jni/Android.mk" => "# Copyright (c) Facebook, Inc. and its affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+LOCAL_PATH := $(call my-dir)
+
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := react_codegen_empty_native_modules
+
+LOCAL_C_INCLUDES := $(LOCAL_PATH)
+
+LOCAL_SRC_FILES := $(wildcard $(LOCAL_PATH)/*.cpp) $(wildcard $(LOCAL_PATH)/react/renderer/components/empty_native_modules/*.cpp)
+
+LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH) $(LOCAL_PATH)/react/renderer/components/empty_native_modules
+
+LOCAL_SHARED_LIBRARIES := libjsi libglog libfolly_json libyoga libreact_nativemodule_core librrc_view libreact_render_core libreact_render_graphics libreact_debug libreact_render_debug
+
+LOCAL_CFLAGS := \\\\
+  -DLOG_TAG=\\\\\\"ReactNative\\\\\\"
+
+LOCAL_CFLAGS += -fexceptions -frtti -std=c++14 -Wall
+
+include $(BUILD_SHARED_LIBRARY)
+",
+}
+`;
+
+exports[`GenerateModuleJniH can generate fixture NATIVE_MODULES_WITH_TYPE_ALIASES 1`] = `
+Map {
+  "jni/NATIVE_MODULES_WITH_TYPE_ALIASES.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleJniH.js
+ */
+
+#pragma once
+
+#include <ReactCommon/JavaTurboModule.h>
+#include <ReactCommon/TurboModule.h>
+#include <jsi/jsi.h>
+
+namespace facebook {
+namespace react {
+
+/**
+ * JNI C++ class for module 'AliasTurboModule'
+ */
+class JSI_EXPORT AliasTurboModuleSpecJSI : public JavaTurboModule {
+public:
+  AliasTurboModuleSpecJSI(const JavaTurboModule::InitParams &params);
+};
+
+
+std::shared_ptr<TurboModule> NATIVE_MODULES_WITH_TYPE_ALIASES_ModuleProvider(const std::string moduleName, const JavaTurboModule::InitParams &params);
+
+} // namespace react
+} // namespace facebook
+",
+  "jni/Android.mk" => "# Copyright (c) Facebook, Inc. and its affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+LOCAL_PATH := $(call my-dir)
+
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := react_codegen_native_modules_with_type_aliases
+
+LOCAL_C_INCLUDES := $(LOCAL_PATH)
+
+LOCAL_SRC_FILES := $(wildcard $(LOCAL_PATH)/*.cpp) $(wildcard $(LOCAL_PATH)/react/renderer/components/native_modules_with_type_aliases/*.cpp)
+
+LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH) $(LOCAL_PATH)/react/renderer/components/native_modules_with_type_aliases
+
+LOCAL_SHARED_LIBRARIES := libjsi libglog libfolly_json libyoga libreact_nativemodule_core librrc_view libreact_render_core libreact_render_graphics libreact_debug libreact_render_debug
+
+LOCAL_CFLAGS := \\\\
+  -DLOG_TAG=\\\\\\"ReactNative\\\\\\"
+
+LOCAL_CFLAGS += -fexceptions -frtti -std=c++14 -Wall
+
+include $(BUILD_SHARED_LIBRARY)
+",
+}
+`;
+
+exports[`GenerateModuleJniH can generate fixture REAL_MODULE_EXAMPLE 1`] = `
+Map {
+  "jni/REAL_MODULE_EXAMPLE.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleJniH.js
+ */
+
+#pragma once
+
+#include <ReactCommon/JavaTurboModule.h>
+#include <ReactCommon/TurboModule.h>
+#include <jsi/jsi.h>
+
+namespace facebook {
+namespace react {
+
+/**
+ * JNI C++ class for module 'NativeCameraRollManager'
+ */
+class JSI_EXPORT NativeCameraRollManagerSpecJSI : public JavaTurboModule {
+public:
+  NativeCameraRollManagerSpecJSI(const JavaTurboModule::InitParams &params);
+};
+
+/**
+ * JNI C++ class for module 'NativeExceptionsManager'
+ */
+class JSI_EXPORT NativeExceptionsManagerSpecJSI : public JavaTurboModule {
+public:
+  NativeExceptionsManagerSpecJSI(const JavaTurboModule::InitParams &params);
+};
+
+
+std::shared_ptr<TurboModule> REAL_MODULE_EXAMPLE_ModuleProvider(const std::string moduleName, const JavaTurboModule::InitParams &params);
+
+} // namespace react
+} // namespace facebook
+",
+  "jni/Android.mk" => "# Copyright (c) Facebook, Inc. and its affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+LOCAL_PATH := $(call my-dir)
+
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := react_codegen_real_module_example
+
+LOCAL_C_INCLUDES := $(LOCAL_PATH)
+
+LOCAL_SRC_FILES := $(wildcard $(LOCAL_PATH)/*.cpp) $(wildcard $(LOCAL_PATH)/react/renderer/components/real_module_example/*.cpp)
+
+LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH) $(LOCAL_PATH)/react/renderer/components/real_module_example
+
+LOCAL_SHARED_LIBRARIES := libjsi libglog libfolly_json libyoga libreact_nativemodule_core librrc_view libreact_render_core libreact_render_graphics libreact_debug libreact_render_debug
+
+LOCAL_CFLAGS := \\\\
+  -DLOG_TAG=\\\\\\"ReactNative\\\\\\"
+
+LOCAL_CFLAGS += -fexceptions -frtti -std=c++14 -Wall
+
+include $(BUILD_SHARED_LIBRARY)
+",
+}
+`;
+
+exports[`GenerateModuleJniH can generate fixture SIMPLE_NATIVE_MODULES 1`] = `
+Map {
+  "jni/SIMPLE_NATIVE_MODULES.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleJniH.js
+ */
+
+#pragma once
+
+#include <ReactCommon/JavaTurboModule.h>
+#include <ReactCommon/TurboModule.h>
+#include <jsi/jsi.h>
+
+namespace facebook {
+namespace react {
+
+/**
+ * JNI C++ class for module 'NativeSampleTurboModule'
+ */
+class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public JavaTurboModule {
+public:
+  NativeSampleTurboModuleSpecJSI(const JavaTurboModule::InitParams &params);
+};
+
+
+std::shared_ptr<TurboModule> SIMPLE_NATIVE_MODULES_ModuleProvider(const std::string moduleName, const JavaTurboModule::InitParams &params);
+
+} // namespace react
+} // namespace facebook
+",
+  "jni/Android.mk" => "# Copyright (c) Facebook, Inc. and its affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+LOCAL_PATH := $(call my-dir)
+
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := react_codegen_simple_native_modules
+
+LOCAL_C_INCLUDES := $(LOCAL_PATH)
+
+LOCAL_SRC_FILES := $(wildcard $(LOCAL_PATH)/*.cpp) $(wildcard $(LOCAL_PATH)/react/renderer/components/simple_native_modules/*.cpp)
+
+LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH) $(LOCAL_PATH)/react/renderer/components/simple_native_modules
+
+LOCAL_SHARED_LIBRARIES := libjsi libglog libfolly_json libyoga libreact_nativemodule_core librrc_view libreact_render_core libreact_render_graphics libreact_debug libreact_render_debug
+
+LOCAL_CFLAGS := \\\\
+  -DLOG_TAG=\\\\\\"ReactNative\\\\\\"
+
+LOCAL_CFLAGS += -fexceptions -frtti -std=c++14 -Wall
+
+include $(BUILD_SHARED_LIBRARY)
+",
+}
+`;
+
+exports[`GenerateModuleJniH can generate fixture TWO_MODULES_DIFFERENT_FILES 1`] = `
+Map {
+  "jni/TWO_MODULES_DIFFERENT_FILES.h" => "
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleJniH.js
+ */
+
+#pragma once
+
+#include <ReactCommon/JavaTurboModule.h>
+#include <ReactCommon/TurboModule.h>
+#include <jsi/jsi.h>
+
+namespace facebook {
+namespace react {
+
+/**
+ * JNI C++ class for module 'NativeSampleTurboModule'
+ */
+class JSI_EXPORT NativeSampleTurboModuleSpecJSI : public JavaTurboModule {
+public:
+  NativeSampleTurboModuleSpecJSI(const JavaTurboModule::InitParams &params);
+};
+
+/**
+ * JNI C++ class for module 'NativeSampleTurboModule2'
+ */
+class JSI_EXPORT NativeSampleTurboModule2SpecJSI : public JavaTurboModule {
+public:
+  NativeSampleTurboModule2SpecJSI(const JavaTurboModule::InitParams &params);
+};
+
+
+std::shared_ptr<TurboModule> TWO_MODULES_DIFFERENT_FILES_ModuleProvider(const std::string moduleName, const JavaTurboModule::InitParams &params);
+
+} // namespace react
+} // namespace facebook
+",
+  "jni/Android.mk" => "# Copyright (c) Facebook, Inc. and its affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+LOCAL_PATH := $(call my-dir)
+
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := react_codegen_two_modules_different_files
+
+LOCAL_C_INCLUDES := $(LOCAL_PATH)
+
+LOCAL_SRC_FILES := $(wildcard $(LOCAL_PATH)/*.cpp) $(wildcard $(LOCAL_PATH)/react/renderer/components/two_modules_different_files/*.cpp)
+
+LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH) $(LOCAL_PATH)/react/renderer/components/two_modules_different_files
+
+LOCAL_SHARED_LIBRARIES := libjsi libglog libfolly_json libyoga libreact_nativemodule_core librrc_view libreact_render_core libreact_render_graphics libreact_debug libreact_render_debug
+
+LOCAL_CFLAGS := \\\\
+  -DLOG_TAG=\\\\\\"ReactNative\\\\\\"
+
+LOCAL_CFLAGS += -fexceptions -frtti -std=c++14 -Wall
+
+include $(BUILD_SHARED_LIBRARY)
+",
+}
+`;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/__snapshots__/GenerateModuleMm-test.js.snap b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/__snapshots__/GenerateModuleMm-test.js.snap
new file mode 100644
index 0000000..3053a5f
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/generators/modules/__tests__/__snapshots__/GenerateModuleMm-test.js.snap
@@ -0,0 +1,478 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GenerateModuleMm can generate fixture COMPLEX_OBJECTS 1`] = `
+Map {
+  "COMPLEX_OBJECTS-generated.mm" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleObjCpp
+ *
+ * We create an umbrella header (and corresponding implementation) here since
+ * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
+ * must have a single output. More files => more genrule()s => slower builds.
+ */
+
+#import \\"COMPLEX_OBJECTS.h\\"
+
+@implementation RCTCxxConvert (NativeSampleTurboModule_SpecDifficultAE)
++ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecDifficultAE:(id)json
+{
+  return facebook::react::managedPointer<JS::NativeSampleTurboModule::SpecDifficultAE>(json);
+}
+@end
+@implementation RCTCxxConvert (NativeSampleTurboModule_SpecDifficultA)
++ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecDifficultA:(id)json
+{
+  return facebook::react::managedPointer<JS::NativeSampleTurboModule::SpecDifficultA>(json);
+}
+@end
+@implementation RCTCxxConvert (NativeSampleTurboModule_SpecOptionalsAOptionalObjectProperty)
++ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecOptionalsAOptionalObjectProperty:(id)json
+{
+  return facebook::react::managedPointer<JS::NativeSampleTurboModule::SpecOptionalsAOptionalObjectProperty>(json);
+}
+@end
+@implementation RCTCxxConvert (NativeSampleTurboModule_SpecOptionalsA)
++ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecOptionalsA:(id)json
+{
+  return facebook::react::managedPointer<JS::NativeSampleTurboModule::SpecOptionalsA>(json);
+}
+@end
+@implementation RCTCxxConvert (NativeSampleTurboModule_SpecGetArraysOptionsArrayOfObjectsElement)
++ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecGetArraysOptionsArrayOfObjectsElement:(id)json
+{
+  return facebook::react::managedPointer<JS::NativeSampleTurboModule::SpecGetArraysOptionsArrayOfObjectsElement>(json);
+}
+@end
+@implementation RCTCxxConvert (NativeSampleTurboModule_SpecGetArraysOptions)
++ (RCTManagedPointer *)JS_NativeSampleTurboModule_SpecGetArraysOptions:(id)json
+{
+  return facebook::react::managedPointer<JS::NativeSampleTurboModule::SpecGetArraysOptions>(json);
+}
+@end
+namespace facebook {
+  namespace react {
+    
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_difficult(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"difficult\\", @selector(difficult:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_optionals(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"optionals\\", @selector(optionals:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_optionalMethod(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"optionalMethod\\", @selector(optionalMethod:callback:extras:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getArrays(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"getArrays\\", @selector(getArrays:), args, count);
+    }
+
+    NativeSampleTurboModuleSpecJSI::NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
+      : ObjCTurboModule(params) {
+        
+        methodMap_[\\"difficult\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_difficult};
+        setMethodArgConversionSelector(@\\"difficult\\", 0, @\\"JS_NativeSampleTurboModule_SpecDifficultA:\\");
+        
+        methodMap_[\\"optionals\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_optionals};
+        setMethodArgConversionSelector(@\\"optionals\\", 0, @\\"JS_NativeSampleTurboModule_SpecOptionalsA:\\");
+        
+        methodMap_[\\"optionalMethod\\"] = MethodMetadata {3, __hostFunction_NativeSampleTurboModuleSpecJSI_optionalMethod};
+        
+        
+        methodMap_[\\"getArrays\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getArrays};
+        setMethodArgConversionSelector(@\\"getArrays\\", 0, @\\"JS_NativeSampleTurboModule_SpecGetArraysOptions:\\");
+    }
+  } // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateModuleMm can generate fixture EMPTY_NATIVE_MODULES 1`] = `
+Map {
+  "EMPTY_NATIVE_MODULES-generated.mm" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleObjCpp
+ *
+ * We create an umbrella header (and corresponding implementation) here since
+ * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
+ * must have a single output. More files => more genrule()s => slower builds.
+ */
+
+#import \\"EMPTY_NATIVE_MODULES.h\\"
+
+
+namespace facebook {
+  namespace react {
+    
+
+    NativeSampleTurboModuleSpecJSI::NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
+      : ObjCTurboModule(params) {
+        
+    }
+  } // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateModuleMm can generate fixture NATIVE_MODULES_WITH_TYPE_ALIASES 1`] = `
+Map {
+  "NATIVE_MODULES_WITH_TYPE_ALIASES-generated.mm" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleObjCpp
+ *
+ * We create an umbrella header (and corresponding implementation) here since
+ * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
+ * must have a single output. More files => more genrule()s => slower builds.
+ */
+
+#import \\"NATIVE_MODULES_WITH_TYPE_ALIASES.h\\"
+
+@implementation RCTCxxConvert (AliasTurboModule_OptionsOffset)
++ (RCTManagedPointer *)JS_AliasTurboModule_OptionsOffset:(id)json
+{
+  return facebook::react::managedPointer<JS::AliasTurboModule::OptionsOffset>(json);
+}
+@end
+@implementation RCTCxxConvert (AliasTurboModule_OptionsSize)
++ (RCTManagedPointer *)JS_AliasTurboModule_OptionsSize:(id)json
+{
+  return facebook::react::managedPointer<JS::AliasTurboModule::OptionsSize>(json);
+}
+@end
+@implementation RCTCxxConvert (AliasTurboModule_OptionsDisplaySize)
++ (RCTManagedPointer *)JS_AliasTurboModule_OptionsDisplaySize:(id)json
+{
+  return facebook::react::managedPointer<JS::AliasTurboModule::OptionsDisplaySize>(json);
+}
+@end
+@implementation RCTCxxConvert (AliasTurboModule_Options)
++ (RCTManagedPointer *)JS_AliasTurboModule_Options:(id)json
+{
+  return facebook::react::managedPointer<JS::AliasTurboModule::Options>(json);
+}
+@end
+namespace facebook {
+  namespace react {
+    
+    static facebook::jsi::Value __hostFunction_AliasTurboModuleSpecJSI_cropImage(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"cropImage\\", @selector(cropImage:), args, count);
+    }
+
+    AliasTurboModuleSpecJSI::AliasTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
+      : ObjCTurboModule(params) {
+        
+        methodMap_[\\"cropImage\\"] = MethodMetadata {1, __hostFunction_AliasTurboModuleSpecJSI_cropImage};
+        setMethodArgConversionSelector(@\\"cropImage\\", 0, @\\"JS_AliasTurboModule_Options:\\");
+    }
+  } // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateModuleMm can generate fixture REAL_MODULE_EXAMPLE 1`] = `
+Map {
+  "REAL_MODULE_EXAMPLE-generated.mm" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleObjCpp
+ *
+ * We create an umbrella header (and corresponding implementation) here since
+ * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
+ * must have a single output. More files => more genrule()s => slower builds.
+ */
+
+#import \\"REAL_MODULE_EXAMPLE.h\\"
+
+@implementation RCTCxxConvert (NativeCameraRollManager_GetPhotosParams)
++ (RCTManagedPointer *)JS_NativeCameraRollManager_GetPhotosParams:(id)json
+{
+  return facebook::react::managedPointer<JS::NativeCameraRollManager::GetPhotosParams>(json);
+}
+@end
+namespace facebook {
+  namespace react {
+    
+    static facebook::jsi::Value __hostFunction_NativeCameraRollManagerSpecJSI_getPhotos(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"getPhotos\\", @selector(getPhotos:resolve:reject:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeCameraRollManagerSpecJSI_saveToCameraRoll(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"saveToCameraRoll\\", @selector(saveToCameraRoll:type:resolve:reject:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeCameraRollManagerSpecJSI_deletePhotos(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"deletePhotos\\", @selector(deletePhotos:resolve:reject:), args, count);
+    }
+
+    NativeCameraRollManagerSpecJSI::NativeCameraRollManagerSpecJSI(const ObjCTurboModule::InitParams &params)
+      : ObjCTurboModule(params) {
+        
+        methodMap_[\\"getPhotos\\"] = MethodMetadata {1, __hostFunction_NativeCameraRollManagerSpecJSI_getPhotos};
+        setMethodArgConversionSelector(@\\"getPhotos\\", 0, @\\"JS_NativeCameraRollManager_GetPhotosParams:\\");
+        
+        methodMap_[\\"saveToCameraRoll\\"] = MethodMetadata {2, __hostFunction_NativeCameraRollManagerSpecJSI_saveToCameraRoll};
+        
+        
+        methodMap_[\\"deletePhotos\\"] = MethodMetadata {1, __hostFunction_NativeCameraRollManagerSpecJSI_deletePhotos};
+        
+    }
+  } // namespace react
+} // namespace facebook
+@implementation RCTCxxConvert (NativeExceptionsManager_StackFrame)
++ (RCTManagedPointer *)JS_NativeExceptionsManager_StackFrame:(id)json
+{
+  return facebook::react::managedPointer<JS::NativeExceptionsManager::StackFrame>(json);
+}
+@end
+@implementation RCTCxxConvert (NativeExceptionsManager_ExceptionData)
++ (RCTManagedPointer *)JS_NativeExceptionsManager_ExceptionData:(id)json
+{
+  return facebook::react::managedPointer<JS::NativeExceptionsManager::ExceptionData>(json);
+}
+@end
+namespace facebook {
+  namespace react {
+    
+    static facebook::jsi::Value __hostFunction_NativeExceptionsManagerSpecJSI_reportFatalException(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"reportFatalException\\", @selector(reportFatalException:stack:exceptionId:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeExceptionsManagerSpecJSI_reportSoftException(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"reportSoftException\\", @selector(reportSoftException:stack:exceptionId:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeExceptionsManagerSpecJSI_reportException(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"reportException\\", @selector(reportException:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeExceptionsManagerSpecJSI_updateExceptionMessage(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"updateExceptionMessage\\", @selector(updateExceptionMessage:stack:exceptionId:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeExceptionsManagerSpecJSI_dismissRedbox(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"dismissRedbox\\", @selector(dismissRedbox), args, count);
+    }
+
+    NativeExceptionsManagerSpecJSI::NativeExceptionsManagerSpecJSI(const ObjCTurboModule::InitParams &params)
+      : ObjCTurboModule(params) {
+        
+        methodMap_[\\"reportFatalException\\"] = MethodMetadata {3, __hostFunction_NativeExceptionsManagerSpecJSI_reportFatalException};
+        
+        
+        methodMap_[\\"reportSoftException\\"] = MethodMetadata {3, __hostFunction_NativeExceptionsManagerSpecJSI_reportSoftException};
+        
+        
+        methodMap_[\\"reportException\\"] = MethodMetadata {1, __hostFunction_NativeExceptionsManagerSpecJSI_reportException};
+        setMethodArgConversionSelector(@\\"reportException\\", 0, @\\"JS_NativeExceptionsManager_ExceptionData:\\");
+        
+        methodMap_[\\"updateExceptionMessage\\"] = MethodMetadata {3, __hostFunction_NativeExceptionsManagerSpecJSI_updateExceptionMessage};
+        
+        
+        methodMap_[\\"dismissRedbox\\"] = MethodMetadata {0, __hostFunction_NativeExceptionsManagerSpecJSI_dismissRedbox};
+        
+    }
+  } // namespace react
+} // namespace facebook
+@implementation RCTCxxConvert (NativeImagePickerIOS_SpecOpenCameraDialogConfig)
++ (RCTManagedPointer *)JS_NativeImagePickerIOS_SpecOpenCameraDialogConfig:(id)json
+{
+  return facebook::react::managedPointer<JS::NativeImagePickerIOS::SpecOpenCameraDialogConfig>(json);
+}
+@end
+namespace facebook {
+  namespace react {
+    
+    static facebook::jsi::Value __hostFunction_NativeImagePickerIOSSpecJSI_openCameraDialog(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"openCameraDialog\\", @selector(openCameraDialog:successCallback:cancelCallback:), args, count);
+    }
+
+    NativeImagePickerIOSSpecJSI::NativeImagePickerIOSSpecJSI(const ObjCTurboModule::InitParams &params)
+      : ObjCTurboModule(params) {
+        
+        methodMap_[\\"openCameraDialog\\"] = MethodMetadata {3, __hostFunction_NativeImagePickerIOSSpecJSI_openCameraDialog};
+        setMethodArgConversionSelector(@\\"openCameraDialog\\", 0, @\\"JS_NativeImagePickerIOS_SpecOpenCameraDialogConfig:\\");
+    }
+  } // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateModuleMm can generate fixture SIMPLE_NATIVE_MODULES 1`] = `
+Map {
+  "SIMPLE_NATIVE_MODULES-generated.mm" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleObjCpp
+ *
+ * We create an umbrella header (and corresponding implementation) here since
+ * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
+ * must have a single output. More files => more genrule()s => slower builds.
+ */
+
+#import \\"SIMPLE_NATIVE_MODULES.h\\"
+
+
+namespace facebook {
+  namespace react {
+    
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_voidFunc(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"voidFunc\\", @selector(voidFunc), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getBool(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, \\"getBool\\", @selector(getBool:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getNumber(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getNumber\\", @selector(getNumber:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, \\"getString\\", @selector(getString:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getArray(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, \\"getArray\\", @selector(getArray:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getObject(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getObject\\", @selector(getObject:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getRootTag(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, \\"getRootTag\\", @selector(getRootTag:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getValue(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getValue\\", @selector(getValue:y:z:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getValueWithCallback(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"getValueWithCallback\\", @selector(getValueWithCallback:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getValueWithPromise(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, \\"getValueWithPromise\\", @selector(getValueWithPromise:resolve:reject:), args, count);
+    }
+
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, \\"getConstants\\", @selector(getConstants), args, count);
+    }
+
+    NativeSampleTurboModuleSpecJSI::NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
+      : ObjCTurboModule(params) {
+        
+        methodMap_[\\"voidFunc\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleSpecJSI_voidFunc};
+        
+        
+        methodMap_[\\"getBool\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getBool};
+        
+        
+        methodMap_[\\"getNumber\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getNumber};
+        
+        
+        methodMap_[\\"getString\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getString};
+        
+        
+        methodMap_[\\"getArray\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getArray};
+        
+        
+        methodMap_[\\"getObject\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getObject};
+        
+        
+        methodMap_[\\"getRootTag\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getRootTag};
+        
+        
+        methodMap_[\\"getValue\\"] = MethodMetadata {3, __hostFunction_NativeSampleTurboModuleSpecJSI_getValue};
+        
+        
+        methodMap_[\\"getValueWithCallback\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getValueWithCallback};
+        
+        
+        methodMap_[\\"getValueWithPromise\\"] = MethodMetadata {1, __hostFunction_NativeSampleTurboModuleSpecJSI_getValueWithPromise};
+        
+        
+        methodMap_[\\"getConstants\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleSpecJSI_getConstants};
+        
+    }
+  } // namespace react
+} // namespace facebook
+",
+}
+`;
+
+exports[`GenerateModuleMm can generate fixture TWO_MODULES_DIFFERENT_FILES 1`] = `
+Map {
+  "TWO_MODULES_DIFFERENT_FILES-generated.mm" => "/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @generated by codegen project: GenerateModuleObjCpp
+ *
+ * We create an umbrella header (and corresponding implementation) here since
+ * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
+ * must have a single output. More files => more genrule()s => slower builds.
+ */
+
+#import \\"TWO_MODULES_DIFFERENT_FILES.h\\"
+
+
+namespace facebook {
+  namespace react {
+    
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModuleSpecJSI_voidFunc(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"voidFunc\\", @selector(voidFunc), args, count);
+    }
+
+    NativeSampleTurboModuleSpecJSI::NativeSampleTurboModuleSpecJSI(const ObjCTurboModule::InitParams &params)
+      : ObjCTurboModule(params) {
+        
+        methodMap_[\\"voidFunc\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModuleSpecJSI_voidFunc};
+        
+    }
+  } // namespace react
+} // namespace facebook
+
+namespace facebook {
+  namespace react {
+    
+    static facebook::jsi::Value __hostFunction_NativeSampleTurboModule2SpecJSI_voidFunc(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, \\"voidFunc\\", @selector(voidFunc), args, count);
+    }
+
+    NativeSampleTurboModule2SpecJSI::NativeSampleTurboModule2SpecJSI(const ObjCTurboModule::InitParams &params)
+      : ObjCTurboModule(params) {
+        
+        methodMap_[\\"voidFunc\\"] = MethodMetadata {0, __hostFunction_NativeSampleTurboModule2SpecJSI_voidFunc};
+        
+    }
+  } // namespace react
+} // namespace facebook
+",
+}
+`;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/__test_fixtures__/failures.js b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/__test_fixtures__/failures.js
new file mode 100644
index 0000000..b5a8f8a
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/__test_fixtures__/failures.js
@@ -0,0 +1,598 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const COMMANDS_DEFINED_INLINE = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+const codegenNativeCommands = require('codegenNativeCommands');
+const codegenNativeComponent = require('codegenNativeComponent');
+
+import type {Int32} from 'CodegenTypes';
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+export type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+  // No props
+|}>;
+
+export const Commands = codegenNativeCommands<{
+  +hotspotUpdate: (ref: React.Ref<'RCTView'>, x: Int32, y: Int32) => void,
+}>({
+  supportedCommands: ['hotspotUpdate'],
+});
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): HostComponent<ModuleProps>);
+`;
+
+const COMMANDS_DEFINED_MULTIPLE_TIMES = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+const codegenNativeCommands = require('codegenNativeCommands');
+const codegenNativeComponent = require('codegenNativeComponent');
+
+import type {Int32} from 'CodegenTypes';
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+interface NativeCommands {
+  +hotspotUpdate: (viewRef: React.Ref<'RCTView'>, x: Int32, y: Int32) => void;
+}
+
+export type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+  // No props or events
+|}>;
+
+export const Commands = codegenNativeCommands<NativeCommands>({
+  supportedCommands: ['hotspotUpdate'],
+});
+export const Commands2 = codegenNativeCommands<NativeCommands>({
+  supportedCommands: ['hotspotUpdate'],
+});
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): HostComponent<ModuleProps>);
+`;
+
+const COMMANDS_DEFINED_WITHOUT_REF = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+const codegenNativeCommands = require('codegenNativeCommands');
+const codegenNativeComponent = require('codegenNativeComponent');
+
+import type {Int32} from 'CodegenTypes';
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+interface NativeCommands {
+  +hotspotUpdate: (x: Int32, y: Int32) => void;
+}
+
+export type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+  // No props or events
+|}>;
+
+export const Commands = codegenNativeCommands<NativeCommands>({
+  supportedCommands: ['hotspotUpdate'],
+});
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): HostComponent<ModuleProps>);
+`;
+
+const COMMANDS_DEFINED_WITH_NULLABLE_REF = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+const codegenNativeCommands = require('codegenNativeCommands');
+const codegenNativeComponent = require('codegenNativeComponent');
+
+import type {Int32} from 'CodegenTypes';
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+interface NativeCommands {
+  +hotspotUpdate: (viewRef: ?React.Ref<'RCTView'>, x: Int32, y: Int32) => void;
+}
+
+export type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+  // No props or events
+|}>;
+
+export const Commands = codegenNativeCommands<NativeCommands>({
+  supportedCommands: ['hotspotUpdate'],
+});
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): HostComponent<ModuleProps>);
+`;
+
+const COMMANDS_DEFINED_WITH_MISMATCHED_METHOD_NAMES = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+const codegenNativeCommands = require('codegenNativeCommands');
+const codegenNativeComponent = require('codegenNativeComponent');
+
+import type {Int32} from 'CodegenTypes';
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+interface NativeCommands {
+  +hotspotUpdate: (viewRef: React.Ref<'RCTView'>, x: Int32, y: Int32) => void;
+  +scrollTo: (
+    viewRef: React.Ref<'RCTView'>,
+    y: Int32,
+    animated: boolean,
+  ) => void;
+}
+
+export type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+  // No props or events
+|}>;
+
+export const Commands = codegenNativeCommands<NativeCommands>({
+  supportedCommands: ['scrollTo'],
+});
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): HostComponent<ModuleProps>);
+`;
+
+const COMMANDS_DEFINED_WITHOUT_METHOD_NAMES = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+const codegenNativeCommands = require('codegenNativeCommands');
+const codegenNativeComponent = require('codegenNativeComponent');
+
+import type {Int32} from 'CodegenTypes';
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+interface NativeCommands {
+  +hotspotUpdate: (viewRef: React.Ref<'RCTView'>, x: Int32, y: Int32) => void;
+  +scrollTo: (
+    viewRef: React.Ref<'RCTView'>,
+    y: Int32,
+    animated: boolean,
+  ) => void;
+}
+
+export type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+  // No props or events
+|}>;
+
+export const Commands = codegenNativeCommands<NativeCommands>();
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): HostComponent<ModuleProps>);
+`;
+
+const NULLABLE_WITH_DEFAULT = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+const codegenNativeComponent = require('codegenNativeComponent');
+
+import type {WithDefault, Float} from 'CodegenTypes';
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+export type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+  nullable_with_default: ?WithDefault<Float, 1.0>,
+|}>;
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): HostComponent<ModuleProps>);
+`;
+
+const NON_OPTIONAL_KEY_WITH_DEFAULT_VALUE = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+const codegenNativeComponent = require('codegenNativeComponent');
+
+import type {WithDefault, Float} from 'CodegenTypes';
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+export type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+  required_key_with_default: WithDefault<Float, 1.0>,
+|}>;
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): HostComponent<ModuleProps>);
+`;
+
+const PROPS_CONFLICT_NAMES = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+const codegenNativeComponent = require('codegenNativeComponent');
+
+export type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+  isEnabled: string,
+
+  isEnabled: boolean,
+|}>;
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): HostComponent<ModuleProps>);
+`;
+
+const PROPS_CONFLICT_WITH_SPREAD_PROPS = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+const codegenNativeComponent = require('codegenNativeComponent');
+
+type PropsInFile = $ReadOnly<{|
+  isEnabled: boolean,
+|}>;
+
+export type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+
+  ...PropsInFile,
+  isEnabled: boolean,
+|}>;
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): HostComponent<ModuleProps>);
+`;
+
+const PROPS_SPREAD_CONFLICTS_WITH_PROPS = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+const codegenNativeComponent = require('codegenNativeComponent');
+
+type PropsInFile = $ReadOnly<{|
+  isEnabled: boolean,
+|}>;
+
+export type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+
+  isEnabled: boolean,
+  ...PropsInFile,
+|}>;
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): HostComponent<ModuleProps>);
+`;
+
+const PROP_NUMBER_TYPE = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+const codegenNativeComponent = require('codegenNativeComponent');
+
+export type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+
+  someProp: number
+|}>;
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): HostComponent<ModuleProps>);
+`;
+
+const PROP_MIXED_ENUM = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+const codegenNativeComponent = require('codegenNativeComponent');
+
+export type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+
+  someProp?: WithDefault<'foo' | 1, 1>
+|}>;
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): HostComponent<ModuleProps>);
+`;
+
+const PROP_ENUM_BOOLEAN = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+const codegenNativeComponent = require('codegenNativeComponent');
+
+export type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+
+  someProp?: WithDefault<false | true, false>
+|}>;
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): HostComponent<ModuleProps>);
+`;
+
+const PROP_ARRAY_MIXED_ENUM = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+const codegenNativeComponent = require('codegenNativeComponent');
+
+export type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+
+  someProp?: WithDefault<$ReadOnlyArray<'foo' | 1>, 1>
+|}>;
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): HostComponent<ModuleProps>);
+`;
+
+const PROP_ARRAY_ENUM_BOOLEAN = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+const codegenNativeComponent = require('codegenNativeComponent');
+
+export type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+
+  someProp?: WithDefault<$ReadOnlyArray<false | true>, false>
+|}>;
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): HostComponent<ModuleProps>);
+`;
+
+const PROP_ARRAY_ENUM_INT = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+const codegenNativeComponent = require('codegenNativeComponent');
+
+export type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+
+  someProp?: WithDefault<$ReadOnlyArray<0 | 1>, 0>
+|}>;
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): HostComponent<ModuleProps>);
+`;
+
+module.exports = {
+  COMMANDS_DEFINED_INLINE,
+  COMMANDS_DEFINED_MULTIPLE_TIMES,
+  COMMANDS_DEFINED_WITH_MISMATCHED_METHOD_NAMES,
+  COMMANDS_DEFINED_WITHOUT_METHOD_NAMES,
+  COMMANDS_DEFINED_WITHOUT_REF,
+  COMMANDS_DEFINED_WITH_NULLABLE_REF,
+  NULLABLE_WITH_DEFAULT,
+  NON_OPTIONAL_KEY_WITH_DEFAULT_VALUE,
+  PROPS_CONFLICT_NAMES,
+  PROPS_CONFLICT_WITH_SPREAD_PROPS,
+  PROPS_SPREAD_CONFLICTS_WITH_PROPS,
+  PROP_NUMBER_TYPE,
+  PROP_MIXED_ENUM,
+  PROP_ENUM_BOOLEAN,
+  PROP_ARRAY_MIXED_ENUM,
+  PROP_ARRAY_ENUM_BOOLEAN,
+  PROP_ARRAY_ENUM_INT,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/__test_fixtures__/fixtures.js b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/__test_fixtures__/fixtures.js
new file mode 100644
index 0000000..ef77f69
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/__test_fixtures__/fixtures.js
@@ -0,0 +1,1014 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const EVENT_DEFINITION = `
+  boolean_required: boolean,
+  boolean_optional_key?: boolean,
+  boolean_optional_value: ?boolean,
+  boolean_optional_both?: ?boolean,
+
+  string_required: string,
+  string_optional_key?: string,
+  string_optional_value: ?string,
+  string_optional_both?: ?string,
+
+  double_required: Double,
+  double_optional_key?: Double,
+  double_optional_value: ?Double,
+  double_optional_both?: ?Double,
+
+  float_required: Float,
+  float_optional_key?: Float,
+  float_optional_value: ?Float,
+  float_optional_both?: ?Float,
+
+  int32_required: Int32,
+  int32_optional_key?: Int32,
+  int32_optional_value: ?Int32,
+  int32_optional_both?: ?Int32,
+
+  enum_required: ('small' | 'large'),
+  enum_optional_key?: ('small' | 'large'),
+  enum_optional_value: ?('small' | 'large'),
+  enum_optional_both?: ?('small' | 'large'),
+
+  object_required: {
+    boolean_required: boolean,
+  },
+
+  object_optional_key?: {
+    string_optional_key?: string,
+  },
+
+  object_optional_value: ?{
+    float_optional_value: ?Float,
+  },
+
+  object_optional_both?: ?{
+    int32_optional_both?: ?Int32,
+  },
+
+  object_required_nested_2_layers: {
+    object_optional_nested_1_layer?: ?{
+      boolean_required: Int32,
+      string_optional_key?: string,
+      double_optional_value: ?Double,
+      float_optional_value: ?Float,
+      int32_optional_both?: ?Int32,
+    }
+  },
+
+  object_readonly_required: $ReadOnly<{
+    boolean_required: boolean,
+  }>,
+
+  object_readonly_optional_key?: $ReadOnly<{
+    string_optional_key?: string,
+  }>,
+
+  object_readonly_optional_value: ?$ReadOnly<{
+    float_optional_value: ?Float,
+  }>,
+
+  object_readonly_optional_both?: ?$ReadOnly<{
+    int32_optional_both?: ?Int32,
+  }>,
+`;
+
+const ONE_OF_EACH_PROP_EVENT_DEFAULT_AND_OPTIONS = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+const codegenNativeComponent = require('codegenNativeComponent');
+
+import type {
+  BubblingEventHandler,
+  DirectEventHandler,
+  WithDefault,
+} from 'CodegenTypes';
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+
+  // Props
+  boolean_default_true_optional_both?: WithDefault<boolean, true>,
+
+  // Events
+  onDirectEventDefinedInlineNull: DirectEventHandler<null>,
+  onBubblingEventDefinedInlineNull: BubblingEventHandler<null>,
+|}>;
+
+export default (codegenNativeComponent<ModuleProps>('Module', {
+  interfaceOnly: true,
+  paperComponentName: 'RCTModule',
+}): HostComponent<ModuleProps>);
+`;
+
+const ONE_OF_EACH_PROP_EVENT_DEFAULT_AND_OPTIONS_NO_CAST = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+const codegenNativeComponent = require('codegenNativeComponent');
+
+import type {
+  BubblingEventHandler,
+  DirectEventHandler,
+  WithDefault,
+} from 'CodegenTypes';
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+
+  // Props
+  boolean_default_true_optional_both?: WithDefault<boolean, true>,
+
+  // Events
+  onDirectEventDefinedInlineNull: DirectEventHandler<null>,
+  onBubblingEventDefinedInlineNull: BubblingEventHandler<null>,
+|}>;
+
+export default codegenNativeComponent<ModuleProps>('Module', {
+  interfaceOnly: true,
+  excludedPlatforms: ['android'],
+  paperComponentName: 'RCTModule',
+});
+`;
+
+const NO_PROPS_EVENTS_ONLY_DEPRECATED_VIEW_CONFIG_NAME_OPTION = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+const codegenNativeComponent = require('codegenNativeComponent');
+
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+|}>;
+
+export default (codegenNativeComponent<ModuleProps>('Module', {
+  deprecatedViewConfigName: 'DeprecateModuleName',
+}): HostComponent<ModuleProps>);
+`;
+
+const ALL_PROP_TYPES_NO_EVENTS = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+const codegenNativeComponent = require('codegenNativeComponent');
+
+import type {Int32, Double, Float, WithDefault} from 'CodegenTypes';
+import type {ImageSource} from 'ImageSource';
+import type {ColorValue, ColorArrayValue, PointValue, EdgeInsetsValue} from 'StyleSheetTypes';
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+
+  // Props
+  // Boolean props
+  boolean_required: boolean,
+  boolean_optional_key?: WithDefault<boolean, true>,
+  boolean_optional_both?: WithDefault<boolean, true>,
+
+  // Boolean props, null default
+  boolean_null_optional_key?: WithDefault<boolean, null>,
+  boolean_null_optional_both?: WithDefault<boolean, null>,
+
+  // String props
+  string_required: string,
+  string_optional_key?: WithDefault<string, ''>,
+  string_optional_both?: WithDefault<string, ''>,
+
+  // String props, null default
+  string_null_optional_key?: WithDefault<string, null>,
+  string_null_optional_both?: WithDefault<string, null>,
+
+  // Stringish props
+  stringish_required: Stringish,
+  stringish_optional_key?: WithDefault<Stringish, ''>,
+  stringish_optional_both?: WithDefault<Stringish, ''>,
+
+  // Stringish props, null default
+  stringish_null_optional_key?: WithDefault<Stringish, null>,
+  stringish_null_optional_both?: WithDefault<Stringish, null>,
+
+  // Double props
+  double_required: Double,
+  double_optional_key?: WithDefault<Double, 1.1>,
+  double_optional_both?: WithDefault<Double, 1.1>,
+
+  // Float props
+  float_required: Float,
+  float_optional_key?: WithDefault<Float, 1.1>,
+  float_optional_both?: WithDefault<Float, 1.1>,
+
+  // Float props, null default
+  float_null_optional_key?: WithDefault<Float, null>,
+  float_null_optional_both?: WithDefault<Float, null>,
+
+  // Int32 props
+  int32_required: Int32,
+  int32_optional_key?: WithDefault<Int32, 1>,
+  int32_optional_both?: WithDefault<Int32, 1>,
+
+  // String enum props
+  enum_optional_key?: WithDefault<'small' | 'large', 'small'>,
+  enum_optional_both?: WithDefault<'small' | 'large', 'small'>,
+
+  // Int enum props
+  int_enum_optional_key?: WithDefault<0 | 1, 0>,
+
+  // Object props
+  object_optional_key?: $ReadOnly<{| prop: string |}>,
+  object_optional_both?: ?$ReadOnly<{| prop: string |}>,
+  object_optional_value: ?$ReadOnly<{| prop: string |}>,
+
+  // ImageSource props
+  image_required: ImageSource,
+  image_optional_value: ?ImageSource,
+  image_optional_both?: ?ImageSource,
+
+  // ColorValue props
+  color_required: ColorValue,
+  color_optional_key?: ColorValue,
+  color_optional_value: ?ColorValue,
+  color_optional_both?: ?ColorValue,
+
+  // ColorArrayValue props
+  color_array_required: ColorArrayValue,
+  color_array_optional_key?: ColorArrayValue,
+  color_array_optional_value: ?ColorArrayValue,
+  color_array_optional_both?: ?ColorArrayValue,
+
+  // ProcessedColorValue props
+  processed_color_required: ProcessedColorValue,
+  processed_color_optional_key?: ProcessedColorValue,
+  processed_color_optional_value: ?ProcessedColorValue,
+  processed_color_optional_both?: ?ProcessedColorValue,
+
+  // PointValue props
+  point_required: PointValue,
+  point_optional_key?: PointValue,
+  point_optional_value: ?PointValue,
+  point_optional_both?: ?PointValue,
+
+  // EdgeInsets props
+  insets_required: EdgeInsetsValue,
+  insets_optional_key?: EdgeInsetsValue,
+  insets_optional_value: ?EdgeInsetsValue,
+  insets_optional_both?: ?EdgeInsetsValue,
+|}>;
+
+export default (codegenNativeComponent<ModuleProps, Options>(
+  'Module',
+): HostComponent<ModuleProps>);
+`;
+
+const ARRAY_PROP_TYPES_NO_EVENTS = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+const codegenNativeComponent = require('codegenNativeComponent');
+
+import type {Int32, Double, Float, WithDefault} from 'CodegenTypes';
+import type {ImageSource} from 'ImageSource';
+import type {ColorValue, PointValue, ProcessColorValue, EdgeInsetsValue} from 'StyleSheetTypes';
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+type ObjectType = $ReadOnly<{| prop: string |}>;
+type ArrayObjectType = $ReadOnlyArray<$ReadOnly<{| prop: string |}>>;
+
+type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+
+  // Props
+  // Boolean props
+  array_boolean_required: $ReadOnlyArray<boolean>,
+  array_boolean_optional_key?: $ReadOnlyArray<boolean>,
+  array_boolean_optional_value: ?$ReadOnlyArray<boolean>,
+  array_boolean_optional_both?: ?$ReadOnlyArray<boolean>,
+
+  // String props
+  array_string_required: $ReadOnlyArray<string>,
+  array_string_optional_key?: $ReadOnlyArray<string>,
+  array_string_optional_value: ?$ReadOnlyArray<string>,
+  array_string_optional_both?: ?$ReadOnlyArray<string>,
+
+  // Double props
+  array_double_required: $ReadOnlyArray<Double>,
+  array_double_optional_key?: $ReadOnlyArray<Double>,
+  array_double_optional_value: ?$ReadOnlyArray<Double>,
+  array_double_optional_both?: ?$ReadOnlyArray<Double>,
+
+  // Float props
+  array_float_required: $ReadOnlyArray<Float>,
+  array_float_optional_key?: $ReadOnlyArray<Float>,
+  array_float_optional_value: ?$ReadOnlyArray<Float>,
+  array_float_optional_both?: ?$ReadOnlyArray<Float>,
+
+  // Int32 props
+  array_int32_required: $ReadOnlyArray<Int32>,
+  array_int32_optional_key?: $ReadOnlyArray<Int32>,
+  array_int32_optional_value: ?$ReadOnlyArray<Int32>,
+  array_int32_optional_both?: ?$ReadOnlyArray<Int32>,
+
+  // String enum props
+  array_enum_optional_key?: WithDefault<
+    $ReadOnlyArray<'small' | 'large'>,
+    'small',
+  >,
+  array_enum_optional_both?: WithDefault<
+    $ReadOnlyArray<'small' | 'large'>,
+    'small',
+  >,
+
+  // ImageSource props
+  array_image_required: $ReadOnlyArray<ImageSource>,
+  array_image_optional_key?: $ReadOnlyArray<ImageSource>,
+  array_image_optional_value: ?$ReadOnlyArray<ImageSource>,
+  array_image_optional_both?: ?$ReadOnlyArray<ImageSource>,
+
+  // ColorValue props
+  array_color_required: $ReadOnlyArray<ColorValue>,
+  array_color_optional_key?: $ReadOnlyArray<ColorValue>,
+  array_color_optional_value: ?$ReadOnlyArray<ColorValue>,
+  array_color_optional_both?: ?$ReadOnlyArray<ColorValue>,
+
+  // PointValue props
+  array_point_required: $ReadOnlyArray<PointValue>,
+  array_point_optional_key?: $ReadOnlyArray<PointValue>,
+  array_point_optional_value: ?$ReadOnlyArray<PointValue>,
+  array_point_optional_both?: ?$ReadOnlyArray<PointValue>,
+
+  // EdgeInsetsValue props
+  array_insets_required: $ReadOnlyArray<EdgeInsetsValue>,
+  array_insets_optional_key?: $ReadOnlyArray<EdgeInsetsValue>,
+  array_insets_optional_value: ?$ReadOnlyArray<EdgeInsetsValue>,
+  array_insets_optional_both?: ?$ReadOnlyArray<EdgeInsetsValue>,
+
+  // Object props
+  array_object_required: $ReadOnlyArray<$ReadOnly<{| prop: string |}>>,
+  array_object_optional_key?: $ReadOnlyArray<$ReadOnly<{| prop: string |}>>,
+  array_object_optional_value: ?ArrayObjectType,
+  array_object_optional_both?: ?$ReadOnlyArray<ObjectType>,
+
+  // Nested array object types
+  array_of_array_object_required: $ReadOnlyArray<
+    $ReadOnly<{|
+      // This needs to be the same name as the top level array above
+      array_object_required: $ReadOnlyArray<$ReadOnly<{| prop: string |}>>,
+    |}>
+  >,
+  array_of_array_object_optional_key?: $ReadOnlyArray<
+    $ReadOnly<{|
+      // This needs to be the same name as the top level array above
+      array_object_optional_key: $ReadOnlyArray<$ReadOnly<{| prop?: string |}>>,
+    |}>
+  >,
+  array_of_array_object_optional_value: ?$ReadOnlyArray<
+    $ReadOnly<{|
+      // This needs to be the same name as the top level array above
+      array_object_optional_value: $ReadOnlyArray<$ReadOnly<{| prop: ?string |}>>,
+    |}>
+  >,
+  array_of_array_object_optional_both?: ?$ReadOnlyArray<
+    $ReadOnly<{|
+      // This needs to be the same name as the top level array above
+      array_object_optional_both: $ReadOnlyArray<$ReadOnly<{| prop?: ?string |}>>,
+    |}>
+  >,
+
+  // Nested array of array of object types
+  array_of_array_of_object_required: $ReadOnlyArray<
+    $ReadOnlyArray<
+      $ReadOnly<{|
+        prop: string,
+      |}>,
+    >,
+  >,
+
+  // Nested array of array of object types (in file)
+  array_of_array_of_object_required_in_file: $ReadOnlyArray<
+    $ReadOnlyArray<ObjectType>,
+  >,
+
+  // Nested array of array of object types (with spread)
+  array_of_array_of_object_required_with_spread: $ReadOnlyArray<
+    $ReadOnlyArray<
+      $ReadOnly<{|
+        ...ObjectType
+      |}>,
+    >,
+  >,
+|}>;
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): HostComponent<ModuleProps>);
+`;
+
+const OBJECT_PROP_TYPES_NO_EVENTS = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+const codegenNativeComponent = require('codegenNativeComponent');
+
+import type {Int32, Double, Float, WithDefault} from 'CodegenTypes';
+import type {ImageSource} from 'ImageSource';
+import type {ColorValue, PointValue, EdgeInsetsValue} from 'StyleSheetTypes';
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+
+  // Props
+  // Boolean props
+  boolean_required: $ReadOnly<{|prop: boolean|}>,
+  boolean_optional: $ReadOnly<{|prop?: WithDefault<boolean, false>|}>,
+
+  // String props
+  string_required: $ReadOnly<{|prop: string|}>,
+  string_optional: $ReadOnly<{|prop?: WithDefault<string, ''>|}>,
+
+  // Double props
+  double_required: $ReadOnly<{|prop: Double|}>,
+  double_optional: $ReadOnly<{|prop?: WithDefault<Double, 0.0>|}>,
+
+  // Float props
+  float_required: $ReadOnly<{|prop: Float|}>,
+  float_optional: $ReadOnly<{|prop?: WithDefault<Float, 0.0>|}>,
+
+  // Int32 props
+  int_required: $ReadOnly<{|prop: Int32|}>,
+  int_optional: $ReadOnly<{|prop?: WithDefault<Int32, 0>|}>,
+
+  // String enum props
+  enum_optional: $ReadOnly<{|
+    prop?: WithDefault<$ReadOnlyArray<'small' | 'large'>, 'small'>,
+  |}>,
+
+  // ImageSource props
+  image_required: $ReadOnly<{|prop: ImageSource|}>,
+  image_optional_key: $ReadOnly<{|prop?: ImageSource|}>,
+  image_optional_value: $ReadOnly<{|prop: ?ImageSource|}>,
+  image_optional_both: $ReadOnly<{|prop?: ?ImageSource|}>,
+
+  // ColorValue props
+  color_required: $ReadOnly<{|prop: ColorValue|}>,
+  color_optional_key: $ReadOnly<{|prop?: ColorValue|}>,
+  color_optional_value: $ReadOnly<{|prop: ?ColorValue|}>,
+  color_optional_both: $ReadOnly<{|prop?: ?ColorValue|}>,
+
+  // ProcessedColorValue props
+  processed_color_required: $ReadOnly<{|prop: ProcessedColorValue|}>,
+  processed_color_optional_key: $ReadOnly<{|prop?: ProcessedColorValue|}>,
+  processed_color_optional_value: $ReadOnly<{|prop: ?ProcessedColorValue|}>,
+  processed_color_optional_both: $ReadOnly<{|prop?: ?ProcessedColorValue|}>,
+
+  // PointValue props
+  point_required: $ReadOnly<{|prop: PointValue|}>,
+  point_optional_key: $ReadOnly<{|prop?: PointValue|}>,
+  point_optional_value: $ReadOnly<{|prop: ?PointValue|}>,
+  point_optional_both: $ReadOnly<{|prop?: ?PointValue|}>,
+
+  // EdgeInsetsValue props
+  insets_required: $ReadOnly<{|prop: EdgeInsetsValue|}>,
+  insets_optional_key: $ReadOnly<{|prop?: EdgeInsetsValue|}>,
+  insets_optional_value: $ReadOnly<{|prop: ?EdgeInsetsValue|}>,
+  insets_optional_both: $ReadOnly<{|prop?: ?EdgeInsetsValue|}>,
+
+  // Nested object props
+  object_required: $ReadOnly<{|prop: $ReadOnly<{nestedProp: string}>|}>,
+  object_optional_key?: $ReadOnly<{|prop: $ReadOnly<{nestedProp: string}>|}>,
+  object_optional_value: ?$ReadOnly<{|prop: $ReadOnly<{nestedProp: string}>|}>,
+  object_optional_both?: ?$ReadOnly<{|prop: $ReadOnly<{nestedProp: string}>|}>,
+|}>;
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): HostComponent<ModuleProps>);
+`;
+
+const PROPS_ALIASED_LOCALLY = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+const codegenNativeComponent = require('codegenNativeComponent');
+
+type DeepSpread = $ReadOnly<{|
+  otherStringProp: string,
+|}>;
+
+export type PropsInFile = $ReadOnly<{|
+  ...DeepSpread,
+  isEnabled: boolean,
+  label: string,
+|}>;
+
+export type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+
+  ...PropsInFile,
+
+  localType: $ReadOnly<{|
+    ...PropsInFile
+  |}>,
+
+  localArr: $ReadOnlyArray<PropsInFile>
+|}>;
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): HostComponent<ModuleProps>);
+`;
+
+const EVENTS_DEFINED_INLINE_WITH_ALL_TYPES = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+import type {HostComponent} from 'react-native';
+const codegenNativeComponent = require('codegenNativeComponent');
+
+import type {
+  Int32,
+  Double,
+  Float,
+  BubblingEventHandler,
+  DirectEventHandler,
+} from 'CodegenTypes';
+
+import type {ViewProps} from 'ViewPropTypes';
+
+type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+  // No Props
+
+  // Events
+  onDirectEventDefinedInline:
+    DirectEventHandler<
+      $ReadOnly<{|
+        ${EVENT_DEFINITION}
+      |}>,
+    >,
+
+  onDirectEventDefinedInlineOptionalKey?:
+    DirectEventHandler<
+      $ReadOnly<{|
+        ${EVENT_DEFINITION}
+      |}>,
+    >,
+
+  onDirectEventDefinedInlineOptionalValue: ?
+    DirectEventHandler<
+      $ReadOnly<{|
+        ${EVENT_DEFINITION}
+      |}>,
+    >,
+
+  onDirectEventDefinedInlineOptionalBoth?: ?
+    DirectEventHandler<
+      $ReadOnly<{|
+        ${EVENT_DEFINITION}
+      |}>,
+    >,
+
+  onDirectEventDefinedInlineWithPaperName?: ?
+    DirectEventHandler<
+      $ReadOnly<{|
+        ${EVENT_DEFINITION}
+      |}>,
+      'paperDirectEventDefinedInlineWithPaperName',
+    >,
+
+  onBubblingEventDefinedInline:
+    BubblingEventHandler<
+      $ReadOnly<{|
+        ${EVENT_DEFINITION}
+      |}>,
+    >,
+
+  onBubblingEventDefinedInlineOptionalKey?:
+    BubblingEventHandler<
+      $ReadOnly<{|
+        ${EVENT_DEFINITION}
+      |}>,
+    >,
+
+  onBubblingEventDefinedInlineOptionalValue: ?
+    BubblingEventHandler<
+      $ReadOnly<{|
+        ${EVENT_DEFINITION}
+      |}>,
+    >,
+
+  onBubblingEventDefinedInlineOptionalBoth?: ?
+    BubblingEventHandler<
+      $ReadOnly<{|
+        ${EVENT_DEFINITION}
+      |}>,
+    >,
+
+  onBubblingEventDefinedInlineWithPaperName?: ?
+    BubblingEventHandler<
+      $ReadOnly<{|
+        ${EVENT_DEFINITION}
+      |}>,
+      'paperBubblingEventDefinedInlineWithPaperName'
+    >,
+|}>;
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): HostComponent<ModuleProps>);
+`;
+
+const EVENTS_DEFINED_AS_NULL_INLINE = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+const codegenNativeComponent = require('codegenNativeComponent');
+
+import type {BubblingEventHandler, DirectEventHandler} from 'CodegenTypese';
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+
+  // No props
+
+  // Events defined inline
+  onDirectEventDefinedInlineNull: DirectEventHandler<null>,
+  onDirectEventDefinedInlineNullOptionalKey?: DirectEventHandler<null>,
+  onDirectEventDefinedInlineNullOptionalValue: ?DirectEventHandler<null>,
+  onDirectEventDefinedInlineNullOptionalBoth?: DirectEventHandler<null>,
+  onDirectEventDefinedInlineNullWithPaperName?: ?DirectEventHandler<
+    null,
+    'paperDirectEventDefinedInlineNullWithPaperName',
+  >,
+
+  onBubblingEventDefinedInlineNull: BubblingEventHandler<null>,
+  onBubblingEventDefinedInlineNullOptionalKey?: BubblingEventHandler<null>,
+  onBubblingEventDefinedInlineNullOptionalValue: ?BubblingEventHandler<null>,
+  onBubblingEventDefinedInlineNullOptionalBoth?: ?BubblingEventHandler<null>,
+  onBubblingEventDefinedInlineNullWithPaperName?: ?BubblingEventHandler<
+    null,
+    'paperBubblingEventDefinedInlineNullWithPaperName',
+  >,
+|}>;
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): HostComponent<ModuleProps>);
+`;
+
+const PROPS_AND_EVENTS_TYPES_EXPORTED = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+import type {
+  BubblingEventHandler,
+  DirectEventHandler,
+} from 'CodegenTypes';
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+const codegenNativeComponent = require('codegenNativeComponent');
+
+export type EventInFile = $ReadOnly<{|
+  ${EVENT_DEFINITION}
+|}>;
+
+export type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+
+  // No props
+
+  // Events defined inline
+  onBubblingEventDefinedInline: BubblingEventHandler<EventInFile>,
+  onBubblingEventDefinedInlineWithPaperName: BubblingEventHandler<EventInFile, 'paperBubblingEventDefinedInlineWithPaperName'>,
+  onDirectEventDefinedInline: DirectEventHandler<EventInFile>,
+  onDirectEventDefinedInlineWithPaperName: DirectEventHandler<EventInFile, 'paperDirectEventDefinedInlineWithPaperName'>,
+|}>;
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): HostComponent<ModuleProps>);
+`;
+
+const PROPS_AS_EXTERNAL_TYPES = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+const codegenNativeComponent = require('codegenNativeComponent');
+
+import type {HostComponent} from 'react-native';
+
+export type String = string;
+export type AnotherArray = $ReadOnlyArray<String>;
+
+export type ModuleProps = $ReadOnly<{|
+  disable: String,
+  array: AnotherArray,
+|}>;
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): HostComponent<ModuleProps>);
+`;
+
+const COMMANDS_DEFINED_WITH_ALL_TYPES = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+const codegenNativeCommands = require('codegenNativeCommands');
+const codegenNativeComponent = require('codegenNativeComponent');
+
+import type {Int32, Double, Float} from 'CodegenTypes';
+import type {RootTag} from 'RCTExport';
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+
+export type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+  // No props or events
+|}>;
+
+type NativeType = HostComponent<ModuleProps>;
+
+interface NativeCommands {
+  +handleRootTag: (viewRef: React.ElementRef<NativeType>, rootTag: RootTag) => void;
+  +hotspotUpdate: (viewRef: React.ElementRef<NativeType>, x: Int32, y: Int32) => void;
+  +scrollTo: (
+    viewRef: React.ElementRef<NativeType>,
+    x: Float,
+    y: Int32,
+    z: Double,
+    animated: boolean,
+  ) => void;
+}
+
+export const Commands = codegenNativeCommands<NativeCommands>({
+  supportedCommands: ['handleRootTag', 'hotspotUpdate', 'scrollTo'],
+});
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): NativeType);
+`;
+
+const COMMANDS_WITH_EXTERNAL_TYPES = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+const codegenNativeCommands = require('codegenNativeCommands');
+const codegenNativeComponent = require('codegenNativeComponent');
+
+import type {Int32} from 'CodegenTypes';
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+export type Boolean = boolean;
+export type Int = Int32;
+export type Void = void;
+
+export type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+  // No props or events
+|}>;
+
+type NativeType = HostComponent<ModuleProps>;
+
+export type ScrollTo = (
+  viewRef: React.ElementRef<NativeType>,
+  y: Int,
+  animated: Boolean,
+) => Void;
+
+interface NativeCommands {
+  +scrollTo: ScrollTo;
+}
+
+export const Commands = codegenNativeCommands<NativeCommands>({
+  supportedCommands: ['scrollTo'],
+});
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): NativeType);
+`;
+
+const COMMANDS_AND_EVENTS_TYPES_EXPORTED = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+import type {
+  BubblingEventHandler,
+  DirectEventHandler,
+} from 'CodegenTypes';
+import type {ViewProps} from 'ViewPropTypes';
+import type {HostComponent} from 'react-native';
+
+const codegenNativeComponent = require('codegenNativeComponent');
+
+export type EventInFile = $ReadOnly<{|
+  ${EVENT_DEFINITION}
+|}>;
+
+export type Boolean = boolean;
+export type Int = Int32;
+export type Void = void;
+
+export type ModuleProps = $ReadOnly<{|
+  ...ViewProps,
+
+  // No props
+
+  // Events defined inline
+  onBubblingEventDefinedInline: BubblingEventHandler<EventInFile>,
+  onBubblingEventDefinedInlineWithPaperName: BubblingEventHandler<EventInFile, 'paperBubblingEventDefinedInlineWithPaperName'>,
+  onDirectEventDefinedInline: DirectEventHandler<EventInFile>,
+  onDirectEventDefinedInlineWithPaperName: DirectEventHandler<EventInFile, 'paperDirectEventDefinedInlineWithPaperName'>,
+|}>;
+
+type NativeType = HostComponent<ModuleProps>;
+
+export type ScrollTo = (viewRef: React.ElementRef<NativeType>, y: Int, animated: Boolean) => Void;
+
+interface NativeCommands {
+  +scrollTo: ScrollTo;
+}
+
+export const Commands = codegenNativeCommands<NativeCommands>({
+  supportedCommands: ['scrollTo']
+});
+
+export default (codegenNativeComponent<ModuleProps>(
+  'Module',
+): NativeType);
+`;
+
+module.exports = {
+  ALL_PROP_TYPES_NO_EVENTS,
+  ARRAY_PROP_TYPES_NO_EVENTS,
+  OBJECT_PROP_TYPES_NO_EVENTS,
+  PROPS_ALIASED_LOCALLY,
+  ONE_OF_EACH_PROP_EVENT_DEFAULT_AND_OPTIONS,
+  ONE_OF_EACH_PROP_EVENT_DEFAULT_AND_OPTIONS_NO_CAST,
+  NO_PROPS_EVENTS_ONLY_DEPRECATED_VIEW_CONFIG_NAME_OPTION,
+  EVENTS_DEFINED_INLINE_WITH_ALL_TYPES,
+  EVENTS_DEFINED_AS_NULL_INLINE,
+  PROPS_AND_EVENTS_TYPES_EXPORTED,
+  COMMANDS_AND_EVENTS_TYPES_EXPORTED,
+  COMMANDS_DEFINED_WITH_ALL_TYPES,
+  PROPS_AS_EXTERNAL_TYPES,
+  COMMANDS_WITH_EXTERNAL_TYPES,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/__tests__/__snapshots__/component-parser-test.js.snap b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/__tests__/__snapshots__/component-parser-test.js.snap
new file mode 100644
index 0000000..48836ae
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/__tests__/__snapshots__/component-parser-test.js.snap
@@ -0,0 +1,9422 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`RN Codegen Flow Parser Fails with error message COMMANDS_DEFINED_INLINE 1`] = `"codegenNativeCommands doesn't support inline definitions. Specify a file local type alias"`;
+
+exports[`RN Codegen Flow Parser Fails with error message COMMANDS_DEFINED_MULTIPLE_TIMES 1`] = `"codegenNativeCommands may only be called once in a file"`;
+
+exports[`RN Codegen Flow Parser Fails with error message COMMANDS_DEFINED_WITH_MISMATCHED_METHOD_NAMES 1`] = `"codegenNativeCommands expected the same supportedCommands specified in the NativeCommands interface: hotspotUpdate, scrollTo"`;
+
+exports[`RN Codegen Flow Parser Fails with error message COMMANDS_DEFINED_WITH_NULLABLE_REF 1`] = `"The first argument of method hotspotUpdate must be of type React.ElementRef<>"`;
+
+exports[`RN Codegen Flow Parser Fails with error message COMMANDS_DEFINED_WITHOUT_METHOD_NAMES 1`] = `"codegenNativeCommands must be passed options including the supported commands"`;
+
+exports[`RN Codegen Flow Parser Fails with error message COMMANDS_DEFINED_WITHOUT_REF 1`] = `"The first argument of method hotspotUpdate must be of type React.ElementRef<>"`;
+
+exports[`RN Codegen Flow Parser Fails with error message NON_OPTIONAL_KEY_WITH_DEFAULT_VALUE 1`] = `"key required_key_with_default must be optional if used with WithDefault<> annotation"`;
+
+exports[`RN Codegen Flow Parser Fails with error message NULLABLE_WITH_DEFAULT 1`] = `"WithDefault<> is optional and does not need to be marked as optional. Please remove the ? annotation in front of it."`;
+
+exports[`RN Codegen Flow Parser Fails with error message PROP_ARRAY_ENUM_BOOLEAN 1`] = `"Unsupported union type for \\"someProp\\", recieved \\"BooleanLiteralTypeAnnotation\\""`;
+
+exports[`RN Codegen Flow Parser Fails with error message PROP_ARRAY_ENUM_INT 1`] = `"Arrays of int enums are not supported (see: \\"someProp\\")"`;
+
+exports[`RN Codegen Flow Parser Fails with error message PROP_ARRAY_MIXED_ENUM 1`] = `"Mixed types are not supported (see \\"someProp\\")"`;
+
+exports[`RN Codegen Flow Parser Fails with error message PROP_ENUM_BOOLEAN 1`] = `"Unsupported union type for \\"someProp\\", received \\"BooleanLiteralTypeAnnotation\\""`;
+
+exports[`RN Codegen Flow Parser Fails with error message PROP_MIXED_ENUM 1`] = `"Mixed types are not supported (see \\"someProp\\")"`;
+
+exports[`RN Codegen Flow Parser Fails with error message PROP_NUMBER_TYPE 1`] = `"Cannot use \\"NumberTypeAnnotation\\" type annotation for \\"someProp\\": must use a specific numeric type like Int32, Double, or Float"`;
+
+exports[`RN Codegen Flow Parser Fails with error message PROPS_CONFLICT_NAMES 1`] = `"A prop was already defined with the name isEnabled"`;
+
+exports[`RN Codegen Flow Parser Fails with error message PROPS_CONFLICT_WITH_SPREAD_PROPS 1`] = `"A prop was already defined with the name isEnabled"`;
+
+exports[`RN Codegen Flow Parser Fails with error message PROPS_SPREAD_CONFLICTS_WITH_PROPS 1`] = `"A prop was already defined with the name isEnabled"`;
+
+exports[`RN Codegen Flow Parser can generate fixture ALL_PROP_TYPES_NO_EVENTS 1`] = `
+"{
+  'modules': {
+    'Module': {
+      'type': 'Component',
+      'components': {
+        'Module': {
+          'extendsProps': [
+            {
+              'type': 'ReactNativeBuiltInType',
+              'knownTypeName': 'ReactNativeCoreViewProps'
+            }
+          ],
+          'events': [],
+          'props': [
+            {
+              'name': 'boolean_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'BooleanTypeAnnotation',
+                'default': false
+              }
+            },
+            {
+              'name': 'boolean_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'BooleanTypeAnnotation',
+                'default': true
+              }
+            },
+            {
+              'name': 'boolean_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'BooleanTypeAnnotation',
+                'default': true
+              }
+            },
+            {
+              'name': 'boolean_null_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'BooleanTypeAnnotation',
+                'default': null
+              }
+            },
+            {
+              'name': 'boolean_null_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'BooleanTypeAnnotation',
+                'default': null
+              }
+            },
+            {
+              'name': 'string_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'StringTypeAnnotation',
+                'default': null
+              }
+            },
+            {
+              'name': 'string_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'StringTypeAnnotation',
+                'default': ''
+              }
+            },
+            {
+              'name': 'string_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'StringTypeAnnotation',
+                'default': ''
+              }
+            },
+            {
+              'name': 'string_null_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'StringTypeAnnotation',
+                'default': null
+              }
+            },
+            {
+              'name': 'string_null_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'StringTypeAnnotation',
+                'default': null
+              }
+            },
+            {
+              'name': 'stringish_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'StringTypeAnnotation',
+                'default': null
+              }
+            },
+            {
+              'name': 'stringish_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'StringTypeAnnotation',
+                'default': ''
+              }
+            },
+            {
+              'name': 'stringish_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'StringTypeAnnotation',
+                'default': ''
+              }
+            },
+            {
+              'name': 'stringish_null_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'StringTypeAnnotation',
+                'default': null
+              }
+            },
+            {
+              'name': 'stringish_null_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'StringTypeAnnotation',
+                'default': null
+              }
+            },
+            {
+              'name': 'double_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'DoubleTypeAnnotation',
+                'default': 0
+              }
+            },
+            {
+              'name': 'double_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'DoubleTypeAnnotation',
+                'default': 1.1
+              }
+            },
+            {
+              'name': 'double_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'DoubleTypeAnnotation',
+                'default': 1.1
+              }
+            },
+            {
+              'name': 'float_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'FloatTypeAnnotation',
+                'default': 0
+              }
+            },
+            {
+              'name': 'float_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'FloatTypeAnnotation',
+                'default': 1.1
+              }
+            },
+            {
+              'name': 'float_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'FloatTypeAnnotation',
+                'default': 1.1
+              }
+            },
+            {
+              'name': 'float_null_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'FloatTypeAnnotation',
+                'default': null
+              }
+            },
+            {
+              'name': 'float_null_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'FloatTypeAnnotation',
+                'default': null
+              }
+            },
+            {
+              'name': 'int32_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'Int32TypeAnnotation',
+                'default': 0
+              }
+            },
+            {
+              'name': 'int32_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'Int32TypeAnnotation',
+                'default': 1
+              }
+            },
+            {
+              'name': 'int32_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'Int32TypeAnnotation',
+                'default': 1
+              }
+            },
+            {
+              'name': 'enum_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'StringEnumTypeAnnotation',
+                'default': 'small',
+                'options': [
+                  'small',
+                  'large'
+                ]
+              }
+            },
+            {
+              'name': 'enum_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'StringEnumTypeAnnotation',
+                'default': 'small',
+                'options': [
+                  'small',
+                  'large'
+                ]
+              }
+            },
+            {
+              'name': 'int_enum_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'Int32EnumTypeAnnotation',
+                'default': 0,
+                'options': [
+                  0,
+                  1
+                ]
+              }
+            },
+            {
+              'name': 'object_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'StringTypeAnnotation',
+                      'default': null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'object_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'StringTypeAnnotation',
+                      'default': null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'object_optional_value',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'StringTypeAnnotation',
+                      'default': null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'image_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ReservedPropTypeAnnotation',
+                'name': 'ImageSourcePrimitive'
+              }
+            },
+            {
+              'name': 'image_optional_value',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ReservedPropTypeAnnotation',
+                'name': 'ImageSourcePrimitive'
+              }
+            },
+            {
+              'name': 'image_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ReservedPropTypeAnnotation',
+                'name': 'ImageSourcePrimitive'
+              }
+            },
+            {
+              'name': 'color_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ReservedPropTypeAnnotation',
+                'name': 'ColorPrimitive'
+              }
+            },
+            {
+              'name': 'color_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ReservedPropTypeAnnotation',
+                'name': 'ColorPrimitive'
+              }
+            },
+            {
+              'name': 'color_optional_value',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ReservedPropTypeAnnotation',
+                'name': 'ColorPrimitive'
+              }
+            },
+            {
+              'name': 'color_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ReservedPropTypeAnnotation',
+                'name': 'ColorPrimitive'
+              }
+            },
+            {
+              'name': 'color_array_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ReservedPropTypeAnnotation',
+                  'name': 'ColorPrimitive'
+                }
+              }
+            },
+            {
+              'name': 'color_array_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ReservedPropTypeAnnotation',
+                  'name': 'ColorPrimitive'
+                }
+              }
+            },
+            {
+              'name': 'color_array_optional_value',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ReservedPropTypeAnnotation',
+                  'name': 'ColorPrimitive'
+                }
+              }
+            },
+            {
+              'name': 'color_array_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ReservedPropTypeAnnotation',
+                  'name': 'ColorPrimitive'
+                }
+              }
+            },
+            {
+              'name': 'processed_color_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ReservedPropTypeAnnotation',
+                'name': 'ColorPrimitive'
+              }
+            },
+            {
+              'name': 'processed_color_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ReservedPropTypeAnnotation',
+                'name': 'ColorPrimitive'
+              }
+            },
+            {
+              'name': 'processed_color_optional_value',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ReservedPropTypeAnnotation',
+                'name': 'ColorPrimitive'
+              }
+            },
+            {
+              'name': 'processed_color_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ReservedPropTypeAnnotation',
+                'name': 'ColorPrimitive'
+              }
+            },
+            {
+              'name': 'point_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ReservedPropTypeAnnotation',
+                'name': 'PointPrimitive'
+              }
+            },
+            {
+              'name': 'point_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ReservedPropTypeAnnotation',
+                'name': 'PointPrimitive'
+              }
+            },
+            {
+              'name': 'point_optional_value',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ReservedPropTypeAnnotation',
+                'name': 'PointPrimitive'
+              }
+            },
+            {
+              'name': 'point_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ReservedPropTypeAnnotation',
+                'name': 'PointPrimitive'
+              }
+            },
+            {
+              'name': 'insets_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ReservedPropTypeAnnotation',
+                'name': 'EdgeInsetsPrimitive'
+              }
+            },
+            {
+              'name': 'insets_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ReservedPropTypeAnnotation',
+                'name': 'EdgeInsetsPrimitive'
+              }
+            },
+            {
+              'name': 'insets_optional_value',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ReservedPropTypeAnnotation',
+                'name': 'EdgeInsetsPrimitive'
+              }
+            },
+            {
+              'name': 'insets_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ReservedPropTypeAnnotation',
+                'name': 'EdgeInsetsPrimitive'
+              }
+            }
+          ],
+          'commands': []
+        }
+      }
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture ARRAY_PROP_TYPES_NO_EVENTS 1`] = `
+"{
+  'modules': {
+    'Module': {
+      'type': 'Component',
+      'components': {
+        'Module': {
+          'extendsProps': [
+            {
+              'type': 'ReactNativeBuiltInType',
+              'knownTypeName': 'ReactNativeCoreViewProps'
+            }
+          ],
+          'events': [],
+          'props': [
+            {
+              'name': 'array_boolean_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'BooleanTypeAnnotation'
+                }
+              }
+            },
+            {
+              'name': 'array_boolean_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'BooleanTypeAnnotation'
+                }
+              }
+            },
+            {
+              'name': 'array_boolean_optional_value',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'BooleanTypeAnnotation'
+                }
+              }
+            },
+            {
+              'name': 'array_boolean_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'BooleanTypeAnnotation'
+                }
+              }
+            },
+            {
+              'name': 'array_string_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'StringTypeAnnotation'
+                }
+              }
+            },
+            {
+              'name': 'array_string_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'StringTypeAnnotation'
+                }
+              }
+            },
+            {
+              'name': 'array_string_optional_value',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'StringTypeAnnotation'
+                }
+              }
+            },
+            {
+              'name': 'array_string_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'StringTypeAnnotation'
+                }
+              }
+            },
+            {
+              'name': 'array_double_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'DoubleTypeAnnotation'
+                }
+              }
+            },
+            {
+              'name': 'array_double_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'DoubleTypeAnnotation'
+                }
+              }
+            },
+            {
+              'name': 'array_double_optional_value',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'DoubleTypeAnnotation'
+                }
+              }
+            },
+            {
+              'name': 'array_double_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'DoubleTypeAnnotation'
+                }
+              }
+            },
+            {
+              'name': 'array_float_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'FloatTypeAnnotation'
+                }
+              }
+            },
+            {
+              'name': 'array_float_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'FloatTypeAnnotation'
+                }
+              }
+            },
+            {
+              'name': 'array_float_optional_value',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'FloatTypeAnnotation'
+                }
+              }
+            },
+            {
+              'name': 'array_float_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'FloatTypeAnnotation'
+                }
+              }
+            },
+            {
+              'name': 'array_int32_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'Int32TypeAnnotation'
+                }
+              }
+            },
+            {
+              'name': 'array_int32_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'Int32TypeAnnotation'
+                }
+              }
+            },
+            {
+              'name': 'array_int32_optional_value',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'Int32TypeAnnotation'
+                }
+              }
+            },
+            {
+              'name': 'array_int32_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'Int32TypeAnnotation'
+                }
+              }
+            },
+            {
+              'name': 'array_enum_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'StringEnumTypeAnnotation',
+                  'default': 'small',
+                  'options': [
+                    'small',
+                    'large'
+                  ]
+                }
+              }
+            },
+            {
+              'name': 'array_enum_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'StringEnumTypeAnnotation',
+                  'default': 'small',
+                  'options': [
+                    'small',
+                    'large'
+                  ]
+                }
+              }
+            },
+            {
+              'name': 'array_image_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ReservedPropTypeAnnotation',
+                  'name': 'ImageSourcePrimitive'
+                }
+              }
+            },
+            {
+              'name': 'array_image_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ReservedPropTypeAnnotation',
+                  'name': 'ImageSourcePrimitive'
+                }
+              }
+            },
+            {
+              'name': 'array_image_optional_value',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ReservedPropTypeAnnotation',
+                  'name': 'ImageSourcePrimitive'
+                }
+              }
+            },
+            {
+              'name': 'array_image_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ReservedPropTypeAnnotation',
+                  'name': 'ImageSourcePrimitive'
+                }
+              }
+            },
+            {
+              'name': 'array_color_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ReservedPropTypeAnnotation',
+                  'name': 'ColorPrimitive'
+                }
+              }
+            },
+            {
+              'name': 'array_color_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ReservedPropTypeAnnotation',
+                  'name': 'ColorPrimitive'
+                }
+              }
+            },
+            {
+              'name': 'array_color_optional_value',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ReservedPropTypeAnnotation',
+                  'name': 'ColorPrimitive'
+                }
+              }
+            },
+            {
+              'name': 'array_color_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ReservedPropTypeAnnotation',
+                  'name': 'ColorPrimitive'
+                }
+              }
+            },
+            {
+              'name': 'array_point_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ReservedPropTypeAnnotation',
+                  'name': 'PointPrimitive'
+                }
+              }
+            },
+            {
+              'name': 'array_point_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ReservedPropTypeAnnotation',
+                  'name': 'PointPrimitive'
+                }
+              }
+            },
+            {
+              'name': 'array_point_optional_value',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ReservedPropTypeAnnotation',
+                  'name': 'PointPrimitive'
+                }
+              }
+            },
+            {
+              'name': 'array_point_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ReservedPropTypeAnnotation',
+                  'name': 'PointPrimitive'
+                }
+              }
+            },
+            {
+              'name': 'array_insets_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ReservedPropTypeAnnotation',
+                  'name': 'EdgeInsetsPrimitive'
+                }
+              }
+            },
+            {
+              'name': 'array_insets_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ReservedPropTypeAnnotation',
+                  'name': 'EdgeInsetsPrimitive'
+                }
+              }
+            },
+            {
+              'name': 'array_insets_optional_value',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ReservedPropTypeAnnotation',
+                  'name': 'EdgeInsetsPrimitive'
+                }
+              }
+            },
+            {
+              'name': 'array_insets_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ReservedPropTypeAnnotation',
+                  'name': 'EdgeInsetsPrimitive'
+                }
+              }
+            },
+            {
+              'name': 'array_object_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'prop',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation',
+                        'default': null
+                      }
+                    }
+                  ]
+                }
+              }
+            },
+            {
+              'name': 'array_object_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'prop',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation',
+                        'default': null
+                      }
+                    }
+                  ]
+                }
+              }
+            },
+            {
+              'name': 'array_object_optional_value',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'prop',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation',
+                        'default': null
+                      }
+                    }
+                  ]
+                }
+              }
+            },
+            {
+              'name': 'array_object_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'prop',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation',
+                        'default': null
+                      }
+                    }
+                  ]
+                }
+              }
+            },
+            {
+              'name': 'array_of_array_object_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'array_object_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ArrayTypeAnnotation',
+                        'elementType': {
+                          'type': 'ObjectTypeAnnotation',
+                          'properties': [
+                            {
+                              'name': 'prop',
+                              'optional': false,
+                              'typeAnnotation': {
+                                'type': 'StringTypeAnnotation',
+                                'default': null
+                              }
+                            }
+                          ]
+                        }
+                      }
+                    }
+                  ]
+                }
+              }
+            },
+            {
+              'name': 'array_of_array_object_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'array_object_optional_key',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ArrayTypeAnnotation',
+                        'elementType': {
+                          'type': 'ObjectTypeAnnotation',
+                          'properties': [
+                            {
+                              'name': 'prop',
+                              'optional': true,
+                              'typeAnnotation': {
+                                'type': 'StringTypeAnnotation',
+                                'default': null
+                              }
+                            }
+                          ]
+                        }
+                      }
+                    }
+                  ]
+                }
+              }
+            },
+            {
+              'name': 'array_of_array_object_optional_value',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'array_object_optional_value',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ArrayTypeAnnotation',
+                        'elementType': {
+                          'type': 'ObjectTypeAnnotation',
+                          'properties': [
+                            {
+                              'name': 'prop',
+                              'optional': true,
+                              'typeAnnotation': {
+                                'type': 'StringTypeAnnotation',
+                                'default': null
+                              }
+                            }
+                          ]
+                        }
+                      }
+                    }
+                  ]
+                }
+              }
+            },
+            {
+              'name': 'array_of_array_object_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'array_object_optional_both',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ArrayTypeAnnotation',
+                        'elementType': {
+                          'type': 'ObjectTypeAnnotation',
+                          'properties': [
+                            {
+                              'name': 'prop',
+                              'optional': true,
+                              'typeAnnotation': {
+                                'type': 'StringTypeAnnotation',
+                                'default': null
+                              }
+                            }
+                          ]
+                        }
+                      }
+                    }
+                  ]
+                }
+              }
+            },
+            {
+              'name': 'array_of_array_of_object_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ArrayTypeAnnotation',
+                  'elementType': {
+                    'type': 'ObjectTypeAnnotation',
+                    'properties': [
+                      {
+                        'name': 'prop',
+                        'optional': false,
+                        'typeAnnotation': {
+                          'type': 'StringTypeAnnotation',
+                          'default': null
+                        }
+                      }
+                    ]
+                  }
+                }
+              }
+            },
+            {
+              'name': 'array_of_array_of_object_required_in_file',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ArrayTypeAnnotation',
+                  'elementType': {
+                    'type': 'ObjectTypeAnnotation',
+                    'properties': [
+                      {
+                        'name': 'prop',
+                        'optional': false,
+                        'typeAnnotation': {
+                          'type': 'StringTypeAnnotation',
+                          'default': null
+                        }
+                      }
+                    ]
+                  }
+                }
+              }
+            },
+            {
+              'name': 'array_of_array_of_object_required_with_spread',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ArrayTypeAnnotation',
+                  'elementType': {
+                    'type': 'ObjectTypeAnnotation',
+                    'properties': [
+                      {
+                        'name': 'prop',
+                        'optional': false,
+                        'typeAnnotation': {
+                          'type': 'StringTypeAnnotation',
+                          'default': null
+                        }
+                      }
+                    ]
+                  }
+                }
+              }
+            }
+          ],
+          'commands': []
+        }
+      }
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture COMMANDS_AND_EVENTS_TYPES_EXPORTED 1`] = `
+"{
+  'modules': {
+    'Module': {
+      'type': 'Component',
+      'components': {
+        'Module': {
+          'extendsProps': [
+            {
+              'type': 'ReactNativeBuiltInType',
+              'knownTypeName': 'ReactNativeCoreViewProps'
+            }
+          ],
+          'events': [
+            {
+              'name': 'onBubblingEventDefinedInline',
+              'optional': false,
+              'bubblingType': 'bubble',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'boolean_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'enum_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required_nested_2_layers',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'object_optional_nested_1_layer',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'ObjectTypeAnnotation',
+                              'properties': [
+                                {
+                                  'name': 'boolean_required',
+                                  'optional': false,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'string_optional_key',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'StringTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'double_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'DoubleTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'float_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'FloatTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'int32_optional_both',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                }
+                              ]
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    }
+                  ]
+                }
+              }
+            },
+            {
+              'name': 'onBubblingEventDefinedInlineWithPaperName',
+              'optional': false,
+              'bubblingType': 'bubble',
+              'paperTopLevelNameDeprecated': 'paperBubblingEventDefinedInlineWithPaperName',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'boolean_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'enum_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required_nested_2_layers',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'object_optional_nested_1_layer',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'ObjectTypeAnnotation',
+                              'properties': [
+                                {
+                                  'name': 'boolean_required',
+                                  'optional': false,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'string_optional_key',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'StringTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'double_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'DoubleTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'float_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'FloatTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'int32_optional_both',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                }
+                              ]
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    }
+                  ]
+                }
+              }
+            },
+            {
+              'name': 'onDirectEventDefinedInline',
+              'optional': false,
+              'bubblingType': 'direct',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'boolean_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'enum_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required_nested_2_layers',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'object_optional_nested_1_layer',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'ObjectTypeAnnotation',
+                              'properties': [
+                                {
+                                  'name': 'boolean_required',
+                                  'optional': false,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'string_optional_key',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'StringTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'double_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'DoubleTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'float_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'FloatTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'int32_optional_both',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                }
+                              ]
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    }
+                  ]
+                }
+              }
+            },
+            {
+              'name': 'onDirectEventDefinedInlineWithPaperName',
+              'optional': false,
+              'bubblingType': 'direct',
+              'paperTopLevelNameDeprecated': 'paperDirectEventDefinedInlineWithPaperName',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'boolean_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'enum_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required_nested_2_layers',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'object_optional_nested_1_layer',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'ObjectTypeAnnotation',
+                              'properties': [
+                                {
+                                  'name': 'boolean_required',
+                                  'optional': false,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'string_optional_key',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'StringTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'double_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'DoubleTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'float_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'FloatTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'int32_optional_both',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                }
+                              ]
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    }
+                  ]
+                }
+              }
+            }
+          ],
+          'props': [],
+          'commands': [
+            {
+              'name': 'scrollTo',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'FunctionTypeAnnotation',
+                'params': [
+                  {
+                    'name': 'y',
+                    'typeAnnotation': {
+                      'type': 'Int32TypeAnnotation'
+                    }
+                  },
+                  {
+                    'name': 'animated',
+                    'typeAnnotation': {
+                      'type': 'BooleanTypeAnnotation'
+                    }
+                  }
+                ],
+                'returnTypeAnnotation': {
+                  'type': 'VoidTypeAnnotation'
+                }
+              }
+            }
+          ]
+        }
+      }
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture COMMANDS_DEFINED_WITH_ALL_TYPES 1`] = `
+"{
+  'modules': {
+    'Module': {
+      'type': 'Component',
+      'components': {
+        'Module': {
+          'extendsProps': [
+            {
+              'type': 'ReactNativeBuiltInType',
+              'knownTypeName': 'ReactNativeCoreViewProps'
+            }
+          ],
+          'events': [],
+          'props': [],
+          'commands': [
+            {
+              'name': 'handleRootTag',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'FunctionTypeAnnotation',
+                'params': [
+                  {
+                    'name': 'rootTag',
+                    'typeAnnotation': {
+                      'type': 'ReservedTypeAnnotation',
+                      'name': 'RootTag'
+                    }
+                  }
+                ],
+                'returnTypeAnnotation': {
+                  'type': 'VoidTypeAnnotation'
+                }
+              }
+            },
+            {
+              'name': 'hotspotUpdate',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'FunctionTypeAnnotation',
+                'params': [
+                  {
+                    'name': 'x',
+                    'typeAnnotation': {
+                      'type': 'Int32TypeAnnotation'
+                    }
+                  },
+                  {
+                    'name': 'y',
+                    'typeAnnotation': {
+                      'type': 'Int32TypeAnnotation'
+                    }
+                  }
+                ],
+                'returnTypeAnnotation': {
+                  'type': 'VoidTypeAnnotation'
+                }
+              }
+            },
+            {
+              'name': 'scrollTo',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'FunctionTypeAnnotation',
+                'params': [
+                  {
+                    'name': 'x',
+                    'typeAnnotation': {
+                      'type': 'FloatTypeAnnotation'
+                    }
+                  },
+                  {
+                    'name': 'y',
+                    'typeAnnotation': {
+                      'type': 'Int32TypeAnnotation'
+                    }
+                  },
+                  {
+                    'name': 'z',
+                    'typeAnnotation': {
+                      'type': 'DoubleTypeAnnotation'
+                    }
+                  },
+                  {
+                    'name': 'animated',
+                    'typeAnnotation': {
+                      'type': 'BooleanTypeAnnotation'
+                    }
+                  }
+                ],
+                'returnTypeAnnotation': {
+                  'type': 'VoidTypeAnnotation'
+                }
+              }
+            }
+          ]
+        }
+      }
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture COMMANDS_WITH_EXTERNAL_TYPES 1`] = `
+"{
+  'modules': {
+    'Module': {
+      'type': 'Component',
+      'components': {
+        'Module': {
+          'extendsProps': [
+            {
+              'type': 'ReactNativeBuiltInType',
+              'knownTypeName': 'ReactNativeCoreViewProps'
+            }
+          ],
+          'events': [],
+          'props': [],
+          'commands': [
+            {
+              'name': 'scrollTo',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'FunctionTypeAnnotation',
+                'params': [
+                  {
+                    'name': 'y',
+                    'typeAnnotation': {
+                      'type': 'Int32TypeAnnotation'
+                    }
+                  },
+                  {
+                    'name': 'animated',
+                    'typeAnnotation': {
+                      'type': 'BooleanTypeAnnotation'
+                    }
+                  }
+                ],
+                'returnTypeAnnotation': {
+                  'type': 'VoidTypeAnnotation'
+                }
+              }
+            }
+          ]
+        }
+      }
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture EVENTS_DEFINED_AS_NULL_INLINE 1`] = `
+"{
+  'modules': {
+    'Module': {
+      'type': 'Component',
+      'components': {
+        'Module': {
+          'extendsProps': [
+            {
+              'type': 'ReactNativeBuiltInType',
+              'knownTypeName': 'ReactNativeCoreViewProps'
+            }
+          ],
+          'events': [
+            {
+              'name': 'onDirectEventDefinedInlineNull',
+              'optional': false,
+              'bubblingType': 'direct',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': []
+                }
+              }
+            },
+            {
+              'name': 'onDirectEventDefinedInlineNullOptionalKey',
+              'optional': true,
+              'bubblingType': 'direct',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': []
+                }
+              }
+            },
+            {
+              'name': 'onDirectEventDefinedInlineNullOptionalValue',
+              'optional': true,
+              'bubblingType': 'direct',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': []
+                }
+              }
+            },
+            {
+              'name': 'onDirectEventDefinedInlineNullOptionalBoth',
+              'optional': true,
+              'bubblingType': 'direct',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': []
+                }
+              }
+            },
+            {
+              'name': 'onDirectEventDefinedInlineNullWithPaperName',
+              'optional': true,
+              'bubblingType': 'direct',
+              'paperTopLevelNameDeprecated': 'paperDirectEventDefinedInlineNullWithPaperName',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': []
+                }
+              }
+            },
+            {
+              'name': 'onBubblingEventDefinedInlineNull',
+              'optional': false,
+              'bubblingType': 'bubble',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': []
+                }
+              }
+            },
+            {
+              'name': 'onBubblingEventDefinedInlineNullOptionalKey',
+              'optional': true,
+              'bubblingType': 'bubble',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': []
+                }
+              }
+            },
+            {
+              'name': 'onBubblingEventDefinedInlineNullOptionalValue',
+              'optional': true,
+              'bubblingType': 'bubble',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': []
+                }
+              }
+            },
+            {
+              'name': 'onBubblingEventDefinedInlineNullOptionalBoth',
+              'optional': true,
+              'bubblingType': 'bubble',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': []
+                }
+              }
+            },
+            {
+              'name': 'onBubblingEventDefinedInlineNullWithPaperName',
+              'optional': true,
+              'bubblingType': 'bubble',
+              'paperTopLevelNameDeprecated': 'paperBubblingEventDefinedInlineNullWithPaperName',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': []
+                }
+              }
+            }
+          ],
+          'props': [],
+          'commands': []
+        }
+      }
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture EVENTS_DEFINED_INLINE_WITH_ALL_TYPES 1`] = `
+"{
+  'modules': {
+    'Module': {
+      'type': 'Component',
+      'components': {
+        'Module': {
+          'extendsProps': [
+            {
+              'type': 'ReactNativeBuiltInType',
+              'knownTypeName': 'ReactNativeCoreViewProps'
+            }
+          ],
+          'events': [
+            {
+              'name': 'onDirectEventDefinedInline',
+              'optional': false,
+              'bubblingType': 'direct',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'boolean_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'enum_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required_nested_2_layers',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'object_optional_nested_1_layer',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'ObjectTypeAnnotation',
+                              'properties': [
+                                {
+                                  'name': 'boolean_required',
+                                  'optional': false,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'string_optional_key',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'StringTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'double_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'DoubleTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'float_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'FloatTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'int32_optional_both',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                }
+                              ]
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    }
+                  ]
+                }
+              }
+            },
+            {
+              'name': 'onDirectEventDefinedInlineOptionalKey',
+              'optional': true,
+              'bubblingType': 'direct',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'boolean_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'enum_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required_nested_2_layers',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'object_optional_nested_1_layer',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'ObjectTypeAnnotation',
+                              'properties': [
+                                {
+                                  'name': 'boolean_required',
+                                  'optional': false,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'string_optional_key',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'StringTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'double_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'DoubleTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'float_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'FloatTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'int32_optional_both',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                }
+                              ]
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    }
+                  ]
+                }
+              }
+            },
+            {
+              'name': 'onDirectEventDefinedInlineOptionalValue',
+              'optional': true,
+              'bubblingType': 'direct',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'boolean_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'enum_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required_nested_2_layers',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'object_optional_nested_1_layer',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'ObjectTypeAnnotation',
+                              'properties': [
+                                {
+                                  'name': 'boolean_required',
+                                  'optional': false,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'string_optional_key',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'StringTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'double_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'DoubleTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'float_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'FloatTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'int32_optional_both',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                }
+                              ]
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    }
+                  ]
+                }
+              }
+            },
+            {
+              'name': 'onDirectEventDefinedInlineOptionalBoth',
+              'optional': true,
+              'bubblingType': 'direct',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'boolean_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'enum_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required_nested_2_layers',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'object_optional_nested_1_layer',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'ObjectTypeAnnotation',
+                              'properties': [
+                                {
+                                  'name': 'boolean_required',
+                                  'optional': false,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'string_optional_key',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'StringTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'double_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'DoubleTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'float_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'FloatTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'int32_optional_both',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                }
+                              ]
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    }
+                  ]
+                }
+              }
+            },
+            {
+              'name': 'onDirectEventDefinedInlineWithPaperName',
+              'optional': true,
+              'bubblingType': 'direct',
+              'paperTopLevelNameDeprecated': 'paperDirectEventDefinedInlineWithPaperName',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'boolean_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'enum_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required_nested_2_layers',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'object_optional_nested_1_layer',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'ObjectTypeAnnotation',
+                              'properties': [
+                                {
+                                  'name': 'boolean_required',
+                                  'optional': false,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'string_optional_key',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'StringTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'double_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'DoubleTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'float_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'FloatTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'int32_optional_both',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                }
+                              ]
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    }
+                  ]
+                }
+              }
+            },
+            {
+              'name': 'onBubblingEventDefinedInline',
+              'optional': false,
+              'bubblingType': 'bubble',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'boolean_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'enum_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required_nested_2_layers',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'object_optional_nested_1_layer',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'ObjectTypeAnnotation',
+                              'properties': [
+                                {
+                                  'name': 'boolean_required',
+                                  'optional': false,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'string_optional_key',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'StringTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'double_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'DoubleTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'float_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'FloatTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'int32_optional_both',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                }
+                              ]
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    }
+                  ]
+                }
+              }
+            },
+            {
+              'name': 'onBubblingEventDefinedInlineOptionalKey',
+              'optional': true,
+              'bubblingType': 'bubble',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'boolean_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'enum_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required_nested_2_layers',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'object_optional_nested_1_layer',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'ObjectTypeAnnotation',
+                              'properties': [
+                                {
+                                  'name': 'boolean_required',
+                                  'optional': false,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'string_optional_key',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'StringTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'double_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'DoubleTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'float_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'FloatTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'int32_optional_both',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                }
+                              ]
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    }
+                  ]
+                }
+              }
+            },
+            {
+              'name': 'onBubblingEventDefinedInlineOptionalValue',
+              'optional': true,
+              'bubblingType': 'bubble',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'boolean_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'enum_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required_nested_2_layers',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'object_optional_nested_1_layer',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'ObjectTypeAnnotation',
+                              'properties': [
+                                {
+                                  'name': 'boolean_required',
+                                  'optional': false,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'string_optional_key',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'StringTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'double_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'DoubleTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'float_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'FloatTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'int32_optional_both',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                }
+                              ]
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    }
+                  ]
+                }
+              }
+            },
+            {
+              'name': 'onBubblingEventDefinedInlineOptionalBoth',
+              'optional': true,
+              'bubblingType': 'bubble',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'boolean_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'enum_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required_nested_2_layers',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'object_optional_nested_1_layer',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'ObjectTypeAnnotation',
+                              'properties': [
+                                {
+                                  'name': 'boolean_required',
+                                  'optional': false,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'string_optional_key',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'StringTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'double_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'DoubleTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'float_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'FloatTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'int32_optional_both',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                }
+                              ]
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    }
+                  ]
+                }
+              }
+            },
+            {
+              'name': 'onBubblingEventDefinedInlineWithPaperName',
+              'optional': true,
+              'bubblingType': 'bubble',
+              'paperTopLevelNameDeprecated': 'paperBubblingEventDefinedInlineWithPaperName',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'boolean_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'enum_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required_nested_2_layers',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'object_optional_nested_1_layer',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'ObjectTypeAnnotation',
+                              'properties': [
+                                {
+                                  'name': 'boolean_required',
+                                  'optional': false,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'string_optional_key',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'StringTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'double_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'DoubleTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'float_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'FloatTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'int32_optional_both',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                }
+                              ]
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    }
+                  ]
+                }
+              }
+            }
+          ],
+          'props': [],
+          'commands': []
+        }
+      }
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture NO_PROPS_EVENTS_ONLY_DEPRECATED_VIEW_CONFIG_NAME_OPTION 1`] = `
+"{
+  'modules': {
+    'Module': {
+      'type': 'Component',
+      'components': {
+        'Module': {
+          'deprecatedViewConfigName': 'DeprecateModuleName',
+          'extendsProps': [
+            {
+              'type': 'ReactNativeBuiltInType',
+              'knownTypeName': 'ReactNativeCoreViewProps'
+            }
+          ],
+          'events': [],
+          'props': [],
+          'commands': []
+        }
+      }
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture OBJECT_PROP_TYPES_NO_EVENTS 1`] = `
+"{
+  'modules': {
+    'Module': {
+      'type': 'Component',
+      'components': {
+        'Module': {
+          'extendsProps': [
+            {
+              'type': 'ReactNativeBuiltInType',
+              'knownTypeName': 'ReactNativeCoreViewProps'
+            }
+          ],
+          'events': [],
+          'props': [
+            {
+              'name': 'boolean_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'BooleanTypeAnnotation',
+                      'default': false
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'boolean_optional',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': true,
+                    'typeAnnotation': {
+                      'type': 'BooleanTypeAnnotation',
+                      'default': false
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'string_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'StringTypeAnnotation',
+                      'default': null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'string_optional',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': true,
+                    'typeAnnotation': {
+                      'type': 'StringTypeAnnotation',
+                      'default': ''
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'double_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'DoubleTypeAnnotation',
+                      'default': 0
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'double_optional',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': true,
+                    'typeAnnotation': {
+                      'type': 'DoubleTypeAnnotation',
+                      'default': 0
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'float_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'FloatTypeAnnotation',
+                      'default': 0
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'float_optional',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': true,
+                    'typeAnnotation': {
+                      'type': 'FloatTypeAnnotation',
+                      'default': 0
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'int_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'Int32TypeAnnotation',
+                      'default': 0
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'int_optional',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': true,
+                    'typeAnnotation': {
+                      'type': 'Int32TypeAnnotation',
+                      'default': 0
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'enum_optional',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': true,
+                    'typeAnnotation': {
+                      'type': 'ArrayTypeAnnotation',
+                      'elementType': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'default': 'small',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'image_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'ReservedPropTypeAnnotation',
+                      'name': 'ImageSourcePrimitive'
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'image_optional_key',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': true,
+                    'typeAnnotation': {
+                      'type': 'ReservedPropTypeAnnotation',
+                      'name': 'ImageSourcePrimitive'
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'image_optional_value',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': true,
+                    'typeAnnotation': {
+                      'type': 'ReservedPropTypeAnnotation',
+                      'name': 'ImageSourcePrimitive'
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'image_optional_both',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': true,
+                    'typeAnnotation': {
+                      'type': 'ReservedPropTypeAnnotation',
+                      'name': 'ImageSourcePrimitive'
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'color_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'ReservedPropTypeAnnotation',
+                      'name': 'ColorPrimitive'
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'color_optional_key',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': true,
+                    'typeAnnotation': {
+                      'type': 'ReservedPropTypeAnnotation',
+                      'name': 'ColorPrimitive'
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'color_optional_value',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': true,
+                    'typeAnnotation': {
+                      'type': 'ReservedPropTypeAnnotation',
+                      'name': 'ColorPrimitive'
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'color_optional_both',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': true,
+                    'typeAnnotation': {
+                      'type': 'ReservedPropTypeAnnotation',
+                      'name': 'ColorPrimitive'
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'processed_color_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'ReservedPropTypeAnnotation',
+                      'name': 'ColorPrimitive'
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'processed_color_optional_key',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': true,
+                    'typeAnnotation': {
+                      'type': 'ReservedPropTypeAnnotation',
+                      'name': 'ColorPrimitive'
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'processed_color_optional_value',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': true,
+                    'typeAnnotation': {
+                      'type': 'ReservedPropTypeAnnotation',
+                      'name': 'ColorPrimitive'
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'processed_color_optional_both',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': true,
+                    'typeAnnotation': {
+                      'type': 'ReservedPropTypeAnnotation',
+                      'name': 'ColorPrimitive'
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'point_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'ReservedPropTypeAnnotation',
+                      'name': 'PointPrimitive'
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'point_optional_key',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': true,
+                    'typeAnnotation': {
+                      'type': 'ReservedPropTypeAnnotation',
+                      'name': 'PointPrimitive'
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'point_optional_value',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': true,
+                    'typeAnnotation': {
+                      'type': 'ReservedPropTypeAnnotation',
+                      'name': 'PointPrimitive'
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'point_optional_both',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': true,
+                    'typeAnnotation': {
+                      'type': 'ReservedPropTypeAnnotation',
+                      'name': 'PointPrimitive'
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'insets_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'ReservedPropTypeAnnotation',
+                      'name': 'EdgeInsetsPrimitive'
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'insets_optional_key',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': true,
+                    'typeAnnotation': {
+                      'type': 'ReservedPropTypeAnnotation',
+                      'name': 'EdgeInsetsPrimitive'
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'insets_optional_value',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': true,
+                    'typeAnnotation': {
+                      'type': 'ReservedPropTypeAnnotation',
+                      'name': 'EdgeInsetsPrimitive'
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'insets_optional_both',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': true,
+                    'typeAnnotation': {
+                      'type': 'ReservedPropTypeAnnotation',
+                      'name': 'EdgeInsetsPrimitive'
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'object_required',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'ObjectTypeAnnotation',
+                      'properties': [
+                        {
+                          'name': 'nestedProp',
+                          'optional': false,
+                          'typeAnnotation': {
+                            'type': 'StringTypeAnnotation',
+                            'default': null
+                          }
+                        }
+                      ]
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'object_optional_key',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'ObjectTypeAnnotation',
+                      'properties': [
+                        {
+                          'name': 'nestedProp',
+                          'optional': false,
+                          'typeAnnotation': {
+                            'type': 'StringTypeAnnotation',
+                            'default': null
+                          }
+                        }
+                      ]
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'object_optional_value',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'ObjectTypeAnnotation',
+                      'properties': [
+                        {
+                          'name': 'nestedProp',
+                          'optional': false,
+                          'typeAnnotation': {
+                            'type': 'StringTypeAnnotation',
+                            'default': null
+                          }
+                        }
+                      ]
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'object_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'prop',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'ObjectTypeAnnotation',
+                      'properties': [
+                        {
+                          'name': 'nestedProp',
+                          'optional': false,
+                          'typeAnnotation': {
+                            'type': 'StringTypeAnnotation',
+                            'default': null
+                          }
+                        }
+                      ]
+                    }
+                  }
+                ]
+              }
+            }
+          ],
+          'commands': []
+        }
+      }
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture ONE_OF_EACH_PROP_EVENT_DEFAULT_AND_OPTIONS 1`] = `
+"{
+  'modules': {
+    'Module': {
+      'type': 'Component',
+      'components': {
+        'Module': {
+          'interfaceOnly': true,
+          'paperComponentName': 'RCTModule',
+          'extendsProps': [
+            {
+              'type': 'ReactNativeBuiltInType',
+              'knownTypeName': 'ReactNativeCoreViewProps'
+            }
+          ],
+          'events': [
+            {
+              'name': 'onDirectEventDefinedInlineNull',
+              'optional': false,
+              'bubblingType': 'direct',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': []
+                }
+              }
+            },
+            {
+              'name': 'onBubblingEventDefinedInlineNull',
+              'optional': false,
+              'bubblingType': 'bubble',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': []
+                }
+              }
+            }
+          ],
+          'props': [
+            {
+              'name': 'boolean_default_true_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'BooleanTypeAnnotation',
+                'default': true
+              }
+            }
+          ],
+          'commands': []
+        }
+      }
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture ONE_OF_EACH_PROP_EVENT_DEFAULT_AND_OPTIONS_NO_CAST 1`] = `
+"{
+  'modules': {
+    'Module': {
+      'type': 'Component',
+      'components': {
+        'Module': {
+          'interfaceOnly': true,
+          'excludedPlatforms': [
+            'android'
+          ],
+          'paperComponentName': 'RCTModule',
+          'extendsProps': [
+            {
+              'type': 'ReactNativeBuiltInType',
+              'knownTypeName': 'ReactNativeCoreViewProps'
+            }
+          ],
+          'events': [
+            {
+              'name': 'onDirectEventDefinedInlineNull',
+              'optional': false,
+              'bubblingType': 'direct',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': []
+                }
+              }
+            },
+            {
+              'name': 'onBubblingEventDefinedInlineNull',
+              'optional': false,
+              'bubblingType': 'bubble',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': []
+                }
+              }
+            }
+          ],
+          'props': [
+            {
+              'name': 'boolean_default_true_optional_both',
+              'optional': true,
+              'typeAnnotation': {
+                'type': 'BooleanTypeAnnotation',
+                'default': true
+              }
+            }
+          ],
+          'commands': []
+        }
+      }
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture PROPS_ALIASED_LOCALLY 1`] = `
+"{
+  'modules': {
+    'Module': {
+      'type': 'Component',
+      'components': {
+        'Module': {
+          'extendsProps': [
+            {
+              'type': 'ReactNativeBuiltInType',
+              'knownTypeName': 'ReactNativeCoreViewProps'
+            }
+          ],
+          'events': [],
+          'props': [
+            {
+              'name': 'otherStringProp',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'StringTypeAnnotation',
+                'default': null
+              }
+            },
+            {
+              'name': 'isEnabled',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'BooleanTypeAnnotation',
+                'default': false
+              }
+            },
+            {
+              'name': 'label',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'StringTypeAnnotation',
+                'default': null
+              }
+            },
+            {
+              'name': 'localType',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'otherStringProp',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'StringTypeAnnotation',
+                      'default': null
+                    }
+                  },
+                  {
+                    'name': 'isEnabled',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'BooleanTypeAnnotation',
+                      'default': false
+                    }
+                  },
+                  {
+                    'name': 'label',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'StringTypeAnnotation',
+                      'default': null
+                    }
+                  }
+                ]
+              }
+            },
+            {
+              'name': 'localArr',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'otherStringProp',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation',
+                        'default': null
+                      }
+                    },
+                    {
+                      'name': 'isEnabled',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation',
+                        'default': false
+                      }
+                    },
+                    {
+                      'name': 'label',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation',
+                        'default': null
+                      }
+                    }
+                  ]
+                }
+              }
+            }
+          ],
+          'commands': []
+        }
+      }
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture PROPS_AND_EVENTS_TYPES_EXPORTED 1`] = `
+"{
+  'modules': {
+    'Module': {
+      'type': 'Component',
+      'components': {
+        'Module': {
+          'extendsProps': [
+            {
+              'type': 'ReactNativeBuiltInType',
+              'knownTypeName': 'ReactNativeCoreViewProps'
+            }
+          ],
+          'events': [
+            {
+              'name': 'onBubblingEventDefinedInline',
+              'optional': false,
+              'bubblingType': 'bubble',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'boolean_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'enum_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required_nested_2_layers',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'object_optional_nested_1_layer',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'ObjectTypeAnnotation',
+                              'properties': [
+                                {
+                                  'name': 'boolean_required',
+                                  'optional': false,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'string_optional_key',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'StringTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'double_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'DoubleTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'float_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'FloatTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'int32_optional_both',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                }
+                              ]
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    }
+                  ]
+                }
+              }
+            },
+            {
+              'name': 'onBubblingEventDefinedInlineWithPaperName',
+              'optional': false,
+              'bubblingType': 'bubble',
+              'paperTopLevelNameDeprecated': 'paperBubblingEventDefinedInlineWithPaperName',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'boolean_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'enum_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required_nested_2_layers',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'object_optional_nested_1_layer',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'ObjectTypeAnnotation',
+                              'properties': [
+                                {
+                                  'name': 'boolean_required',
+                                  'optional': false,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'string_optional_key',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'StringTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'double_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'DoubleTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'float_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'FloatTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'int32_optional_both',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                }
+                              ]
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    }
+                  ]
+                }
+              }
+            },
+            {
+              'name': 'onDirectEventDefinedInline',
+              'optional': false,
+              'bubblingType': 'direct',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'boolean_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'enum_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required_nested_2_layers',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'object_optional_nested_1_layer',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'ObjectTypeAnnotation',
+                              'properties': [
+                                {
+                                  'name': 'boolean_required',
+                                  'optional': false,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'string_optional_key',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'StringTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'double_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'DoubleTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'float_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'FloatTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'int32_optional_both',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                }
+                              ]
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    }
+                  ]
+                }
+              }
+            },
+            {
+              'name': 'onDirectEventDefinedInlineWithPaperName',
+              'optional': false,
+              'bubblingType': 'direct',
+              'paperTopLevelNameDeprecated': 'paperDirectEventDefinedInlineWithPaperName',
+              'typeAnnotation': {
+                'type': 'EventTypeAnnotation',
+                'argument': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'boolean_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'boolean_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'BooleanTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'string_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'double_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'DoubleTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'float_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'FloatTypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'int32_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'Int32TypeAnnotation'
+                      }
+                    },
+                    {
+                      'name': 'enum_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'enum_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'StringEnumTypeAnnotation',
+                        'options': [
+                          'small',
+                          'large'
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_required_nested_2_layers',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'object_optional_nested_1_layer',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'ObjectTypeAnnotation',
+                              'properties': [
+                                {
+                                  'name': 'boolean_required',
+                                  'optional': false,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'string_optional_key',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'StringTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'double_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'DoubleTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'float_optional_value',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'FloatTypeAnnotation'
+                                  }
+                                },
+                                {
+                                  'name': 'int32_optional_both',
+                                  'optional': true,
+                                  'typeAnnotation': {
+                                    'type': 'Int32TypeAnnotation'
+                                  }
+                                }
+                              ]
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_required',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'boolean_required',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_key',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'string_optional_key',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_value',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'float_optional_value',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'FloatTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      'name': 'object_readonly_optional_both',
+                      'optional': true,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'int32_optional_both',
+                            'optional': true,
+                            'typeAnnotation': {
+                              'type': 'Int32TypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    }
+                  ]
+                }
+              }
+            }
+          ],
+          'props': [],
+          'commands': []
+        }
+      }
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture PROPS_AS_EXTERNAL_TYPES 1`] = `
+"{
+  'modules': {
+    'Module': {
+      'type': 'Component',
+      'components': {
+        'Module': {
+          'extendsProps': [],
+          'events': [],
+          'props': [
+            {
+              'name': 'disable',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'StringTypeAnnotation',
+                'default': null
+              }
+            },
+            {
+              'name': 'array',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'StringTypeAnnotation'
+                }
+              }
+            }
+          ],
+          'commands': []
+        }
+      }
+    }
+  }
+}"
+`;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/__tests__/component-parser-test.js b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/__tests__/component-parser-test.js
new file mode 100644
index 0000000..9c93fe7
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/__tests__/component-parser-test.js
@@ -0,0 +1,44 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @emails oncall+react_native
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const FlowParser = require('../../index.js');
+const fixtures = require('../__test_fixtures__/fixtures.js');
+const failureFixtures = require('../__test_fixtures__/failures.js');
+jest.mock('fs', () => ({
+  readFileSync: filename => fixtures[filename] || failureFixtures[filename],
+}));
+
+describe('RN Codegen Flow Parser', () => {
+  Object.keys(fixtures)
+    .sort()
+    .forEach(fixtureName => {
+      it(`can generate fixture ${fixtureName}`, () => {
+        const schema = FlowParser.parseFile(fixtureName);
+        const serializedSchema = JSON.stringify(schema, null, 2).replace(
+          /"/g,
+          "'",
+        );
+        expect(serializedSchema).toMatchSnapshot();
+      });
+    });
+
+  Object.keys(failureFixtures)
+    .sort()
+    .forEach(fixtureName => {
+      it(`Fails with error message ${fixtureName}`, () => {
+        expect(() => {
+          FlowParser.parseFile(fixtureName);
+        }).toThrowErrorMatchingSnapshot();
+      });
+    });
+});
diff --git a/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/commands.js b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/commands.js
new file mode 100644
index 0000000..c967645
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/commands.js
@@ -0,0 +1,122 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ * @format
+ */
+
+'use strict';
+
+import type {
+  NamedShape,
+  CommandTypeAnnotation,
+} from '../../../CodegenSchema.js';
+import type {TypeDeclarationMap} from '../utils.js';
+
+const {getValueFromTypes} = require('../utils.js');
+
+type EventTypeAST = Object;
+
+function buildCommandSchema(property, types: TypeDeclarationMap) {
+  const name = property.key.name;
+  const optional = property.optional;
+  const value = getValueFromTypes(property.value, types);
+
+  const firstParam = value.params[0].typeAnnotation;
+
+  if (
+    !(
+      firstParam.id != null &&
+      firstParam.id.type === 'QualifiedTypeIdentifier' &&
+      firstParam.id.qualification.name === 'React' &&
+      firstParam.id.id.name === 'ElementRef'
+    )
+  ) {
+    throw new Error(
+      `The first argument of method ${name} must be of type React.ElementRef<>`,
+    );
+  }
+
+  const params = value.params.slice(1).map(param => {
+    const paramName = param.name.name;
+    const paramValue = getValueFromTypes(param.typeAnnotation, types);
+    const type =
+      paramValue.type === 'GenericTypeAnnotation'
+        ? paramValue.id.name
+        : paramValue.type;
+    let returnType;
+
+    switch (type) {
+      case 'RootTag':
+        returnType = {
+          type: 'ReservedTypeAnnotation',
+          name: 'RootTag',
+        };
+        break;
+      case 'BooleanTypeAnnotation':
+        returnType = {
+          type: 'BooleanTypeAnnotation',
+        };
+        break;
+      case 'Int32':
+        returnType = {
+          type: 'Int32TypeAnnotation',
+        };
+        break;
+      case 'Double':
+        returnType = {
+          type: 'DoubleTypeAnnotation',
+        };
+        break;
+      case 'Float':
+        returnType = {
+          type: 'FloatTypeAnnotation',
+        };
+        break;
+      case 'StringTypeAnnotation':
+        returnType = {
+          type: 'StringTypeAnnotation',
+        };
+        break;
+      default:
+        (type: empty);
+        throw new Error(
+          `Unsupported param type for method "${name}", param "${paramName}". Found ${type}`,
+        );
+    }
+
+    return {
+      name: paramName,
+      typeAnnotation: returnType,
+    };
+  });
+
+  return {
+    name,
+    optional,
+    typeAnnotation: {
+      type: 'FunctionTypeAnnotation',
+      params,
+      returnTypeAnnotation: {
+        type: 'VoidTypeAnnotation',
+      },
+    },
+  };
+}
+
+function getCommands(
+  commandTypeAST: $ReadOnlyArray<EventTypeAST>,
+  types: TypeDeclarationMap,
+): $ReadOnlyArray<NamedShape<CommandTypeAnnotation>> {
+  return commandTypeAST
+    .filter(property => property.type === 'ObjectTypeProperty')
+    .map(property => buildCommandSchema(property, types))
+    .filter(Boolean);
+}
+
+module.exports = {
+  getCommands,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/events.js b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/events.js
new file mode 100644
index 0000000..b950f82
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/events.js
@@ -0,0 +1,255 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {
+  EventTypeShape,
+  NamedShape,
+  EventTypeAnnotation,
+} from '../../../CodegenSchema.js';
+
+function getPropertyType(
+  name,
+  optional,
+  typeAnnotation,
+): NamedShape<EventTypeAnnotation> {
+  const type =
+    typeAnnotation.type === 'GenericTypeAnnotation'
+      ? typeAnnotation.id.name
+      : typeAnnotation.type;
+
+  switch (type) {
+    case 'BooleanTypeAnnotation':
+      return {
+        name,
+        optional,
+        typeAnnotation: {
+          type: 'BooleanTypeAnnotation',
+        },
+      };
+    case 'StringTypeAnnotation':
+      return {
+        name,
+        optional,
+        typeAnnotation: {
+          type: 'StringTypeAnnotation',
+        },
+      };
+    case 'Int32':
+      return {
+        name,
+        optional,
+        typeAnnotation: {
+          type: 'Int32TypeAnnotation',
+        },
+      };
+    case 'Double':
+      return {
+        name,
+        optional,
+        typeAnnotation: {
+          type: 'DoubleTypeAnnotation',
+        },
+      };
+    case 'Float':
+      return {
+        name,
+        optional,
+        typeAnnotation: {
+          type: 'FloatTypeAnnotation',
+        },
+      };
+    case '$ReadOnly':
+      return getPropertyType(
+        name,
+        optional,
+        typeAnnotation.typeParameters.params[0],
+      );
+    case 'ObjectTypeAnnotation':
+      return {
+        name,
+        optional,
+        typeAnnotation: {
+          type: 'ObjectTypeAnnotation',
+          properties: typeAnnotation.properties.map(buildPropertiesForEvent),
+        },
+      };
+    case 'UnionTypeAnnotation':
+      return {
+        name,
+        optional,
+        typeAnnotation: {
+          type: 'StringEnumTypeAnnotation',
+          options: typeAnnotation.types.map(option => option.value),
+        },
+      };
+    default:
+      (type: empty);
+      throw new Error(`Unable to determine event type for "${name}": ${type}`);
+  }
+}
+
+function findEventArgumentsAndType(
+  typeAnnotation,
+  types,
+  bubblingType,
+  paperName,
+) {
+  if (!typeAnnotation.id) {
+    throw new Error("typeAnnotation of event doesn't have a name");
+  }
+  const name = typeAnnotation.id.name;
+  if (name === '$ReadOnly') {
+    return {
+      argumentProps: typeAnnotation.typeParameters.params[0].properties,
+      paperTopLevelNameDeprecated: paperName,
+      bubblingType,
+    };
+  } else if (name === 'BubblingEventHandler' || name === 'DirectEventHandler') {
+    const eventType = name === 'BubblingEventHandler' ? 'bubble' : 'direct';
+    const paperTopLevelNameDeprecated =
+      typeAnnotation.typeParameters.params.length > 1
+        ? typeAnnotation.typeParameters.params[1].value
+        : null;
+    if (
+      typeAnnotation.typeParameters.params[0].type ===
+      'NullLiteralTypeAnnotation'
+    ) {
+      return {
+        argumentProps: [],
+        bubblingType: eventType,
+        paperTopLevelNameDeprecated,
+      };
+    }
+    return findEventArgumentsAndType(
+      typeAnnotation.typeParameters.params[0],
+      types,
+      eventType,
+      paperTopLevelNameDeprecated,
+    );
+  } else if (types[name]) {
+    return findEventArgumentsAndType(
+      types[name].right,
+      types,
+      bubblingType,
+      paperName,
+    );
+  } else {
+    return {
+      argumentProps: null,
+      bubblingType: null,
+      paperTopLevelNameDeprecated: null,
+    };
+  }
+}
+
+function buildPropertiesForEvent(property): NamedShape<EventTypeAnnotation> {
+  const name = property.key.name;
+  const optional =
+    property.value.type === 'NullableTypeAnnotation' || property.optional;
+  let typeAnnotation =
+    property.value.type === 'NullableTypeAnnotation'
+      ? property.value.typeAnnotation
+      : property.value;
+
+  return getPropertyType(name, optional, typeAnnotation);
+}
+
+function getEventArgument(argumentProps, name) {
+  return {
+    type: 'ObjectTypeAnnotation',
+    properties: argumentProps.map(buildPropertiesForEvent),
+  };
+}
+
+function buildEventSchema(
+  types: TypeMap,
+  property: EventTypeAST,
+): ?EventTypeShape {
+  const name = property.key.name;
+  const optional =
+    property.optional || property.value.type === 'NullableTypeAnnotation';
+
+  let typeAnnotation =
+    property.value.type === 'NullableTypeAnnotation'
+      ? property.value.typeAnnotation
+      : property.value;
+
+  if (
+    typeAnnotation.type !== 'GenericTypeAnnotation' ||
+    (typeAnnotation.id.name !== 'BubblingEventHandler' &&
+      typeAnnotation.id.name !== 'DirectEventHandler')
+  ) {
+    return null;
+  }
+
+  const {
+    argumentProps,
+    bubblingType,
+    paperTopLevelNameDeprecated,
+  } = findEventArgumentsAndType(typeAnnotation, types);
+
+  if (bubblingType && argumentProps) {
+    if (paperTopLevelNameDeprecated != null) {
+      return {
+        name,
+        optional,
+        bubblingType,
+        paperTopLevelNameDeprecated,
+        typeAnnotation: {
+          type: 'EventTypeAnnotation',
+          argument: getEventArgument(argumentProps, name),
+        },
+      };
+    }
+
+    return {
+      name,
+      optional,
+      bubblingType,
+      typeAnnotation: {
+        type: 'EventTypeAnnotation',
+        argument: getEventArgument(argumentProps, name),
+      },
+    };
+  }
+
+  if (argumentProps === null) {
+    throw new Error(`Unable to determine event arguments for "${name}"`);
+  }
+
+  if (bubblingType === null) {
+    throw new Error(`Unable to determine event arguments for "${name}"`);
+  }
+}
+
+// $FlowFixMe[unclear-type] there's no flowtype for ASTs
+type EventTypeAST = Object;
+
+type TypeMap = {
+  // $FlowFixMe[unclear-type] there's no flowtype for ASTs
+  [string]: Object,
+  ...,
+};
+
+function getEvents(
+  eventTypeAST: $ReadOnlyArray<EventTypeAST>,
+  types: TypeMap,
+): $ReadOnlyArray<EventTypeShape> {
+  return eventTypeAST
+    .filter(property => property.type === 'ObjectTypeProperty')
+    .map(property => buildEventSchema(types, property))
+    .filter(Boolean);
+}
+
+module.exports = {
+  getEvents,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/extends.js b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/extends.js
new file mode 100644
index 0000000..8903294
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/extends.js
@@ -0,0 +1,66 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {ExtendsPropsShape} from '../../../CodegenSchema.js';
+import type {TypeDeclarationMap} from '../utils.js';
+
+function extendsForProp(prop: PropsAST, types: TypeDeclarationMap) {
+  if (!prop.argument) {
+    console.log('null', prop);
+  }
+  const name = prop.argument.id.name;
+
+  if (types[name] != null) {
+    // This type is locally defined in the file
+    return null;
+  }
+
+  switch (name) {
+    case 'ViewProps':
+      return {
+        type: 'ReactNativeBuiltInType',
+        knownTypeName: 'ReactNativeCoreViewProps',
+      };
+    default: {
+      throw new Error(`Unable to handle prop spread: ${name}`);
+    }
+  }
+}
+
+function removeKnownExtends(
+  typeDefinition: $ReadOnlyArray<PropsAST>,
+  types: TypeDeclarationMap,
+): $ReadOnlyArray<PropsAST> {
+  return typeDefinition.filter(
+    prop =>
+      prop.type !== 'ObjectTypeSpreadProperty' ||
+      extendsForProp(prop, types) === null,
+  );
+}
+
+// $FlowFixMe[unclear-type] there's no flowtype for ASTs
+type PropsAST = Object;
+
+function getExtendsProps(
+  typeDefinition: $ReadOnlyArray<PropsAST>,
+  types: TypeDeclarationMap,
+): $ReadOnlyArray<ExtendsPropsShape> {
+  return typeDefinition
+    .filter(prop => prop.type === 'ObjectTypeSpreadProperty')
+    .map(prop => extendsForProp(prop, types))
+    .filter(Boolean);
+}
+
+module.exports = {
+  getExtendsProps,
+  removeKnownExtends,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/index.js b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/index.js
new file mode 100644
index 0000000..34b8233
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/index.js
@@ -0,0 +1,212 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {ComponentSchemaBuilderConfig} from './schema.js';
+const {getCommands} = require('./commands');
+const {getEvents} = require('./events');
+const {getProps, getPropProperties} = require('./props');
+const {getCommandOptions, getOptions} = require('./options');
+const {getExtendsProps, removeKnownExtends} = require('./extends');
+const {getTypes} = require('../utils');
+
+function findComponentConfig(ast) {
+  const foundConfigs = [];
+
+  const defaultExports = ast.body.filter(
+    node => node.type === 'ExportDefaultDeclaration',
+  );
+
+  defaultExports.forEach(statement => {
+    let declaration = statement.declaration;
+
+    // codegenNativeComponent can be nested inside a cast
+    // expression so we need to go one level deeper
+    if (declaration.type === 'TypeCastExpression') {
+      declaration = declaration.expression;
+    }
+
+    try {
+      if (declaration.callee.name === 'codegenNativeComponent') {
+        const typeArgumentParams = declaration.typeArguments.params;
+        const funcArgumentParams = declaration.arguments;
+
+        const nativeComponentType = {};
+        nativeComponentType.propsTypeName = typeArgumentParams[0].id.name;
+        nativeComponentType.componentName = funcArgumentParams[0].value;
+        if (funcArgumentParams.length > 1) {
+          nativeComponentType.optionsExpression = funcArgumentParams[1];
+        }
+        foundConfigs.push(nativeComponentType);
+      }
+    } catch (e) {
+      // ignore
+    }
+  });
+
+  if (foundConfigs.length === 0) {
+    throw new Error('Could not find component config for native component');
+  }
+  if (foundConfigs.length > 1) {
+    throw new Error('Only one component is supported per file');
+  }
+
+  const foundConfig = foundConfigs[0];
+
+  const namedExports = ast.body.filter(
+    node => node.type === 'ExportNamedDeclaration',
+  );
+
+  const commandsTypeNames = namedExports
+    .map(statement => {
+      let callExpression;
+      let calleeName;
+      try {
+        callExpression = statement.declaration.declarations[0].init;
+        calleeName = callExpression.callee.name;
+      } catch (e) {
+        return;
+      }
+
+      if (calleeName !== 'codegenNativeCommands') {
+        return;
+      }
+
+      // const statement.declaration.declarations[0].init
+      if (callExpression.arguments.length !== 1) {
+        throw new Error(
+          'codegenNativeCommands must be passed options including the supported commands',
+        );
+      }
+
+      const typeArgumentParam = callExpression.typeArguments.params[0];
+
+      if (typeArgumentParam.type !== 'GenericTypeAnnotation') {
+        throw new Error(
+          "codegenNativeCommands doesn't support inline definitions. Specify a file local type alias",
+        );
+      }
+
+      return {
+        commandTypeName: typeArgumentParam.id.name,
+        commandOptionsExpression: callExpression.arguments[0],
+      };
+    })
+    .filter(Boolean);
+
+  if (commandsTypeNames.length > 1) {
+    throw new Error('codegenNativeCommands may only be called once in a file');
+  }
+
+  return {
+    ...foundConfig,
+    commandTypeName:
+      commandsTypeNames[0] == null
+        ? null
+        : commandsTypeNames[0].commandTypeName,
+    commandOptionsExpression:
+      commandsTypeNames[0] == null
+        ? null
+        : commandsTypeNames[0].commandOptionsExpression,
+  };
+}
+
+function getCommandProperties(commandTypeName, types, commandOptions) {
+  if (commandTypeName == null) {
+    return [];
+  }
+
+  const typeAlias = types[commandTypeName];
+
+  if (typeAlias.type !== 'InterfaceDeclaration') {
+    throw new Error(
+      `The type argument for codegenNativeCommands must be an interface, received ${typeAlias.type}`,
+    );
+  }
+
+  let properties;
+  try {
+    properties = typeAlias.body.properties;
+  } catch (e) {
+    throw new Error(
+      `Failed to find type definition for "${commandTypeName}", please check that you have a valid codegen flow file`,
+    );
+  }
+
+  const flowPropertyNames = properties
+    .map(property => property && property.key && property.key.name)
+    .filter(Boolean);
+
+  if (commandOptions == null || commandOptions.supportedCommands == null) {
+    throw new Error(
+      'codegenNativeCommands must be given an options object with supportedCommands array',
+    );
+  }
+
+  if (
+    commandOptions.supportedCommands.length !== flowPropertyNames.length ||
+    !commandOptions.supportedCommands.every(supportedCommand =>
+      flowPropertyNames.includes(supportedCommand),
+    )
+  ) {
+    throw new Error(
+      `codegenNativeCommands expected the same supportedCommands specified in the ${commandTypeName} interface: ${flowPropertyNames.join(
+        ', ',
+      )}`,
+    );
+  }
+
+  return properties;
+}
+
+// $FlowFixMe[signature-verification-failure] there's no flowtype for AST
+function buildComponentSchema(ast): ComponentSchemaBuilderConfig {
+  const {
+    componentName,
+    propsTypeName,
+    commandTypeName,
+    commandOptionsExpression,
+    optionsExpression,
+  } = findComponentConfig(ast);
+
+  const types = getTypes(ast);
+
+  const propProperties = getPropProperties(propsTypeName, types);
+  const commandOptions = getCommandOptions(commandOptionsExpression);
+
+  const commandProperties = getCommandProperties(
+    commandTypeName,
+    types,
+    commandOptions,
+  );
+
+  const extendsProps = getExtendsProps(propProperties, types);
+  const options = getOptions(optionsExpression);
+
+  const nonExtendsProps = removeKnownExtends(propProperties, types);
+  const props = getProps(nonExtendsProps, types);
+  const events = getEvents(propProperties, types);
+  const commands = getCommands(commandProperties, types);
+
+  return {
+    filename: componentName,
+    componentName,
+    options,
+    extendsProps,
+    events,
+    props,
+    commands,
+  };
+}
+
+module.exports = {
+  buildComponentSchema,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/options.js b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/options.js
new file mode 100644
index 0000000..8a137c5
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/options.js
@@ -0,0 +1,87 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {OptionsShape} from '../../../CodegenSchema.js';
+
+// $FlowFixMe[unclear-type] there's no flowtype for ASTs
+type OptionsAST = Object;
+
+export type CommandOptions = $ReadOnly<{
+  supportedCommands: $ReadOnlyArray<string>,
+}>;
+
+function getCommandOptions(
+  commandOptionsExpression: OptionsAST,
+): ?CommandOptions {
+  if (commandOptionsExpression == null) {
+    return null;
+  }
+
+  let foundOptions;
+  try {
+    foundOptions = commandOptionsExpression.properties.reduce(
+      (options, prop) => {
+        options[prop.key.name] = (
+          (prop && prop.value && prop.value.elements) ||
+          []
+        ).map(element => element && element.value);
+        return options;
+      },
+      {},
+    );
+  } catch (e) {
+    throw new Error(
+      'Failed to parse command options, please check that they are defined correctly',
+    );
+  }
+
+  return foundOptions;
+}
+
+function getOptions(optionsExpression: OptionsAST): ?OptionsShape {
+  if (!optionsExpression) {
+    return null;
+  }
+  let foundOptions;
+  try {
+    foundOptions = optionsExpression.properties.reduce((options, prop) => {
+      if (prop.value.type === 'ArrayExpression') {
+        options[prop.key.name] = prop.value.elements.map(
+          element => element.value,
+        );
+      } else {
+        options[prop.key.name] = prop.value.value;
+      }
+      return options;
+    }, {});
+  } catch (e) {
+    throw new Error(
+      'Failed to parse codegen options, please check that they are defined correctly',
+    );
+  }
+
+  if (
+    foundOptions.paperComponentName &&
+    foundOptions.paperComponentNameDeprecated
+  ) {
+    throw new Error(
+      'Failed to parse codegen options, cannot use both paperComponentName and paperComponentNameDeprecated',
+    );
+  }
+
+  return foundOptions;
+}
+
+module.exports = {
+  getCommandOptions,
+  getOptions,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/props.js b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/props.js
new file mode 100644
index 0000000..536606f
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/props.js
@@ -0,0 +1,475 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const {getValueFromTypes} = require('../utils.js');
+
+import type {NamedShape, PropTypeAnnotation} from '../../../CodegenSchema.js';
+import type {TypeDeclarationMap} from '../utils.js';
+
+function getPropProperties(
+  propsTypeName: string,
+  types: TypeDeclarationMap,
+): $FlowFixMe {
+  const typeAlias = types[propsTypeName];
+  try {
+    return typeAlias.right.typeParameters.params[0].properties;
+  } catch (e) {
+    throw new Error(
+      `Failed to find type definition for "${propsTypeName}", please check that you have a valid codegen flow file`,
+    );
+  }
+}
+
+function getTypeAnnotationForArray(name, typeAnnotation, defaultValue, types) {
+  const extractedTypeAnnotation = getValueFromTypes(typeAnnotation, types);
+  if (extractedTypeAnnotation.type === 'NullableTypeAnnotation') {
+    throw new Error(
+      'Nested optionals such as "$ReadOnlyArray<?boolean>" are not supported, please declare optionals at the top level of value definitions as in "?$ReadOnlyArray<boolean>"',
+    );
+  }
+
+  if (
+    extractedTypeAnnotation.type === 'GenericTypeAnnotation' &&
+    extractedTypeAnnotation.id.name === 'WithDefault'
+  ) {
+    throw new Error(
+      'Nested defaults such as "$ReadOnlyArray<WithDefault<boolean, false>>" are not supported, please declare defaults at the top level of value definitions as in "WithDefault<$ReadOnlyArray<boolean>, false>"',
+    );
+  }
+
+  if (extractedTypeAnnotation.type === 'GenericTypeAnnotation') {
+    // Resolve the type alias if it's not defined inline
+    const objectType = getValueFromTypes(extractedTypeAnnotation, types);
+
+    if (objectType.id.name === '$ReadOnly') {
+      return {
+        type: 'ObjectTypeAnnotation',
+        properties: flattenProperties(
+          objectType.typeParameters.params[0].properties,
+          types,
+        )
+          .map(prop => buildPropSchema(prop, types))
+          .filter(Boolean),
+      };
+    }
+
+    if (objectType.id.name === '$ReadOnlyArray') {
+      // We need to go yet another level deeper to resolve
+      // types that may be defined in a type alias
+      const nestedObjectType = getValueFromTypes(
+        objectType.typeParameters.params[0],
+        types,
+      );
+
+      return {
+        type: 'ArrayTypeAnnotation',
+        elementType: {
+          type: 'ObjectTypeAnnotation',
+          properties: flattenProperties(
+            nestedObjectType.typeParameters.params[0].properties,
+            types,
+          )
+            .map(prop => buildPropSchema(prop, types))
+            .filter(Boolean),
+        },
+      };
+    }
+  }
+
+  const type =
+    extractedTypeAnnotation.type === 'GenericTypeAnnotation'
+      ? extractedTypeAnnotation.id.name
+      : extractedTypeAnnotation.type;
+
+  switch (type) {
+    case 'ImageSource':
+      return {
+        type: 'ReservedPropTypeAnnotation',
+        name: 'ImageSourcePrimitive',
+      };
+    case 'ColorValue':
+    case 'ProcessedColorValue':
+      return {
+        type: 'ReservedPropTypeAnnotation',
+        name: 'ColorPrimitive',
+      };
+    case 'PointValue':
+      return {
+        type: 'ReservedPropTypeAnnotation',
+        name: 'PointPrimitive',
+      };
+    case 'EdgeInsetsValue':
+      return {
+        type: 'ReservedPropTypeAnnotation',
+        name: 'EdgeInsetsPrimitive',
+      };
+    case 'Stringish':
+      return {
+        type: 'StringTypeAnnotation',
+      };
+    case 'Int32':
+      return {
+        type: 'Int32TypeAnnotation',
+      };
+    case 'Double':
+      return {
+        type: 'DoubleTypeAnnotation',
+      };
+    case 'Float':
+      return {
+        type: 'FloatTypeAnnotation',
+      };
+    case 'BooleanTypeAnnotation':
+      return {
+        type: 'BooleanTypeAnnotation',
+      };
+    case 'StringTypeAnnotation':
+      return {
+        type: 'StringTypeAnnotation',
+      };
+    case 'UnionTypeAnnotation':
+      typeAnnotation.types.reduce((lastType, currType) => {
+        if (lastType && currType.type !== lastType.type) {
+          throw new Error(`Mixed types are not supported (see "${name}")`);
+        }
+        return currType;
+      });
+
+      if (defaultValue === null) {
+        throw new Error(`A default enum value is required for "${name}"`);
+      }
+
+      const unionType = typeAnnotation.types[0].type;
+      if (unionType === 'StringLiteralTypeAnnotation') {
+        return {
+          type: 'StringEnumTypeAnnotation',
+          default: (defaultValue: string),
+          options: typeAnnotation.types.map(option => option.value),
+        };
+      } else if (unionType === 'NumberLiteralTypeAnnotation') {
+        throw new Error(
+          `Arrays of int enums are not supported (see: "${name}")`,
+        );
+      } else {
+        throw new Error(
+          `Unsupported union type for "${name}", recieved "${unionType}"`,
+        );
+      }
+    default:
+      (type: empty);
+      throw new Error(`Unknown prop type for "${name}": ${type}`);
+  }
+}
+
+function getTypeAnnotation(
+  name,
+  annotation,
+  defaultValue,
+  withNullDefault,
+  types,
+) {
+  const typeAnnotation = getValueFromTypes(annotation, types);
+
+  if (
+    typeAnnotation.type === 'GenericTypeAnnotation' &&
+    typeAnnotation.id.name === '$ReadOnlyArray'
+  ) {
+    return {
+      type: 'ArrayTypeAnnotation',
+      elementType: getTypeAnnotationForArray(
+        name,
+        typeAnnotation.typeParameters.params[0],
+        defaultValue,
+        types,
+      ),
+    };
+  }
+
+  if (
+    typeAnnotation.type === 'GenericTypeAnnotation' &&
+    typeAnnotation.id.name === '$ReadOnly'
+  ) {
+    return {
+      type: 'ObjectTypeAnnotation',
+      properties: flattenProperties(
+        typeAnnotation.typeParameters.params[0].properties,
+        types,
+      )
+        .map(prop => buildPropSchema(prop, types))
+        .filter(Boolean),
+    };
+  }
+
+  const type =
+    typeAnnotation.type === 'GenericTypeAnnotation'
+      ? typeAnnotation.id.name
+      : typeAnnotation.type;
+
+  switch (type) {
+    case 'ImageSource':
+      return {
+        type: 'ReservedPropTypeAnnotation',
+        name: 'ImageSourcePrimitive',
+      };
+    case 'ColorValue':
+    case 'ProcessedColorValue':
+      return {
+        type: 'ReservedPropTypeAnnotation',
+        name: 'ColorPrimitive',
+      };
+    case 'ColorArrayValue':
+      return {
+        type: 'ArrayTypeAnnotation',
+        elementType: {
+          type: 'ReservedPropTypeAnnotation',
+          name: 'ColorPrimitive',
+        },
+      };
+    case 'PointValue':
+      return {
+        type: 'ReservedPropTypeAnnotation',
+        name: 'PointPrimitive',
+      };
+    case 'EdgeInsetsValue':
+      return {
+        type: 'ReservedPropTypeAnnotation',
+        name: 'EdgeInsetsPrimitive',
+      };
+    case 'Int32':
+      return {
+        type: 'Int32TypeAnnotation',
+        default: ((defaultValue ? defaultValue : 0): number),
+      };
+    case 'Double':
+      return {
+        type: 'DoubleTypeAnnotation',
+        default: ((defaultValue ? defaultValue : 0): number),
+      };
+    case 'Float':
+      return {
+        type: 'FloatTypeAnnotation',
+        default: withNullDefault
+          ? (defaultValue: number | null)
+          : ((defaultValue ? defaultValue : 0): number),
+      };
+    case 'BooleanTypeAnnotation':
+      return {
+        type: 'BooleanTypeAnnotation',
+        default: withNullDefault
+          ? (defaultValue: boolean | null)
+          : ((defaultValue == null ? false : defaultValue): boolean),
+      };
+    case 'StringTypeAnnotation':
+      if (typeof defaultValue !== 'undefined') {
+        return {
+          type: 'StringTypeAnnotation',
+          default: (defaultValue: string | null),
+        };
+      }
+      throw new Error(`A default string (or null) is required for "${name}"`);
+    case 'Stringish':
+      if (typeof defaultValue !== 'undefined') {
+        return {
+          type: 'StringTypeAnnotation',
+          default: (defaultValue: string | null),
+        };
+      }
+      throw new Error(`A default string (or null) is required for "${name}"`);
+    case 'UnionTypeAnnotation':
+      typeAnnotation.types.reduce((lastType, currType) => {
+        if (lastType && currType.type !== lastType.type) {
+          throw new Error(`Mixed types are not supported (see "${name}")`);
+        }
+        return currType;
+      });
+
+      if (defaultValue === null) {
+        throw new Error(`A default enum value is required for "${name}"`);
+      }
+
+      const unionType = typeAnnotation.types[0].type;
+      if (unionType === 'StringLiteralTypeAnnotation') {
+        return {
+          type: 'StringEnumTypeAnnotation',
+          default: (defaultValue: string),
+          options: typeAnnotation.types.map(option => option.value),
+        };
+      } else if (unionType === 'NumberLiteralTypeAnnotation') {
+        return {
+          type: 'Int32EnumTypeAnnotation',
+          default: (defaultValue: number),
+          options: typeAnnotation.types.map(option => option.value),
+        };
+      } else {
+        throw new Error(
+          `Unsupported union type for "${name}", received "${unionType}"`,
+        );
+      }
+    case 'NumberTypeAnnotation':
+      throw new Error(
+        `Cannot use "${type}" type annotation for "${name}": must use a specific numeric type like Int32, Double, or Float`,
+      );
+    default:
+      (type: empty);
+      throw new Error(`Unknown prop type for "${name}": "${type}"`);
+  }
+}
+
+function buildPropSchema(
+  property,
+  types: TypeDeclarationMap,
+): ?NamedShape<PropTypeAnnotation> {
+  const name = property.key.name;
+
+  const value = getValueFromTypes(property.value, types);
+  let typeAnnotation =
+    value.type === 'NullableTypeAnnotation' ? value.typeAnnotation : value;
+
+  const optional =
+    value.type === 'NullableTypeAnnotation' ||
+    property.optional ||
+    (value.type === 'GenericTypeAnnotation' &&
+      typeAnnotation.id.name === 'WithDefault');
+
+  if (
+    !property.optional &&
+    value.type === 'GenericTypeAnnotation' &&
+    typeAnnotation.id.name === 'WithDefault'
+  ) {
+    throw new Error(
+      `key ${name} must be optional if used with WithDefault<> annotation`,
+    );
+  }
+  if (
+    value.type === 'NullableTypeAnnotation' &&
+    typeAnnotation.type === 'GenericTypeAnnotation' &&
+    typeAnnotation.id.name === 'WithDefault'
+  ) {
+    throw new Error(
+      'WithDefault<> is optional and does not need to be marked as optional. Please remove the ? annotation in front of it.',
+    );
+  }
+
+  let type = typeAnnotation.type;
+  if (
+    type === 'GenericTypeAnnotation' &&
+    (typeAnnotation.id.name === 'DirectEventHandler' ||
+      typeAnnotation.id.name === 'BubblingEventHandler')
+  ) {
+    return null;
+  }
+
+  if (
+    name === 'style' &&
+    type === 'GenericTypeAnnotation' &&
+    typeAnnotation.id.name === 'ViewStyleProp'
+  ) {
+    return null;
+  }
+
+  let defaultValue = null;
+  let withNullDefault = false;
+  if (
+    type === 'GenericTypeAnnotation' &&
+    typeAnnotation.id.name === 'WithDefault'
+  ) {
+    if (typeAnnotation.typeParameters.params.length === 1) {
+      throw new Error(
+        `WithDefault requires two parameters, did you forget to provide a default value for "${name}"?`,
+      );
+    }
+
+    defaultValue = typeAnnotation.typeParameters.params[1].value;
+    const defaultValueType = typeAnnotation.typeParameters.params[1].type;
+
+    typeAnnotation = typeAnnotation.typeParameters.params[0];
+    type =
+      typeAnnotation.type === 'GenericTypeAnnotation'
+        ? typeAnnotation.id.name
+        : typeAnnotation.type;
+
+    if (defaultValueType === 'NullLiteralTypeAnnotation') {
+      defaultValue = null;
+      withNullDefault = true;
+    }
+  }
+
+  return {
+    name,
+    optional,
+    typeAnnotation: getTypeAnnotation(
+      name,
+      typeAnnotation,
+      defaultValue,
+      withNullDefault,
+      types,
+    ),
+  };
+}
+
+// $FlowFixMe[unclear-type] there's no flowtype for ASTs
+type PropAST = Object;
+
+function verifyPropNotAlreadyDefined(
+  props: $ReadOnlyArray<PropAST>,
+  needleProp: PropAST,
+) {
+  const propName = needleProp.key.name;
+  const foundProp = props.some(prop => prop.key.name === propName);
+  if (foundProp) {
+    throw new Error(`A prop was already defined with the name ${propName}`);
+  }
+}
+
+function flattenProperties(
+  typeDefinition: $ReadOnlyArray<PropAST>,
+  types: TypeDeclarationMap,
+) {
+  return typeDefinition
+    .map(property => {
+      if (property.type === 'ObjectTypeProperty') {
+        return property;
+      } else if (property.type === 'ObjectTypeSpreadProperty') {
+        return flattenProperties(
+          getPropProperties(property.argument.id.name, types),
+          types,
+        );
+      }
+    })
+    .reduce((acc, item) => {
+      if (Array.isArray(item)) {
+        item.forEach(prop => {
+          verifyPropNotAlreadyDefined(acc, prop);
+        });
+        return acc.concat(item);
+      } else {
+        verifyPropNotAlreadyDefined(acc, item);
+        acc.push(item);
+        return acc;
+      }
+    }, [])
+    .filter(Boolean);
+}
+
+function getProps(
+  typeDefinition: $ReadOnlyArray<PropAST>,
+  types: TypeDeclarationMap,
+): $ReadOnlyArray<NamedShape<PropTypeAnnotation>> {
+  return flattenProperties(typeDefinition, types)
+    .map(property => buildPropSchema(property, types))
+    .filter(Boolean);
+}
+
+module.exports = {
+  getProps,
+  getPropProperties,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/schema.js b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/schema.js
new file mode 100644
index 0000000..21ce46d
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/schema.js
@@ -0,0 +1,62 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict-local
+ */
+
+'use strict';
+
+import type {
+  EventTypeShape,
+  NamedShape,
+  CommandTypeAnnotation,
+  PropTypeAnnotation,
+  ExtendsPropsShape,
+  SchemaType,
+  OptionsShape,
+} from '../../../CodegenSchema.js';
+
+export type ComponentSchemaBuilderConfig = $ReadOnly<{
+  filename: string,
+  componentName: string,
+  extendsProps: $ReadOnlyArray<ExtendsPropsShape>,
+  events: $ReadOnlyArray<EventTypeShape>,
+  props: $ReadOnlyArray<NamedShape<PropTypeAnnotation>>,
+  commands: $ReadOnlyArray<NamedShape<CommandTypeAnnotation>>,
+  options?: ?OptionsShape,
+}>;
+
+function wrapComponentSchema({
+  filename,
+  componentName,
+  extendsProps,
+  events,
+  props,
+  options,
+  commands,
+}: ComponentSchemaBuilderConfig): SchemaType {
+  return {
+    modules: {
+      [filename]: {
+        type: 'Component',
+        components: {
+          [componentName]: {
+            ...(options || {}),
+            extendsProps,
+            events,
+            props,
+            commands,
+          },
+        },
+      },
+    },
+  };
+}
+
+module.exports = {
+  wrapComponentSchema,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/errors.js b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/errors.js
new file mode 100644
index 0000000..b480f32
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/errors.js
@@ -0,0 +1,36 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+class ParserError extends Error {
+  nodes: $ReadOnlyArray<$FlowFixMe>;
+  constructor(
+    hasteModuleName: string,
+    astNodeOrNodes: $FlowFixMe,
+    message: string,
+  ) {
+    super(`Module ${hasteModuleName}: ${message}`);
+
+    this.nodes = Array.isArray(astNodeOrNodes)
+      ? astNodeOrNodes
+      : [astNodeOrNodes];
+
+    // assign the error class name in your custom error (as a shortcut)
+    this.name = this.constructor.name;
+
+    // capturing the stack trace keeps the reference to your error class
+    Error.captureStackTrace(this, this.constructor);
+  }
+}
+
+module.exports = {
+  ParserError,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/index.js b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/index.js
new file mode 100644
index 0000000..b7550b0
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/index.js
@@ -0,0 +1,142 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {SchemaType} from '../../CodegenSchema.js';
+// $FlowFixMe[untyped-import] there's no flowtype flow-parser
+const flowParser = require('flow-parser');
+const fs = require('fs');
+const path = require('path');
+const {buildComponentSchema} = require('./components');
+const {wrapComponentSchema} = require('./components/schema');
+const {buildModuleSchema} = require('./modules');
+const {wrapModuleSchema} = require('./modules/schema');
+const {
+  createParserErrorCapturer,
+  visit,
+  isModuleRegistryCall,
+} = require('./utils');
+const invariant = require('invariant');
+
+function getConfigType(
+  // TODO(T71778680): Flow-type this node.
+  ast: $FlowFixMe,
+): 'module' | 'component' | 'none' {
+  let isComponent = false;
+  let isModule = false;
+
+  visit(ast, {
+    CallExpression(node) {
+      if (
+        node.callee.type === 'Identifier' &&
+        node.callee.name === 'codegenNativeComponent'
+      ) {
+        isComponent = true;
+      }
+
+      if (isModuleRegistryCall(node)) {
+        isModule = true;
+      }
+    },
+    InterfaceExtends(node) {
+      if (node.id.name === 'TurboModule') {
+        isModule = true;
+      }
+    },
+  });
+
+  if (isModule && isComponent) {
+    throw new Error(
+      'Found type extending "TurboModule" and exported "codegenNativeComponent" declaration in one file. Split them into separated files.',
+    );
+  }
+
+  if (isModule) {
+    return 'module';
+  } else if (isComponent) {
+    return 'component';
+  } else {
+    return 'none';
+  }
+}
+
+function buildSchema(contents: string, filename: ?string): SchemaType {
+  // Early return for non-Spec JavaScript files
+  if (
+    !contents.includes('codegenNativeComponent') &&
+    !contents.includes('TurboModule')
+  ) {
+    return {modules: {}};
+  }
+
+  const ast = flowParser.parse(contents);
+  const configType = getConfigType(ast);
+
+  switch (configType) {
+    case 'component': {
+      return wrapComponentSchema(buildComponentSchema(ast));
+    }
+    case 'module': {
+      if (filename === undefined || filename === null) {
+        throw new Error('Filepath expected while parasing a module');
+      }
+      const hasteModuleName = path.basename(filename).replace(/\.js$/, '');
+
+      const [parsingErrors, tryParse] = createParserErrorCapturer();
+      const schema = tryParse(() =>
+        buildModuleSchema(hasteModuleName, ast, tryParse),
+      );
+
+      if (parsingErrors.length > 0) {
+        /**
+         * TODO(T77968131): We have two options:
+         *  - Throw the first error, but indicate there are more then one errors.
+         *  - Display all errors, nicely formatted.
+         *
+         * For the time being, we're just throw the first error.
+         **/
+
+        throw parsingErrors[0];
+      }
+
+      invariant(
+        schema != null,
+        'When there are no parsing errors, the schema should not be null',
+      );
+
+      return wrapModuleSchema(schema, hasteModuleName);
+    }
+    default:
+      return {modules: {}};
+  }
+}
+
+function parseFile(filename: string): SchemaType {
+  const contents = fs.readFileSync(filename, 'utf8');
+
+  return buildSchema(contents, filename);
+}
+
+function parseModuleFixture(filename: string): SchemaType {
+  const contents = fs.readFileSync(filename, 'utf8');
+
+  return buildSchema(contents, 'path/NativeSampleTurboModule.js');
+}
+
+function parseString(contents: string, filename: ?string): SchemaType {
+  return buildSchema(contents, filename);
+}
+
+module.exports = {
+  parseFile,
+  parseModuleFixture,
+  parseString,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/__test_fixtures__/failures.js b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/__test_fixtures__/failures.js
new file mode 100644
index 0000000..be76b90
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/__test_fixtures__/failures.js
@@ -0,0 +1,221 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const NATIVE_MODULES_WITH_ARRAY_WITH_NO_TYPE_FOR_CONTENT = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+
+export interface Spec extends TurboModule {
+  getString: (arg: string) => Array;
+}
+
+export default TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule');
+
+`;
+
+const NATIVE_MODULES_WITH_ARRAY_WITH_NO_TYPE_FOR_CONTENT_AS_PARAM = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+
+export interface Spec extends TurboModule {
+  getString: (arg : Array) => string;
+}
+
+export default TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule');
+
+`;
+
+const NATIVE_MODULES_WITH_READ_ONLY_OBJECT_NO_TYPE_FOR_CONTENT = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+
+export interface Spec extends TurboModule {
+  getString: (arg : $ReadOnly<>) => string;
+}
+
+export default TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule');
+
+`;
+
+const NATIVE_MODULES_WITH_NOT_ONLY_METHODS = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+
+export interface Spec extends TurboModule {
+  +getBool: (arg: boolean) => boolean;
+  +getNumber: (arg: number) => number;
+  +getString: (arg: string) => string;
+  sampleBool: boolean,
+
+}
+
+export default TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule');
+
+`;
+
+const NATIVE_MODULES_WITH_UNNAMED_PARAMS = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+
+export interface Spec extends TurboModule {
+  +getBool: (boolean) => boolean;
+
+}
+
+export default TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule');
+
+`;
+
+const NATIVE_MODULES_WITH_PROMISE_WITHOUT_TYPE = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+
+export interface Spec extends TurboModule {
+  +getBool: (arg: boolean) => Promise;
+
+}
+
+export default TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule');
+
+`;
+
+const TWO_NATIVE_MODULES_EXPORTED_WITH_DEFAULT = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+
+
+export default TurboModuleRegistry.getEnforcing<Spec1>('SampleTurboModule1');
+export default TurboModuleRegistry.getEnforcing<Spec2>('SampleTurboModule2');
+
+`;
+
+const TWO_NATIVE_EXTENDING_TURBO_MODULE = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+
+export interface Spec extends TurboModule {
+  +getSth: (a : ?number) => void
+}
+
+export interface Spec2 extends TurboModule {
+  +getSth: (a : ?number) => void
+}
+
+
+`;
+
+module.exports = {
+  NATIVE_MODULES_WITH_READ_ONLY_OBJECT_NO_TYPE_FOR_CONTENT,
+  NATIVE_MODULES_WITH_UNNAMED_PARAMS,
+  NATIVE_MODULES_WITH_PROMISE_WITHOUT_TYPE,
+  NATIVE_MODULES_WITH_ARRAY_WITH_NO_TYPE_FOR_CONTENT_AS_PARAM,
+  NATIVE_MODULES_WITH_ARRAY_WITH_NO_TYPE_FOR_CONTENT,
+  TWO_NATIVE_MODULES_EXPORTED_WITH_DEFAULT,
+  NATIVE_MODULES_WITH_NOT_ONLY_METHODS,
+  TWO_NATIVE_EXTENDING_TURBO_MODULE,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/__test_fixtures__/fixtures.js b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/__test_fixtures__/fixtures.js
new file mode 100644
index 0000000..e05e185
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/__test_fixtures__/fixtures.js
@@ -0,0 +1,594 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const EMPTY_NATIVE_MODULE = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+
+export interface Spec extends TurboModule {
+  // no methods
+}
+
+export default TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule');
+
+`;
+
+const NATIVE_MODULE_WITH_COMPLEX_OBJECTS = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+
+export type String = string;
+
+export interface Spec extends TurboModule {
+  // Exported methods.
+  +getObject: (arg: {|const1: {|const1: boolean|}|}) => {|
+    const1: {|const1: boolean|},
+  |};
+  +getReadOnlyObject: (arg: $ReadOnly<{|const1: $ReadOnly<{|const1: boolean|}>|}>) => $ReadOnly<{|
+    const1: {|const1: boolean|},
+  |}>;
+  +getObject2: (arg: { a: String }) => Object;
+  +getObjectInArray: (arg: {const1: {|const1: boolean|}}) => Array<{|
+    const1: {const1: boolean},
+  |}>;
+}
+export default TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule');
+
+`;
+
+const NATIVE_MODULE_WITH_COMPLEX_OBJECTS_WITH_NULLABLE_KEY = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+
+export interface Spec extends TurboModule {
+  +getConstants: () => {|
+    isTesting: boolean,
+    reactNativeVersion: {|
+      major: number,
+      minor: number,
+      patch?: number,
+      prerelease: ?number,
+    |},
+    forceTouchAvailable: boolean,
+    osVersion: string,
+    systemName: string,
+    interfaceIdiom: string,
+  |};
+}
+
+export default TurboModuleRegistry.getEnforcing<Spec>('PlatformConstants');
+
+`;
+
+const NATIVE_MODULE_WITH_BASIC_PARAM_TYPES = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+
+export interface Spec extends TurboModule {
+  +passBool?: (arg: boolean) => void;
+  +passNumber: (arg: number) => void;
+  +passString: (arg: string) => void;
+  +passStringish: (arg: Stringish) => void;
+}
+
+export default TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule');
+
+`;
+
+const NATIVE_MODULE_WITH_ALIASES = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+
+type NumNum = number;
+export type Num = (arg: NumNum) => void;
+type Num2 = Num;
+export type Void = void;
+export type A = number;
+export type B = number;
+export type ObjectAlias = {|
+  x: number,
+  y: number,
+  label: string,
+  truthy: boolean,
+|}
+
+export interface Spec extends TurboModule {
+  // Exported methods.
+  +getNumber: Num2;
+  +getVoid: () => Void;
+  +getArray: (a: Array<A>) => {| a: B |};
+  +getStringFromAlias: (a: ObjectAlias) => string;
+}
+
+export default TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule');
+
+`;
+
+const NATIVE_MODULE_WITH_NESTED_ALIASES = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+
+type Bar = {|
+  z: number
+|};
+
+type Foo = {|
+  bar1: Bar,
+  bar2: Bar,
+|};
+
+export interface Spec extends TurboModule {
+  // Exported methods.
+  foo1: (x: Foo) => Foo;
+  foo2: (x: Foo) => void;
+}
+
+export default TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule');
+
+`;
+
+const NATIVE_MODULE_WITH_FLOAT_AND_INT32 = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+import type {Int32, Float} from 'react-native/Libraries/Types/CodegenTypes';
+
+export interface Spec extends TurboModule {
+  +getInt: (arg: Int32) => Int32;
+  +getFloat: (arg: Float) => Float;
+}
+
+export default TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule');
+`;
+
+const NATIVE_MODULE_WITH_SIMPLE_OBJECT = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+
+export interface Spec extends TurboModule {
+  +getObject: (o: Object) => Object,
+}
+
+export default TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule');
+
+`;
+
+const NATIVE_MODULE_WITH_UNSAFE_OBJECT = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+import type {UnsafeObject} from 'react-native/Libraries/Types/CodegenTypes';
+
+export interface Spec extends TurboModule {
+  +getUnsafeObject: (o: UnsafeObject) => UnsafeObject,
+}
+
+export default TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule');
+
+`;
+
+const NATIVE_MODULE_WITH_ROOT_TAG = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {RootTag, TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+
+export interface Spec extends TurboModule {
+  +getRootTag: (rootTag: RootTag) => RootTag,
+}
+
+export default TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule');
+
+`;
+
+const NATIVE_MODULE_WITH_NULLABLE_PARAM = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+
+export interface Spec extends TurboModule {
+  // Exported methods.
+  +voidFunc: (arg: ?string) => void;
+}
+
+export default TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule');
+
+`;
+
+const NATIVE_MODULE_WITH_BASIC_ARRAY = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+
+export interface Spec extends TurboModule {
+  +getArray: (arg: Array<string>) => Array<string>;
+  +getArray: (arg: $ReadOnlyArray<string>) => $ReadOnlyArray<string>;
+}
+
+export default TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule');
+
+`;
+
+const NATIVE_MODULE_WITH_OBJECT_WITH_OBJECT_DEFINED_IN_FILE_AS_PROPERTY = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+
+type DisplayMetricsAndroid = {|
+ width: number,
+|};
+
+export interface Spec extends TurboModule {
+  +getConstants: () => {|
+    +Dimensions: {
+      windowPhysicalPixels: DisplayMetricsAndroid,
+    },
+  |};
+  +getConstants2: () => $ReadOnly<{|
+    +Dimensions: {
+      windowPhysicalPixels: DisplayMetricsAndroid,
+    },
+  |}>;
+}
+
+export default TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule');
+
+`;
+
+const NATIVE_MODULE_WITH_ARRAY_WITH_UNION_AND_TOUPLE = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+
+export interface Spec extends TurboModule {
+  +getArray: (arg: Array<[string, string]>) => Array<string | number | boolean>;
+}
+
+export default TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule');
+
+`;
+
+const NATIVE_MODULE_WITH_ARRAY_WITH_ALIAS = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+
+export type SomeString = string;
+
+export interface Spec extends TurboModule {
+  +getArray: (arg: Array<SomeString>) => Array<string>;
+}
+
+export default TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule');
+
+`;
+
+const NATIVE_MODULE_WITH_COMPLEX_ARRAY = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+
+export interface Spec extends TurboModule {
+  +getArray: (arg: Array<Array<Array<Array<Array<string>>>>>) => Array<Array<Array<string>>>;
+}
+
+export default TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule');
+
+`;
+
+const NATIVE_MODULE_WITH_PROMISE = `/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+
+export type String = string;
+export type SomeObj = {| a: string |};
+
+export interface Spec extends TurboModule {
+  +getValueWithPromise: () => Promise<string>;
+  +getValueWithPromiseDefinedSomewhereElse: () => Promise<String>;
+  +getValueWithPromiseObjDefinedSomewhereElse: () => Promise<SomeObj>;
+}
+
+export default TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule');
+
+`;
+
+const NATIVE_MODULE_WITH_CALLBACK = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+
+export interface Spec extends TurboModule {
+  // Exported methods.
+  +getValueWithCallback: (
+    callback: (value: string, arr: Array<Array<string>>) => void,
+  ) => void;
+}
+
+export default TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModule');
+
+`;
+
+const ANDROID_ONLY_NATIVE_MODULE = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+
+export interface Spec extends TurboModule {
+  // no methods
+}
+
+export default TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModuleAndroid');
+
+`;
+
+const IOS_ONLY_NATIVE_MODULE = `
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {TurboModule} from '../RCTExport';
+import * as TurboModuleRegistry from '../TurboModuleRegistry';
+
+export interface Spec extends TurboModule {
+  // no methods
+}
+
+export default TurboModuleRegistry.getEnforcing<Spec>('SampleTurboModuleIOS');
+
+`;
+
+module.exports = {
+  NATIVE_MODULE_WITH_OBJECT_WITH_OBJECT_DEFINED_IN_FILE_AS_PROPERTY,
+  NATIVE_MODULE_WITH_ARRAY_WITH_UNION_AND_TOUPLE,
+  NATIVE_MODULE_WITH_FLOAT_AND_INT32,
+  NATIVE_MODULE_WITH_ALIASES,
+  NATIVE_MODULE_WITH_NESTED_ALIASES,
+  NATIVE_MODULE_WITH_PROMISE,
+  NATIVE_MODULE_WITH_COMPLEX_OBJECTS,
+  NATIVE_MODULE_WITH_COMPLEX_OBJECTS_WITH_NULLABLE_KEY,
+  NATIVE_MODULE_WITH_SIMPLE_OBJECT,
+  NATIVE_MODULE_WITH_UNSAFE_OBJECT,
+  NATIVE_MODULE_WITH_ROOT_TAG,
+  NATIVE_MODULE_WITH_NULLABLE_PARAM,
+  NATIVE_MODULE_WITH_BASIC_ARRAY,
+  NATIVE_MODULE_WITH_COMPLEX_ARRAY,
+  NATIVE_MODULE_WITH_ARRAY_WITH_ALIAS,
+  NATIVE_MODULE_WITH_BASIC_PARAM_TYPES,
+  NATIVE_MODULE_WITH_CALLBACK,
+  EMPTY_NATIVE_MODULE,
+  ANDROID_ONLY_NATIVE_MODULE,
+  IOS_ONLY_NATIVE_MODULE,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/__tests__/__snapshots__/module-parser-snapshot-test.js.snap b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/__tests__/__snapshots__/module-parser-snapshot-test.js.snap
new file mode 100644
index 0000000..b17885a
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/__tests__/__snapshots__/module-parser-snapshot-test.js.snap
@@ -0,0 +1,1336 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`RN Codegen Flow Parser Fails with error message NATIVE_MODULES_WITH_ARRAY_WITH_NO_TYPE_FOR_CONTENT 1`] = `"Module NativeSampleTurboModule: Generic 'Array' must have type parameters."`;
+
+exports[`RN Codegen Flow Parser Fails with error message NATIVE_MODULES_WITH_ARRAY_WITH_NO_TYPE_FOR_CONTENT_AS_PARAM 1`] = `"Module NativeSampleTurboModule: Generic 'Array' must have type parameters."`;
+
+exports[`RN Codegen Flow Parser Fails with error message NATIVE_MODULES_WITH_NOT_ONLY_METHODS 1`] = `"Module NativeSampleTurboModule: Flow interfaces extending TurboModule must only contain 'FunctionTypeAnnotation's. Property 'sampleBool' refers to a 'BooleanTypeAnnotation'."`;
+
+exports[`RN Codegen Flow Parser Fails with error message NATIVE_MODULES_WITH_PROMISE_WITHOUT_TYPE 1`] = `"Module NativeSampleTurboModule: Generic 'Promise' must have type parameters."`;
+
+exports[`RN Codegen Flow Parser Fails with error message NATIVE_MODULES_WITH_READ_ONLY_OBJECT_NO_TYPE_FOR_CONTENT 1`] = `"Module NativeSampleTurboModule: Generic '$ReadOnly' must have exactly one type parameter."`;
+
+exports[`RN Codegen Flow Parser Fails with error message NATIVE_MODULES_WITH_UNNAMED_PARAMS 1`] = `"Module NativeSampleTurboModule: All function parameters must be named."`;
+
+exports[`RN Codegen Flow Parser Fails with error message TWO_NATIVE_EXTENDING_TURBO_MODULE 1`] = `"Module NativeSampleTurboModule: Every NativeModule spec file must declare exactly one NativeModule Flow interface. This file declares 2: 'Spec', and 'Spec2'. Please remove the extraneous Flow interface declarations."`;
+
+exports[`RN Codegen Flow Parser Fails with error message TWO_NATIVE_MODULES_EXPORTED_WITH_DEFAULT 1`] = `"Module NativeSampleTurboModule: No Flow interfaces extending TurboModule were detected in this NativeModule spec."`;
+
+exports[`RN Codegen Flow Parser can generate fixture ANDROID_ONLY_NATIVE_MODULE 1`] = `
+"{
+  'modules': {
+    'NativeSampleTurboModule': {
+      'type': 'NativeModule',
+      'aliases': {},
+      'spec': {
+        'properties': []
+      },
+      'moduleNames': [
+        'SampleTurboModuleAndroid'
+      ],
+      'excludedPlatforms': [
+        'iOS'
+      ]
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture EMPTY_NATIVE_MODULE 1`] = `
+"{
+  'modules': {
+    'NativeSampleTurboModule': {
+      'type': 'NativeModule',
+      'aliases': {},
+      'spec': {
+        'properties': []
+      },
+      'moduleNames': [
+        'SampleTurboModule'
+      ]
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture IOS_ONLY_NATIVE_MODULE 1`] = `
+"{
+  'modules': {
+    'NativeSampleTurboModule': {
+      'type': 'NativeModule',
+      'aliases': {},
+      'spec': {
+        'properties': []
+      },
+      'moduleNames': [
+        'SampleTurboModuleIOS'
+      ],
+      'excludedPlatforms': [
+        'android'
+      ]
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture NATIVE_MODULE_WITH_ALIASES 1`] = `
+"{
+  'modules': {
+    'NativeSampleTurboModule': {
+      'type': 'NativeModule',
+      'aliases': {
+        'ObjectAlias': {
+          'type': 'ObjectTypeAnnotation',
+          'properties': [
+            {
+              'name': 'x',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'NumberTypeAnnotation'
+              }
+            },
+            {
+              'name': 'y',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'NumberTypeAnnotation'
+              }
+            },
+            {
+              'name': 'label',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'StringTypeAnnotation'
+              }
+            },
+            {
+              'name': 'truthy',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'BooleanTypeAnnotation'
+              }
+            }
+          ]
+        }
+      },
+      'spec': {
+        'properties': [
+          {
+            'name': 'getNumber',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'VoidTypeAnnotation'
+              },
+              'params': [
+                {
+                  'name': 'arg',
+                  'optional': false,
+                  'typeAnnotation': {
+                    'type': 'NumberTypeAnnotation'
+                  }
+                }
+              ]
+            }
+          },
+          {
+            'name': 'getVoid',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'VoidTypeAnnotation'
+              },
+              'params': []
+            }
+          },
+          {
+            'name': 'getArray',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'a',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'NumberTypeAnnotation'
+                    }
+                  }
+                ]
+              },
+              'params': [
+                {
+                  'name': 'a',
+                  'optional': false,
+                  'typeAnnotation': {
+                    'type': 'ArrayTypeAnnotation',
+                    'elementType': {
+                      'type': 'NumberTypeAnnotation'
+                    }
+                  }
+                }
+              ]
+            }
+          },
+          {
+            'name': 'getStringFromAlias',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'StringTypeAnnotation'
+              },
+              'params': [
+                {
+                  'name': 'a',
+                  'optional': false,
+                  'typeAnnotation': {
+                    'type': 'TypeAliasTypeAnnotation',
+                    'name': 'ObjectAlias'
+                  }
+                }
+              ]
+            }
+          }
+        ]
+      },
+      'moduleNames': [
+        'SampleTurboModule'
+      ]
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture NATIVE_MODULE_WITH_ARRAY_WITH_ALIAS 1`] = `
+"{
+  'modules': {
+    'NativeSampleTurboModule': {
+      'type': 'NativeModule',
+      'aliases': {},
+      'spec': {
+        'properties': [
+          {
+            'name': 'getArray',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'StringTypeAnnotation'
+                }
+              },
+              'params': [
+                {
+                  'name': 'arg',
+                  'optional': false,
+                  'typeAnnotation': {
+                    'type': 'ArrayTypeAnnotation',
+                    'elementType': {
+                      'type': 'StringTypeAnnotation'
+                    }
+                  }
+                }
+              ]
+            }
+          }
+        ]
+      },
+      'moduleNames': [
+        'SampleTurboModule'
+      ]
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture NATIVE_MODULE_WITH_ARRAY_WITH_UNION_AND_TOUPLE 1`] = `
+"{
+  'modules': {
+    'NativeSampleTurboModule': {
+      'type': 'NativeModule',
+      'aliases': {},
+      'spec': {
+        'properties': [
+          {
+            'name': 'getArray',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'ArrayTypeAnnotation'
+              },
+              'params': [
+                {
+                  'name': 'arg',
+                  'optional': false,
+                  'typeAnnotation': {
+                    'type': 'ArrayTypeAnnotation'
+                  }
+                }
+              ]
+            }
+          }
+        ]
+      },
+      'moduleNames': [
+        'SampleTurboModule'
+      ]
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture NATIVE_MODULE_WITH_BASIC_ARRAY 1`] = `
+"{
+  'modules': {
+    'NativeSampleTurboModule': {
+      'type': 'NativeModule',
+      'aliases': {},
+      'spec': {
+        'properties': [
+          {
+            'name': 'getArray',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'StringTypeAnnotation'
+                }
+              },
+              'params': [
+                {
+                  'name': 'arg',
+                  'optional': false,
+                  'typeAnnotation': {
+                    'type': 'ArrayTypeAnnotation',
+                    'elementType': {
+                      'type': 'StringTypeAnnotation'
+                    }
+                  }
+                }
+              ]
+            }
+          },
+          {
+            'name': 'getArray',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'StringTypeAnnotation'
+                }
+              },
+              'params': [
+                {
+                  'name': 'arg',
+                  'optional': false,
+                  'typeAnnotation': {
+                    'type': 'ArrayTypeAnnotation',
+                    'elementType': {
+                      'type': 'StringTypeAnnotation'
+                    }
+                  }
+                }
+              ]
+            }
+          }
+        ]
+      },
+      'moduleNames': [
+        'SampleTurboModule'
+      ]
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture NATIVE_MODULE_WITH_BASIC_PARAM_TYPES 1`] = `
+"{
+  'modules': {
+    'NativeSampleTurboModule': {
+      'type': 'NativeModule',
+      'aliases': {},
+      'spec': {
+        'properties': [
+          {
+            'name': 'passBool',
+            'optional': true,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'VoidTypeAnnotation'
+              },
+              'params': [
+                {
+                  'name': 'arg',
+                  'optional': false,
+                  'typeAnnotation': {
+                    'type': 'BooleanTypeAnnotation'
+                  }
+                }
+              ]
+            }
+          },
+          {
+            'name': 'passNumber',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'VoidTypeAnnotation'
+              },
+              'params': [
+                {
+                  'name': 'arg',
+                  'optional': false,
+                  'typeAnnotation': {
+                    'type': 'NumberTypeAnnotation'
+                  }
+                }
+              ]
+            }
+          },
+          {
+            'name': 'passString',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'VoidTypeAnnotation'
+              },
+              'params': [
+                {
+                  'name': 'arg',
+                  'optional': false,
+                  'typeAnnotation': {
+                    'type': 'StringTypeAnnotation'
+                  }
+                }
+              ]
+            }
+          },
+          {
+            'name': 'passStringish',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'VoidTypeAnnotation'
+              },
+              'params': [
+                {
+                  'name': 'arg',
+                  'optional': false,
+                  'typeAnnotation': {
+                    'type': 'StringTypeAnnotation'
+                  }
+                }
+              ]
+            }
+          }
+        ]
+      },
+      'moduleNames': [
+        'SampleTurboModule'
+      ]
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture NATIVE_MODULE_WITH_CALLBACK 1`] = `
+"{
+  'modules': {
+    'NativeSampleTurboModule': {
+      'type': 'NativeModule',
+      'aliases': {},
+      'spec': {
+        'properties': [
+          {
+            'name': 'getValueWithCallback',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'VoidTypeAnnotation'
+              },
+              'params': [
+                {
+                  'name': 'callback',
+                  'optional': false,
+                  'typeAnnotation': {
+                    'type': 'FunctionTypeAnnotation',
+                    'returnTypeAnnotation': {
+                      'type': 'VoidTypeAnnotation'
+                    },
+                    'params': [
+                      {
+                        'name': 'value',
+                        'optional': false,
+                        'typeAnnotation': {
+                          'type': 'StringTypeAnnotation'
+                        }
+                      },
+                      {
+                        'name': 'arr',
+                        'optional': false,
+                        'typeAnnotation': {
+                          'type': 'ArrayTypeAnnotation',
+                          'elementType': {
+                            'type': 'ArrayTypeAnnotation',
+                            'elementType': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        }
+                      }
+                    ]
+                  }
+                }
+              ]
+            }
+          }
+        ]
+      },
+      'moduleNames': [
+        'SampleTurboModule'
+      ]
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture NATIVE_MODULE_WITH_COMPLEX_ARRAY 1`] = `
+"{
+  'modules': {
+    'NativeSampleTurboModule': {
+      'type': 'NativeModule',
+      'aliases': {},
+      'spec': {
+        'properties': [
+          {
+            'name': 'getArray',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ArrayTypeAnnotation',
+                  'elementType': {
+                    'type': 'ArrayTypeAnnotation',
+                    'elementType': {
+                      'type': 'StringTypeAnnotation'
+                    }
+                  }
+                }
+              },
+              'params': [
+                {
+                  'name': 'arg',
+                  'optional': false,
+                  'typeAnnotation': {
+                    'type': 'ArrayTypeAnnotation',
+                    'elementType': {
+                      'type': 'ArrayTypeAnnotation',
+                      'elementType': {
+                        'type': 'ArrayTypeAnnotation',
+                        'elementType': {
+                          'type': 'ArrayTypeAnnotation',
+                          'elementType': {
+                            'type': 'ArrayTypeAnnotation',
+                            'elementType': {
+                              'type': 'StringTypeAnnotation'
+                            }
+                          }
+                        }
+                      }
+                    }
+                  }
+                }
+              ]
+            }
+          }
+        ]
+      },
+      'moduleNames': [
+        'SampleTurboModule'
+      ]
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture NATIVE_MODULE_WITH_COMPLEX_OBJECTS 1`] = `
+"{
+  'modules': {
+    'NativeSampleTurboModule': {
+      'type': 'NativeModule',
+      'aliases': {},
+      'spec': {
+        'properties': [
+          {
+            'name': 'getObject',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'const1',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'ObjectTypeAnnotation',
+                      'properties': [
+                        {
+                          'name': 'const1',
+                          'optional': false,
+                          'typeAnnotation': {
+                            'type': 'BooleanTypeAnnotation'
+                          }
+                        }
+                      ]
+                    }
+                  }
+                ]
+              },
+              'params': [
+                {
+                  'name': 'arg',
+                  'optional': false,
+                  'typeAnnotation': {
+                    'type': 'ObjectTypeAnnotation',
+                    'properties': [
+                      {
+                        'name': 'const1',
+                        'optional': false,
+                        'typeAnnotation': {
+                          'type': 'ObjectTypeAnnotation',
+                          'properties': [
+                            {
+                              'name': 'const1',
+                              'optional': false,
+                              'typeAnnotation': {
+                                'type': 'BooleanTypeAnnotation'
+                              }
+                            }
+                          ]
+                        }
+                      }
+                    ]
+                  }
+                }
+              ]
+            }
+          },
+          {
+            'name': 'getReadOnlyObject',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'const1',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'ObjectTypeAnnotation',
+                      'properties': [
+                        {
+                          'name': 'const1',
+                          'optional': false,
+                          'typeAnnotation': {
+                            'type': 'BooleanTypeAnnotation'
+                          }
+                        }
+                      ]
+                    }
+                  }
+                ]
+              },
+              'params': [
+                {
+                  'name': 'arg',
+                  'optional': false,
+                  'typeAnnotation': {
+                    'type': 'ObjectTypeAnnotation',
+                    'properties': [
+                      {
+                        'name': 'const1',
+                        'optional': false,
+                        'typeAnnotation': {
+                          'type': 'ObjectTypeAnnotation',
+                          'properties': [
+                            {
+                              'name': 'const1',
+                              'optional': false,
+                              'typeAnnotation': {
+                                'type': 'BooleanTypeAnnotation'
+                              }
+                            }
+                          ]
+                        }
+                      }
+                    ]
+                  }
+                }
+              ]
+            }
+          },
+          {
+            'name': 'getObject2',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'GenericObjectTypeAnnotation'
+              },
+              'params': [
+                {
+                  'name': 'arg',
+                  'optional': false,
+                  'typeAnnotation': {
+                    'type': 'ObjectTypeAnnotation',
+                    'properties': [
+                      {
+                        'name': 'a',
+                        'optional': false,
+                        'typeAnnotation': {
+                          'type': 'StringTypeAnnotation'
+                        }
+                      }
+                    ]
+                  }
+                }
+              ]
+            }
+          },
+          {
+            'name': 'getObjectInArray',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'ArrayTypeAnnotation',
+                'elementType': {
+                  'type': 'ObjectTypeAnnotation',
+                  'properties': [
+                    {
+                      'name': 'const1',
+                      'optional': false,
+                      'typeAnnotation': {
+                        'type': 'ObjectTypeAnnotation',
+                        'properties': [
+                          {
+                            'name': 'const1',
+                            'optional': false,
+                            'typeAnnotation': {
+                              'type': 'BooleanTypeAnnotation'
+                            }
+                          }
+                        ]
+                      }
+                    }
+                  ]
+                }
+              },
+              'params': [
+                {
+                  'name': 'arg',
+                  'optional': false,
+                  'typeAnnotation': {
+                    'type': 'ObjectTypeAnnotation',
+                    'properties': [
+                      {
+                        'name': 'const1',
+                        'optional': false,
+                        'typeAnnotation': {
+                          'type': 'ObjectTypeAnnotation',
+                          'properties': [
+                            {
+                              'name': 'const1',
+                              'optional': false,
+                              'typeAnnotation': {
+                                'type': 'BooleanTypeAnnotation'
+                              }
+                            }
+                          ]
+                        }
+                      }
+                    ]
+                  }
+                }
+              ]
+            }
+          }
+        ]
+      },
+      'moduleNames': [
+        'SampleTurboModule'
+      ]
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture NATIVE_MODULE_WITH_COMPLEX_OBJECTS_WITH_NULLABLE_KEY 1`] = `
+"{
+  'modules': {
+    'NativeSampleTurboModule': {
+      'type': 'NativeModule',
+      'aliases': {},
+      'spec': {
+        'properties': [
+          {
+            'name': 'getConstants',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'isTesting',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'BooleanTypeAnnotation'
+                    }
+                  },
+                  {
+                    'name': 'reactNativeVersion',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'ObjectTypeAnnotation',
+                      'properties': [
+                        {
+                          'name': 'major',
+                          'optional': false,
+                          'typeAnnotation': {
+                            'type': 'NumberTypeAnnotation'
+                          }
+                        },
+                        {
+                          'name': 'minor',
+                          'optional': false,
+                          'typeAnnotation': {
+                            'type': 'NumberTypeAnnotation'
+                          }
+                        },
+                        {
+                          'name': 'patch',
+                          'optional': true,
+                          'typeAnnotation': {
+                            'type': 'NumberTypeAnnotation'
+                          }
+                        },
+                        {
+                          'name': 'prerelease',
+                          'optional': false,
+                          'typeAnnotation': {
+                            'type': 'NullableTypeAnnotation',
+                            'typeAnnotation': {
+                              'type': 'NumberTypeAnnotation'
+                            }
+                          }
+                        }
+                      ]
+                    }
+                  },
+                  {
+                    'name': 'forceTouchAvailable',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'BooleanTypeAnnotation'
+                    }
+                  },
+                  {
+                    'name': 'osVersion',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'StringTypeAnnotation'
+                    }
+                  },
+                  {
+                    'name': 'systemName',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'StringTypeAnnotation'
+                    }
+                  },
+                  {
+                    'name': 'interfaceIdiom',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'StringTypeAnnotation'
+                    }
+                  }
+                ]
+              },
+              'params': []
+            }
+          }
+        ]
+      },
+      'moduleNames': [
+        'PlatformConstants'
+      ]
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture NATIVE_MODULE_WITH_FLOAT_AND_INT32 1`] = `
+"{
+  'modules': {
+    'NativeSampleTurboModule': {
+      'type': 'NativeModule',
+      'aliases': {},
+      'spec': {
+        'properties': [
+          {
+            'name': 'getInt',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'Int32TypeAnnotation'
+              },
+              'params': [
+                {
+                  'name': 'arg',
+                  'optional': false,
+                  'typeAnnotation': {
+                    'type': 'Int32TypeAnnotation'
+                  }
+                }
+              ]
+            }
+          },
+          {
+            'name': 'getFloat',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'FloatTypeAnnotation'
+              },
+              'params': [
+                {
+                  'name': 'arg',
+                  'optional': false,
+                  'typeAnnotation': {
+                    'type': 'FloatTypeAnnotation'
+                  }
+                }
+              ]
+            }
+          }
+        ]
+      },
+      'moduleNames': [
+        'SampleTurboModule'
+      ]
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture NATIVE_MODULE_WITH_NESTED_ALIASES 1`] = `
+"{
+  'modules': {
+    'NativeSampleTurboModule': {
+      'type': 'NativeModule',
+      'aliases': {
+        'Bar': {
+          'type': 'ObjectTypeAnnotation',
+          'properties': [
+            {
+              'name': 'z',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'NumberTypeAnnotation'
+              }
+            }
+          ]
+        },
+        'Foo': {
+          'type': 'ObjectTypeAnnotation',
+          'properties': [
+            {
+              'name': 'bar1',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'TypeAliasTypeAnnotation',
+                'name': 'Bar'
+              }
+            },
+            {
+              'name': 'bar2',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'TypeAliasTypeAnnotation',
+                'name': 'Bar'
+              }
+            }
+          ]
+        }
+      },
+      'spec': {
+        'properties': [
+          {
+            'name': 'foo1',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'TypeAliasTypeAnnotation',
+                'name': 'Foo'
+              },
+              'params': [
+                {
+                  'name': 'x',
+                  'optional': false,
+                  'typeAnnotation': {
+                    'type': 'TypeAliasTypeAnnotation',
+                    'name': 'Foo'
+                  }
+                }
+              ]
+            }
+          },
+          {
+            'name': 'foo2',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'VoidTypeAnnotation'
+              },
+              'params': [
+                {
+                  'name': 'x',
+                  'optional': false,
+                  'typeAnnotation': {
+                    'type': 'TypeAliasTypeAnnotation',
+                    'name': 'Foo'
+                  }
+                }
+              ]
+            }
+          }
+        ]
+      },
+      'moduleNames': [
+        'SampleTurboModule'
+      ]
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture NATIVE_MODULE_WITH_NULLABLE_PARAM 1`] = `
+"{
+  'modules': {
+    'NativeSampleTurboModule': {
+      'type': 'NativeModule',
+      'aliases': {},
+      'spec': {
+        'properties': [
+          {
+            'name': 'voidFunc',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'VoidTypeAnnotation'
+              },
+              'params': [
+                {
+                  'name': 'arg',
+                  'optional': false,
+                  'typeAnnotation': {
+                    'type': 'NullableTypeAnnotation',
+                    'typeAnnotation': {
+                      'type': 'StringTypeAnnotation'
+                    }
+                  }
+                }
+              ]
+            }
+          }
+        ]
+      },
+      'moduleNames': [
+        'SampleTurboModule'
+      ]
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture NATIVE_MODULE_WITH_OBJECT_WITH_OBJECT_DEFINED_IN_FILE_AS_PROPERTY 1`] = `
+"{
+  'modules': {
+    'NativeSampleTurboModule': {
+      'type': 'NativeModule',
+      'aliases': {
+        'DisplayMetricsAndroid': {
+          'type': 'ObjectTypeAnnotation',
+          'properties': [
+            {
+              'name': 'width',
+              'optional': false,
+              'typeAnnotation': {
+                'type': 'NumberTypeAnnotation'
+              }
+            }
+          ]
+        }
+      },
+      'spec': {
+        'properties': [
+          {
+            'name': 'getConstants',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'Dimensions',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'ObjectTypeAnnotation',
+                      'properties': [
+                        {
+                          'name': 'windowPhysicalPixels',
+                          'optional': false,
+                          'typeAnnotation': {
+                            'type': 'TypeAliasTypeAnnotation',
+                            'name': 'DisplayMetricsAndroid'
+                          }
+                        }
+                      ]
+                    }
+                  }
+                ]
+              },
+              'params': []
+            }
+          },
+          {
+            'name': 'getConstants2',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'ObjectTypeAnnotation',
+                'properties': [
+                  {
+                    'name': 'Dimensions',
+                    'optional': false,
+                    'typeAnnotation': {
+                      'type': 'ObjectTypeAnnotation',
+                      'properties': [
+                        {
+                          'name': 'windowPhysicalPixels',
+                          'optional': false,
+                          'typeAnnotation': {
+                            'type': 'TypeAliasTypeAnnotation',
+                            'name': 'DisplayMetricsAndroid'
+                          }
+                        }
+                      ]
+                    }
+                  }
+                ]
+              },
+              'params': []
+            }
+          }
+        ]
+      },
+      'moduleNames': [
+        'SampleTurboModule'
+      ]
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture NATIVE_MODULE_WITH_PROMISE 1`] = `
+"{
+  'modules': {
+    'NativeSampleTurboModule': {
+      'type': 'NativeModule',
+      'aliases': {},
+      'spec': {
+        'properties': [
+          {
+            'name': 'getValueWithPromise',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'PromiseTypeAnnotation'
+              },
+              'params': []
+            }
+          },
+          {
+            'name': 'getValueWithPromiseDefinedSomewhereElse',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'PromiseTypeAnnotation'
+              },
+              'params': []
+            }
+          },
+          {
+            'name': 'getValueWithPromiseObjDefinedSomewhereElse',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'PromiseTypeAnnotation'
+              },
+              'params': []
+            }
+          }
+        ]
+      },
+      'moduleNames': [
+        'SampleTurboModule'
+      ]
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture NATIVE_MODULE_WITH_ROOT_TAG 1`] = `
+"{
+  'modules': {
+    'NativeSampleTurboModule': {
+      'type': 'NativeModule',
+      'aliases': {},
+      'spec': {
+        'properties': [
+          {
+            'name': 'getRootTag',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'ReservedTypeAnnotation',
+                'name': 'RootTag'
+              },
+              'params': [
+                {
+                  'name': 'rootTag',
+                  'optional': false,
+                  'typeAnnotation': {
+                    'type': 'ReservedTypeAnnotation',
+                    'name': 'RootTag'
+                  }
+                }
+              ]
+            }
+          }
+        ]
+      },
+      'moduleNames': [
+        'SampleTurboModule'
+      ]
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture NATIVE_MODULE_WITH_SIMPLE_OBJECT 1`] = `
+"{
+  'modules': {
+    'NativeSampleTurboModule': {
+      'type': 'NativeModule',
+      'aliases': {},
+      'spec': {
+        'properties': [
+          {
+            'name': 'getObject',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'GenericObjectTypeAnnotation'
+              },
+              'params': [
+                {
+                  'name': 'o',
+                  'optional': false,
+                  'typeAnnotation': {
+                    'type': 'GenericObjectTypeAnnotation'
+                  }
+                }
+              ]
+            }
+          }
+        ]
+      },
+      'moduleNames': [
+        'SampleTurboModule'
+      ]
+    }
+  }
+}"
+`;
+
+exports[`RN Codegen Flow Parser can generate fixture NATIVE_MODULE_WITH_UNSAFE_OBJECT 1`] = `
+"{
+  'modules': {
+    'NativeSampleTurboModule': {
+      'type': 'NativeModule',
+      'aliases': {},
+      'spec': {
+        'properties': [
+          {
+            'name': 'getUnsafeObject',
+            'optional': false,
+            'typeAnnotation': {
+              'type': 'FunctionTypeAnnotation',
+              'returnTypeAnnotation': {
+                'type': 'GenericObjectTypeAnnotation'
+              },
+              'params': [
+                {
+                  'name': 'o',
+                  'optional': false,
+                  'typeAnnotation': {
+                    'type': 'GenericObjectTypeAnnotation'
+                  }
+                }
+              ]
+            }
+          }
+        ]
+      },
+      'moduleNames': [
+        'SampleTurboModule'
+      ]
+    }
+  }
+}"
+`;
diff --git a/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/__tests__/module-parser-e2e-test.js b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/__tests__/module-parser-e2e-test.js
new file mode 100644
index 0000000..ef3354d
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/__tests__/module-parser-e2e-test.js
@@ -0,0 +1,1271 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+import type {
+  NativeModuleReturnTypeAnnotation,
+  NativeModuleBaseTypeAnnotation,
+  NativeModuleSchema,
+  NativeModuleParamTypeAnnotation,
+} from '../../../../CodegenSchema';
+
+const {parseString} = require('../../index.js');
+const {unwrapNullable} = require('../utils');
+const {
+  UnsupportedFlowGenericParserError,
+  UnsupportedFlowTypeAnnotationParserError,
+  UnnamedFunctionParamParserError,
+  IncorrectlyParameterizedFlowGenericParserError,
+} = require('../errors');
+const invariant = require('invariant');
+
+type PrimitiveTypeAnnotationType =
+  | 'StringTypeAnnotation'
+  | 'NumberTypeAnnotation'
+  | 'Int32TypeAnnotation'
+  | 'DoubleTypeAnnotation'
+  | 'FloatTypeAnnotation'
+  | 'BooleanTypeAnnotation';
+
+const PRIMITIVES: $ReadOnlyArray<[string, PrimitiveTypeAnnotationType]> = [
+  ['string', 'StringTypeAnnotation'],
+  ['number', 'NumberTypeAnnotation'],
+  ['Int32', 'Int32TypeAnnotation'],
+  ['Double', 'DoubleTypeAnnotation'],
+  ['Float', 'FloatTypeAnnotation'],
+  ['boolean', 'BooleanTypeAnnotation'],
+];
+
+const RESERVED_FUNCTION_VALUE_TYPE_NAME: $ReadOnlyArray<'RootTag'> = [
+  'RootTag',
+];
+
+const MODULE_NAME = 'NativeFoo';
+
+const TYPE_ALIAS_DECLARATIONS = `
+type Animal = {
+  name: string,
+};
+
+type AnimalPointer = Animal;
+`;
+
+function expectAnimalTypeAliasToExist(module: NativeModuleSchema) {
+  const animalAlias = module.aliases.Animal;
+
+  expect(animalAlias).not.toBe(null);
+  invariant(animalAlias != null, '');
+  expect(animalAlias.type).toBe('ObjectTypeAnnotation');
+  expect(animalAlias.properties.length).toBe(1);
+  expect(animalAlias.properties[0].name).toBe('name');
+  expect(animalAlias.properties[0].optional).toBe(false);
+
+  const [typeAnnotation, nullable] = unwrapNullable(
+    animalAlias.properties[0].typeAnnotation,
+  );
+
+  expect(typeAnnotation.type).toBe('StringTypeAnnotation');
+  expect(nullable).toBe(false);
+}
+
+describe('Flow Module Parser', () => {
+  describe('Parameter Parsing', () => {
+    it("should fail parsing when a method has an parameter of type 'any'", () => {
+      const parser = () =>
+        parseModule(`
+          import type {TurboModule} from 'RCTExport';
+          import * as TurboModuleRegistry from 'TurboModuleRegistry';
+          export interface Spec extends TurboModule {
+            +useArg(arg: any): void;
+          }
+          export default TurboModuleRegistry.get<Spec>('Foo');
+        `);
+
+      expect(parser).toThrow(UnsupportedFlowTypeAnnotationParserError);
+    });
+
+    it('should fail parsing when a function param type is unamed', () => {
+      const parser = () =>
+        parseModule(`
+          import type {TurboModule} from 'RCTExport';
+          import * as TurboModuleRegistry from 'TurboModuleRegistry';
+          export interface Spec extends TurboModule {
+            +useArg(boolean): void;
+          }
+          export default TurboModuleRegistry.get<Spec>('Foo');
+        `);
+
+      expect(parser).toThrow(UnnamedFunctionParamParserError);
+    });
+
+    [
+      {nullable: false, optional: false},
+      {nullable: false, optional: true},
+      {nullable: true, optional: false},
+      {nullable: true, optional: true},
+    ].forEach(({nullable, optional}) => {
+      const PARAM_TYPE_DESCRIPTION =
+        nullable && optional
+          ? 'a nullable and optional'
+          : nullable
+          ? 'a nullable'
+          : optional
+          ? 'an optional'
+          : 'a required';
+
+      function annotateArg(paramName: string, paramType: string) {
+        if (nullable && optional) {
+          return `${paramName}?: ?${paramType}`;
+        }
+        if (nullable) {
+          return `${paramName}: ?${paramType}`;
+        }
+        if (optional) {
+          return `${paramName}?: ${paramType}`;
+        }
+        return `${paramName}: ${paramType}`;
+      }
+
+      function parseParamType(
+        paramName: string,
+        paramType: string,
+      ): [NativeModuleParamTypeAnnotation, NativeModuleSchema] {
+        const module = parseModule(`
+          import type {TurboModule} from 'RCTExport';
+          import * as TurboModuleRegistry from 'TurboModuleRegistry';
+
+          ${TYPE_ALIAS_DECLARATIONS}
+
+          export interface Spec extends TurboModule {
+            +useArg(${annotateArg(paramName, paramType)}): void;
+          }
+          export default TurboModuleRegistry.get<Spec>('Foo');
+        `);
+
+        expect(module.spec.properties[0]).not.toBe(null);
+        const param = unwrapNullable(
+          module.spec.properties[0].typeAnnotation,
+        )[0].params[0];
+        expect(param).not.toBe(null);
+        expect(param.name).toBe(paramName);
+        expect(param.optional).toBe(optional);
+        const [
+          paramTypeAnnotation,
+          isParamTypeAnnotationNullable,
+        ] = unwrapNullable(param.typeAnnotation);
+        expect(isParamTypeAnnotationNullable).toBe(nullable);
+
+        return [paramTypeAnnotation, module];
+      }
+
+      describe(
+        (nullable && optional
+          ? 'Nullable and Optional'
+          : nullable
+          ? 'Nullable'
+          : optional
+          ? 'Optional'
+          : 'Required') + ' Parameter',
+        () => {
+          it(`should not parse methods that have ${PARAM_TYPE_DESCRIPTION} parameter of type 'Function'`, () => {
+            expect(() => parseParamType('arg', 'Function')).toThrow(
+              UnsupportedFlowGenericParserError,
+            );
+          });
+
+          describe('Primitive types', () => {
+            PRIMITIVES.forEach(([FLOW_TYPE, PARSED_TYPE_NAME]) => {
+              it(`should parse methods that have ${PARAM_TYPE_DESCRIPTION} primitive parameter of type '${FLOW_TYPE}'`, () => {
+                const [paramTypeAnnotation] = parseParamType('arg', FLOW_TYPE);
+                expect(paramTypeAnnotation.type).toBe(PARSED_TYPE_NAME);
+              });
+            });
+          });
+
+          it(`should parse methods that have ${PARAM_TYPE_DESCRIPTION} parameter of type 'Object'`, () => {
+            const [paramTypeAnnotation] = parseParamType('arg', 'Object');
+            expect(paramTypeAnnotation.type).toBe(
+              'GenericObjectTypeAnnotation',
+            );
+          });
+
+          describe('Reserved Types', () => {
+            RESERVED_FUNCTION_VALUE_TYPE_NAME.forEach(FLOW_TYPE => {
+              it(`should parse methods that have ${PARAM_TYPE_DESCRIPTION} parameter of reserved type '${FLOW_TYPE}'`, () => {
+                const [paramTypeAnnotation] = parseParamType('arg', FLOW_TYPE);
+
+                expect(paramTypeAnnotation.type).toBe('ReservedTypeAnnotation');
+                invariant(
+                  paramTypeAnnotation.type === 'ReservedTypeAnnotation',
+                  'Param must be a Reserved type',
+                );
+
+                expect(paramTypeAnnotation.name).toBe(FLOW_TYPE);
+              });
+            });
+          });
+
+          describe('Array Types', () => {
+            it(`should not parse methods that have ${PARAM_TYPE_DESCRIPTION} parameter of type 'Array'`, () => {
+              expect(() => parseParamType('arg', 'Array')).toThrow(
+                IncorrectlyParameterizedFlowGenericParserError,
+              );
+            });
+
+            function parseParamArrayElementType(
+              paramName: string,
+              paramType: string,
+            ): [NativeModuleBaseTypeAnnotation, NativeModuleSchema] {
+              const [paramTypeAnnotation, module] = parseParamType(
+                paramName,
+                `Array<${paramType}>`,
+              );
+
+              expect(paramTypeAnnotation.type).toBe('ArrayTypeAnnotation');
+              invariant(paramTypeAnnotation.type === 'ArrayTypeAnnotation', '');
+
+              expect(paramTypeAnnotation.elementType).not.toBe(null);
+              invariant(paramTypeAnnotation.elementType != null, '');
+              const [
+                elementType,
+                isElementTypeNullable,
+              ] = unwrapNullable<NativeModuleBaseTypeAnnotation>(
+                paramTypeAnnotation.elementType,
+              );
+              expect(isElementTypeNullable).toBe(false);
+              return [elementType, module];
+            }
+
+            // TODO: Do we support nullable element types?
+
+            describe('Primitive Element Types', () => {
+              PRIMITIVES.forEach(([FLOW_TYPE, PARSED_TYPE_NAME]) => {
+                it(`should parse methods that have ${PARAM_TYPE_DESCRIPTION} parameter of type 'Array<${FLOW_TYPE}>'`, () => {
+                  const [elementType] = parseParamArrayElementType(
+                    'arg',
+                    FLOW_TYPE,
+                  );
+                  expect(elementType.type).toBe(PARSED_TYPE_NAME);
+                });
+              });
+            });
+
+            describe('Reserved Element Types', () => {
+              RESERVED_FUNCTION_VALUE_TYPE_NAME.forEach(FLOW_TYPE => {
+                it(`should parse methods that have ${PARAM_TYPE_DESCRIPTION} parameter of type 'Array<${FLOW_TYPE}>'`, () => {
+                  const [elementType] = parseParamArrayElementType(
+                    'arg',
+                    FLOW_TYPE,
+                  );
+                  expect(elementType.type).toBe('ReservedTypeAnnotation');
+                  invariant(elementType.type === 'ReservedTypeAnnotation', '');
+
+                  expect(elementType.name).toBe(FLOW_TYPE);
+                });
+              });
+            });
+
+            it(`should parse methods that have ${PARAM_TYPE_DESCRIPTION} parameter of type 'Array<Object>'`, () => {
+              const [elementType] = parseParamArrayElementType('arg', 'Object');
+              expect(elementType.type).toBe('GenericObjectTypeAnnotation');
+            });
+
+            it(`should parse methods that have ${PARAM_TYPE_DESCRIPTION} parameter type of some array of an alias`, () => {
+              const [elementType, module] = parseParamArrayElementType(
+                'arg',
+                'Animal',
+              );
+              expect(elementType.type).toBe('TypeAliasTypeAnnotation');
+              invariant(elementType.type === 'TypeAliasTypeAnnotation', '');
+
+              expect(elementType.name).toBe('Animal');
+              expectAnimalTypeAliasToExist(module);
+            });
+
+            it(`should parse methods that have ${PARAM_TYPE_DESCRIPTION} parameter of type 'Array<{foo: ?string}>'`, () => {
+              const [elementType] = parseParamArrayElementType(
+                'arg',
+                '{foo: ?string}',
+              );
+              expect(elementType).not.toBe(null);
+
+              expect(elementType.type).toBe('ObjectTypeAnnotation');
+              invariant(elementType.type === 'ObjectTypeAnnotation', '');
+
+              const {properties} = elementType;
+              invariant(properties != null, '');
+
+              expect(properties).not.toBe(null);
+              expect(properties[0]).not.toBe(null);
+              expect(properties[0].name).toBe('foo');
+              expect(properties[0].typeAnnotation).not.toBe(null);
+
+              const [typeAnnotation, isPropertyNullable] = unwrapNullable(
+                properties[0].typeAnnotation,
+              );
+
+              expect(typeAnnotation.type).toBe('StringTypeAnnotation');
+              expect(isPropertyNullable).toBe(true);
+              expect(properties[0].optional).toBe(false);
+            });
+          });
+
+          it(`should parse methods that have ${PARAM_TYPE_DESCRIPTION} parameter type of some type alias`, () => {
+            const [paramTypeAnnotation, module] = parseParamType(
+              'arg',
+              'Animal',
+            );
+            expect(paramTypeAnnotation.type).toBe('TypeAliasTypeAnnotation');
+            invariant(
+              paramTypeAnnotation.type === 'TypeAliasTypeAnnotation',
+              '',
+            );
+
+            expect(paramTypeAnnotation.name).toBe('Animal');
+            expectAnimalTypeAliasToExist(module);
+          });
+
+          it(`should parse methods that have ${PARAM_TYPE_DESCRIPTION} parameter type of some type alias that points to another type alias`, () => {
+            const [paramTypeAnnotation, module] = parseParamType(
+              'arg',
+              'AnimalPointer',
+            );
+            expect(paramTypeAnnotation.type).toBe('TypeAliasTypeAnnotation');
+            invariant(
+              paramTypeAnnotation.type === 'TypeAliasTypeAnnotation',
+              '',
+            );
+
+            expect(paramTypeAnnotation.name).toBe('Animal');
+            expectAnimalTypeAliasToExist(module);
+          });
+
+          it(`should parse methods that have ${PARAM_TYPE_DESCRIPTION} parameter type of some type alias that points to another nullable type alias`, () => {
+            const module = parseModule(`
+              import type {TurboModule} from 'RCTExport';
+              import * as TurboModuleRegistry from 'TurboModuleRegistry';
+
+              type Animal = ?{
+                name: string,
+              };
+
+              type AnimalPointer = Animal;
+
+              export interface Spec extends TurboModule {
+                +useArg(${annotateArg('arg', 'AnimalPointer')}): void;
+              }
+              export default TurboModuleRegistry.get<Spec>('Foo');
+            `);
+
+            expect(module.spec.properties[0]).not.toBe(null);
+            const param = unwrapNullable(
+              module.spec.properties[0].typeAnnotation,
+            )[0].params[0];
+            expect(param.name).toBe('arg');
+            expect(param.optional).toBe(optional);
+
+            // The TypeAliasAnnotation is called Animal, and is nullable
+            const [
+              paramTypeAnnotation,
+              isParamTypeAnnotationNullable,
+            ] = unwrapNullable(param.typeAnnotation);
+            expect(paramTypeAnnotation.type).toBe('TypeAliasTypeAnnotation');
+            invariant(
+              paramTypeAnnotation.type === 'TypeAliasTypeAnnotation',
+              '',
+            );
+            expect(paramTypeAnnotation.name).toBe('Animal');
+            expect(isParamTypeAnnotationNullable).toBe(true);
+
+            // The Animal type alias RHS is valid, and non-null
+            expectAnimalTypeAliasToExist(module);
+          });
+
+          [
+            {nullable: false, optional: false},
+            {nullable: false, optional: true},
+            {nullable: true, optional: false},
+            {nullable: true, optional: true},
+          ].forEach(({nullable: isPropNullable, optional: isPropOptional}) => {
+            const PROP_TYPE_DESCRIPTION =
+              isPropNullable && isPropOptional
+                ? 'a nullable and optional'
+                : isPropNullable
+                ? 'a nullable'
+                : isPropOptional
+                ? 'an optional'
+                : 'a required';
+
+            function annotateProp(propName: string, propType: string) {
+              if (isPropNullable && isPropOptional) {
+                return `${propName}?: ?${propType}`;
+              }
+              if (isPropNullable) {
+                return `${propName}: ?${propType}`;
+              }
+              if (isPropOptional) {
+                return `${propName}?: ${propType}`;
+              }
+              return `${propName}: ${propType}`;
+            }
+
+            function parseParamTypeObjectLiteralProp(
+              propName: string,
+              propType: string,
+            ): [
+              $ReadOnly<{
+                name: string,
+                optional: boolean,
+                typeAnnotation: NativeModuleBaseTypeAnnotation,
+              }>,
+              NativeModuleSchema,
+            ] {
+              const [paramTypeAnnotation, module] = parseParamType(
+                'arg',
+                `{${annotateProp(propName, propType)}}`,
+              );
+
+              expect(paramTypeAnnotation.type).toBe('ObjectTypeAnnotation');
+              invariant(
+                paramTypeAnnotation.type === 'ObjectTypeAnnotation',
+                '',
+              );
+
+              const {properties} = paramTypeAnnotation;
+
+              expect(properties).not.toBe(null);
+              invariant(properties != null, '');
+
+              expect(properties.length).toBe(1);
+              expect(properties[0].name).toBe(propName);
+              expect(properties[0].optional).toBe(isPropOptional);
+
+              const [
+                propertyTypeAnnotation,
+                isPropertyTypeAnnotationNullable,
+              ] = unwrapNullable(properties[0].typeAnnotation);
+
+              expect(propertyTypeAnnotation).not.toBe(null);
+              expect(isPropertyTypeAnnotationNullable).toBe(isPropNullable);
+
+              return [
+                {
+                  ...properties[0],
+                  typeAnnotation: propertyTypeAnnotation,
+                },
+                module,
+              ];
+            }
+
+            describe(
+              (isPropNullable && isPropOptional
+                ? 'Nullable and Optional'
+                : isPropNullable
+                ? 'Nullable'
+                : isPropOptional
+                ? 'Optional'
+                : 'Required') + ' Property',
+              () => {
+                describe('Props with Primitive Types', () => {
+                  PRIMITIVES.forEach(([FLOW_TYPE, PARSED_TYPE_NAME]) => {
+                    it(`should parse methods that have ${PARAM_TYPE_DESCRIPTION} parameter type of an object literal with ${PROP_TYPE_DESCRIPTION} prop of primitive type '${FLOW_TYPE}'`, () => {
+                      const [prop] = parseParamTypeObjectLiteralProp(
+                        'prop',
+                        FLOW_TYPE,
+                      );
+                      expect(prop.typeAnnotation.type).toBe(PARSED_TYPE_NAME);
+                    });
+                  });
+                });
+
+                it(`should parse methods that have ${PARAM_TYPE_DESCRIPTION} parameter type of an object literal with ${PROP_TYPE_DESCRIPTION} prop of type 'Object'`, () => {
+                  const [prop] = parseParamTypeObjectLiteralProp(
+                    'prop',
+                    'Object',
+                  );
+                  expect(prop.typeAnnotation.type).toBe(
+                    'GenericObjectTypeAnnotation',
+                  );
+                });
+
+                describe('Props with Reserved Types', () => {
+                  RESERVED_FUNCTION_VALUE_TYPE_NAME.forEach(FLOW_TYPE => {
+                    it(`should parse methods that have ${PARAM_TYPE_DESCRIPTION} parameter type of an object literal with ${PROP_TYPE_DESCRIPTION} prop of reserved type '${FLOW_TYPE}'`, () => {
+                      const [prop] = parseParamTypeObjectLiteralProp(
+                        'prop',
+                        FLOW_TYPE,
+                      );
+                      expect(prop.typeAnnotation.type).toBe(
+                        'ReservedTypeAnnotation',
+                      );
+                      invariant(
+                        prop.typeAnnotation.type === 'ReservedTypeAnnotation',
+                        '',
+                      );
+
+                      expect(prop.typeAnnotation.name).toBe(FLOW_TYPE);
+                    });
+                  });
+                });
+
+                describe('Props with Array Types', () => {
+                  it(`should not parse methods that have ${PARAM_TYPE_DESCRIPTION} parameter type of an object literal with ${PROP_TYPE_DESCRIPTION} prop of type 'Array`, () => {
+                    expect(() =>
+                      parseParamTypeObjectLiteralProp('prop', 'Array'),
+                    ).toThrow(IncorrectlyParameterizedFlowGenericParserError);
+                  });
+
+                  function parseArrayElementType(
+                    propName: string,
+                    arrayElementType: string,
+                  ): [NativeModuleBaseTypeAnnotation, NativeModuleSchema] {
+                    const [property, module] = parseParamTypeObjectLiteralProp(
+                      'propName',
+                      `Array<${arrayElementType}>`,
+                    );
+                    expect(property.typeAnnotation.type).toBe(
+                      'ArrayTypeAnnotation',
+                    );
+                    invariant(
+                      property.typeAnnotation.type === 'ArrayTypeAnnotation',
+                      '',
+                    );
+
+                    const {
+                      elementType: nullableElementType,
+                    } = property.typeAnnotation;
+                    expect(nullableElementType).not.toBe(null);
+                    invariant(nullableElementType != null, '');
+
+                    const [
+                      elementType,
+                      isElementTypeNullable,
+                    ] = unwrapNullable<NativeModuleBaseTypeAnnotation>(
+                      nullableElementType,
+                    );
+
+                    expect(isElementTypeNullable).toBe(false);
+
+                    return [elementType, module];
+                  }
+
+                  PRIMITIVES.forEach(([FLOW_TYPE, PARSED_TYPE_NAME]) => {
+                    it(`should parse methods that have ${PARAM_TYPE_DESCRIPTION} parameter type of an object literal with ${PROP_TYPE_DESCRIPTION} prop of type 'Array<${FLOW_TYPE}>'`, () => {
+                      const [elementType] = parseArrayElementType(
+                        'prop',
+                        FLOW_TYPE,
+                      );
+
+                      expect(elementType.type).toBe(PARSED_TYPE_NAME);
+                    });
+                  });
+
+                  RESERVED_FUNCTION_VALUE_TYPE_NAME.forEach(FLOW_TYPE => {
+                    it(`should parse methods that have ${PARAM_TYPE_DESCRIPTION} parameter type of an object literal with ${PROP_TYPE_DESCRIPTION} prop of type 'Array<${FLOW_TYPE}>'`, () => {
+                      const [elementType] = parseArrayElementType(
+                        'prop',
+                        FLOW_TYPE,
+                      );
+
+                      expect(elementType.type).toBe('ReservedTypeAnnotation');
+                      invariant(
+                        elementType.type === 'ReservedTypeAnnotation',
+                        '',
+                      );
+                      expect(elementType.name).toBe(FLOW_TYPE);
+                    });
+                  });
+
+                  it(`should parse methods that have ${PARAM_TYPE_DESCRIPTION} parameter type of an object literal with ${PROP_TYPE_DESCRIPTION} prop of type  'Array<Object>'`, () => {
+                    const [elementType] = parseArrayElementType(
+                      'prop',
+                      'Object',
+                    );
+                    expect(elementType.type).toBe(
+                      'GenericObjectTypeAnnotation',
+                    );
+                  });
+
+                  it(`should parse methods that have ${PARAM_TYPE_DESCRIPTION} parameter type of an object literal with ${PROP_TYPE_DESCRIPTION} prop of type of some array of an alias`, () => {
+                    const [elementType, module] = parseArrayElementType(
+                      'prop',
+                      'Animal',
+                    );
+
+                    expect(elementType.type).toBe('TypeAliasTypeAnnotation');
+                    invariant(
+                      elementType.type === 'TypeAliasTypeAnnotation',
+                      '',
+                    );
+
+                    expect(elementType.name).toBe('Animal');
+                    expectAnimalTypeAliasToExist(module);
+                  });
+
+                  it(`should parse methods that have ${PARAM_TYPE_DESCRIPTION} parameter type of an object literal with ${PROP_TYPE_DESCRIPTION} prop of 'Array<{foo: ?string}>'`, () => {
+                    const [elementType] = parseArrayElementType(
+                      'prop',
+                      '{foo: ?string}',
+                    );
+
+                    expect(elementType.type).toBe('ObjectTypeAnnotation');
+                    invariant(elementType.type === 'ObjectTypeAnnotation', '');
+
+                    const {properties} = elementType;
+                    expect(properties).not.toBe(null);
+                    invariant(properties != null, '');
+
+                    expect(properties[0]).not.toBe(null);
+                    expect(properties[0].name).toBe('foo');
+                    expect(properties[0].typeAnnotation).not.toBe(null);
+
+                    const [
+                      propertyTypeAnnotation,
+                      isPropertyTypeAnnotationNullable,
+                    ] = unwrapNullable(properties[0].typeAnnotation);
+
+                    expect(propertyTypeAnnotation.type).toBe(
+                      'StringTypeAnnotation',
+                    );
+                    expect(isPropertyTypeAnnotationNullable).toBe(true);
+                    expect(properties[0].optional).toBe(false);
+                  });
+                });
+
+                it(`should parse methods that have ${PARAM_TYPE_DESCRIPTION} parameter type of an object literal with ${PROP_TYPE_DESCRIPTION} prop of type '{foo: ?string}'`, () => {
+                  const [property] = parseParamTypeObjectLiteralProp(
+                    'prop',
+                    '{foo: ?string}',
+                  );
+
+                  expect(property.typeAnnotation.type).toBe(
+                    'ObjectTypeAnnotation',
+                  );
+                  invariant(
+                    property.typeAnnotation.type === 'ObjectTypeAnnotation',
+                    '',
+                  );
+
+                  const {properties} = property.typeAnnotation;
+                  expect(properties).not.toBe(null);
+                  invariant(properties != null, '');
+
+                  expect(properties[0]).not.toBe(null);
+                  expect(properties[0].name).toBe('foo');
+
+                  const [
+                    propertyTypeAnnotation,
+                    isPropertyTypeAnnotationNullable,
+                  ] = unwrapNullable(properties[0].typeAnnotation);
+
+                  expect(propertyTypeAnnotation.type).toBe(
+                    'StringTypeAnnotation',
+                  );
+                  expect(isPropertyTypeAnnotationNullable).toBe(true);
+                  expect(properties[0].optional).toBe(false);
+                });
+
+                it(`should parse methods that have ${PARAM_TYPE_DESCRIPTION} parameter type of an object literal with ${PROP_TYPE_DESCRIPTION} prop of some type alias`, () => {
+                  const [property, module] = parseParamTypeObjectLiteralProp(
+                    'prop',
+                    'Animal',
+                  );
+
+                  expect(property.typeAnnotation.type).toBe(
+                    'TypeAliasTypeAnnotation',
+                  );
+                  invariant(
+                    property.typeAnnotation.type === 'TypeAliasTypeAnnotation',
+                    '',
+                  );
+
+                  expect(property.typeAnnotation.name).toBe('Animal');
+                  expectAnimalTypeAliasToExist(module);
+                });
+              },
+            );
+          });
+        },
+      );
+    });
+  });
+
+  describe('Return Parsing', () => {
+    it('should parse methods that have a return type of void', () => {
+      const module = parseModule(`
+        import type {TurboModule} from 'RCTExport';
+        import * as TurboModuleRegistry from 'TurboModuleRegistry';
+        export interface Spec extends TurboModule {
+          +useArg(): void;
+        }
+        export default TurboModuleRegistry.get<Spec>('Foo');
+      `);
+
+      expect(module.spec.properties[0]).not.toBe(null);
+
+      const [
+        functionTypeAnnotation,
+        isFunctionTypeAnnotationNullable,
+      ] = unwrapNullable(module.spec.properties[0].typeAnnotation);
+      expect(isFunctionTypeAnnotationNullable).toBe(false);
+
+      const [
+        returnTypeAnnotation,
+        isReturnTypeAnnotationNullable,
+      ] = unwrapNullable(functionTypeAnnotation.returnTypeAnnotation);
+      expect(returnTypeAnnotation.type).toBe('VoidTypeAnnotation');
+      expect(isReturnTypeAnnotationNullable).toBe(false);
+    });
+
+    [true, false].forEach(IS_RETURN_TYPE_NULLABLE => {
+      const RETURN_TYPE_DESCRIPTION = IS_RETURN_TYPE_NULLABLE
+        ? 'a nullable'
+        : 'a non-nullable';
+      const annotateRet = retType =>
+        IS_RETURN_TYPE_NULLABLE ? `?${retType}` : retType;
+
+      function parseReturnType(
+        flowType: string,
+      ): [NativeModuleReturnTypeAnnotation, NativeModuleSchema] {
+        const module = parseModule(`
+          import type {TurboModule} from 'RCTExport';
+          import * as TurboModuleRegistry from 'TurboModuleRegistry';
+
+          ${TYPE_ALIAS_DECLARATIONS}
+
+          export interface Spec extends TurboModule {
+            +useArg(): ${annotateRet(flowType)};
+          }
+          export default TurboModuleRegistry.get<Spec>('Foo');
+        `);
+
+        expect(module.spec.properties[0]).not.toBe(null);
+        const [
+          functionTypeAnnotation,
+          isFunctionTypeAnnotationNullable,
+        ] = unwrapNullable(module.spec.properties[0].typeAnnotation);
+        expect(isFunctionTypeAnnotationNullable).toBe(false);
+
+        const [
+          returnTypeAnnotation,
+          isReturnTypeAnnotationNullable,
+        ] = unwrapNullable(functionTypeAnnotation.returnTypeAnnotation);
+        expect(isReturnTypeAnnotationNullable).toBe(IS_RETURN_TYPE_NULLABLE);
+
+        return [returnTypeAnnotation, module];
+      }
+
+      describe(
+        IS_RETURN_TYPE_NULLABLE ? 'Nullable Returns' : 'Non-Nullable Returns',
+        () => {
+          ['Promise<void>', 'Promise<{}>', 'Promise<*>'].forEach(
+            promiseFlowType => {
+              it(`should parse methods that have ${RETURN_TYPE_DESCRIPTION} return of type '${promiseFlowType}'`, () => {
+                const [returnTypeAnnotation] = parseReturnType(promiseFlowType);
+                expect(returnTypeAnnotation.type).toBe('PromiseTypeAnnotation');
+              });
+            },
+          );
+
+          describe('Primitive Types', () => {
+            PRIMITIVES.forEach(([FLOW_TYPE, PARSED_TYPE_NAME]) => {
+              it(`should parse methods that have ${RETURN_TYPE_DESCRIPTION} primitive return of type '${FLOW_TYPE}'`, () => {
+                const [returnTypeAnnotation] = parseReturnType(FLOW_TYPE);
+                expect(returnTypeAnnotation.type).toBe(PARSED_TYPE_NAME);
+              });
+            });
+          });
+
+          describe('Reserved Types', () => {
+            RESERVED_FUNCTION_VALUE_TYPE_NAME.forEach(FLOW_TYPE => {
+              it(`should parse methods that have ${RETURN_TYPE_DESCRIPTION} reserved return of type '${FLOW_TYPE}'`, () => {
+                const [returnTypeAnnotation] = parseReturnType(FLOW_TYPE);
+                expect(returnTypeAnnotation.type).toBe(
+                  'ReservedTypeAnnotation',
+                );
+                invariant(
+                  returnTypeAnnotation.type === 'ReservedTypeAnnotation',
+                  '',
+                );
+                expect(returnTypeAnnotation.name).toBe(FLOW_TYPE);
+              });
+            });
+          });
+
+          describe('Array Types', () => {
+            it(`should not parse methods that have ${RETURN_TYPE_DESCRIPTION} return of type 'Array'`, () => {
+              expect(() => parseReturnType('Array')).toThrow(
+                IncorrectlyParameterizedFlowGenericParserError,
+              );
+            });
+
+            function parseArrayElementReturnType(
+              flowType: string,
+            ): [NativeModuleBaseTypeAnnotation, NativeModuleSchema] {
+              const [returnTypeAnnotation, module] = parseReturnType(
+                'Array' + (flowType != null ? `<${flowType}>` : ''),
+              );
+              expect(returnTypeAnnotation.type).toBe('ArrayTypeAnnotation');
+              invariant(
+                returnTypeAnnotation.type === 'ArrayTypeAnnotation',
+                '',
+              );
+
+              const arrayTypeAnnotation = returnTypeAnnotation;
+
+              const {elementType} = arrayTypeAnnotation;
+              expect(elementType).not.toBe(null);
+              invariant(elementType != null, '');
+
+              const [
+                elementTypeAnnotation,
+                isElementTypeAnnotation,
+              ] = unwrapNullable<NativeModuleBaseTypeAnnotation>(elementType);
+              expect(isElementTypeAnnotation).toBe(false);
+
+              return [elementTypeAnnotation, module];
+            }
+
+            // TODO: Do we support nullable element types?
+
+            describe('Primitive Element Types', () => {
+              PRIMITIVES.forEach(([FLOW_TYPE, PARSED_TYPE_NAME]) => {
+                it(`should parse methods that have ${RETURN_TYPE_DESCRIPTION} return of type 'Array<${FLOW_TYPE}>'`, () => {
+                  const [elementType, module] = parseArrayElementReturnType(
+                    FLOW_TYPE,
+                  );
+                  expect(elementType.type).toBe(PARSED_TYPE_NAME);
+                });
+              });
+            });
+
+            describe('Reserved Element Types', () => {
+              RESERVED_FUNCTION_VALUE_TYPE_NAME.forEach(FLOW_TYPE => {
+                it(`should parse methods that have ${RETURN_TYPE_DESCRIPTION} return of type 'Array<${FLOW_TYPE}>'`, () => {
+                  const [elementType] = parseArrayElementReturnType(FLOW_TYPE);
+                  expect(elementType.type).toBe('ReservedTypeAnnotation');
+                  invariant(elementType.type === 'ReservedTypeAnnotation', '');
+
+                  expect(elementType.name).toBe(FLOW_TYPE);
+                });
+              });
+            });
+
+            it(`should parse methods that have ${RETURN_TYPE_DESCRIPTION} return of type 'Array<Object>'`, () => {
+              const [elementType] = parseArrayElementReturnType('Object');
+              expect(elementType.type).toBe('GenericObjectTypeAnnotation');
+            });
+
+            it(`should parse methods that have ${RETURN_TYPE_DESCRIPTION} return type of some array of an alias`, () => {
+              const [elementType, module] = parseArrayElementReturnType(
+                'Animal',
+              );
+              expect(elementType.type).toBe('TypeAliasTypeAnnotation');
+              invariant(elementType.type === 'TypeAliasTypeAnnotation', '');
+              expect(elementType.name).toBe('Animal');
+              expectAnimalTypeAliasToExist(module);
+            });
+
+            it(`should parse methods that have ${RETURN_TYPE_DESCRIPTION} return of type 'Array<{foo: ?string}>'`, () => {
+              const [elementType] = parseArrayElementReturnType(
+                '{foo: ?string}',
+              );
+              expect(elementType.type).toBe('ObjectTypeAnnotation');
+              invariant(elementType.type === 'ObjectTypeAnnotation', '');
+
+              const {properties} = elementType;
+              expect(properties).not.toBe(null);
+              invariant(properties != null, '');
+
+              expect(properties[0]).not.toBe(null);
+              expect(properties[0].name).toBe('foo');
+              expect(properties[0].typeAnnotation).not.toBe(null);
+
+              const [
+                propertyTypeAnnotation,
+                isPropertyTypeAnnotationNullable,
+              ] = unwrapNullable(properties[0].typeAnnotation);
+
+              expect(propertyTypeAnnotation.type).toBe('StringTypeAnnotation');
+              expect(isPropertyTypeAnnotationNullable).toBe(true);
+              expect(properties[0].optional).toBe(false);
+            });
+          });
+
+          it(`should parse methods that have ${RETURN_TYPE_DESCRIPTION} return type of some type alias`, () => {
+            const [returnTypeAnnotation, module] = parseReturnType('Animal');
+            expect(returnTypeAnnotation.type).toBe('TypeAliasTypeAnnotation');
+            invariant(
+              returnTypeAnnotation.type === 'TypeAliasTypeAnnotation',
+              '',
+            );
+            expect(returnTypeAnnotation.name).toBe('Animal');
+            expectAnimalTypeAliasToExist(module);
+          });
+
+          it(`should not parse methods that have ${RETURN_TYPE_DESCRIPTION} return of type 'Function'`, () => {
+            expect(() => parseReturnType('Function')).toThrow(
+              UnsupportedFlowGenericParserError,
+            );
+          });
+
+          it(`should parse methods that have ${RETURN_TYPE_DESCRIPTION} return of type 'Object'`, () => {
+            const [returnTypeAnnotation] = parseReturnType('Object');
+            expect(returnTypeAnnotation.type).toBe(
+              'GenericObjectTypeAnnotation',
+            );
+          });
+
+          describe('Object Literals Types', () => {
+            // TODO: Inexact vs exact object literals?
+
+            it(`should parse methods that have ${RETURN_TYPE_DESCRIPTION} return type of an empty object literal`, () => {
+              const [returnTypeAnnotation] = parseReturnType('{}');
+              expect(returnTypeAnnotation.type).toBe('ObjectTypeAnnotation');
+              invariant(
+                returnTypeAnnotation.type === 'ObjectTypeAnnotation',
+                '',
+              );
+
+              // Validate properties of object literal
+              expect(returnTypeAnnotation.properties).not.toBe(null);
+              expect(returnTypeAnnotation.properties?.length).toBe(0);
+            });
+
+            [
+              {nullable: false, optional: false},
+              {nullable: false, optional: true},
+              {nullable: true, optional: false},
+              {nullable: true, optional: true},
+            ].forEach(({nullable, optional}) => {
+              const PROP_TYPE_DESCRIPTION =
+                nullable && optional
+                  ? 'a nullable and optional'
+                  : nullable
+                  ? 'a nullable'
+                  : optional
+                  ? 'an optional'
+                  : 'a required';
+
+              function annotateProp(propName, propType) {
+                if (nullable && optional) {
+                  return `${propName}?: ?${propType}`;
+                }
+                if (nullable) {
+                  return `${propName}: ?${propType}`;
+                }
+                if (optional) {
+                  return `${propName}?: ${propType}`;
+                }
+                return `${propName}: ${propType}`;
+              }
+
+              function parseObjectLiteralReturnTypeProp(
+                propName: string,
+                propType: string,
+              ): [
+                $ReadOnly<{
+                  name: string,
+                  optional: boolean,
+                  typeAnnotation: NativeModuleBaseTypeAnnotation,
+                }>,
+                NativeModuleSchema,
+              ] {
+                const [returnTypeAnnotation, module] = parseReturnType(
+                  `{${annotateProp(propName, propType)}}`,
+                );
+                expect(returnTypeAnnotation.type).toBe('ObjectTypeAnnotation');
+                invariant(
+                  returnTypeAnnotation.type === 'ObjectTypeAnnotation',
+                  '',
+                );
+
+                const properties = returnTypeAnnotation.properties;
+                expect(properties).not.toBe(null);
+                invariant(properties != null, '');
+
+                expect(properties.length).toBe(1);
+
+                // Validate property
+                const property = properties[0];
+                expect(property.name).toBe(propName);
+                expect(property.optional).toBe(optional);
+
+                const [
+                  propertyTypeAnnotation,
+                  isPropertyTypeAnnotationNullable,
+                ] = unwrapNullable(property.typeAnnotation);
+
+                expect(propertyTypeAnnotation).not.toBe(null);
+                expect(isPropertyTypeAnnotationNullable).toBe(nullable);
+                return [
+                  {
+                    ...property,
+                    typeAnnotation: propertyTypeAnnotation,
+                  },
+                  module,
+                ];
+              }
+
+              describe(
+                (nullable && optional
+                  ? 'Nullable and Optional'
+                  : nullable
+                  ? 'Nullable'
+                  : optional
+                  ? 'Optional'
+                  : 'Required') + ' Property',
+                () => {
+                  /**
+                   * TODO: Fill out props in promise
+                   */
+
+                  describe('Props with Primitive Types', () => {
+                    PRIMITIVES.forEach(([FLOW_TYPE, PARSED_TYPE_NAME]) => {
+                      it(`should parse methods that have ${RETURN_TYPE_DESCRIPTION} return type of an object literal with ${PROP_TYPE_DESCRIPTION} prop of primitive type '${FLOW_TYPE}'`, () => {
+                        const [property] = parseObjectLiteralReturnTypeProp(
+                          'prop',
+                          FLOW_TYPE,
+                        );
+                        expect(property.typeAnnotation.type).toBe(
+                          PARSED_TYPE_NAME,
+                        );
+                      });
+                    });
+                  });
+
+                  it(`should parse methods that have ${RETURN_TYPE_DESCRIPTION} return type of an object literal with ${PROP_TYPE_DESCRIPTION} prop of type 'Object'`, () => {
+                    const [property] = parseObjectLiteralReturnTypeProp(
+                      'prop',
+                      'Object',
+                    );
+
+                    expect(property.typeAnnotation.type).toBe(
+                      'GenericObjectTypeAnnotation',
+                    );
+                  });
+
+                  describe('Props with Reserved Types', () => {
+                    RESERVED_FUNCTION_VALUE_TYPE_NAME.forEach(FLOW_TYPE => {
+                      it(`should parse methods that have ${RETURN_TYPE_DESCRIPTION} return type of an object literal with ${PROP_TYPE_DESCRIPTION} prop of reserved type '${FLOW_TYPE}'`, () => {
+                        const [property] = parseObjectLiteralReturnTypeProp(
+                          'prop',
+                          FLOW_TYPE,
+                        );
+
+                        expect(property.typeAnnotation.type).toBe(
+                          'ReservedTypeAnnotation',
+                        );
+                        invariant(
+                          property.typeAnnotation.type ===
+                            'ReservedTypeAnnotation',
+                          '',
+                        );
+
+                        expect(property.typeAnnotation.name).toBe(FLOW_TYPE);
+                      });
+                    });
+                  });
+
+                  describe('Props with Array Types', () => {
+                    it(`should not parse methods that have ${RETURN_TYPE_DESCRIPTION} return type of an object literal with ${PROP_TYPE_DESCRIPTION} prop of type 'Array`, () => {
+                      expect(() =>
+                        parseObjectLiteralReturnTypeProp('prop', 'Array'),
+                      ).toThrow(IncorrectlyParameterizedFlowGenericParserError);
+                    });
+
+                    function parseArrayElementType(
+                      propName: string,
+                      arrayElementType: string,
+                    ): [NativeModuleBaseTypeAnnotation, NativeModuleSchema] {
+                      const [
+                        property,
+                        module,
+                      ] = parseObjectLiteralReturnTypeProp(
+                        propName,
+                        `Array<${arrayElementType}>`,
+                      );
+                      expect(property.name).toBe(propName);
+                      expect(property.typeAnnotation.type).toBe(
+                        'ArrayTypeAnnotation',
+                      );
+                      invariant(
+                        property.typeAnnotation.type === 'ArrayTypeAnnotation',
+                        '',
+                      );
+
+                      const {
+                        elementType: nullableElementType,
+                      } = property.typeAnnotation;
+                      expect(nullableElementType).not.toBe(null);
+                      invariant(nullableElementType != null, '');
+
+                      const [
+                        elementType,
+                        isElementTypeNullable,
+                      ] = unwrapNullable<NativeModuleBaseTypeAnnotation>(
+                        nullableElementType,
+                      );
+                      expect(isElementTypeNullable).toBe(false);
+
+                      return [elementType, module];
+                    }
+
+                    PRIMITIVES.forEach(([FLOW_TYPE, PARSED_TYPE_NAME]) => {
+                      it(`should parse methods that have ${RETURN_TYPE_DESCRIPTION} return type of an object literal with ${PROP_TYPE_DESCRIPTION} prop of type 'Array<${FLOW_TYPE}>'`, () => {
+                        const [elementType] = parseArrayElementType(
+                          'prop',
+                          FLOW_TYPE,
+                        );
+                        expect(elementType.type).toBe(PARSED_TYPE_NAME);
+                      });
+                    });
+
+                    RESERVED_FUNCTION_VALUE_TYPE_NAME.forEach(FLOW_TYPE => {
+                      it(`should parse methods that have ${RETURN_TYPE_DESCRIPTION} return type of an object literal with ${PROP_TYPE_DESCRIPTION} prop of type 'Array<${FLOW_TYPE}>'`, () => {
+                        const [elementType] = parseArrayElementType(
+                          'prop',
+                          FLOW_TYPE,
+                        );
+                        expect(elementType.type).toBe('ReservedTypeAnnotation');
+                        invariant(
+                          elementType.type === 'ReservedTypeAnnotation',
+                          '',
+                        );
+
+                        expect(elementType.name).toBe(FLOW_TYPE);
+                      });
+                    });
+
+                    it(`should parse methods that have ${RETURN_TYPE_DESCRIPTION} return type of an object literal with ${PROP_TYPE_DESCRIPTION} prop of type  'Array<Object>'`, () => {
+                      const [elementType] = parseArrayElementType(
+                        'prop',
+                        'Object',
+                      );
+                      expect(elementType).not.toBe(null);
+                      expect(elementType.type).toBe(
+                        'GenericObjectTypeAnnotation',
+                      );
+                    });
+
+                    it(`should parse methods that have ${RETURN_TYPE_DESCRIPTION} return type of an object literal with ${PROP_TYPE_DESCRIPTION} prop of type of some array of an aliase`, () => {
+                      const [elementType, module] = parseArrayElementType(
+                        'prop',
+                        'Animal',
+                      );
+                      expect(elementType.type).toBe('TypeAliasTypeAnnotation');
+                      invariant(
+                        elementType.type === 'TypeAliasTypeAnnotation',
+                        '',
+                      );
+                      expect(elementType.name).toBe('Animal');
+                      expectAnimalTypeAliasToExist(module);
+                    });
+
+                    it(`should parse methods that have ${RETURN_TYPE_DESCRIPTION} return type of an object literal with ${PROP_TYPE_DESCRIPTION} prop of type  'Array<{foo: ?string}>'`, () => {
+                      const [elementType] = parseArrayElementType(
+                        'prop',
+                        '{foo: ?string}',
+                      );
+                      expect(elementType.type).toBe('ObjectTypeAnnotation');
+                      invariant(
+                        elementType.type === 'ObjectTypeAnnotation',
+                        '',
+                      );
+
+                      const {properties} = elementType;
+                      invariant(properties != null, '');
+                      expect(properties).not.toBe(null);
+                      expect(properties[0]).not.toBe(null);
+                      expect(properties[0].name).toBe('foo');
+                      expect(properties[0].optional).toBe(false);
+
+                      const [
+                        propertyTypeAnnotation,
+                        isPropertyTypeAnnotationNullable,
+                      ] = unwrapNullable(properties[0].typeAnnotation);
+
+                      expect(propertyTypeAnnotation.type).toBe(
+                        'StringTypeAnnotation',
+                      );
+                      expect(isPropertyTypeAnnotationNullable).toBe(true);
+                    });
+                  });
+
+                  it(`should parse methods that have ${RETURN_TYPE_DESCRIPTION} return type of an object literal with ${PROP_TYPE_DESCRIPTION} prop of '{foo: ?string}'`, () => {
+                    const [property] = parseObjectLiteralReturnTypeProp(
+                      'prop',
+                      '{foo: ?string}',
+                    );
+
+                    expect(property.typeAnnotation.type).toBe(
+                      'ObjectTypeAnnotation',
+                    );
+                    invariant(
+                      property.typeAnnotation.type === 'ObjectTypeAnnotation',
+                      '',
+                    );
+
+                    const {properties} = property.typeAnnotation;
+
+                    expect(properties).not.toBe(null);
+                    invariant(properties != null, '');
+
+                    expect(properties[0]).not.toBe(null);
+                    expect(properties[0].name).toBe('foo');
+                    expect(properties[0].optional).toBe(false);
+
+                    const [
+                      propertyTypeAnnotation,
+                      isPropertyTypeAnnotationNullable,
+                    ] = unwrapNullable(properties[0].typeAnnotation);
+
+                    expect(propertyTypeAnnotation.type).toBe(
+                      'StringTypeAnnotation',
+                    );
+                    expect(isPropertyTypeAnnotationNullable).toBe(true);
+                  });
+
+                  it(`should parse methods that have ${RETURN_TYPE_DESCRIPTION} return type of an object literal with ${PROP_TYPE_DESCRIPTION} prop of some type alias`, () => {
+                    const [property, module] = parseObjectLiteralReturnTypeProp(
+                      'prop',
+                      'Animal',
+                    );
+
+                    expect(property.typeAnnotation.type).toBe(
+                      'TypeAliasTypeAnnotation',
+                    );
+                    invariant(
+                      property.typeAnnotation.type ===
+                        'TypeAliasTypeAnnotation',
+                      '',
+                    );
+
+                    expect(property.typeAnnotation.name).toBe('Animal');
+                    expectAnimalTypeAliasToExist(module);
+                  });
+                },
+              );
+            });
+          });
+        },
+      );
+    });
+  });
+});
+
+function parseModule(source) {
+  const schema = parseString(source, `${MODULE_NAME}.js`);
+  const module = schema.modules.NativeFoo;
+  invariant(
+    module.type === 'NativeModule',
+    "'nativeModules' in Spec NativeFoo shouldn't be null",
+  );
+  return module;
+}
diff --git a/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/__tests__/module-parser-snapshot-test.js b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/__tests__/module-parser-snapshot-test.js
new file mode 100644
index 0000000..cd32e10
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/__tests__/module-parser-snapshot-test.js
@@ -0,0 +1,45 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @emails oncall+react_native
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const FlowParser = require('../../index.js');
+const fixtures = require('../__test_fixtures__/fixtures.js');
+const failureFixtures = require('../__test_fixtures__/failures.js');
+jest.mock('fs', () => ({
+  readFileSync: filename => fixtures[filename] || failureFixtures[filename],
+}));
+
+describe('RN Codegen Flow Parser', () => {
+  Object.keys(fixtures)
+    .sort()
+    .forEach(fixtureName => {
+      it(`can generate fixture ${fixtureName}`, () => {
+        const schema = FlowParser.parseModuleFixture(fixtureName);
+        const serializedSchema = JSON.stringify(schema, null, 2).replace(
+          /"/g,
+          "'",
+        );
+
+        expect(serializedSchema).toMatchSnapshot();
+      });
+    });
+
+  Object.keys(failureFixtures)
+    .sort()
+    .forEach(fixtureName => {
+      it(`Fails with error message ${fixtureName}`, () => {
+        expect(() => {
+          FlowParser.parseModuleFixture(fixtureName);
+        }).toThrowErrorMatchingSnapshot();
+      });
+    });
+});
diff --git a/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/errors.js b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/errors.js
new file mode 100644
index 0000000..370262c
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/errors.js
@@ -0,0 +1,335 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const invariant = require('invariant');
+const {ParserError} = require('../errors');
+
+class MisnamedModuleFlowInterfaceParserError extends ParserError {
+  constructor(hasteModuleName: string, id: $FlowFixMe) {
+    super(
+      hasteModuleName,
+      id,
+      `All Flow interfaces extending TurboModule must be called 'Spec'. Please rename Flow interface '${id.name}' to 'Spec'.`,
+    );
+  }
+}
+
+class ModuleFlowInterfaceNotFoundParserError extends ParserError {
+  constructor(hasteModuleName: string, ast: $FlowFixMe) {
+    super(
+      hasteModuleName,
+      ast,
+      'No Flow interfaces extending TurboModule were detected in this NativeModule spec.',
+    );
+  }
+}
+
+class MoreThanOneModuleFlowInterfaceParserError extends ParserError {
+  constructor(
+    hasteModuleName: string,
+    flowModuleInterfaces: $ReadOnlyArray<$FlowFixMe>,
+    names: $ReadOnlyArray<string>,
+  ) {
+    const finalName = names[names.length - 1];
+    const allButLastName = names.slice(0, -1);
+    const quote = x => `'${x}'`;
+
+    const nameStr =
+      allButLastName.map(quote).join(', ') + ', and ' + quote(finalName);
+
+    super(
+      hasteModuleName,
+      flowModuleInterfaces,
+      `Every NativeModule spec file must declare exactly one NativeModule Flow interface. This file declares ${names.length}: ${nameStr}. Please remove the extraneous Flow interface declarations.`,
+    );
+  }
+}
+
+class UnsupportedModulePropertyParserError extends ParserError {
+  constructor(
+    hasteModuleName: string,
+    propertyValue: $FlowFixMe,
+    propertyName: string,
+    invalidPropertyValueType: string,
+  ) {
+    super(
+      hasteModuleName,
+      propertyValue,
+      `Flow interfaces extending TurboModule must only contain 'FunctionTypeAnnotation's. Property '${propertyName}' refers to a '${invalidPropertyValueType}'.`,
+    );
+  }
+}
+
+class UnsupportedFlowTypeAnnotationParserError extends ParserError {
+  +typeAnnotationType: string;
+  constructor(hasteModuleName: string, typeAnnotation: $FlowFixMe) {
+    super(
+      hasteModuleName,
+      typeAnnotation,
+      `Flow type annotation '${typeAnnotation.type}' is unsupported in NativeModule specs.`,
+    );
+
+    this.typeAnnotationType = typeAnnotation.type;
+  }
+}
+
+class UnsupportedFlowGenericParserError extends ParserError {
+  +genericName: string;
+  constructor(hasteModuleName: string, genericTypeAnnotation: $FlowFixMe) {
+    const genericName = genericTypeAnnotation.id.name;
+    super(
+      hasteModuleName,
+      genericTypeAnnotation,
+      `Unrecognized generic type '${genericName}' in NativeModule spec.`,
+    );
+
+    this.genericName = genericName;
+  }
+}
+
+class IncorrectlyParameterizedFlowGenericParserError extends ParserError {
+  +genericName: string;
+  +numTypeParameters: number;
+
+  constructor(hasteModuleName: string, genericTypeAnnotation: $FlowFixMe) {
+    if (genericTypeAnnotation.typeParameters == null) {
+      super(
+        hasteModuleName,
+        genericTypeAnnotation,
+        `Generic '${genericTypeAnnotation.id.name}' must have type parameters.`,
+      );
+      return;
+    }
+
+    if (
+      genericTypeAnnotation.typeParameters.type ===
+        'TypeParameterInstantiation' &&
+      genericTypeAnnotation.typeParameters.params.length !== 1
+    ) {
+      super(
+        hasteModuleName,
+        genericTypeAnnotation.typeParameters,
+        `Generic '${genericTypeAnnotation.id.name}' must have exactly one type parameter.`,
+      );
+      return;
+    }
+
+    invariant(
+      false,
+      "Couldn't create IncorrectlyParameterizedFlowGenericParserError",
+    );
+  }
+}
+
+/**
+ * Array parsing errors
+ */
+
+class UnsupportedArrayElementTypeAnnotationParserError extends ParserError {
+  constructor(
+    hasteModuleName: string,
+    arrayElementTypeAST: $FlowFixMe,
+    arrayType: 'Array' | '$ReadOnlyArray',
+    invalidArrayElementType: string,
+  ) {
+    super(
+      hasteModuleName,
+      arrayElementTypeAST,
+      `${arrayType} element types cannot be '${invalidArrayElementType}'.`,
+    );
+  }
+}
+
+/**
+ * Object parsing errors
+ */
+
+class UnsupportedObjectPropertyTypeAnnotationParserError extends ParserError {
+  constructor(
+    hasteModuleName: string,
+    propertyAST: $FlowFixMe,
+    invalidPropertyType: string,
+  ) {
+    let message = `'ObjectTypeAnnotation' cannot contain '${invalidPropertyType}'.`;
+
+    if (invalidPropertyType === 'ObjectTypeSpreadProperty') {
+      message = "Object spread isn't supported in 'ObjectTypeAnnotation's.";
+    }
+
+    super(hasteModuleName, propertyAST, message);
+  }
+}
+
+class UnsupportedObjectPropertyValueTypeAnnotationParserError extends ParserError {
+  constructor(
+    hasteModuleName: string,
+    propertyValueAST: $FlowFixMe,
+    propertyName: string,
+    invalidPropertyValueType: string,
+  ) {
+    super(
+      hasteModuleName,
+      propertyValueAST,
+      `Object property '${propertyName}' cannot have type '${invalidPropertyValueType}'.`,
+    );
+  }
+}
+
+/**
+ * Function parsing errors
+ */
+
+class UnnamedFunctionParamParserError extends ParserError {
+  constructor(functionParam: $FlowFixMe, hasteModuleName: string) {
+    super(
+      hasteModuleName,
+      functionParam,
+      'All function parameters must be named.',
+    );
+  }
+}
+
+class UnsupportedFunctionParamTypeAnnotationParserError extends ParserError {
+  constructor(
+    hasteModuleName: string,
+    flowParamTypeAnnotation: $FlowFixMe,
+    paramName: string,
+    invalidParamType: string,
+  ) {
+    super(
+      hasteModuleName,
+      flowParamTypeAnnotation,
+      `Function parameter '${paramName}' cannot have type '${invalidParamType}'.`,
+    );
+  }
+}
+
+class UnsupportedFunctionReturnTypeAnnotationParserError extends ParserError {
+  constructor(
+    hasteModuleName: string,
+    flowReturnTypeAnnotation: $FlowFixMe,
+    invalidReturnType: string,
+  ) {
+    super(
+      hasteModuleName,
+      flowReturnTypeAnnotation,
+      `Function return cannot have type '${invalidReturnType}'.`,
+    );
+  }
+}
+
+class UnusedModuleFlowInterfaceParserError extends ParserError {
+  constructor(hasteModuleName: string, flowInterface: $FlowFixMe) {
+    super(
+      hasteModuleName,
+      flowInterface,
+      "Unused NativeModule spec. Please load the NativeModule by calling TurboModuleRegistry.get<Spec>('<moduleName>').",
+    );
+  }
+}
+
+class MoreThanOneModuleRegistryCallsParserError extends ParserError {
+  constructor(
+    hasteModuleName: string,
+    flowCallExpressions: $FlowFixMe,
+    numCalls: number,
+  ) {
+    super(
+      hasteModuleName,
+      flowCallExpressions,
+      `Every NativeModule spec file must contain exactly one NativeModule load. This file contains ${numCalls}. Please simplify this spec file, splitting it as necessary, to remove the extraneous loads.`,
+    );
+  }
+}
+
+class UntypedModuleRegistryCallParserError extends ParserError {
+  constructor(
+    hasteModuleName: string,
+    flowCallExpression: $FlowFixMe,
+    methodName: string,
+    moduleName: string,
+  ) {
+    super(
+      hasteModuleName,
+      flowCallExpression,
+      `Please type this NativeModule load: TurboModuleRegistry.${methodName}<Spec>('${moduleName}').`,
+    );
+  }
+}
+
+class IncorrectModuleRegistryCallTypeParameterParserError extends ParserError {
+  constructor(
+    hasteModuleName: string,
+    flowTypeArguments: $FlowFixMe,
+    methodName: string,
+    moduleName: string,
+  ) {
+    super(
+      hasteModuleName,
+      flowTypeArguments,
+      `Please change these type arguments to reflect TurboModuleRegistry.${methodName}<Spec>('${moduleName}').`,
+    );
+  }
+}
+
+class IncorrectModuleRegistryCallArityParserError extends ParserError {
+  constructor(
+    hasteModuleName: string,
+    flowCallExpression: $FlowFixMe,
+    methodName: string,
+    incorrectArity: number,
+  ) {
+    super(
+      hasteModuleName,
+      flowCallExpression,
+      `Please call TurboModuleRegistry.${methodName}<Spec>() with exactly one argument. Detected ${incorrectArity}.`,
+    );
+  }
+}
+
+class IncorrectModuleRegistryCallArgumentTypeParserError extends ParserError {
+  constructor(
+    hasteModuleName: string,
+    flowArgument: $FlowFixMe,
+    methodName: string,
+    type: string,
+  ) {
+    const a = /[aeiouy]/.test(type.toLowerCase()) ? 'an' : 'a';
+    super(
+      hasteModuleName,
+      flowArgument,
+      `Please call TurboModuleRegistry.${methodName}<Spec>() with a string literal. Detected ${a} '${type}'`,
+    );
+  }
+}
+
+module.exports = {
+  IncorrectlyParameterizedFlowGenericParserError,
+  MisnamedModuleFlowInterfaceParserError,
+  ModuleFlowInterfaceNotFoundParserError,
+  MoreThanOneModuleFlowInterfaceParserError,
+  UnnamedFunctionParamParserError,
+  UnsupportedArrayElementTypeAnnotationParserError,
+  UnsupportedFlowGenericParserError,
+  UnsupportedFlowTypeAnnotationParserError,
+  UnsupportedFunctionParamTypeAnnotationParserError,
+  UnsupportedFunctionReturnTypeAnnotationParserError,
+  UnsupportedModulePropertyParserError,
+  UnsupportedObjectPropertyTypeAnnotationParserError,
+  UnsupportedObjectPropertyValueTypeAnnotationParserError,
+  UnusedModuleFlowInterfaceParserError,
+  MoreThanOneModuleRegistryCallsParserError,
+  UntypedModuleRegistryCallParserError,
+  IncorrectModuleRegistryCallTypeParameterParserError,
+  IncorrectModuleRegistryCallArityParserError,
+  IncorrectModuleRegistryCallArgumentTypeParserError,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/index.js b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/index.js
new file mode 100644
index 0000000..ffbb50a
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/index.js
@@ -0,0 +1,719 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {
+  NamedShape,
+  NativeModuleAliasMap,
+  NativeModuleArrayTypeAnnotation,
+  NativeModuleBaseTypeAnnotation,
+  NativeModuleFunctionTypeAnnotation,
+  NativeModuleParamTypeAnnotation,
+  NativeModulePropertyShape,
+  NativeModuleSchema,
+  Nullable,
+} from '../../../CodegenSchema.js';
+
+import type {TypeDeclarationMap} from '../utils.js';
+import type {ParserErrorCapturer} from '../utils';
+import type {NativeModuleTypeAnnotation} from '../../../CodegenSchema.js';
+
+const {
+  resolveTypeAnnotation,
+  getTypes,
+  visit,
+  isModuleRegistryCall,
+} = require('../utils.js');
+const {unwrapNullable, wrapNullable} = require('./utils');
+const {
+  IncorrectlyParameterizedFlowGenericParserError,
+  MisnamedModuleFlowInterfaceParserError,
+  ModuleFlowInterfaceNotFoundParserError,
+  MoreThanOneModuleFlowInterfaceParserError,
+  UnnamedFunctionParamParserError,
+  UnsupportedArrayElementTypeAnnotationParserError,
+  UnsupportedFlowGenericParserError,
+  UnsupportedFlowTypeAnnotationParserError,
+  UnsupportedFunctionParamTypeAnnotationParserError,
+  UnsupportedFunctionReturnTypeAnnotationParserError,
+  UnsupportedModulePropertyParserError,
+  UnsupportedObjectPropertyTypeAnnotationParserError,
+  UnsupportedObjectPropertyValueTypeAnnotationParserError,
+  UnusedModuleFlowInterfaceParserError,
+  MoreThanOneModuleRegistryCallsParserError,
+  UntypedModuleRegistryCallParserError,
+  IncorrectModuleRegistryCallTypeParameterParserError,
+  IncorrectModuleRegistryCallArityParserError,
+  IncorrectModuleRegistryCallArgumentTypeParserError,
+} = require('./errors.js');
+
+const invariant = require('invariant');
+
+function nullGuard<T>(fn: () => T): ?T {
+  return fn();
+}
+
+function translateTypeAnnotation(
+  hasteModuleName: string,
+  /**
+   * TODO(T71778680): Flow-type this node.
+   */
+  flowTypeAnnotation: $FlowFixMe,
+  types: TypeDeclarationMap,
+  aliasMap: {...NativeModuleAliasMap},
+  tryParse: ParserErrorCapturer,
+): Nullable<NativeModuleTypeAnnotation> {
+  const {
+    nullable,
+    typeAnnotation,
+    typeAliasResolutionStatus,
+  } = resolveTypeAnnotation(flowTypeAnnotation, types);
+
+  switch (typeAnnotation.type) {
+    case 'GenericTypeAnnotation': {
+      switch (typeAnnotation.id.name) {
+        case 'RootTag': {
+          return wrapNullable(nullable, {
+            type: 'ReservedTypeAnnotation',
+            name: 'RootTag',
+          });
+        }
+        case 'Promise': {
+          assertGenericTypeAnnotationHasExactlyOneTypeParameter(
+            hasteModuleName,
+            typeAnnotation,
+          );
+
+          return wrapNullable(nullable, {
+            type: 'PromiseTypeAnnotation',
+          });
+        }
+        case 'Array':
+        case '$ReadOnlyArray': {
+          assertGenericTypeAnnotationHasExactlyOneTypeParameter(
+            hasteModuleName,
+            typeAnnotation,
+          );
+
+          try {
+            /**
+             * TODO(T72031674): Migrate all our NativeModule specs to not use
+             * invalid Array ElementTypes. Then, make the elementType a required
+             * parameter.
+             */
+            const [elementType, isElementTypeNullable] = unwrapNullable(
+              translateTypeAnnotation(
+                hasteModuleName,
+                typeAnnotation.typeParameters.params[0],
+                types,
+                aliasMap,
+                /**
+                 * TODO(T72031674): Ensure that all ParsingErrors that are thrown
+                 * while parsing the array element don't get captured and collected.
+                 * Why? If we detect any parsing error while parsing the element,
+                 * we should default it to null down the line, here. This is
+                 * the correct behaviour until we migrate all our NativeModule specs
+                 * to be parseable.
+                 */
+                nullGuard,
+              ),
+            );
+
+            if (elementType.type === 'VoidTypeAnnotation') {
+              throw new UnsupportedArrayElementTypeAnnotationParserError(
+                hasteModuleName,
+                typeAnnotation.typeParameters.params[0],
+                typeAnnotation.type,
+                'void',
+              );
+            }
+
+            if (elementType.type === 'PromiseTypeAnnotation') {
+              throw new UnsupportedArrayElementTypeAnnotationParserError(
+                hasteModuleName,
+                typeAnnotation.typeParameters.params[0],
+                typeAnnotation.type,
+                'Promise',
+              );
+            }
+
+            if (elementType.type === 'FunctionTypeAnnotation') {
+              throw new UnsupportedArrayElementTypeAnnotationParserError(
+                hasteModuleName,
+                typeAnnotation.typeParameters.params[0],
+                typeAnnotation.type,
+                'FunctionTypeAnnotation',
+              );
+            }
+
+            const finalTypeAnnotation: NativeModuleArrayTypeAnnotation<
+              Nullable<NativeModuleBaseTypeAnnotation>,
+            > = {
+              type: 'ArrayTypeAnnotation',
+              elementType: wrapNullable(isElementTypeNullable, elementType),
+            };
+
+            return wrapNullable(nullable, finalTypeAnnotation);
+          } catch (ex) {
+            return wrapNullable(nullable, {
+              type: 'ArrayTypeAnnotation',
+            });
+          }
+        }
+        case '$ReadOnly': {
+          assertGenericTypeAnnotationHasExactlyOneTypeParameter(
+            hasteModuleName,
+            typeAnnotation,
+          );
+
+          return translateTypeAnnotation(
+            hasteModuleName,
+            typeAnnotation.typeParameters.params[0],
+            types,
+            aliasMap,
+            tryParse,
+          );
+        }
+        case 'Stringish': {
+          return wrapNullable(nullable, {
+            type: 'StringTypeAnnotation',
+          });
+        }
+        case 'Int32': {
+          return wrapNullable(nullable, {
+            type: 'Int32TypeAnnotation',
+          });
+        }
+        case 'Double': {
+          return wrapNullable(nullable, {
+            type: 'DoubleTypeAnnotation',
+          });
+        }
+        case 'Float': {
+          return wrapNullable(nullable, {
+            type: 'FloatTypeAnnotation',
+          });
+        }
+        case 'UnsafeObject':
+        case 'Object': {
+          return wrapNullable(nullable, {
+            type: 'GenericObjectTypeAnnotation',
+          });
+        }
+        default: {
+          throw new UnsupportedFlowGenericParserError(
+            hasteModuleName,
+            typeAnnotation,
+          );
+        }
+      }
+    }
+    case 'ObjectTypeAnnotation': {
+      const objectTypeAnnotation = {
+        type: 'ObjectTypeAnnotation',
+        // $FlowFixMe[missing-type-arg]
+        properties: (typeAnnotation.properties: Array<$FlowFixMe>)
+          .map<?NamedShape<Nullable<NativeModuleBaseTypeAnnotation>>>(
+            property => {
+              return tryParse(() => {
+                if (property.type !== 'ObjectTypeProperty') {
+                  throw new UnsupportedObjectPropertyTypeAnnotationParserError(
+                    hasteModuleName,
+                    property,
+                    property.type,
+                  );
+                }
+
+                const {optional, key} = property;
+
+                const [
+                  propertyTypeAnnotation,
+                  isPropertyNullable,
+                ] = unwrapNullable(
+                  translateTypeAnnotation(
+                    hasteModuleName,
+                    property.value,
+                    types,
+                    aliasMap,
+                    tryParse,
+                  ),
+                );
+
+                if (propertyTypeAnnotation.type === 'FunctionTypeAnnotation') {
+                  throw new UnsupportedObjectPropertyValueTypeAnnotationParserError(
+                    hasteModuleName,
+                    property.value,
+                    property.key,
+                    propertyTypeAnnotation.type,
+                  );
+                }
+
+                if (propertyTypeAnnotation.type === 'VoidTypeAnnotation') {
+                  throw new UnsupportedObjectPropertyValueTypeAnnotationParserError(
+                    hasteModuleName,
+                    property.value,
+                    property.key,
+                    'void',
+                  );
+                }
+
+                if (propertyTypeAnnotation.type === 'PromiseTypeAnnotation') {
+                  throw new UnsupportedObjectPropertyValueTypeAnnotationParserError(
+                    hasteModuleName,
+                    property.value,
+                    property.key,
+                    'Promise',
+                  );
+                }
+
+                return {
+                  name: key.name,
+                  optional,
+                  typeAnnotation: wrapNullable(
+                    isPropertyNullable,
+                    propertyTypeAnnotation,
+                  ),
+                };
+              });
+            },
+          )
+          .filter(Boolean),
+      };
+
+      if (!typeAliasResolutionStatus.successful) {
+        return wrapNullable(nullable, objectTypeAnnotation);
+      }
+
+      /**
+       * All aliases RHS are required.
+       */
+      aliasMap[typeAliasResolutionStatus.aliasName] = objectTypeAnnotation;
+
+      /**
+       * Nullability of type aliases is transitive.
+       *
+       * Consider this case:
+       *
+       * type Animal = ?{
+       *   name: string,
+       * };
+       *
+       * type B = Animal
+       *
+       * export interface Spec extends TurboModule {
+       *   +greet: (animal: B) => void;
+       * }
+       *
+       * In this case, we follow B to Animal, and then Animal to ?{name: string}.
+       *
+       * We:
+       *   1. Replace `+greet: (animal: B) => void;` with `+greet: (animal: ?Animal) => void;`,
+       *   2. Pretend that Animal = {name: string}.
+       *
+       * Why do we do this?
+       *  1. In ObjC, we need to generate a struct called Animal, not B.
+       *  2. This design is simpler than managing nullability within both the type alias usage, and the type alias RHS.
+       *  3. What does it mean for a C++ struct, which is what this type alias RHS will generate, to be nullable? ¯\_(ツ)_/¯
+       *     Nullability is a concept that only makes sense when talking about instances (i.e: usages) of the C++ structs.
+       *     Hence, it's better to manage nullability within the actual TypeAliasTypeAnnotation nodes, and not the
+       *     associated ObjectTypeAnnotations.
+       */
+      return wrapNullable(nullable, {
+        type: 'TypeAliasTypeAnnotation',
+        name: typeAliasResolutionStatus.aliasName,
+      });
+    }
+    case 'BooleanTypeAnnotation': {
+      return wrapNullable(nullable, {
+        type: 'BooleanTypeAnnotation',
+      });
+    }
+    case 'NumberTypeAnnotation': {
+      return wrapNullable(nullable, {
+        type: 'NumberTypeAnnotation',
+      });
+    }
+    case 'VoidTypeAnnotation': {
+      return wrapNullable(nullable, {
+        type: 'VoidTypeAnnotation',
+      });
+    }
+    case 'StringTypeAnnotation': {
+      return wrapNullable(nullable, {
+        type: 'StringTypeAnnotation',
+      });
+    }
+    case 'FunctionTypeAnnotation': {
+      return wrapNullable(
+        nullable,
+        translateFunctionTypeAnnotation(
+          hasteModuleName,
+          typeAnnotation,
+          types,
+          aliasMap,
+          tryParse,
+        ),
+      );
+    }
+    default: {
+      throw new UnsupportedFlowTypeAnnotationParserError(
+        hasteModuleName,
+        typeAnnotation,
+      );
+    }
+  }
+}
+
+function assertGenericTypeAnnotationHasExactlyOneTypeParameter(
+  moduleName: string,
+  /**
+   * TODO(T71778680): This is a GenericTypeAnnotation. Flow type this node
+   */
+  typeAnnotation: $FlowFixMe,
+) {
+  if (typeAnnotation.typeParameters == null) {
+    throw new IncorrectlyParameterizedFlowGenericParserError(
+      moduleName,
+      typeAnnotation,
+    );
+  }
+
+  invariant(
+    typeAnnotation.typeParameters.type === 'TypeParameterInstantiation',
+    "assertGenericTypeAnnotationHasExactlyOneTypeParameter: Type parameters must be an AST node of type 'TypeParameterInstantiation'",
+  );
+
+  if (typeAnnotation.typeParameters.params.length !== 1) {
+    throw new IncorrectlyParameterizedFlowGenericParserError(
+      moduleName,
+      typeAnnotation,
+    );
+  }
+}
+
+function translateFunctionTypeAnnotation(
+  hasteModuleName: string,
+  // TODO(T71778680): This is a FunctionTypeAnnotation. Type this.
+  flowFunctionTypeAnnotation: $FlowFixMe,
+  types: TypeDeclarationMap,
+  aliasMap: {...NativeModuleAliasMap},
+  tryParse: ParserErrorCapturer,
+): NativeModuleFunctionTypeAnnotation {
+  type Param = NamedShape<Nullable<NativeModuleParamTypeAnnotation>>;
+  const params: Array<Param> = [];
+
+  for (const flowParam of (flowFunctionTypeAnnotation.params: $ReadOnlyArray<$FlowFixMe>)) {
+    const parsedParam = tryParse(() => {
+      if (flowParam.name == null) {
+        throw new UnnamedFunctionParamParserError(flowParam, hasteModuleName);
+      }
+
+      const paramName = flowParam.name.name;
+      const [
+        paramTypeAnnotation,
+        isParamTypeAnnotationNullable,
+      ] = unwrapNullable(
+        translateTypeAnnotation(
+          hasteModuleName,
+          flowParam.typeAnnotation,
+          types,
+          aliasMap,
+          tryParse,
+        ),
+      );
+
+      if (paramTypeAnnotation.type === 'VoidTypeAnnotation') {
+        throw new UnsupportedFunctionParamTypeAnnotationParserError(
+          hasteModuleName,
+          flowParam.typeAnnotation,
+          paramName,
+          'void',
+        );
+      }
+
+      if (paramTypeAnnotation.type === 'PromiseTypeAnnotation') {
+        throw new UnsupportedFunctionParamTypeAnnotationParserError(
+          hasteModuleName,
+          flowParam.typeAnnotation,
+          paramName,
+          'Promise',
+        );
+      }
+
+      return {
+        name: flowParam.name.name,
+        optional: flowParam.optional,
+        typeAnnotation: wrapNullable(
+          isParamTypeAnnotationNullable,
+          paramTypeAnnotation,
+        ),
+      };
+    });
+
+    if (parsedParam != null) {
+      params.push(parsedParam);
+    }
+  }
+
+  const [returnTypeAnnotation, isReturnTypeAnnotationNullable] = unwrapNullable(
+    translateTypeAnnotation(
+      hasteModuleName,
+      flowFunctionTypeAnnotation.returnType,
+      types,
+      aliasMap,
+      tryParse,
+    ),
+  );
+
+  if (returnTypeAnnotation.type === 'FunctionTypeAnnotation') {
+    throw new UnsupportedFunctionReturnTypeAnnotationParserError(
+      hasteModuleName,
+      flowFunctionTypeAnnotation.returnType,
+      'FunctionTypeAnnotation',
+    );
+  }
+
+  return {
+    type: 'FunctionTypeAnnotation',
+    returnTypeAnnotation: wrapNullable(
+      isReturnTypeAnnotationNullable,
+      returnTypeAnnotation,
+    ),
+    params,
+  };
+}
+
+function buildPropertySchema(
+  hasteModuleName: string,
+  // TODO(T71778680): This is an ObjectTypeProperty containing either:
+  // - a FunctionTypeAnnotation or GenericTypeAnnotation
+  // - a NullableTypeAnnoation containing a FunctionTypeAnnotation or GenericTypeAnnotation
+  // Flow type this node
+  property: $FlowFixMe,
+  types: TypeDeclarationMap,
+  aliasMap: {...NativeModuleAliasMap},
+  tryParse: ParserErrorCapturer,
+): NativeModulePropertyShape {
+  let nullable = false;
+  let {key, value} = property;
+
+  const methodName: string = key.name;
+
+  ({nullable, typeAnnotation: value} = resolveTypeAnnotation(value, types));
+
+  if (value.type !== 'FunctionTypeAnnotation') {
+    throw new UnsupportedModulePropertyParserError(
+      hasteModuleName,
+      property.value,
+      property.key.name,
+      value.type,
+    );
+  }
+
+  return {
+    name: methodName,
+    optional: property.optional,
+    typeAnnotation: wrapNullable(
+      nullable,
+      translateFunctionTypeAnnotation(
+        hasteModuleName,
+        value,
+        types,
+        aliasMap,
+        tryParse,
+      ),
+    ),
+  };
+}
+
+function isModuleInterface(node) {
+  return (
+    node.type === 'InterfaceDeclaration' &&
+    node.extends.length === 1 &&
+    node.extends[0].type === 'InterfaceExtends' &&
+    node.extends[0].id.name === 'TurboModule'
+  );
+}
+
+function buildModuleSchema(
+  hasteModuleName: string,
+  /**
+   * TODO(T71778680): Flow-type this node.
+   */
+  ast: $FlowFixMe,
+  tryParse: ParserErrorCapturer,
+): NativeModuleSchema {
+  const types = getTypes(ast);
+  const moduleSpecs = (Object.values(types): $ReadOnlyArray<$FlowFixMe>).filter(
+    isModuleInterface,
+  );
+
+  if (moduleSpecs.length === 0) {
+    throw new ModuleFlowInterfaceNotFoundParserError(hasteModuleName, ast);
+  }
+
+  if (moduleSpecs.length > 1) {
+    throw new MoreThanOneModuleFlowInterfaceParserError(
+      hasteModuleName,
+      moduleSpecs,
+      moduleSpecs.map(node => node.id.name),
+    );
+  }
+
+  const [moduleSpec] = moduleSpecs;
+
+  if (moduleSpec.id.name !== 'Spec') {
+    throw new MisnamedModuleFlowInterfaceParserError(
+      hasteModuleName,
+      moduleSpec.id,
+    );
+  }
+
+  // Parse Module Names
+  const moduleName = tryParse((): string => {
+    const callExpressions = [];
+    visit(ast, {
+      CallExpression(node) {
+        if (isModuleRegistryCall(node)) {
+          callExpressions.push(node);
+        }
+      },
+    });
+
+    if (callExpressions.length === 0) {
+      throw new UnusedModuleFlowInterfaceParserError(
+        hasteModuleName,
+        moduleSpec,
+      );
+    }
+
+    if (callExpressions.length > 1) {
+      throw new MoreThanOneModuleRegistryCallsParserError(
+        hasteModuleName,
+        callExpressions,
+        callExpressions.length,
+      );
+    }
+
+    const [callExpression] = callExpressions;
+    const {typeArguments} = callExpression;
+    const methodName = callExpression.callee.property.name;
+
+    if (callExpression.arguments.length !== 1) {
+      throw new IncorrectModuleRegistryCallArityParserError(
+        hasteModuleName,
+        callExpression,
+        methodName,
+        callExpression.arguments.length,
+      );
+    }
+
+    if (callExpression.arguments[0].type !== 'Literal') {
+      const {type} = callExpression.arguments[0];
+      throw new IncorrectModuleRegistryCallArgumentTypeParserError(
+        hasteModuleName,
+        callExpression.arguments[0],
+        methodName,
+        type,
+      );
+    }
+
+    const $moduleName = callExpression.arguments[0].value;
+
+    if (typeArguments == null) {
+      throw new UntypedModuleRegistryCallParserError(
+        hasteModuleName,
+        callExpression,
+        methodName,
+        $moduleName,
+      );
+    }
+
+    if (
+      typeArguments.type !== 'TypeParameterInstantiation' ||
+      typeArguments.params.length !== 1 ||
+      typeArguments.params[0].type !== 'GenericTypeAnnotation' ||
+      typeArguments.params[0].id.name !== 'Spec'
+    ) {
+      throw new IncorrectModuleRegistryCallTypeParameterParserError(
+        hasteModuleName,
+        typeArguments,
+        methodName,
+        $moduleName,
+      );
+    }
+
+    return $moduleName;
+  });
+
+  const moduleNames = moduleName == null ? [] : [moduleName];
+
+  // Some module names use platform suffix to indicate platform-exclusive modules.
+  // Eventually this should be made explicit in the Flow type itself.
+  // Also check the hasteModuleName for platform suffix.
+  // Note: this shape is consistent with ComponentSchema.
+  const excludedPlatforms = [];
+  const namesToValidate = [...moduleNames, hasteModuleName];
+  namesToValidate.forEach(name => {
+    if (name.endsWith('Android')) {
+      excludedPlatforms.push('iOS');
+    } else if (name.endsWith('IOS')) {
+      excludedPlatforms.push('android');
+    }
+  });
+
+  // $FlowFixMe[missing-type-arg]
+  return (moduleSpec.body.properties: $ReadOnlyArray<$FlowFixMe>)
+    .filter(property => property.type === 'ObjectTypeProperty')
+    .map<?{
+      aliasMap: NativeModuleAliasMap,
+      propertyShape: NativeModulePropertyShape,
+    }>(property => {
+      const aliasMap: {...NativeModuleAliasMap} = {};
+
+      return tryParse(() => ({
+        aliasMap: aliasMap,
+        propertyShape: buildPropertySchema(
+          hasteModuleName,
+          property,
+          types,
+          aliasMap,
+          tryParse,
+        ),
+      }));
+    })
+    .filter(Boolean)
+    .reduce(
+      (moduleSchema: NativeModuleSchema, {aliasMap, propertyShape}) => {
+        return {
+          type: 'NativeModule',
+          aliases: {...moduleSchema.aliases, ...aliasMap},
+          spec: {
+            properties: [...moduleSchema.spec.properties, propertyShape],
+          },
+          moduleNames: moduleSchema.moduleNames,
+          excludedPlatforms: moduleSchema.excludedPlatforms,
+        };
+      },
+      {
+        type: 'NativeModule',
+        aliases: {},
+        spec: {properties: []},
+        moduleNames: moduleNames,
+        excludedPlatforms:
+          excludedPlatforms.length !== 0 ? [...excludedPlatforms] : undefined,
+      },
+    );
+}
+
+module.exports = {
+  buildModuleSchema,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/schema.js b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/schema.js
new file mode 100644
index 0000000..da3da6a
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/schema.js
@@ -0,0 +1,28 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @format
+ * @flow strict
+ */
+
+'use strict';
+
+import type {SchemaType, NativeModuleSchema} from '../../../CodegenSchema.js';
+
+function wrapModuleSchema(
+  nativeModuleSchema: NativeModuleSchema,
+  hasteModuleName: string,
+): SchemaType {
+  return {
+    modules: {
+      [hasteModuleName]: nativeModuleSchema,
+    },
+  };
+}
+
+module.exports = {
+  wrapModuleSchema,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/utils.js b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/utils.js
new file mode 100644
index 0000000..8b8aa0b
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/modules/utils.js
@@ -0,0 +1,45 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict
+ * @format
+ */
+
+'use strict';
+
+import type {
+  NativeModuleTypeAnnotation,
+  Nullable,
+} from '../../../CodegenSchema.js';
+
+function unwrapNullable<+T: NativeModuleTypeAnnotation>(
+  x: Nullable<T>,
+): [T, boolean] {
+  if (x.type === 'NullableTypeAnnotation') {
+    return [x.typeAnnotation, true];
+  }
+
+  return [x, false];
+}
+
+function wrapNullable<+T: NativeModuleTypeAnnotation>(
+  nullable: boolean,
+  typeAnnotation: T,
+): Nullable<T> {
+  if (!nullable) {
+    return typeAnnotation;
+  }
+
+  return {
+    type: 'NullableTypeAnnotation',
+    typeAnnotation,
+  };
+}
+
+module.exports = {
+  unwrapNullable,
+  wrapNullable,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/utils.js b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/utils.js
new file mode 100644
index 0000000..70d4536
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/utils.js
@@ -0,0 +1,210 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+const {ParserError} = require('./errors');
+
+/**
+ * This FlowFixMe is supposed to refer to an InterfaceDeclaration or TypeAlias
+ * declaration type. Unfortunately, we don't have those types, because flow-parser
+ * generates them, and flow-parser is not type-safe. In the future, we should find
+ * a way to get these types from our flow parser library.
+ *
+ * TODO(T71778680): Flow type AST Nodes
+ */
+export type TypeDeclarationMap = {[declarationName: string]: $FlowFixMe};
+
+function getTypes(ast: $FlowFixMe): TypeDeclarationMap {
+  return ast.body.reduce((types, node) => {
+    if (node.type === 'ExportNamedDeclaration' && node.exportKind === 'type') {
+      if (
+        node.declaration.type === 'TypeAlias' ||
+        node.declaration.type === 'InterfaceDeclaration'
+      ) {
+        types[node.declaration.id.name] = node.declaration;
+      }
+    } else if (
+      node.type === 'TypeAlias' ||
+      node.type === 'InterfaceDeclaration'
+    ) {
+      types[node.id.name] = node;
+    }
+    return types;
+  }, {});
+}
+
+// $FlowFixMe[unclear-type] there's no flowtype for ASTs
+export type ASTNode = Object;
+
+const invariant = require('invariant');
+
+type TypeAliasResolutionStatus =
+  | $ReadOnly<{
+      successful: true,
+      aliasName: string,
+    }>
+  | $ReadOnly<{
+      successful: false,
+    }>;
+
+function resolveTypeAnnotation(
+  // TODO(T71778680): This is an Flow TypeAnnotation. Flow-type this
+  typeAnnotation: $FlowFixMe,
+  types: TypeDeclarationMap,
+): {
+  nullable: boolean,
+  typeAnnotation: $FlowFixMe,
+  typeAliasResolutionStatus: TypeAliasResolutionStatus,
+} {
+  invariant(
+    typeAnnotation != null,
+    'resolveTypeAnnotation(): typeAnnotation cannot be null',
+  );
+
+  let node = typeAnnotation;
+  let nullable = false;
+  let typeAliasResolutionStatus: TypeAliasResolutionStatus = {
+    successful: false,
+  };
+
+  for (;;) {
+    if (node.type === 'NullableTypeAnnotation') {
+      nullable = true;
+      node = node.typeAnnotation;
+    } else if (node.type === 'GenericTypeAnnotation') {
+      typeAliasResolutionStatus = {
+        successful: true,
+        aliasName: node.id.name,
+      };
+      const resolvedTypeAnnotation = types[node.id.name];
+      if (resolvedTypeAnnotation == null) {
+        break;
+      }
+
+      invariant(
+        resolvedTypeAnnotation.type === 'TypeAlias',
+        `GenericTypeAnnotation '${node.id.name}' must resolve to a TypeAlias. Instead, it resolved to a '${resolvedTypeAnnotation.type}'`,
+      );
+
+      node = resolvedTypeAnnotation.right;
+    } else {
+      break;
+    }
+  }
+
+  return {
+    nullable: nullable,
+    typeAnnotation: node,
+    typeAliasResolutionStatus,
+  };
+}
+
+function getValueFromTypes(value: ASTNode, types: TypeDeclarationMap): ASTNode {
+  if (value.type === 'GenericTypeAnnotation' && types[value.id.name]) {
+    return getValueFromTypes(types[value.id.name].right, types);
+  }
+  return value;
+}
+
+export type ParserErrorCapturer = <T>(fn: () => T) => ?T;
+
+function createParserErrorCapturer(): [
+  Array<ParserError>,
+  ParserErrorCapturer,
+] {
+  const errors = [];
+  function guard<T>(fn: () => T): ?T {
+    try {
+      return fn();
+    } catch (error) {
+      if (!(error instanceof ParserError)) {
+        throw error;
+      }
+      errors.push(error);
+
+      return null;
+    }
+  }
+
+  return [errors, guard];
+}
+
+// TODO(T71778680): Flow-type ASTNodes.
+function visit(
+  astNode: $FlowFixMe,
+  visitor: {
+    [type: string]: (node: $FlowFixMe) => void,
+  },
+) {
+  const queue = [astNode];
+  while (queue.length !== 0) {
+    let item = queue.shift();
+
+    if (!(typeof item === 'object' && item != null)) {
+      continue;
+    }
+
+    if (
+      typeof item.type === 'string' &&
+      typeof visitor[item.type] === 'function'
+    ) {
+      // Don't visit any children
+      visitor[item.type](item);
+    } else if (Array.isArray(item)) {
+      queue.push(...item);
+    } else {
+      queue.push(...Object.values(item));
+    }
+  }
+}
+
+// TODO(T71778680): Flow-type ASTNodes.
+function isModuleRegistryCall(node: $FlowFixMe): boolean {
+  if (node.type !== 'CallExpression') {
+    return false;
+  }
+
+  const callExpression = node;
+
+  if (callExpression.callee.type !== 'MemberExpression') {
+    return false;
+  }
+
+  const memberExpression = callExpression.callee;
+  if (
+    !(
+      memberExpression.object.type === 'Identifier' &&
+      memberExpression.object.name === 'TurboModuleRegistry'
+    )
+  ) {
+    return false;
+  }
+
+  if (
+    !(
+      memberExpression.property.type === 'Identifier' &&
+      (memberExpression.property.name === 'get' ||
+        memberExpression.property.name === 'getEnforcing')
+    )
+  ) {
+    return false;
+  }
+  return true;
+}
+
+module.exports = {
+  getValueFromTypes,
+  resolveTypeAnnotation,
+  createParserErrorCapturer,
+  getTypes,
+  visit,
+  isModuleRegistryCall,
+};
diff --git a/node_modules/react-native/packages/react-native-codegen/src/parsers/schema/index.js b/node_modules/react-native/packages/react-native-codegen/src/parsers/schema/index.js
new file mode 100644
index 0000000..bf736a7
--- /dev/null
+++ b/node_modules/react-native/packages/react-native-codegen/src/parsers/schema/index.js
@@ -0,0 +1,26 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow strict-local
+ * @format
+ */
+
+'use strict';
+
+import type {SchemaType} from '../../CodegenSchema.js';
+
+function parse(filename: string): ?SchemaType {
+  try {
+    // $FlowFixMe[unsupported-syntax] Can't require dynamic variables
+    return require(filename);
+  } catch (err) {
+    // Ignore
+  }
+}
+
+module.exports = {
+  parse,
+};
