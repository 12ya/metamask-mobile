diff --git a/node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.d.ts b/node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.d.ts
new file mode 100644
index 0000000..265f8a3
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.d.ts
@@ -0,0 +1,5 @@
+import type { RemoteTransactionSource, RemoteTransactionSourceRequest, TransactionMeta } from './types';
+export declare class EtherscanRemoteTransactionSource implements RemoteTransactionSource {
+    #private;
+    fetchTransactions(request: RemoteTransactionSourceRequest): Promise<TransactionMeta[]>;
+}
diff --git a/node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.js b/node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.js
new file mode 100644
index 0000000..86e7821
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.js
@@ -0,0 +1,78 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
+    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
+    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
+    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
+};
+var _EtherscanRemoteTransactionSource_instances, _EtherscanRemoteTransactionSource_normalizeTransaction, _EtherscanRemoteTransactionSource_normalizeTokenTransaction, _EtherscanRemoteTransactionSource_normalizeTransactionBase;
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.EtherscanRemoteTransactionSource = void 0;
+const controller_utils_1 = require("@metamask/controller-utils");
+const ethereumjs_util_1 = require("ethereumjs-util");
+const uuid_1 = require("uuid");
+const etherscan_1 = require("./etherscan");
+const types_1 = require("./types");
+class EtherscanRemoteTransactionSource {
+    constructor() {
+        _EtherscanRemoteTransactionSource_instances.add(this);
+    }
+    fetchTransactions(request) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const [etherscanTransactions, etherscanTokenTransactions] = yield Promise.all([
+                (0, etherscan_1.fetchEtherscanTransactions)(request),
+                (0, etherscan_1.fetchEtherscanTokenTransactions)(request),
+            ]);
+            const transactions = etherscanTransactions.result.map((tx) => __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_instances, "m", _EtherscanRemoteTransactionSource_normalizeTransaction).call(this, tx, request.currentNetworkId, request.currentChainId));
+            const tokenTransactions = etherscanTokenTransactions.result.map((tx) => __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_instances, "m", _EtherscanRemoteTransactionSource_normalizeTokenTransaction).call(this, tx, request.currentNetworkId, request.currentChainId));
+            return [...transactions, ...tokenTransactions];
+        });
+    }
+}
+exports.EtherscanRemoteTransactionSource = EtherscanRemoteTransactionSource;
+_EtherscanRemoteTransactionSource_instances = new WeakSet(), _EtherscanRemoteTransactionSource_normalizeTransaction = function _EtherscanRemoteTransactionSource_normalizeTransaction(txMeta, currentNetworkId, currentChainId) {
+    const base = __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_instances, "m", _EtherscanRemoteTransactionSource_normalizeTransactionBase).call(this, txMeta, currentNetworkId, currentChainId);
+    return Object.assign(Object.assign(Object.assign({}, base), { transaction: Object.assign(Object.assign({}, base.transaction), { data: txMeta.input }) }), (txMeta.isError === '0'
+        ? { status: types_1.TransactionStatus.confirmed }
+        : {
+            error: new Error('Transaction failed'),
+            status: types_1.TransactionStatus.failed,
+        }));
+}, _EtherscanRemoteTransactionSource_normalizeTokenTransaction = function _EtherscanRemoteTransactionSource_normalizeTokenTransaction(txMeta, currentNetworkId, currentChainId) {
+    const base = __classPrivateFieldGet(this, _EtherscanRemoteTransactionSource_instances, "m", _EtherscanRemoteTransactionSource_normalizeTransactionBase).call(this, txMeta, currentNetworkId, currentChainId);
+    return Object.assign(Object.assign({}, base), { isTransfer: true, transferInformation: {
+            contractAddress: txMeta.contractAddress,
+            decimals: Number(txMeta.tokenDecimal),
+            symbol: txMeta.tokenSymbol,
+        } });
+}, _EtherscanRemoteTransactionSource_normalizeTransactionBase = function _EtherscanRemoteTransactionSource_normalizeTransactionBase(txMeta, currentNetworkId, currentChainId) {
+    const time = parseInt(txMeta.timeStamp, 10) * 1000;
+    return {
+        blockNumber: txMeta.blockNumber,
+        chainId: currentChainId,
+        id: (0, uuid_1.v1)({ msecs: time }),
+        networkID: currentNetworkId,
+        status: types_1.TransactionStatus.confirmed,
+        time,
+        transaction: {
+            from: txMeta.from,
+            gas: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.gas)),
+            gasPrice: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.gasPrice)),
+            gasUsed: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.gasUsed)),
+            nonce: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.nonce)),
+            to: txMeta.to,
+            value: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.value)),
+        },
+        transactionHash: txMeta.hash,
+        verifiedOnBlockchain: false,
+    };
+};
+//# sourceMappingURL=EtherscanRemoteTransactionSource.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.js.map b/node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.js.map
new file mode 100644
index 0000000..d4a5403
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/EtherscanRemoteTransactionSource.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"EtherscanRemoteTransactionSource.js","sourceRoot":"","sources":["../src/EtherscanRemoteTransactionSource.ts"],"names":[],"mappings":"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","sourcesContent":["import { BNToHex } from '@metamask/controller-utils';\nimport { BN } from 'ethereumjs-util';\nimport { v1 as random } from 'uuid';\n\nimport type {\n  EtherscanTokenTransactionMeta,\n  EtherscanTransactionMeta,\n  EtherscanTransactionMetaBase,\n} from './etherscan';\nimport {\n  fetchEtherscanTokenTransactions,\n  fetchEtherscanTransactions,\n} from './etherscan';\nimport type {\n  RemoteTransactionSource,\n  RemoteTransactionSourceRequest,\n  TransactionMeta,\n} from './types';\nimport { TransactionStatus } from './types';\n\nexport class EtherscanRemoteTransactionSource\n  implements RemoteTransactionSource\n{\n  async fetchTransactions(\n    request: RemoteTransactionSourceRequest,\n  ): Promise<TransactionMeta[]> {\n    const [etherscanTransactions, etherscanTokenTransactions] =\n      await Promise.all([\n        fetchEtherscanTransactions(request),\n        fetchEtherscanTokenTransactions(request),\n      ]);\n\n    const transactions = etherscanTransactions.result.map((tx) =>\n      this.#normalizeTransaction(\n        tx,\n        request.currentNetworkId,\n        request.currentChainId,\n      ),\n    );\n\n    const tokenTransactions = etherscanTokenTransactions.result.map((tx) =>\n      this.#normalizeTokenTransaction(\n        tx,\n        request.currentNetworkId,\n        request.currentChainId,\n      ),\n    );\n\n    return [...transactions, ...tokenTransactions];\n  }\n\n  #normalizeTransaction(\n    txMeta: EtherscanTransactionMeta,\n    currentNetworkId: string,\n    currentChainId: string,\n  ): TransactionMeta {\n    const base = this.#normalizeTransactionBase(\n      txMeta,\n      currentNetworkId,\n      currentChainId,\n    );\n\n    return {\n      ...base,\n      transaction: {\n        ...base.transaction,\n        data: txMeta.input,\n      },\n      ...(txMeta.isError === '0'\n        ? { status: TransactionStatus.confirmed }\n        : {\n            error: new Error('Transaction failed'),\n            status: TransactionStatus.failed,\n          }),\n    };\n  }\n\n  #normalizeTokenTransaction(\n    txMeta: EtherscanTokenTransactionMeta,\n    currentNetworkId: string,\n    currentChainId: string,\n  ): TransactionMeta {\n    const base = this.#normalizeTransactionBase(\n      txMeta,\n      currentNetworkId,\n      currentChainId,\n    );\n\n    return {\n      ...base,\n      isTransfer: true,\n      transferInformation: {\n        contractAddress: txMeta.contractAddress,\n        decimals: Number(txMeta.tokenDecimal),\n        symbol: txMeta.tokenSymbol,\n      },\n    };\n  }\n\n  #normalizeTransactionBase(\n    txMeta: EtherscanTransactionMetaBase,\n    currentNetworkId: string,\n    currentChainId: string,\n  ): TransactionMeta {\n    const time = parseInt(txMeta.timeStamp, 10) * 1000;\n\n    return {\n      blockNumber: txMeta.blockNumber,\n      chainId: currentChainId,\n      id: random({ msecs: time }),\n      networkID: currentNetworkId,\n      status: TransactionStatus.confirmed,\n      time,\n      transaction: {\n        from: txMeta.from,\n        gas: BNToHex(new BN(txMeta.gas)),\n        gasPrice: BNToHex(new BN(txMeta.gasPrice)),\n        gasUsed: BNToHex(new BN(txMeta.gasUsed)),\n        nonce: BNToHex(new BN(txMeta.nonce)),\n        to: txMeta.to,\n        value: BNToHex(new BN(txMeta.value)),\n      },\n      transactionHash: txMeta.hash,\n      verifiedOnBlockchain: false,\n    };\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.d.ts b/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.d.ts
new file mode 100644
index 0000000..ea60b9d
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.d.ts
@@ -0,0 +1,21 @@
+import type { NetworkState } from '@metamask/network-controller';
+import { RemoteTransactionSource, TransactionMeta } from './types';
+export declare class IncomingTransactionHelper {
+    #private;
+    constructor({ getNetworkState, getEthQuery, transactionLimit, remoteTransactionSource, }: {
+        getNetworkState: () => NetworkState;
+        getEthQuery: () => any;
+        transactionLimit: number;
+        remoteTransactionSource: RemoteTransactionSource;
+    });
+    reconcile({ address, localTransactions, fromBlock, apiKey, }: {
+        address: string;
+        localTransactions: TransactionMeta[];
+        fromBlock?: string;
+        apiKey?: string;
+    }): Promise<{
+        updateRequired: boolean;
+        transactions: TransactionMeta[];
+        latestBlockNumber?: string;
+    }>;
+}
diff --git a/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.js b/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.js
new file mode 100644
index 0000000..811ad7d
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.js
@@ -0,0 +1,144 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
+    if (kind === "m") throw new TypeError("Private method is not writable");
+    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
+    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
+    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
+};
+var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
+    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
+    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
+    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
+};
+var _IncomingTransactionHelper_instances, _IncomingTransactionHelper_getNetworkState, _IncomingTransactionHelper_getEthQuery, _IncomingTransactionHelper_transactionLimit, _IncomingTransactionHelper_remoteTransactionSource, _IncomingTransactionHelper_updateSmartContractProperty, _IncomingTransactionHelper_getLatestBlockNumber, _IncomingTransactionHelper_isToSmartContract, _IncomingTransactionHelper_sortTransactionsByTime, _IncomingTransactionHelper_reconcileTransactions, _IncomingTransactionHelper_getNewTransactions, _IncomingTransactionHelper_getUpdatedTransactions, _IncomingTransactionHelper_isTransactionOutdated, _IncomingTransactionHelper_isStatusOutdated, _IncomingTransactionHelper_isGasDataOutdated;
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.IncomingTransactionHelper = void 0;
+const controller_utils_1 = require("@metamask/controller-utils");
+const SUPPORTED_NETWORK_IDS = [
+    '1',
+    '5',
+    '11155111', // Sepolia
+];
+class IncomingTransactionHelper {
+    constructor({ getNetworkState, getEthQuery, transactionLimit, remoteTransactionSource, }) {
+        _IncomingTransactionHelper_instances.add(this);
+        _IncomingTransactionHelper_getNetworkState.set(this, void 0);
+        _IncomingTransactionHelper_getEthQuery.set(this, void 0);
+        _IncomingTransactionHelper_transactionLimit.set(this, void 0);
+        _IncomingTransactionHelper_remoteTransactionSource.set(this, void 0);
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_getNetworkState, getNetworkState, "f");
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_getEthQuery, getEthQuery, "f");
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_transactionLimit, transactionLimit, "f");
+        __classPrivateFieldSet(this, _IncomingTransactionHelper_remoteTransactionSource, remoteTransactionSource, "f");
+    }
+    reconcile({ address, localTransactions, fromBlock, apiKey, }) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const { providerConfig, network: currentNetworkId } = __classPrivateFieldGet(this, _IncomingTransactionHelper_getNetworkState, "f").call(this);
+            const { chainId: currentChainId, type: networkType } = providerConfig;
+            if (currentNetworkId === null ||
+                !SUPPORTED_NETWORK_IDS.includes(currentNetworkId)) {
+                return { updateRequired: false, transactions: [] };
+            }
+            const remoteTransactions = yield __classPrivateFieldGet(this, _IncomingTransactionHelper_remoteTransactionSource, "f").fetchTransactions({
+                address,
+                networkType,
+                limit: __classPrivateFieldGet(this, _IncomingTransactionHelper_transactionLimit, "f"),
+                currentChainId: currentChainId,
+                currentNetworkId: currentNetworkId,
+                fromBlock,
+                apiKey,
+            });
+            const [updateRequired, transactions] = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_reconcileTransactions).call(this, localTransactions, remoteTransactions);
+            __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_sortTransactionsByTime).call(this, transactions);
+            const latestBlockNumber = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getLatestBlockNumber).call(this, transactions, address, currentChainId, currentNetworkId);
+            yield __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_updateSmartContractProperty).call(this, transactions);
+            return { updateRequired, transactions, latestBlockNumber };
+        });
+    }
+}
+exports.IncomingTransactionHelper = IncomingTransactionHelper;
+_IncomingTransactionHelper_getNetworkState = new WeakMap(), _IncomingTransactionHelper_getEthQuery = new WeakMap(), _IncomingTransactionHelper_transactionLimit = new WeakMap(), _IncomingTransactionHelper_remoteTransactionSource = new WeakMap(), _IncomingTransactionHelper_instances = new WeakSet(), _IncomingTransactionHelper_updateSmartContractProperty = function _IncomingTransactionHelper_updateSmartContractProperty(transactions) {
+    return __awaiter(this, void 0, void 0, function* () {
+        yield Promise.all(transactions.map((tx) => __awaiter(this, void 0, void 0, function* () {
+            var _a;
+            (_a = tx.toSmartContract) !== null && _a !== void 0 ? _a : (tx.toSmartContract = yield __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_isToSmartContract).call(this, tx.transaction));
+        })));
+    });
+}, _IncomingTransactionHelper_getLatestBlockNumber = function _IncomingTransactionHelper_getLatestBlockNumber(transactions, address, currentChainId, currentNetworkId) {
+    var _a;
+    let latestBlockNumber;
+    for (const tx of transactions) {
+        const onCurrentChain = tx.chainId === currentChainId ||
+            (!tx.chainId && tx.networkID === currentNetworkId);
+        const toCurrentAccount = ((_a = tx.transaction.to) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === address.toLowerCase();
+        const currentBlockNumberValue = tx.blockNumber
+            ? parseInt(tx.blockNumber, 10)
+            : -1;
+        const latestBlockNumberValue = latestBlockNumber
+            ? parseInt(latestBlockNumber, 10)
+            : -1;
+        if (onCurrentChain &&
+            toCurrentAccount &&
+            latestBlockNumberValue < currentBlockNumberValue) {
+            latestBlockNumber = tx.blockNumber;
+        }
+    }
+    return latestBlockNumber;
+}, _IncomingTransactionHelper_isToSmartContract = function _IncomingTransactionHelper_isToSmartContract(transaction) {
+    return __awaiter(this, void 0, void 0, function* () {
+        // Contract Deploy
+        if (!transaction.to) {
+            return false;
+        }
+        // Send
+        if (transaction.data === '0x') {
+            return false;
+        }
+        const ethQuery = __classPrivateFieldGet(this, _IncomingTransactionHelper_getEthQuery, "f").call(this);
+        const code = yield (0, controller_utils_1.query)(ethQuery, 'getCode', [transaction.to]);
+        return (0, controller_utils_1.isSmartContractCode)(code);
+    });
+}, _IncomingTransactionHelper_sortTransactionsByTime = function _IncomingTransactionHelper_sortTransactionsByTime(transactions) {
+    transactions.sort((a, b) => (a.time < b.time ? -1 : 1));
+}, _IncomingTransactionHelper_reconcileTransactions = function _IncomingTransactionHelper_reconcileTransactions(localTxs, remoteTxs) {
+    const updatedTxs = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getUpdatedTransactions).call(this, remoteTxs, localTxs);
+    const newTxs = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_getNewTransactions).call(this, remoteTxs, localTxs);
+    const updatedLocalTxs = localTxs.map((tx) => {
+        const txIdx = updatedTxs.findIndex(({ transactionHash }) => transactionHash === tx.transactionHash);
+        return txIdx === -1 ? tx : updatedTxs[txIdx];
+    });
+    const updateRequired = newTxs.length > 0 || updatedTxs.length > 0;
+    const transactions = [...newTxs, ...updatedLocalTxs];
+    return [updateRequired, transactions];
+}, _IncomingTransactionHelper_getNewTransactions = function _IncomingTransactionHelper_getNewTransactions(remoteTxs, localTxs) {
+    return remoteTxs.filter((tx) => {
+        const alreadyInTransactions = localTxs.find(({ transactionHash }) => transactionHash === tx.transactionHash);
+        return !alreadyInTransactions;
+    });
+}, _IncomingTransactionHelper_getUpdatedTransactions = function _IncomingTransactionHelper_getUpdatedTransactions(remoteTxs, localTxs) {
+    return remoteTxs.filter((remoteTx) => {
+        const isTxOutdated = localTxs.find((localTx) => {
+            return (remoteTx.transactionHash === localTx.transactionHash &&
+                __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_isTransactionOutdated).call(this, remoteTx, localTx));
+        });
+        return isTxOutdated;
+    });
+}, _IncomingTransactionHelper_isTransactionOutdated = function _IncomingTransactionHelper_isTransactionOutdated(remoteTx, localTx) {
+    const statusOutdated = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_isStatusOutdated).call(this, remoteTx.transactionHash, localTx.transactionHash, remoteTx.status, localTx.status);
+    const gasDataOutdated = __classPrivateFieldGet(this, _IncomingTransactionHelper_instances, "m", _IncomingTransactionHelper_isGasDataOutdated).call(this, remoteTx.transaction.gasUsed, localTx.transaction.gasUsed);
+    return statusOutdated || gasDataOutdated;
+}, _IncomingTransactionHelper_isStatusOutdated = function _IncomingTransactionHelper_isStatusOutdated(remoteTxHash, localTxHash, remoteTxStatus, localTxStatus) {
+    return remoteTxHash === localTxHash && remoteTxStatus !== localTxStatus;
+}, _IncomingTransactionHelper_isGasDataOutdated = function _IncomingTransactionHelper_isGasDataOutdated(remoteGasUsed, localGasUsed) {
+    return remoteGasUsed !== localGasUsed;
+};
+//# sourceMappingURL=IncomingTransactionHelper.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.js.map b/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.js.map
new file mode 100644
index 0000000..5d678a7
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/IncomingTransactionHelper.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"IncomingTransactionHelper.js","sourceRoot":"","sources":["../src/IncomingTransactionHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import type { NetworkState } from '@metamask/network-controller';\nimport { isSmartContractCode, query } from '@metamask/controller-utils';\nimport {\n  RemoteTransactionSource,\n  Transaction,\n  TransactionMeta,\n  TransactionStatus,\n} from './types';\n\nconst SUPPORTED_NETWORK_IDS = [\n  '1', // Mainnet\n  '5', // Goerli\n  '11155111', // Sepolia\n];\n\nexport class IncomingTransactionHelper {\n  #getNetworkState: () => NetworkState;\n\n  #getEthQuery: () => any;\n\n  #transactionLimit: number;\n\n  #remoteTransactionSource: RemoteTransactionSource;\n\n  constructor({\n    getNetworkState,\n    getEthQuery,\n    transactionLimit,\n    remoteTransactionSource,\n  }: {\n    getNetworkState: () => NetworkState;\n    getEthQuery: () => any;\n    transactionLimit: number;\n    remoteTransactionSource: RemoteTransactionSource;\n  }) {\n    this.#getNetworkState = getNetworkState;\n    this.#getEthQuery = getEthQuery;\n    this.#transactionLimit = transactionLimit;\n    this.#remoteTransactionSource = remoteTransactionSource;\n  }\n\n  async reconcile({\n    address,\n    localTransactions,\n    fromBlock,\n    apiKey,\n  }: {\n    address: string;\n    localTransactions: TransactionMeta[];\n    fromBlock?: string;\n    apiKey?: string;\n  }): Promise<{\n    updateRequired: boolean;\n    transactions: TransactionMeta[];\n    latestBlockNumber?: string;\n  }> {\n    const { providerConfig, network: currentNetworkId } =\n      this.#getNetworkState();\n    const { chainId: currentChainId, type: networkType } = providerConfig;\n\n    if (\n      currentNetworkId === null ||\n      !SUPPORTED_NETWORK_IDS.includes(currentNetworkId)\n    ) {\n      return { updateRequired: false, transactions: [] };\n    }\n\n    const remoteTransactions =\n      await this.#remoteTransactionSource.fetchTransactions({\n        address,\n        networkType,\n        limit: this.#transactionLimit,\n        currentChainId: currentChainId,\n        currentNetworkId: currentNetworkId,\n        fromBlock,\n        apiKey,\n      });\n\n    const [updateRequired, transactions] = this.#reconcileTransactions(\n      localTransactions,\n      remoteTransactions,\n    );\n\n    this.#sortTransactionsByTime(transactions);\n\n    const latestBlockNumber = this.#getLatestBlockNumber(\n      transactions,\n      address,\n      currentChainId,\n      currentNetworkId,\n    );\n\n    await this.#updateSmartContractProperty(transactions);\n\n    return { updateRequired, transactions, latestBlockNumber };\n  }\n\n  async #updateSmartContractProperty(transactions: TransactionMeta[]) {\n    await Promise.all(\n      transactions.map(async (tx) => {\n        tx.toSmartContract ??= await this.#isToSmartContract(tx.transaction);\n      }),\n    );\n  }\n\n  #getLatestBlockNumber(\n    transactions: TransactionMeta[],\n    address: string,\n    currentChainId: string,\n    currentNetworkId: string,\n  ): string | undefined {\n    let latestBlockNumber: string | undefined;\n\n    for (const tx of transactions) {\n      const onCurrentChain =\n        tx.chainId === currentChainId ||\n        (!tx.chainId && tx.networkID === currentNetworkId);\n\n      const toCurrentAccount =\n        tx.transaction.to?.toLowerCase() === address.toLowerCase();\n\n      const currentBlockNumberValue = tx.blockNumber\n        ? parseInt(tx.blockNumber, 10)\n        : -1;\n\n      const latestBlockNumberValue = latestBlockNumber\n        ? parseInt(latestBlockNumber, 10)\n        : -1;\n\n      if (\n        onCurrentChain &&\n        toCurrentAccount &&\n        latestBlockNumberValue < currentBlockNumberValue\n      ) {\n        latestBlockNumber = tx.blockNumber;\n      }\n    }\n\n    return latestBlockNumber;\n  }\n\n  async #isToSmartContract(transaction: Transaction): Promise<boolean> {\n    // Contract Deploy\n    if (!transaction.to) {\n      return false;\n    }\n\n    // Send\n    if (transaction.data === '0x') {\n      return false;\n    }\n\n    const ethQuery = this.#getEthQuery();\n    const code = await query(ethQuery, 'getCode', [transaction.to]);\n\n    return isSmartContractCode(code);\n  }\n\n  #sortTransactionsByTime(transactions: TransactionMeta[]) {\n    transactions.sort((a, b) => (a.time < b.time ? -1 : 1));\n  }\n\n  #reconcileTransactions(\n    localTxs: TransactionMeta[],\n    remoteTxs: TransactionMeta[],\n  ): [boolean, TransactionMeta[]] {\n    const updatedTxs: TransactionMeta[] = this.#getUpdatedTransactions(\n      remoteTxs,\n      localTxs,\n    );\n\n    const newTxs: TransactionMeta[] = this.#getNewTransactions(\n      remoteTxs,\n      localTxs,\n    );\n\n    const updatedLocalTxs = localTxs.map((tx: TransactionMeta) => {\n      const txIdx = updatedTxs.findIndex(\n        ({ transactionHash }) => transactionHash === tx.transactionHash,\n      );\n      return txIdx === -1 ? tx : updatedTxs[txIdx];\n    });\n\n    const updateRequired = newTxs.length > 0 || updatedTxs.length > 0;\n    const transactions = [...newTxs, ...updatedLocalTxs];\n\n    return [updateRequired, transactions];\n  }\n\n  #getNewTransactions(\n    remoteTxs: TransactionMeta[],\n    localTxs: TransactionMeta[],\n  ): TransactionMeta[] {\n    return remoteTxs.filter((tx) => {\n      const alreadyInTransactions = localTxs.find(\n        ({ transactionHash }) => transactionHash === tx.transactionHash,\n      );\n      return !alreadyInTransactions;\n    });\n  }\n\n  #getUpdatedTransactions(\n    remoteTxs: TransactionMeta[],\n    localTxs: TransactionMeta[],\n  ): TransactionMeta[] {\n    return remoteTxs.filter((remoteTx) => {\n      const isTxOutdated = localTxs.find((localTx) => {\n        return (\n          remoteTx.transactionHash === localTx.transactionHash &&\n          this.#isTransactionOutdated(remoteTx, localTx)\n        );\n      });\n      return isTxOutdated;\n    });\n  }\n\n  #isTransactionOutdated(\n    remoteTx: TransactionMeta,\n    localTx: TransactionMeta,\n  ): boolean {\n    const statusOutdated = this.#isStatusOutdated(\n      remoteTx.transactionHash,\n      localTx.transactionHash,\n      remoteTx.status,\n      localTx.status,\n    );\n\n    const gasDataOutdated = this.#isGasDataOutdated(\n      remoteTx.transaction.gasUsed,\n      localTx.transaction.gasUsed,\n    );\n\n    return statusOutdated || gasDataOutdated;\n  }\n\n  #isStatusOutdated(\n    remoteTxHash: string | undefined,\n    localTxHash: string | undefined,\n    remoteTxStatus: TransactionStatus,\n    localTxStatus: TransactionStatus,\n  ): boolean {\n    return remoteTxHash === localTxHash && remoteTxStatus !== localTxStatus;\n  }\n\n  #isGasDataOutdated(\n    remoteGasUsed: string | undefined,\n    localGasUsed: string | undefined,\n  ): boolean {\n    return remoteGasUsed !== localGasUsed;\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/TransactionController.d.ts b/node_modules/@metamask/transaction-controller/dist/TransactionController.d.ts
index 6d58813..8e97589 100644
--- a/node_modules/@metamask/transaction-controller/dist/TransactionController.d.ts
+++ b/node_modules/@metamask/transaction-controller/dist/TransactionController.d.ts
@@ -2,8 +2,10 @@
 import { EventEmitter } from 'events';
 import Common from '@ethereumjs/common';
 import { TypedTransaction } from '@ethereumjs/tx';
-import { BaseController, BaseConfig, BaseState } from '@metamask/base-controller';
+import { BaseController, BaseConfig, BaseState, RestrictedControllerMessenger } from '@metamask/base-controller';
 import type { NetworkState, NetworkController } from '@metamask/network-controller';
+import { AddApprovalRequest } from '@metamask/approval-controller';
+import { Transaction, TransactionMeta, WalletDevice } from './types';
 /**
  * @type Result
  * @property result - Promise resolving to a new transaction hash
@@ -22,35 +24,6 @@ export interface FetchAllOptions {
     fromBlock?: string;
     etherscanApiKey?: string;
 }
-/**
- * @type Transaction
- *
- * Transaction representation
- * @property chainId - Network ID as per EIP-155
- * @property data - Data to pass with this transaction
- * @property from - Address to send this transaction from
- * @property gas - Gas to send with this transaction
- * @property gasPrice - Price of gas with this transaction
- * @property gasUsed -  Gas used in the transaction
- * @property nonce - Unique number to prevent replay attacks
- * @property to - Address to send this transaction to
- * @property value - Value associated with this transaction
- */
-export interface Transaction {
-    chainId?: number;
-    data?: string;
-    from: string;
-    gas?: string;
-    gasPrice?: string;
-    gasUsed?: string;
-    nonce?: string;
-    to?: string;
-    value?: string;
-    maxFeePerGas?: string;
-    maxPriorityFeePerGas?: string;
-    estimatedBaseFee?: string;
-    estimateGasError?: string;
-}
 export interface GasPriceValue {
     gasPrice: string;
 }
@@ -58,115 +31,6 @@ export interface FeeMarketEIP1559Values {
     maxFeePerGas: string;
     maxPriorityFeePerGas: string;
 }
-/**
- * The status of the transaction. Each status represents the state of the transaction internally
- * in the wallet. Some of these correspond with the state of the transaction on the network, but
- * some are wallet-specific.
- */
-export declare enum TransactionStatus {
-    approved = "approved",
-    cancelled = "cancelled",
-    confirmed = "confirmed",
-    failed = "failed",
-    rejected = "rejected",
-    signed = "signed",
-    submitted = "submitted",
-    unapproved = "unapproved"
-}
-/**
- * Options for wallet device.
- */
-export declare enum WalletDevice {
-    MM_MOBILE = "metamask_mobile",
-    MM_EXTENSION = "metamask_extension",
-    OTHER = "other_device"
-}
-declare type TransactionMetaBase = {
-    isTransfer?: boolean;
-    transferInformation?: {
-        symbol: string;
-        contractAddress: string;
-        decimals: number;
-    };
-    id: string;
-    networkID?: string;
-    chainId?: string;
-    origin?: string;
-    rawTransaction?: string;
-    time: number;
-    toSmartContract?: boolean;
-    transaction: Transaction;
-    transactionHash?: string;
-    blockNumber?: string;
-    deviceConfirmedOn?: WalletDevice;
-    verifiedOnBlockchain?: boolean;
-};
-/**
- * @type TransactionMeta
- *
- * TransactionMeta representation
- * @property error - Synthesized error information for failed transactions
- * @property id - Generated UUID associated with this transaction
- * @property networkID - Network code as per EIP-155 for this transaction
- * @property origin - Origin this transaction was sent from
- * @property deviceConfirmedOn - string to indicate what device the transaction was confirmed
- * @property rawTransaction - Hex representation of the underlying transaction
- * @property status - String status of this transaction
- * @property time - Timestamp associated with this transaction
- * @property toSmartContract - Whether transaction recipient is a smart contract
- * @property transaction - Underlying Transaction object
- * @property transactionHash - Hash of a successful transaction
- * @property blockNumber - Number of the block where the transaction has been included
- */
-export declare type TransactionMeta = ({
-    status: Exclude<TransactionStatus, TransactionStatus.failed>;
-} & TransactionMetaBase) | ({
-    status: TransactionStatus.failed;
-    error: Error;
-} & TransactionMetaBase);
-/**
- * @type EtherscanTransactionMeta
- *
- * EtherscanTransactionMeta representation
- * @property blockNumber - Number of the block where the transaction has been included
- * @property timeStamp - Timestamp associated with this transaction
- * @property hash - Hash of a successful transaction
- * @property nonce - Nonce of the transaction
- * @property blockHash - Hash of the block where the transaction has been included
- * @property transactionIndex - Etherscan internal index for this transaction
- * @property from - Address to send this transaction from
- * @property to - Address to send this transaction to
- * @property gas - Gas to send with this transaction
- * @property gasPrice - Price of gas with this transaction
- * @property isError - Synthesized error information for failed transactions
- * @property txreceipt_status - Receipt status for this transaction
- * @property input - input of the transaction
- * @property contractAddress - Address of the contract
- * @property cumulativeGasUsed - Amount of gas used
- * @property confirmations - Number of confirmations
- */
-export interface EtherscanTransactionMeta {
-    blockNumber: string;
-    timeStamp: string;
-    hash: string;
-    nonce: string;
-    blockHash: string;
-    transactionIndex: string;
-    from: string;
-    to: string;
-    value: string;
-    gas: string;
-    gasPrice: string;
-    cumulativeGasUsed: string;
-    gasUsed: string;
-    isError: string;
-    txreceipt_status: string;
-    input: string;
-    contractAddress: string;
-    confirmations: string;
-    tokenDecimal: string;
-    tokenSymbol: string;
-}
 /**
  * @type TransactionConfig
  *
@@ -204,6 +68,18 @@ export interface TransactionState extends BaseState {
         [key: string]: MethodData;
     };
 }
+/**
+ * The name of the {@link TransactionController}.
+ */
+declare const controllerName = "TransactionController";
+/**
+ * The external actions available to the {@link TransactionController}.
+ */
+declare type AllowedActions = AddApprovalRequest;
+/**
+ * The messenger of the {@link TransactionController}.
+ */
+export declare type TransactionControllerMessenger = RestrictedControllerMessenger<typeof controllerName, AllowedActions, never, AllowedActions['type'], never>;
 /**
  * Multiplier used to determine a transaction's increased gas fee during cancellation
  */
@@ -221,19 +97,10 @@ export declare class TransactionController extends BaseController<TransactionCon
     private handle?;
     private mutex;
     private getNetworkState;
+    private messagingSystem;
+    private incomingTransactionHelper;
     private failTransaction;
     private registryLookup;
-    /**
-     * Normalizes the transaction information from etherscan
-     * to be compatible with the TransactionMeta interface.
-     *
-     * @param txMeta - The transaction.
-     * @param currentNetworkID - The current network ID.
-     * @param currentChainId - The current chain ID.
-     * @returns The normalized transaction.
-     */
-    private normalizeTx;
-    private normalizeTokenTx;
     /**
      * EventEmitter instance used to listen to specific transactional events
      */
@@ -253,13 +120,15 @@ export declare class TransactionController extends BaseController<TransactionCon
      * @param options.getNetworkState - Gets the state of the network controller.
      * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.
      * @param options.getProvider - Returns a provider for the current network.
+     * @param options.messenger - The controller messenger.
      * @param config - Initial options used to configure this controller.
      * @param state - Initial state to set on this controller.
      */
-    constructor({ getNetworkState, onNetworkStateChange, getProvider, }: {
+    constructor({ getNetworkState, onNetworkStateChange, getProvider, messenger, }: {
         getNetworkState: () => NetworkState;
         onNetworkStateChange: (listener: (state: NetworkState) => void) => void;
         getProvider: () => NetworkController['provider'];
+        messenger: TransactionControllerMessenger;
     }, config?: Partial<TransactionConfig>, state?: Partial<TransactionState>);
     /**
      * Starts a new polling interval.
@@ -296,22 +165,6 @@ export declare class TransactionController extends BaseController<TransactionCon
      * @returns {Common} common configuration object
      */
     getCommonConfiguration(): Common;
-    /**
-     * Approves a transaction and updates it's status in state. If this is not a
-     * retry transaction, a nonce will be generated. The transaction is signed
-     * using the sign configuration property, then published to the blockchain.
-     * A `<tx.id>:finished` hub event is fired after success or failure.
-     *
-     * @param transactionID - The ID of the transaction to approve.
-     */
-    approveTransaction(transactionID: string): Promise<void>;
-    /**
-     * Cancels a transaction based on its ID by setting its status to "rejected"
-     * and emitting a `<tx.id>:finished` hub event.
-     *
-     * @param transactionID - The ID of the transaction to cancel.
-     */
-    cancelTransaction(transactionID: string): void;
     /**
      * Attempts to cancel a transaction based on its ID by setting its status to "rejected"
      * and emitting a `<tx.id>:finished` hub event.
@@ -409,58 +262,33 @@ export declare class TransactionController extends BaseController<TransactionCon
      * @returns Whether the transaction has failed.
      */
     private checkTxReceiptStatusIsFailed;
+    private processApproval;
+    private requestApproval;
+    private getApprovalId;
     /**
-     * Method to verify the state of transactions using Etherscan as a source of truth.
-     *
-     * @param remoteTxs - Transactions to reconcile that are from a remote source.
-     * @param localTxs - Transactions to reconcile that are local.
-     * @returns A tuple containing a boolean indicating whether or not an update was required, and the updated transaction.
-     */
-    private etherscanTransactionStateReconciler;
-    /**
-     * Get all transactions that are in the remote transactions array
-     * but not in the local transactions array.
-     *
-     * @param remoteTxs - Array of transactions from remote source.
-     * @param localTxs - Array of transactions stored locally.
-     * @returns The new transactions.
-     */
-    private getNewTransactions;
-    /**
-     * Get all the transactions that are locally outdated with respect
-     * to a remote source (etherscan or blockchain). The returned array
-     * contains the transactions with the updated data.
-     *
-     * @param remoteTxs - Array of transactions from remote source.
-     * @param localTxs - Array of transactions stored locally.
-     * @returns The updated transactions.
-     */
-    private getUpdatedTransactions;
-    /**
-     * Verifies if a local transaction is outdated with respect to the remote transaction.
+     * Approves a transaction and updates it's status in state. If this is not a
+     * retry transaction, a nonce will be generated. The transaction is signed
+     * using the sign configuration property, then published to the blockchain.
+     * A `<tx.id>:finished` hub event is fired after success or failure.
      *
-     * @param remoteTx - The remote transaction from Etherscan.
-     * @param localTx - The local transaction.
-     * @returns Whether the transaction is outdated.
+     * @param transactionID - The ID of the transaction to approve.
      */
-    private isTransactionOutdated;
+    private approveTransaction;
     /**
-     * Verifies if the status of a local transaction is outdated with respect to the remote transaction.
+     * Cancels a transaction based on its ID by setting its status to "rejected"
+     * and emitting a `<tx.id>:finished` hub event.
      *
-     * @param remoteTxHash - Remote transaction hash.
-     * @param localTxHash - Local transaction hash.
-     * @param remoteTxStatus - Remote transaction status.
-     * @param localTxStatus - Local transaction status.
-     * @returns Whether the status is outdated.
+     * @param transactionID - The ID of the transaction to cancel.
      */
-    private isStatusOutdated;
+    private cancelTransaction;
     /**
-     * Verifies if the gas data of a local transaction is outdated with respect to the remote transaction.
+     * Whether the transaction has at least completed all local processing.
      *
-     * @param remoteGasUsed - Remote gas used in the transaction.
-     * @param localGasUsed - Local gas used in the transaction.
-     * @returns Whether the gas data is outdated.
+     * @param status - The transaction status.
+     * @returns Whether the transaction is in a final state.
      */
-    private isGasDataOutdated;
+    private isLocalFinalState;
+    private getTransaction;
+    private isTransactionCompleted;
 }
 export default TransactionController;
diff --git a/node_modules/@metamask/transaction-controller/dist/TransactionController.js b/node_modules/@metamask/transaction-controller/dist/TransactionController.js
index 31a22b6..61c5ef2 100644
--- a/node_modules/@metamask/transaction-controller/dist/TransactionController.js
+++ b/node_modules/@metamask/transaction-controller/dist/TransactionController.js
@@ -12,7 +12,7 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.TransactionController = exports.SPEED_UP_RATE = exports.CANCEL_RATE = exports.WalletDevice = exports.TransactionStatus = void 0;
+exports.TransactionController = exports.SPEED_UP_RATE = exports.CANCEL_RATE = void 0;
 const events_1 = require("events");
 const ethereumjs_util_1 = require("ethereumjs-util");
 const eth_rpc_errors_1 = require("eth-rpc-errors");
@@ -25,32 +25,14 @@ const async_mutex_1 = require("async-mutex");
 const base_controller_1 = require("@metamask/base-controller");
 const controller_utils_1 = require("@metamask/controller-utils");
 const utils_1 = require("./utils");
+const IncomingTransactionHelper_1 = require("./IncomingTransactionHelper");
+const EtherscanRemoteTransactionSource_1 = require("./EtherscanRemoteTransactionSource");
+const types_1 = require("./types");
 const HARDFORK = 'london';
 /**
- * The status of the transaction. Each status represents the state of the transaction internally
- * in the wallet. Some of these correspond with the state of the transaction on the network, but
- * some are wallet-specific.
+ * The name of the {@link TransactionController}.
  */
-var TransactionStatus;
-(function (TransactionStatus) {
-    TransactionStatus["approved"] = "approved";
-    TransactionStatus["cancelled"] = "cancelled";
-    TransactionStatus["confirmed"] = "confirmed";
-    TransactionStatus["failed"] = "failed";
-    TransactionStatus["rejected"] = "rejected";
-    TransactionStatus["signed"] = "signed";
-    TransactionStatus["submitted"] = "submitted";
-    TransactionStatus["unapproved"] = "unapproved";
-})(TransactionStatus = exports.TransactionStatus || (exports.TransactionStatus = {}));
-/**
- * Options for wallet device.
- */
-var WalletDevice;
-(function (WalletDevice) {
-    WalletDevice["MM_MOBILE"] = "metamask_mobile";
-    WalletDevice["MM_EXTENSION"] = "metamask_extension";
-    WalletDevice["OTHER"] = "other_device";
-})(WalletDevice = exports.WalletDevice || (exports.WalletDevice = {}));
+const controllerName = 'TransactionController';
 /**
  * Multiplier used to determine a transaction's increased gas fee during cancellation
  */
@@ -70,40 +52,13 @@ class TransactionController extends base_controller_1.BaseController {
      * @param options.getNetworkState - Gets the state of the network controller.
      * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.
      * @param options.getProvider - Returns a provider for the current network.
+     * @param options.messenger - The controller messenger.
      * @param config - Initial options used to configure this controller.
      * @param state - Initial state to set on this controller.
      */
-    constructor({ getNetworkState, onNetworkStateChange, getProvider, }, config, state) {
+    constructor({ getNetworkState, onNetworkStateChange, getProvider, messenger, }, config, state) {
         super(config, state);
         this.mutex = new async_mutex_1.Mutex();
-        this.normalizeTokenTx = (txMeta, currentNetworkID, currentChainId) => {
-            const time = parseInt(txMeta.timeStamp, 10) * 1000;
-            const { to, from, gas, gasPrice, gasUsed, hash, contractAddress, tokenDecimal, tokenSymbol, value, } = txMeta;
-            return {
-                id: (0, uuid_1.v1)({ msecs: time }),
-                isTransfer: true,
-                networkID: currentNetworkID,
-                chainId: currentChainId,
-                status: TransactionStatus.confirmed,
-                time,
-                transaction: {
-                    chainId: 1,
-                    from,
-                    gas,
-                    gasPrice,
-                    gasUsed,
-                    to,
-                    value,
-                },
-                transactionHash: hash,
-                transferInformation: {
-                    contractAddress,
-                    decimals: Number(tokenDecimal),
-                    symbol: tokenSymbol,
-                },
-                verifiedOnBlockchain: false,
-            };
-        };
         /**
          * EventEmitter instance used to listen to specific transactional events
          */
@@ -125,6 +80,13 @@ class TransactionController extends base_controller_1.BaseController {
         this.getNetworkState = getNetworkState;
         this.ethQuery = new eth_query_1.default(provider);
         this.registry = new eth_method_registry_1.default({ provider });
+        this.messagingSystem = messenger;
+        this.incomingTransactionHelper = new IncomingTransactionHelper_1.IncomingTransactionHelper({
+            getNetworkState,
+            getEthQuery: () => this.ethQuery,
+            transactionLimit: this.config.txHistoryLimit,
+            remoteTransactionSource: new EtherscanRemoteTransactionSource_1.EtherscanRemoteTransactionSource(),
+        });
         onNetworkStateChange(() => {
             const newProvider = getProvider();
             this.ethQuery = new eth_query_1.default(newProvider);
@@ -133,7 +95,7 @@ class TransactionController extends base_controller_1.BaseController {
         this.poll();
     }
     failTransaction(transactionMeta, error) {
-        const newTransactionMeta = Object.assign(Object.assign({}, transactionMeta), { error, status: TransactionStatus.failed });
+        const newTransactionMeta = Object.assign(Object.assign({}, transactionMeta), { error, status: types_1.TransactionStatus.failed });
         this.updateTransaction(newTransactionMeta);
         this.hub.emit(`${transactionMeta.id}:finished`, newTransactionMeta);
     }
@@ -144,43 +106,6 @@ class TransactionController extends base_controller_1.BaseController {
             return { registryMethod, parsedRegistryMethod };
         });
     }
-    /**
-     * Normalizes the transaction information from etherscan
-     * to be compatible with the TransactionMeta interface.
-     *
-     * @param txMeta - The transaction.
-     * @param currentNetworkID - The current network ID.
-     * @param currentChainId - The current chain ID.
-     * @returns The normalized transaction.
-     */
-    normalizeTx(txMeta, currentNetworkID, currentChainId) {
-        const time = parseInt(txMeta.timeStamp, 10) * 1000;
-        const normalizedTransactionBase = {
-            blockNumber: txMeta.blockNumber,
-            id: (0, uuid_1.v1)({ msecs: time }),
-            networkID: currentNetworkID,
-            chainId: currentChainId,
-            time,
-            transaction: {
-                data: txMeta.input,
-                from: txMeta.from,
-                gas: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.gas)),
-                gasPrice: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.gasPrice)),
-                gasUsed: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.gasUsed)),
-                nonce: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.nonce)),
-                to: txMeta.to,
-                value: (0, controller_utils_1.BNToHex)(new ethereumjs_util_1.BN(txMeta.value)),
-            },
-            transactionHash: txMeta.hash,
-            verifiedOnBlockchain: false,
-        };
-        /* istanbul ignore else */
-        if (txMeta.isError === '0') {
-            return Object.assign(Object.assign({}, normalizedTransactionBase), { status: TransactionStatus.confirmed });
-        }
-        /* istanbul ignore next */
-        return Object.assign(Object.assign({}, normalizedTransactionBase), { error: new Error('Transaction failed'), status: TransactionStatus.failed });
-    }
     /**
      * Starts a new polling interval.
      *
@@ -243,7 +168,7 @@ class TransactionController extends base_controller_1.BaseController {
                 networkID: network,
                 chainId: providerConfig.chainId,
                 origin,
-                status: TransactionStatus.unapproved,
+                status: types_1.TransactionStatus.unapproved,
                 time: Date.now(),
                 transaction,
                 deviceConfirmedOn,
@@ -258,27 +183,13 @@ class TransactionController extends base_controller_1.BaseController {
                 this.failTransaction(transactionMeta, error);
                 return Promise.reject(error);
             }
-            const result = new Promise((resolve, reject) => {
-                this.hub.once(`${transactionMeta.id}:finished`, (meta) => {
-                    switch (meta.status) {
-                        case TransactionStatus.submitted:
-                            return resolve(meta.transactionHash);
-                        case TransactionStatus.rejected:
-                            return reject(eth_rpc_errors_1.ethErrors.provider.userRejectedRequest('User rejected the transaction'));
-                        case TransactionStatus.cancelled:
-                            return reject(eth_rpc_errors_1.ethErrors.rpc.internal('User cancelled the transaction'));
-                        case TransactionStatus.failed:
-                            return reject(eth_rpc_errors_1.ethErrors.rpc.internal(meta.error.message));
-                        /* istanbul ignore next */
-                        default:
-                            return reject(eth_rpc_errors_1.ethErrors.rpc.internal(`MetaMask Tx Signature: Unknown problem: ${JSON.stringify(meta)}`));
-                    }
-                });
-            });
             transactions.push(transactionMeta);
             this.update({ transactions: this.trimTransactionsForState(transactions) });
             this.hub.emit(`unapprovedTransaction`, transactionMeta);
-            return { result, transactionMeta };
+            return {
+                result: this.processApproval(transactionMeta),
+                transactionMeta,
+            };
         });
     }
     prepareUnsignedEthTx(txParams) {
@@ -298,7 +209,9 @@ class TransactionController extends base_controller_1.BaseController {
      */
     getCommonConfiguration() {
         const { network: networkId, providerConfig: { type: chain, chainId, nickname: name }, } = this.getNetworkState();
-        if (chain !== controller_utils_1.RPC) {
+        if (chain !== controller_utils_1.RPC &&
+            chain !== 'linea-goerli' &&
+            chain !== 'linea-mainnet') {
             return new common_1.default({ chain, hardfork: HARDFORK });
         }
         const customChainParams = {
@@ -308,91 +221,6 @@ class TransactionController extends base_controller_1.BaseController {
         };
         return common_1.default.forCustomChain(controller_utils_1.MAINNET, customChainParams, HARDFORK);
     }
-    /**
-     * Approves a transaction and updates it's status in state. If this is not a
-     * retry transaction, a nonce will be generated. The transaction is signed
-     * using the sign configuration property, then published to the blockchain.
-     * A `<tx.id>:finished` hub event is fired after success or failure.
-     *
-     * @param transactionID - The ID of the transaction to approve.
-     */
-    approveTransaction(transactionID) {
-        return __awaiter(this, void 0, void 0, function* () {
-            const { transactions } = this.state;
-            const releaseLock = yield this.mutex.acquire();
-            const { providerConfig } = this.getNetworkState();
-            const { chainId: currentChainId } = providerConfig;
-            const index = transactions.findIndex(({ id }) => transactionID === id);
-            const transactionMeta = transactions[index];
-            const { nonce } = transactionMeta.transaction;
-            try {
-                const { from } = transactionMeta.transaction;
-                if (!this.sign) {
-                    releaseLock();
-                    this.failTransaction(transactionMeta, new Error('No sign method defined.'));
-                    return;
-                }
-                else if (!currentChainId) {
-                    releaseLock();
-                    this.failTransaction(transactionMeta, new Error('No chainId defined.'));
-                    return;
-                }
-                const chainId = parseInt(currentChainId, undefined);
-                const { approved: status } = TransactionStatus;
-                const txNonce = nonce ||
-                    (yield (0, controller_utils_1.query)(this.ethQuery, 'getTransactionCount', [from, 'pending']));
-                transactionMeta.status = status;
-                transactionMeta.transaction.nonce = txNonce;
-                transactionMeta.transaction.chainId = chainId;
-                const baseTxParams = Object.assign(Object.assign({}, transactionMeta.transaction), { gasLimit: transactionMeta.transaction.gas, chainId, nonce: txNonce, status });
-                const isEIP1559 = (0, utils_1.isEIP1559Transaction)(transactionMeta.transaction);
-                const txParams = isEIP1559
-                    ? Object.assign(Object.assign({}, baseTxParams), { maxFeePerGas: transactionMeta.transaction.maxFeePerGas, maxPriorityFeePerGas: transactionMeta.transaction.maxPriorityFeePerGas, estimatedBaseFee: transactionMeta.transaction.estimatedBaseFee, 
-                        // specify type 2 if maxFeePerGas and maxPriorityFeePerGas are set
-                        type: 2 }) : baseTxParams;
-                // delete gasPrice if maxFeePerGas and maxPriorityFeePerGas are set
-                if (isEIP1559) {
-                    delete txParams.gasPrice;
-                }
-                const unsignedEthTx = this.prepareUnsignedEthTx(txParams);
-                const signedTx = yield this.sign(unsignedEthTx, from);
-                transactionMeta.status = TransactionStatus.signed;
-                this.updateTransaction(transactionMeta);
-                const rawTransaction = (0, ethereumjs_util_1.bufferToHex)(signedTx.serialize());
-                transactionMeta.rawTransaction = rawTransaction;
-                this.updateTransaction(transactionMeta);
-                const transactionHash = yield (0, controller_utils_1.query)(this.ethQuery, 'sendRawTransaction', [
-                    rawTransaction,
-                ]);
-                transactionMeta.transactionHash = transactionHash;
-                transactionMeta.status = TransactionStatus.submitted;
-                this.updateTransaction(transactionMeta);
-                this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);
-            }
-            catch (error) {
-                this.failTransaction(transactionMeta, error);
-            }
-            finally {
-                releaseLock();
-            }
-        });
-    }
-    /**
-     * Cancels a transaction based on its ID by setting its status to "rejected"
-     * and emitting a `<tx.id>:finished` hub event.
-     *
-     * @param transactionID - The ID of the transaction to cancel.
-     */
-    cancelTransaction(transactionID) {
-        const transactionMeta = this.state.transactions.find(({ id }) => id === transactionID);
-        if (!transactionMeta) {
-            return;
-        }
-        transactionMeta.status = TransactionStatus.rejected;
-        this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);
-        const transactions = this.state.transactions.filter(({ id }) => id !== transactionID);
-        this.update({ transactions: this.trimTransactionsForState(transactions) });
-    }
     /**
      * Attempts to cancel a transaction based on its ID by setting its status to "rejected"
      * and emitting a `<tx.id>:finished` hub event.
@@ -456,7 +284,7 @@ class TransactionController extends base_controller_1.BaseController {
             const signedTx = yield this.sign(unsignedEthTx, transactionMeta.transaction.from);
             const rawTransaction = (0, ethereumjs_util_1.bufferToHex)(signedTx.serialize());
             yield (0, controller_utils_1.query)(this.ethQuery, 'sendRawTransaction', [rawTransaction]);
-            transactionMeta.status = TransactionStatus.cancelled;
+            transactionMeta.status = types_1.TransactionStatus.cancelled;
             this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);
         });
     }
@@ -667,56 +495,19 @@ class TransactionController extends base_controller_1.BaseController {
      */
     fetchAll(address, opt) {
         return __awaiter(this, void 0, void 0, function* () {
-            const { providerConfig, network: currentNetworkID } = this.getNetworkState();
-            const { chainId: currentChainId, type: networkType } = providerConfig;
-            const { transactions } = this.state;
-            const supportedNetworkIds = ['1', '5', '11155111'];
-            /* istanbul ignore next */
-            if (supportedNetworkIds.indexOf(currentNetworkID) === -1) {
-                return undefined;
-            }
-            const [etherscanTxResponse, etherscanTokenResponse] = yield (0, utils_1.handleTransactionFetch)(networkType, address, this.config.txHistoryLimit, opt);
-            const normalizedTxs = etherscanTxResponse.result.map((tx) => this.normalizeTx(tx, currentNetworkID, currentChainId));
-            const normalizedTokenTxs = etherscanTokenResponse.result.map((tx) => this.normalizeTokenTx(tx, currentNetworkID, currentChainId));
-            const [updateRequired, allTxs] = this.etherscanTransactionStateReconciler([...normalizedTxs, ...normalizedTokenTxs], transactions);
-            allTxs.sort((a, b) => (a.time < b.time ? -1 : 1));
-            let latestIncomingTxBlockNumber;
-            allTxs.forEach((tx) => __awaiter(this, void 0, void 0, function* () {
-                /* istanbul ignore next */
-                if (
-                // Using fallback to networkID only when there is no chainId present. Should be removed when networkID is completely removed.
-                (tx.chainId === currentChainId ||
-                    (!tx.chainId && tx.networkID === currentNetworkID)) &&
-                    tx.transaction.to &&
-                    tx.transaction.to.toLowerCase() === address.toLowerCase()) {
-                    if (tx.blockNumber &&
-                        (!latestIncomingTxBlockNumber ||
-                            parseInt(latestIncomingTxBlockNumber, 10) <
-                                parseInt(tx.blockNumber, 10))) {
-                        latestIncomingTxBlockNumber = tx.blockNumber;
-                    }
-                }
-                /* istanbul ignore else */
-                if (tx.toSmartContract === undefined) {
-                    // If not `to` is a contract deploy, if not `data` is send eth
-                    if (tx.transaction.to &&
-                        (!tx.transaction.data || tx.transaction.data !== '0x')) {
-                        const code = yield (0, controller_utils_1.query)(this.ethQuery, 'getCode', [
-                            tx.transaction.to,
-                        ]);
-                        tx.toSmartContract = (0, controller_utils_1.isSmartContractCode)(code);
-                    }
-                    else {
-                        tx.toSmartContract = false;
-                    }
-                }
-            }));
-            // Update state only if new transactions were fetched or
-            // the status or gas data of a transaction has changed
+            const { transactions: localTransactions } = this.state;
+            const { updateRequired, transactions, latestBlockNumber } = yield this.incomingTransactionHelper.reconcile({
+                address,
+                localTransactions,
+                fromBlock: opt === null || opt === void 0 ? void 0 : opt.fromBlock,
+                apiKey: opt === null || opt === void 0 ? void 0 : opt.etherscanApiKey,
+            });
             if (updateRequired) {
-                this.update({ transactions: this.trimTransactionsForState(allTxs) });
+                this.update({
+                    transactions: this.trimTransactionsForState(transactions),
+                });
             }
-            return latestIncomingTxBlockNumber;
+            return latestBlockNumber;
         });
     }
     /**
@@ -760,10 +551,10 @@ class TransactionController extends base_controller_1.BaseController {
      * @returns Whether the transaction is in a final state.
      */
     isFinalState(status) {
-        return (status === TransactionStatus.rejected ||
-            status === TransactionStatus.confirmed ||
-            status === TransactionStatus.failed ||
-            status === TransactionStatus.cancelled);
+        return (status === types_1.TransactionStatus.rejected ||
+            status === types_1.TransactionStatus.confirmed ||
+            status === types_1.TransactionStatus.failed ||
+            status === types_1.TransactionStatus.cancelled);
     }
     /**
      * Method to verify the state of a transaction using the Blockchain as a source of truth.
@@ -775,7 +566,7 @@ class TransactionController extends base_controller_1.BaseController {
         return __awaiter(this, void 0, void 0, function* () {
             const { status, transactionHash } = meta;
             switch (status) {
-                case TransactionStatus.confirmed:
+                case types_1.TransactionStatus.confirmed:
                     const txReceipt = yield (0, controller_utils_1.query)(this.ethQuery, 'getTransactionReceipt', [
                         transactionHash,
                     ]);
@@ -792,7 +583,7 @@ class TransactionController extends base_controller_1.BaseController {
                         return [meta, false];
                     }
                     return [meta, true];
-                case TransactionStatus.submitted:
+                case types_1.TransactionStatus.submitted:
                     const txObj = yield (0, controller_utils_1.query)(this.ethQuery, 'getTransactionByHash', [
                         transactionHash,
                     ]);
@@ -807,7 +598,7 @@ class TransactionController extends base_controller_1.BaseController {
                     }
                     /* istanbul ignore next */
                     if (txObj === null || txObj === void 0 ? void 0 : txObj.blockNumber) {
-                        meta.status = TransactionStatus.confirmed;
+                        meta.status = types_1.TransactionStatus.confirmed;
                         this.hub.emit(`${meta.id}:confirmed`, meta);
                         return [meta, true];
                     }
@@ -838,88 +629,178 @@ class TransactionController extends base_controller_1.BaseController {
             return Number(txReceipt.status) === 0;
         });
     }
-    /**
-     * Method to verify the state of transactions using Etherscan as a source of truth.
-     *
-     * @param remoteTxs - Transactions to reconcile that are from a remote source.
-     * @param localTxs - Transactions to reconcile that are local.
-     * @returns A tuple containing a boolean indicating whether or not an update was required, and the updated transaction.
-     */
-    etherscanTransactionStateReconciler(remoteTxs, localTxs) {
-        const updatedTxs = this.getUpdatedTransactions(remoteTxs, localTxs);
-        const newTxs = this.getNewTransactions(remoteTxs, localTxs);
-        const updatedLocalTxs = localTxs.map((tx) => {
-            const txIdx = updatedTxs.findIndex(({ transactionHash }) => transactionHash === tx.transactionHash);
-            return txIdx === -1 ? tx : updatedTxs[txIdx];
+    processApproval(transactionMeta) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const transactionId = transactionMeta.id;
+            let resultCallbacks;
+            try {
+                const acceptResult = yield this.requestApproval(transactionMeta);
+                resultCallbacks = acceptResult.resultCallbacks;
+                const { meta, isCompleted } = this.isTransactionCompleted(transactionId);
+                if (meta && !isCompleted) {
+                    yield this.approveTransaction(transactionId);
+                }
+            }
+            catch (error) {
+                const { meta, isCompleted } = this.isTransactionCompleted(transactionId);
+                if (meta && !isCompleted) {
+                    if (error.code === eth_rpc_errors_1.errorCodes.provider.userRejectedRequest) {
+                        this.cancelTransaction(transactionId);
+                        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest('User rejected the transaction');
+                    }
+                    else {
+                        this.failTransaction(meta, error);
+                    }
+                }
+            }
+            const finalMeta = this.getTransaction(transactionId);
+            switch (finalMeta === null || finalMeta === void 0 ? void 0 : finalMeta.status) {
+                case types_1.TransactionStatus.failed:
+                    resultCallbacks === null || resultCallbacks === void 0 ? void 0 : resultCallbacks.error(finalMeta.error);
+                    throw eth_rpc_errors_1.ethErrors.rpc.internal(finalMeta.error.message);
+                case types_1.TransactionStatus.cancelled:
+                    const cancelError = eth_rpc_errors_1.ethErrors.rpc.internal('User cancelled the transaction');
+                    resultCallbacks === null || resultCallbacks === void 0 ? void 0 : resultCallbacks.error(cancelError);
+                    throw cancelError;
+                case types_1.TransactionStatus.submitted:
+                    resultCallbacks === null || resultCallbacks === void 0 ? void 0 : resultCallbacks.success();
+                    return finalMeta.transactionHash;
+                default:
+                    const internalError = eth_rpc_errors_1.ethErrors.rpc.internal(`MetaMask Tx Signature: Unknown problem: ${JSON.stringify(finalMeta || transactionId)}`);
+                    resultCallbacks === null || resultCallbacks === void 0 ? void 0 : resultCallbacks.error(internalError);
+                    throw internalError;
+            }
         });
-        const updateRequired = newTxs.length > 0 || updatedLocalTxs.length > 0;
-        return [updateRequired, [...newTxs, ...updatedLocalTxs]];
     }
-    /**
-     * Get all transactions that are in the remote transactions array
-     * but not in the local transactions array.
-     *
-     * @param remoteTxs - Array of transactions from remote source.
-     * @param localTxs - Array of transactions stored locally.
-     * @returns The new transactions.
-     */
-    getNewTransactions(remoteTxs, localTxs) {
-        return remoteTxs.filter((tx) => {
-            const alreadyInTransactions = localTxs.find(({ transactionHash }) => transactionHash === tx.transactionHash);
-            return !alreadyInTransactions;
+    requestApproval(txMeta) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const id = this.getApprovalId(txMeta);
+            const { origin } = txMeta;
+            const type = 'transaction';
+            const requestData = { txId: txMeta.id };
+            return this.messagingSystem.call('ApprovalController:addRequest', {
+                id,
+                origin: origin || 'metamask',
+                type,
+                requestData,
+                expectsResult: true,
+            }, true);
         });
     }
+    getApprovalId(txMeta) {
+        return String(txMeta.id);
+    }
     /**
-     * Get all the transactions that are locally outdated with respect
-     * to a remote source (etherscan or blockchain). The returned array
-     * contains the transactions with the updated data.
+     * Approves a transaction and updates it's status in state. If this is not a
+     * retry transaction, a nonce will be generated. The transaction is signed
+     * using the sign configuration property, then published to the blockchain.
+     * A `<tx.id>:finished` hub event is fired after success or failure.
      *
-     * @param remoteTxs - Array of transactions from remote source.
-     * @param localTxs - Array of transactions stored locally.
-     * @returns The updated transactions.
+     * @param transactionID - The ID of the transaction to approve.
      */
-    getUpdatedTransactions(remoteTxs, localTxs) {
-        return remoteTxs.filter((remoteTx) => {
-            const isTxOutdated = localTxs.find((localTx) => {
-                return (remoteTx.transactionHash === localTx.transactionHash &&
-                    this.isTransactionOutdated(remoteTx, localTx));
-            });
-            return isTxOutdated;
+    approveTransaction(transactionID) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const { transactions } = this.state;
+            const releaseLock = yield this.mutex.acquire();
+            const { providerConfig } = this.getNetworkState();
+            const { chainId: currentChainId } = providerConfig;
+            const index = transactions.findIndex(({ id }) => transactionID === id);
+            const transactionMeta = transactions[index];
+            const { nonce } = transactionMeta.transaction;
+            try {
+                const { from } = transactionMeta.transaction;
+                if (!this.sign) {
+                    releaseLock();
+                    this.failTransaction(transactionMeta, new Error('No sign method defined.'));
+                    return;
+                }
+                else if (!currentChainId) {
+                    releaseLock();
+                    this.failTransaction(transactionMeta, new Error('No chainId defined.'));
+                    return;
+                }
+                const chainId = parseInt(currentChainId, undefined);
+                const { approved: status } = types_1.TransactionStatus;
+                const txNonce = nonce ||
+                    (yield (0, controller_utils_1.query)(this.ethQuery, 'getTransactionCount', [from, 'pending']));
+                transactionMeta.status = status;
+                transactionMeta.transaction.nonce = txNonce;
+                transactionMeta.transaction.chainId = chainId;
+                const baseTxParams = Object.assign(Object.assign({}, transactionMeta.transaction), { gasLimit: transactionMeta.transaction.gas, chainId, nonce: txNonce, status });
+                const isEIP1559 = (0, utils_1.isEIP1559Transaction)(transactionMeta.transaction);
+                const txParams = isEIP1559
+                    ? Object.assign(Object.assign({}, baseTxParams), { maxFeePerGas: transactionMeta.transaction.maxFeePerGas, maxPriorityFeePerGas: transactionMeta.transaction.maxPriorityFeePerGas, estimatedBaseFee: transactionMeta.transaction.estimatedBaseFee, 
+                        // specify type 2 if maxFeePerGas and maxPriorityFeePerGas are set
+                        type: 2 }) : baseTxParams;
+                // delete gasPrice if maxFeePerGas and maxPriorityFeePerGas are set
+                if (isEIP1559) {
+                    delete txParams.gasPrice;
+                }
+                const unsignedEthTx = this.prepareUnsignedEthTx(txParams);
+                const signedTx = yield this.sign(unsignedEthTx, from);
+                transactionMeta.status = types_1.TransactionStatus.signed;
+                this.updateTransaction(transactionMeta);
+                const rawTransaction = (0, ethereumjs_util_1.bufferToHex)(signedTx.serialize());
+                transactionMeta.rawTransaction = rawTransaction;
+                this.updateTransaction(transactionMeta);
+                const transactionHash = yield (0, controller_utils_1.query)(this.ethQuery, 'sendRawTransaction', [
+                    rawTransaction,
+                ]);
+                transactionMeta.transactionHash = transactionHash;
+                transactionMeta.status = types_1.TransactionStatus.submitted;
+                this.updateTransaction(transactionMeta);
+                this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);
+            }
+            catch (error) {
+                this.failTransaction(transactionMeta, error);
+            }
+            finally {
+                releaseLock();
+            }
         });
     }
     /**
-     * Verifies if a local transaction is outdated with respect to the remote transaction.
+     * Cancels a transaction based on its ID by setting its status to "rejected"
+     * and emitting a `<tx.id>:finished` hub event.
      *
-     * @param remoteTx - The remote transaction from Etherscan.
-     * @param localTx - The local transaction.
-     * @returns Whether the transaction is outdated.
+     * @param transactionID - The ID of the transaction to cancel.
      */
-    isTransactionOutdated(remoteTx, localTx) {
-        const statusOutdated = this.isStatusOutdated(remoteTx.transactionHash, localTx.transactionHash, remoteTx.status, localTx.status);
-        const gasDataOutdated = this.isGasDataOutdated(remoteTx.transaction.gasUsed, localTx.transaction.gasUsed);
-        return statusOutdated || gasDataOutdated;
+    cancelTransaction(transactionID) {
+        const transactionMeta = this.state.transactions.find(({ id }) => id === transactionID);
+        if (!transactionMeta) {
+            return;
+        }
+        transactionMeta.status = types_1.TransactionStatus.rejected;
+        this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);
+        const transactions = this.state.transactions.filter(({ id }) => id !== transactionID);
+        this.update({ transactions: this.trimTransactionsForState(transactions) });
     }
     /**
-     * Verifies if the status of a local transaction is outdated with respect to the remote transaction.
+     * Whether the transaction has at least completed all local processing.
      *
-     * @param remoteTxHash - Remote transaction hash.
-     * @param localTxHash - Local transaction hash.
-     * @param remoteTxStatus - Remote transaction status.
-     * @param localTxStatus - Local transaction status.
-     * @returns Whether the status is outdated.
+     * @param status - The transaction status.
+     * @returns Whether the transaction is in a final state.
      */
-    isStatusOutdated(remoteTxHash, localTxHash, remoteTxStatus, localTxStatus) {
-        return remoteTxHash === localTxHash && remoteTxStatus !== localTxStatus;
+    isLocalFinalState(status) {
+        return [
+            types_1.TransactionStatus.cancelled,
+            types_1.TransactionStatus.confirmed,
+            types_1.TransactionStatus.failed,
+            types_1.TransactionStatus.rejected,
+            types_1.TransactionStatus.submitted,
+        ].includes(status);
     }
-    /**
-     * Verifies if the gas data of a local transaction is outdated with respect to the remote transaction.
-     *
-     * @param remoteGasUsed - Remote gas used in the transaction.
-     * @param localGasUsed - Local gas used in the transaction.
-     * @returns Whether the gas data is outdated.
-     */
-    isGasDataOutdated(remoteGasUsed, localGasUsed) {
-        return remoteGasUsed !== localGasUsed;
+    getTransaction(transactionID) {
+        const { transactions } = this.state;
+        return transactions.find(({ id }) => id === transactionID);
+    }
+    isTransactionCompleted(transactionid) {
+        const transaction = this.getTransaction(transactionid);
+        if (!transaction) {
+            return { meta: undefined, isCompleted: false };
+        }
+        const isCompleted = this.isLocalFinalState(transaction.status);
+        return { meta: transaction, isCompleted };
     }
 }
 exports.TransactionController = TransactionController;
diff --git a/node_modules/@metamask/transaction-controller/dist/TransactionController.js.map b/node_modules/@metamask/transaction-controller/dist/TransactionController.js.map
index 9c3e205..e8274f1 100644
--- a/node_modules/@metamask/transaction-controller/dist/TransactionController.js.map
+++ b/node_modules/@metamask/transaction-controller/dist/TransactionController.js.map
@@ -1 +1 @@
-{"version":3,"file":"TransactionController.js","sourceRoot":"","sources":["../src/TransactionController.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\nimport { addHexPrefix, bufferToHex, BN } from 'ethereumjs-util';\nimport { ethErrors } from 'eth-rpc-errors';\nimport MethodRegistry from 'eth-method-registry';\nimport EthQuery from 'eth-query';\nimport Common from '@ethereumjs/common';\nimport { TransactionFactory, TypedTransaction } from '@ethereumjs/tx';\nimport { v1 as random } from 'uuid';\nimport { Mutex } from 'async-mutex';\nimport {\n  BaseController,\n  BaseConfig,\n  BaseState,\n} from '@metamask/base-controller';\nimport type {\n  NetworkState,\n  NetworkController,\n} from '@metamask/network-controller';\nimport {\n  BNToHex,\n  fractionBN,\n  hexToBN,\n  safelyExecute,\n  isSmartContractCode,\n  query,\n  MAINNET,\n  RPC,\n} from '@metamask/controller-utils';\nimport {\n  normalizeTransaction,\n  validateTransaction,\n  handleTransactionFetch,\n  getIncreasedPriceFromExisting,\n  isEIP1559Transaction,\n  isGasPriceValue,\n  isFeeMarketEIP1559Values,\n  validateGasValues,\n  validateMinimumIncrease,\n  ESTIMATE_GAS_ERROR,\n} from './utils';\n\nconst HARDFORK = 'london';\n\n/**\n * @type Result\n * @property result - Promise resolving to a new transaction hash\n * @property transactionMeta - Meta information about this new transaction\n */\nexport interface Result {\n  result: Promise<string>;\n  transactionMeta: TransactionMeta;\n}\n\n/**\n * @type Fetch All Options\n * @property fromBlock - String containing a specific block decimal number\n * @property etherscanApiKey - API key to be used to fetch token transactions\n */\nexport interface FetchAllOptions {\n  fromBlock?: string;\n  etherscanApiKey?: string;\n}\n\n/**\n * @type Transaction\n *\n * Transaction representation\n * @property chainId - Network ID as per EIP-155\n * @property data - Data to pass with this transaction\n * @property from - Address to send this transaction from\n * @property gas - Gas to send with this transaction\n * @property gasPrice - Price of gas with this transaction\n * @property gasUsed -  Gas used in the transaction\n * @property nonce - Unique number to prevent replay attacks\n * @property to - Address to send this transaction to\n * @property value - Value associated with this transaction\n */\nexport interface Transaction {\n  chainId?: number;\n  data?: string;\n  from: string;\n  gas?: string;\n  gasPrice?: string;\n  gasUsed?: string;\n  nonce?: string;\n  to?: string;\n  value?: string;\n  maxFeePerGas?: string;\n  maxPriorityFeePerGas?: string;\n  estimatedBaseFee?: string;\n  estimateGasError?: string;\n}\n\nexport interface GasPriceValue {\n  gasPrice: string;\n}\n\nexport interface FeeMarketEIP1559Values {\n  maxFeePerGas: string;\n  maxPriorityFeePerGas: string;\n}\n\n/**\n * The status of the transaction. Each status represents the state of the transaction internally\n * in the wallet. Some of these correspond with the state of the transaction on the network, but\n * some are wallet-specific.\n */\nexport enum TransactionStatus {\n  approved = 'approved',\n  cancelled = 'cancelled',\n  confirmed = 'confirmed',\n  failed = 'failed',\n  rejected = 'rejected',\n  signed = 'signed',\n  submitted = 'submitted',\n  unapproved = 'unapproved',\n}\n\n/**\n * Options for wallet device.\n */\nexport enum WalletDevice {\n  MM_MOBILE = 'metamask_mobile',\n  MM_EXTENSION = 'metamask_extension',\n  OTHER = 'other_device',\n}\n\ntype TransactionMetaBase = {\n  isTransfer?: boolean;\n  transferInformation?: {\n    symbol: string;\n    contractAddress: string;\n    decimals: number;\n  };\n  id: string;\n  networkID?: string;\n  chainId?: string;\n  origin?: string;\n  rawTransaction?: string;\n  time: number;\n  toSmartContract?: boolean;\n  transaction: Transaction;\n  transactionHash?: string;\n  blockNumber?: string;\n  deviceConfirmedOn?: WalletDevice;\n  verifiedOnBlockchain?: boolean;\n};\n\n/**\n * @type TransactionMeta\n *\n * TransactionMeta representation\n * @property error - Synthesized error information for failed transactions\n * @property id - Generated UUID associated with this transaction\n * @property networkID - Network code as per EIP-155 for this transaction\n * @property origin - Origin this transaction was sent from\n * @property deviceConfirmedOn - string to indicate what device the transaction was confirmed\n * @property rawTransaction - Hex representation of the underlying transaction\n * @property status - String status of this transaction\n * @property time - Timestamp associated with this transaction\n * @property toSmartContract - Whether transaction recipient is a smart contract\n * @property transaction - Underlying Transaction object\n * @property transactionHash - Hash of a successful transaction\n * @property blockNumber - Number of the block where the transaction has been included\n */\nexport type TransactionMeta =\n  | ({\n      status: Exclude<TransactionStatus, TransactionStatus.failed>;\n    } & TransactionMetaBase)\n  | ({ status: TransactionStatus.failed; error: Error } & TransactionMetaBase);\n\n/**\n * @type EtherscanTransactionMeta\n *\n * EtherscanTransactionMeta representation\n * @property blockNumber - Number of the block where the transaction has been included\n * @property timeStamp - Timestamp associated with this transaction\n * @property hash - Hash of a successful transaction\n * @property nonce - Nonce of the transaction\n * @property blockHash - Hash of the block where the transaction has been included\n * @property transactionIndex - Etherscan internal index for this transaction\n * @property from - Address to send this transaction from\n * @property to - Address to send this transaction to\n * @property gas - Gas to send with this transaction\n * @property gasPrice - Price of gas with this transaction\n * @property isError - Synthesized error information for failed transactions\n * @property txreceipt_status - Receipt status for this transaction\n * @property input - input of the transaction\n * @property contractAddress - Address of the contract\n * @property cumulativeGasUsed - Amount of gas used\n * @property confirmations - Number of confirmations\n */\nexport interface EtherscanTransactionMeta {\n  blockNumber: string;\n  timeStamp: string;\n  hash: string;\n  nonce: string;\n  blockHash: string;\n  transactionIndex: string;\n  from: string;\n  to: string;\n  value: string;\n  gas: string;\n  gasPrice: string;\n  cumulativeGasUsed: string;\n  gasUsed: string;\n  isError: string;\n  txreceipt_status: string;\n  input: string;\n  contractAddress: string;\n  confirmations: string;\n  tokenDecimal: string;\n  tokenSymbol: string;\n}\n\n/**\n * @type TransactionConfig\n *\n * Transaction controller configuration\n * @property interval - Polling interval used to fetch new currency rate\n * @property provider - Provider used to create a new underlying EthQuery instance\n * @property sign - Method used to sign transactions\n */\nexport interface TransactionConfig extends BaseConfig {\n  interval: number;\n  sign?: (transaction: Transaction, from: string) => Promise<any>;\n  txHistoryLimit: number;\n}\n\n/**\n * @type MethodData\n *\n * Method data registry object\n * @property registryMethod - Registry method raw string\n * @property parsedRegistryMethod - Registry method object, containing name and method arguments\n */\nexport interface MethodData {\n  registryMethod: string;\n  parsedRegistryMethod: Record<string, unknown>;\n}\n\n/**\n * @type TransactionState\n *\n * Transaction controller state\n * @property transactions - A list of TransactionMeta objects\n * @property methodData - Object containing all known method data information\n */\nexport interface TransactionState extends BaseState {\n  transactions: TransactionMeta[];\n  methodData: { [key: string]: MethodData };\n}\n\n/**\n * Multiplier used to determine a transaction's increased gas fee during cancellation\n */\nexport const CANCEL_RATE = 1.5;\n\n/**\n * Multiplier used to determine a transaction's increased gas fee during speed up\n */\nexport const SPEED_UP_RATE = 1.1;\n\n/**\n * Controller responsible for submitting and managing transactions.\n */\nexport class TransactionController extends BaseController<\n  TransactionConfig,\n  TransactionState\n> {\n  private ethQuery: any;\n\n  private registry: any;\n\n  private handle?: ReturnType<typeof setTimeout>;\n\n  private mutex = new Mutex();\n\n  private getNetworkState: () => NetworkState;\n\n  private failTransaction(transactionMeta: TransactionMeta, error: Error) {\n    const newTransactionMeta = {\n      ...transactionMeta,\n      error,\n      status: TransactionStatus.failed,\n    };\n    this.updateTransaction(newTransactionMeta);\n    this.hub.emit(`${transactionMeta.id}:finished`, newTransactionMeta);\n  }\n\n  private async registryLookup(fourBytePrefix: string): Promise<MethodData> {\n    const registryMethod = await this.registry.lookup(fourBytePrefix);\n    const parsedRegistryMethod = this.registry.parse(registryMethod);\n    return { registryMethod, parsedRegistryMethod };\n  }\n\n  /**\n   * Normalizes the transaction information from etherscan\n   * to be compatible with the TransactionMeta interface.\n   *\n   * @param txMeta - The transaction.\n   * @param currentNetworkID - The current network ID.\n   * @param currentChainId - The current chain ID.\n   * @returns The normalized transaction.\n   */\n  private normalizeTx(\n    txMeta: EtherscanTransactionMeta,\n    currentNetworkID: string,\n    currentChainId: string,\n  ): TransactionMeta {\n    const time = parseInt(txMeta.timeStamp, 10) * 1000;\n    const normalizedTransactionBase = {\n      blockNumber: txMeta.blockNumber,\n      id: random({ msecs: time }),\n      networkID: currentNetworkID,\n      chainId: currentChainId,\n      time,\n      transaction: {\n        data: txMeta.input,\n        from: txMeta.from,\n        gas: BNToHex(new BN(txMeta.gas)),\n        gasPrice: BNToHex(new BN(txMeta.gasPrice)),\n        gasUsed: BNToHex(new BN(txMeta.gasUsed)),\n        nonce: BNToHex(new BN(txMeta.nonce)),\n        to: txMeta.to,\n        value: BNToHex(new BN(txMeta.value)),\n      },\n      transactionHash: txMeta.hash,\n      verifiedOnBlockchain: false,\n    };\n\n    /* istanbul ignore else */\n    if (txMeta.isError === '0') {\n      return {\n        ...normalizedTransactionBase,\n        status: TransactionStatus.confirmed,\n      };\n    }\n\n    /* istanbul ignore next */\n    return {\n      ...normalizedTransactionBase,\n      error: new Error('Transaction failed'),\n      status: TransactionStatus.failed,\n    };\n  }\n\n  private normalizeTokenTx = (\n    txMeta: EtherscanTransactionMeta,\n    currentNetworkID: string,\n    currentChainId: string,\n  ): TransactionMeta => {\n    const time = parseInt(txMeta.timeStamp, 10) * 1000;\n    const {\n      to,\n      from,\n      gas,\n      gasPrice,\n      gasUsed,\n      hash,\n      contractAddress,\n      tokenDecimal,\n      tokenSymbol,\n      value,\n    } = txMeta;\n    return {\n      id: random({ msecs: time }),\n      isTransfer: true,\n      networkID: currentNetworkID,\n      chainId: currentChainId,\n      status: TransactionStatus.confirmed,\n      time,\n      transaction: {\n        chainId: 1,\n        from,\n        gas,\n        gasPrice,\n        gasUsed,\n        to,\n        value,\n      },\n      transactionHash: hash,\n      transferInformation: {\n        contractAddress,\n        decimals: Number(tokenDecimal),\n        symbol: tokenSymbol,\n      },\n      verifiedOnBlockchain: false,\n    };\n  };\n\n  /**\n   * EventEmitter instance used to listen to specific transactional events\n   */\n  hub = new EventEmitter();\n\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'TransactionController';\n\n  /**\n   * Method used to sign transactions\n   */\n  sign?: (\n    transaction: TypedTransaction,\n    from: string,\n  ) => Promise<TypedTransaction>;\n\n  /**\n   * Creates a TransactionController instance.\n   *\n   * @param options - The controller options.\n   * @param options.getNetworkState - Gets the state of the network controller.\n   * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.\n   * @param options.getProvider - Returns a provider for the current network.\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(\n    {\n      getNetworkState,\n      onNetworkStateChange,\n      getProvider,\n    }: {\n      getNetworkState: () => NetworkState;\n      onNetworkStateChange: (listener: (state: NetworkState) => void) => void;\n      getProvider: () => NetworkController['provider'];\n    },\n    config?: Partial<TransactionConfig>,\n    state?: Partial<TransactionState>,\n  ) {\n    super(config, state);\n    this.defaultConfig = {\n      interval: 15000,\n      txHistoryLimit: 40,\n    };\n\n    this.defaultState = {\n      methodData: {},\n      transactions: [],\n    };\n    this.initialize();\n    const provider = getProvider();\n    this.getNetworkState = getNetworkState;\n    this.ethQuery = new EthQuery(provider);\n    this.registry = new MethodRegistry({ provider });\n    onNetworkStateChange(() => {\n      const newProvider = getProvider();\n      this.ethQuery = new EthQuery(newProvider);\n      this.registry = new MethodRegistry({ provider: newProvider });\n    });\n    this.poll();\n  }\n\n  /**\n   * Starts a new polling interval.\n   *\n   * @param interval - The polling interval used to fetch new transaction statuses.\n   */\n  async poll(interval?: number): Promise<void> {\n    interval && this.configure({ interval }, false, false);\n    this.handle && clearTimeout(this.handle);\n    await safelyExecute(() => this.queryTransactionStatuses());\n    this.handle = setTimeout(() => {\n      this.poll(this.config.interval);\n    }, this.config.interval);\n  }\n\n  /**\n   * Handle new method data request.\n   *\n   * @param fourBytePrefix - The method prefix.\n   * @returns The method data object corresponding to the given signature prefix.\n   */\n  async handleMethodData(fourBytePrefix: string): Promise<MethodData> {\n    const releaseLock = await this.mutex.acquire();\n    try {\n      const { methodData } = this.state;\n      const knownMethod = Object.keys(methodData).find(\n        (knownFourBytePrefix) => fourBytePrefix === knownFourBytePrefix,\n      );\n      if (knownMethod) {\n        return methodData[fourBytePrefix];\n      }\n      const registry = await this.registryLookup(fourBytePrefix);\n      this.update({\n        methodData: { ...methodData, ...{ [fourBytePrefix]: registry } },\n      });\n      return registry;\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Add a new unapproved transaction to state. Parameters will be validated, a\n   * unique transaction id will be generated, and gas and gasPrice will be calculated\n   * if not provided. If A `<tx.id>:unapproved` hub event will be emitted once added.\n   *\n   * @param transaction - The transaction object to add.\n   * @param origin - The domain origin to append to the generated TransactionMeta.\n   * @param deviceConfirmedOn - An enum to indicate what device the transaction was confirmed to append to the generated TransactionMeta.\n   * @returns Object containing a promise resolving to the transaction hash if approved.\n   */\n  async addTransaction(\n    transaction: Transaction,\n    origin?: string,\n    deviceConfirmedOn?: WalletDevice,\n  ): Promise<Result> {\n    const { providerConfig, network } = this.getNetworkState();\n    const { transactions } = this.state;\n    transaction = normalizeTransaction(transaction);\n    validateTransaction(transaction);\n\n    const transactionMeta: TransactionMeta = {\n      id: random(),\n      networkID: network,\n      chainId: providerConfig.chainId,\n      origin,\n      status: TransactionStatus.unapproved as TransactionStatus.unapproved,\n      time: Date.now(),\n      transaction,\n      deviceConfirmedOn,\n      verifiedOnBlockchain: false,\n    };\n\n    try {\n      const { gas, estimateGasError } = await this.estimateGas(transaction);\n      transaction.gas = gas;\n      transaction.estimateGasError = estimateGasError;\n    } catch (error: any) {\n      this.failTransaction(transactionMeta, error);\n      return Promise.reject(error);\n    }\n\n    const result: Promise<string> = new Promise((resolve, reject) => {\n      this.hub.once(\n        `${transactionMeta.id}:finished`,\n        (meta: TransactionMeta) => {\n          switch (meta.status) {\n            case TransactionStatus.submitted:\n              return resolve(meta.transactionHash as string);\n            case TransactionStatus.rejected:\n              return reject(\n                ethErrors.provider.userRejectedRequest(\n                  'User rejected the transaction',\n                ),\n              );\n            case TransactionStatus.cancelled:\n              return reject(\n                ethErrors.rpc.internal('User cancelled the transaction'),\n              );\n            case TransactionStatus.failed:\n              return reject(ethErrors.rpc.internal(meta.error.message));\n            /* istanbul ignore next */\n            default:\n              return reject(\n                ethErrors.rpc.internal(\n                  `MetaMask Tx Signature: Unknown problem: ${JSON.stringify(\n                    meta,\n                  )}`,\n                ),\n              );\n          }\n        },\n      );\n    });\n\n    transactions.push(transactionMeta);\n    this.update({ transactions: this.trimTransactionsForState(transactions) });\n    this.hub.emit(`unapprovedTransaction`, transactionMeta);\n    return { result, transactionMeta };\n  }\n\n  prepareUnsignedEthTx(txParams: Record<string, unknown>): TypedTransaction {\n    return TransactionFactory.fromTxData(txParams, {\n      common: this.getCommonConfiguration(),\n      freeze: false,\n    });\n  }\n\n  /**\n   * `@ethereumjs/tx` uses `@ethereumjs/common` as a configuration tool for\n   * specifying which chain, network, hardfork and EIPs to support for\n   * a transaction. By referencing this configuration, and analyzing the fields\n   * specified in txParams, @ethereumjs/tx is able to determine which EIP-2718\n   * transaction type to use.\n   *\n   * @returns {Common} common configuration object\n   */\n\n  getCommonConfiguration(): Common {\n    const {\n      network: networkId,\n      providerConfig: { type: chain, chainId, nickname: name },\n    } = this.getNetworkState();\n\n    if (chain !== RPC) {\n      return new Common({ chain, hardfork: HARDFORK });\n    }\n\n    const customChainParams = {\n      name,\n      chainId: parseInt(chainId, undefined),\n      networkId: parseInt(networkId, undefined),\n    };\n\n    return Common.forCustomChain(MAINNET, customChainParams, HARDFORK);\n  }\n\n  /**\n   * Approves a transaction and updates it's status in state. If this is not a\n   * retry transaction, a nonce will be generated. The transaction is signed\n   * using the sign configuration property, then published to the blockchain.\n   * A `<tx.id>:finished` hub event is fired after success or failure.\n   *\n   * @param transactionID - The ID of the transaction to approve.\n   */\n  async approveTransaction(transactionID: string) {\n    const { transactions } = this.state;\n    const releaseLock = await this.mutex.acquire();\n    const { providerConfig } = this.getNetworkState();\n    const { chainId: currentChainId } = providerConfig;\n    const index = transactions.findIndex(({ id }) => transactionID === id);\n    const transactionMeta = transactions[index];\n    const { nonce } = transactionMeta.transaction;\n\n    try {\n      const { from } = transactionMeta.transaction;\n      if (!this.sign) {\n        releaseLock();\n        this.failTransaction(\n          transactionMeta,\n          new Error('No sign method defined.'),\n        );\n        return;\n      } else if (!currentChainId) {\n        releaseLock();\n        this.failTransaction(transactionMeta, new Error('No chainId defined.'));\n        return;\n      }\n\n      const chainId = parseInt(currentChainId, undefined);\n      const { approved: status } = TransactionStatus;\n\n      const txNonce =\n        nonce ||\n        (await query(this.ethQuery, 'getTransactionCount', [from, 'pending']));\n\n      transactionMeta.status = status;\n      transactionMeta.transaction.nonce = txNonce;\n      transactionMeta.transaction.chainId = chainId;\n\n      const baseTxParams = {\n        ...transactionMeta.transaction,\n        gasLimit: transactionMeta.transaction.gas,\n        chainId,\n        nonce: txNonce,\n        status,\n      };\n\n      const isEIP1559 = isEIP1559Transaction(transactionMeta.transaction);\n\n      const txParams = isEIP1559\n        ? {\n            ...baseTxParams,\n            maxFeePerGas: transactionMeta.transaction.maxFeePerGas,\n            maxPriorityFeePerGas:\n              transactionMeta.transaction.maxPriorityFeePerGas,\n            estimatedBaseFee: transactionMeta.transaction.estimatedBaseFee,\n            // specify type 2 if maxFeePerGas and maxPriorityFeePerGas are set\n            type: 2,\n          }\n        : baseTxParams;\n\n      // delete gasPrice if maxFeePerGas and maxPriorityFeePerGas are set\n      if (isEIP1559) {\n        delete txParams.gasPrice;\n      }\n\n      const unsignedEthTx = this.prepareUnsignedEthTx(txParams);\n      const signedTx = await this.sign(unsignedEthTx, from);\n      transactionMeta.status = TransactionStatus.signed;\n      this.updateTransaction(transactionMeta);\n      const rawTransaction = bufferToHex(signedTx.serialize());\n\n      transactionMeta.rawTransaction = rawTransaction;\n      this.updateTransaction(transactionMeta);\n      const transactionHash = await query(this.ethQuery, 'sendRawTransaction', [\n        rawTransaction,\n      ]);\n      transactionMeta.transactionHash = transactionHash;\n      transactionMeta.status = TransactionStatus.submitted;\n      this.updateTransaction(transactionMeta);\n      this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n    } catch (error: any) {\n      this.failTransaction(transactionMeta, error);\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Cancels a transaction based on its ID by setting its status to \"rejected\"\n   * and emitting a `<tx.id>:finished` hub event.\n   *\n   * @param transactionID - The ID of the transaction to cancel.\n   */\n  cancelTransaction(transactionID: string) {\n    const transactionMeta = this.state.transactions.find(\n      ({ id }) => id === transactionID,\n    );\n    if (!transactionMeta) {\n      return;\n    }\n    transactionMeta.status = TransactionStatus.rejected;\n    this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n    const transactions = this.state.transactions.filter(\n      ({ id }) => id !== transactionID,\n    );\n    this.update({ transactions: this.trimTransactionsForState(transactions) });\n  }\n\n  /**\n   * Attempts to cancel a transaction based on its ID by setting its status to \"rejected\"\n   * and emitting a `<tx.id>:finished` hub event.\n   *\n   * @param transactionID - The ID of the transaction to cancel.\n   * @param gasValues - The gas values to use for the cancellation transation.\n   */\n  async stopTransaction(\n    transactionID: string,\n    gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n  ) {\n    if (gasValues) {\n      validateGasValues(gasValues);\n    }\n    const transactionMeta = this.state.transactions.find(\n      ({ id }) => id === transactionID,\n    );\n    if (!transactionMeta) {\n      return;\n    }\n\n    if (!this.sign) {\n      throw new Error('No sign method defined.');\n    }\n\n    // gasPrice (legacy non EIP1559)\n    const minGasPrice = getIncreasedPriceFromExisting(\n      transactionMeta.transaction.gasPrice,\n      CANCEL_RATE,\n    );\n\n    const gasPriceFromValues = isGasPriceValue(gasValues) && gasValues.gasPrice;\n\n    const newGasPrice =\n      (gasPriceFromValues &&\n        validateMinimumIncrease(gasPriceFromValues, minGasPrice)) ||\n      minGasPrice;\n\n    // maxFeePerGas (EIP1559)\n    const existingMaxFeePerGas = transactionMeta.transaction?.maxFeePerGas;\n    const minMaxFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxFeePerGas,\n      CANCEL_RATE,\n    );\n    const maxFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxFeePerGas;\n    const newMaxFeePerGas =\n      (maxFeePerGasValues &&\n        validateMinimumIncrease(maxFeePerGasValues, minMaxFeePerGas)) ||\n      (existingMaxFeePerGas && minMaxFeePerGas);\n\n    // maxPriorityFeePerGas (EIP1559)\n    const existingMaxPriorityFeePerGas =\n      transactionMeta.transaction?.maxPriorityFeePerGas;\n    const minMaxPriorityFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxPriorityFeePerGas,\n      CANCEL_RATE,\n    );\n    const maxPriorityFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxPriorityFeePerGas;\n    const newMaxPriorityFeePerGas =\n      (maxPriorityFeePerGasValues &&\n        validateMinimumIncrease(\n          maxPriorityFeePerGasValues,\n          minMaxPriorityFeePerGas,\n        )) ||\n      (existingMaxPriorityFeePerGas && minMaxPriorityFeePerGas);\n\n    const txParams =\n      newMaxFeePerGas && newMaxPriorityFeePerGas\n        ? {\n            from: transactionMeta.transaction.from,\n            gasLimit: transactionMeta.transaction.gas,\n            maxFeePerGas: newMaxFeePerGas,\n            maxPriorityFeePerGas: newMaxPriorityFeePerGas,\n            type: 2,\n            nonce: transactionMeta.transaction.nonce,\n            to: transactionMeta.transaction.from,\n            value: '0x0',\n          }\n        : {\n            from: transactionMeta.transaction.from,\n            gasLimit: transactionMeta.transaction.gas,\n            gasPrice: newGasPrice,\n            nonce: transactionMeta.transaction.nonce,\n            to: transactionMeta.transaction.from,\n            value: '0x0',\n          };\n\n    const unsignedEthTx = this.prepareUnsignedEthTx(txParams);\n\n    const signedTx = await this.sign(\n      unsignedEthTx,\n      transactionMeta.transaction.from,\n    );\n    const rawTransaction = bufferToHex(signedTx.serialize());\n    await query(this.ethQuery, 'sendRawTransaction', [rawTransaction]);\n    transactionMeta.status = TransactionStatus.cancelled;\n    this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n  }\n\n  /**\n   * Attempts to speed up a transaction increasing transaction gasPrice by ten percent.\n   *\n   * @param transactionID - The ID of the transaction to speed up.\n   * @param gasValues - The gas values to use for the speed up transation.\n   */\n  async speedUpTransaction(\n    transactionID: string,\n    gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n  ) {\n    if (gasValues) {\n      validateGasValues(gasValues);\n    }\n    const transactionMeta = this.state.transactions.find(\n      ({ id }) => id === transactionID,\n    );\n    /* istanbul ignore next */\n    if (!transactionMeta) {\n      return;\n    }\n\n    /* istanbul ignore next */\n    if (!this.sign) {\n      throw new Error('No sign method defined.');\n    }\n\n    const { transactions } = this.state;\n\n    // gasPrice (legacy non EIP1559)\n    const minGasPrice = getIncreasedPriceFromExisting(\n      transactionMeta.transaction.gasPrice,\n      SPEED_UP_RATE,\n    );\n\n    const gasPriceFromValues = isGasPriceValue(gasValues) && gasValues.gasPrice;\n\n    const newGasPrice =\n      (gasPriceFromValues &&\n        validateMinimumIncrease(gasPriceFromValues, minGasPrice)) ||\n      minGasPrice;\n\n    // maxFeePerGas (EIP1559)\n    const existingMaxFeePerGas = transactionMeta.transaction?.maxFeePerGas;\n    const minMaxFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxFeePerGas,\n      SPEED_UP_RATE,\n    );\n    const maxFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxFeePerGas;\n    const newMaxFeePerGas =\n      (maxFeePerGasValues &&\n        validateMinimumIncrease(maxFeePerGasValues, minMaxFeePerGas)) ||\n      (existingMaxFeePerGas && minMaxFeePerGas);\n\n    // maxPriorityFeePerGas (EIP1559)\n    const existingMaxPriorityFeePerGas =\n      transactionMeta.transaction?.maxPriorityFeePerGas;\n    const minMaxPriorityFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxPriorityFeePerGas,\n      SPEED_UP_RATE,\n    );\n    const maxPriorityFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxPriorityFeePerGas;\n    const newMaxPriorityFeePerGas =\n      (maxPriorityFeePerGasValues &&\n        validateMinimumIncrease(\n          maxPriorityFeePerGasValues,\n          minMaxPriorityFeePerGas,\n        )) ||\n      (existingMaxPriorityFeePerGas && minMaxPriorityFeePerGas);\n\n    const txParams =\n      newMaxFeePerGas && newMaxPriorityFeePerGas\n        ? {\n            ...transactionMeta.transaction,\n            gasLimit: transactionMeta.transaction.gas,\n            maxFeePerGas: newMaxFeePerGas,\n            maxPriorityFeePerGas: newMaxPriorityFeePerGas,\n            type: 2,\n          }\n        : {\n            ...transactionMeta.transaction,\n            gasLimit: transactionMeta.transaction.gas,\n            gasPrice: newGasPrice,\n          };\n\n    const unsignedEthTx = this.prepareUnsignedEthTx(txParams);\n\n    const signedTx = await this.sign(\n      unsignedEthTx,\n      transactionMeta.transaction.from,\n    );\n    const rawTransaction = bufferToHex(signedTx.serialize());\n    const transactionHash = await query(this.ethQuery, 'sendRawTransaction', [\n      rawTransaction,\n    ]);\n    const baseTransactionMeta = {\n      ...transactionMeta,\n      id: random(),\n      time: Date.now(),\n      transactionHash,\n    };\n    const newTransactionMeta =\n      newMaxFeePerGas && newMaxPriorityFeePerGas\n        ? {\n            ...baseTransactionMeta,\n            transaction: {\n              ...transactionMeta.transaction,\n              maxFeePerGas: newMaxFeePerGas,\n              maxPriorityFeePerGas: newMaxPriorityFeePerGas,\n            },\n          }\n        : {\n            ...baseTransactionMeta,\n            transaction: {\n              ...transactionMeta.transaction,\n              gasPrice: newGasPrice,\n            },\n          };\n    transactions.push(newTransactionMeta);\n    this.update({ transactions: this.trimTransactionsForState(transactions) });\n    this.hub.emit(`${transactionMeta.id}:speedup`, newTransactionMeta);\n  }\n\n  /**\n   * Estimates required gas for a given transaction.\n   *\n   * @param transaction - The transaction to estimate gas for.\n   * @returns The gas and gas price.\n   */\n  async estimateGas(transaction: Transaction) {\n    const estimatedTransaction = { ...transaction };\n    const {\n      gas,\n      gasPrice: providedGasPrice,\n      to,\n      value,\n      data,\n    } = estimatedTransaction;\n    const gasPrice =\n      typeof providedGasPrice === 'undefined'\n        ? await query(this.ethQuery, 'gasPrice')\n        : providedGasPrice;\n    const { isCustomNetwork } = this.getNetworkState();\n    // 1. If gas is already defined on the transaction, use it\n    if (typeof gas !== 'undefined') {\n      return { gas, gasPrice };\n    }\n    const { gasLimit } = await query(this.ethQuery, 'getBlockByNumber', [\n      'latest',\n      false,\n    ]);\n\n    // 2. If to is not defined or this is not a contract address, and there is no data use 0x5208 / 21000.\n    // If the newtwork is a custom network then bypass this check and fetch 'estimateGas'.\n    /* istanbul ignore next */\n    const code = to ? await query(this.ethQuery, 'getCode', [to]) : undefined;\n    /* istanbul ignore next */\n    if (\n      !isCustomNetwork &&\n      (!to || (to && !data && (!code || code === '0x')))\n    ) {\n      return { gas: '0x5208', gasPrice };\n    }\n\n    // if data, should be hex string format\n    estimatedTransaction.data = !data\n      ? data\n      : /* istanbul ignore next */ addHexPrefix(data);\n\n    // 3. If this is a contract address, safely estimate gas using RPC\n    estimatedTransaction.value =\n      typeof value === 'undefined' ? '0x0' : /* istanbul ignore next */ value;\n    const gasLimitBN = hexToBN(gasLimit);\n    estimatedTransaction.gas = BNToHex(fractionBN(gasLimitBN, 19, 20));\n\n    let gasHex;\n    let estimateGasError;\n    try {\n      gasHex = await query(this.ethQuery, 'estimateGas', [\n        estimatedTransaction,\n      ]);\n    } catch (error) {\n      estimateGasError = ESTIMATE_GAS_ERROR;\n    }\n    // 4. Pad estimated gas without exceeding the most recent block gasLimit. If the network is a\n    // a custom network then return the eth_estimateGas value.\n    const gasBN = hexToBN(gasHex);\n    const maxGasBN = gasLimitBN.muln(0.9);\n    const paddedGasBN = gasBN.muln(1.5);\n    /* istanbul ignore next */\n    if (gasBN.gt(maxGasBN) || isCustomNetwork) {\n      return { gas: addHexPrefix(gasHex), gasPrice, estimateGasError };\n    }\n\n    /* istanbul ignore next */\n    if (paddedGasBN.lt(maxGasBN)) {\n      return {\n        gas: addHexPrefix(BNToHex(paddedGasBN)),\n        gasPrice,\n        estimateGasError,\n      };\n    }\n    return { gas: addHexPrefix(BNToHex(maxGasBN)), gasPrice };\n  }\n\n  /**\n   * Check the status of submitted transactions on the network to determine whether they have\n   * been included in a block. Any that have been included in a block are marked as confirmed.\n   */\n  async queryTransactionStatuses() {\n    const { transactions } = this.state;\n    const { providerConfig, network: currentNetworkID } =\n      this.getNetworkState();\n    const { chainId: currentChainId } = providerConfig;\n    let gotUpdates = false;\n    await safelyExecute(() =>\n      Promise.all(\n        transactions.map(async (meta, index) => {\n          // Using fallback to networkID only when there is no chainId present.\n          // Should be removed when networkID is completely removed.\n          const txBelongsToCurrentChain =\n            meta.chainId === currentChainId ||\n            (!meta.chainId && meta.networkID === currentNetworkID);\n\n          if (!meta.verifiedOnBlockchain && txBelongsToCurrentChain) {\n            const [reconciledTx, updateRequired] =\n              await this.blockchainTransactionStateReconciler(meta);\n            if (updateRequired) {\n              transactions[index] = reconciledTx;\n              gotUpdates = updateRequired;\n            }\n          }\n        }),\n      ),\n    );\n\n    /* istanbul ignore else */\n    if (gotUpdates) {\n      this.update({\n        transactions: this.trimTransactionsForState(transactions),\n      });\n    }\n  }\n\n  /**\n   * Updates an existing transaction in state.\n   *\n   * @param transactionMeta - The new transaction to store in state.\n   */\n  updateTransaction(transactionMeta: TransactionMeta) {\n    const { transactions } = this.state;\n    transactionMeta.transaction = normalizeTransaction(\n      transactionMeta.transaction,\n    );\n    validateTransaction(transactionMeta.transaction);\n    const index = transactions.findIndex(({ id }) => transactionMeta.id === id);\n    transactions[index] = transactionMeta;\n    this.update({ transactions: this.trimTransactionsForState(transactions) });\n  }\n\n  /**\n   * Removes all transactions from state, optionally based on the current network.\n   *\n   * @param ignoreNetwork - Determines whether to wipe all transactions, or just those on the\n   * current network. If `true`, all transactions are wiped.\n   */\n  wipeTransactions(ignoreNetwork?: boolean) {\n    /* istanbul ignore next */\n    if (ignoreNetwork) {\n      this.update({ transactions: [] });\n      return;\n    }\n    const { providerConfig, network: currentNetworkID } =\n      this.getNetworkState();\n    const { chainId: currentChainId } = providerConfig;\n    const newTransactions = this.state.transactions.filter(\n      ({ networkID, chainId }) => {\n        // Using fallback to networkID only when there is no chainId present. Should be removed when networkID is completely removed.\n        const isCurrentNetwork =\n          chainId === currentChainId ||\n          (!chainId && networkID === currentNetworkID);\n        return !isCurrentNetwork;\n      },\n    );\n\n    this.update({\n      transactions: this.trimTransactionsForState(newTransactions),\n    });\n  }\n\n  /**\n   * Get transactions from Etherscan for the given address. By default all transactions are\n   * returned, but the `fromBlock` option can be given to filter just for transactions from a\n   * specific block onward.\n   *\n   * @param address - The address to fetch the transactions for.\n   * @param opt - Object containing optional data, fromBlock and Etherscan API key.\n   * @returns The block number of the latest incoming transaction.\n   */\n  async fetchAll(\n    address: string,\n    opt?: FetchAllOptions,\n  ): Promise<string | void> {\n    const { providerConfig, network: currentNetworkID } =\n      this.getNetworkState();\n    const { chainId: currentChainId, type: networkType } = providerConfig;\n    const { transactions } = this.state;\n\n    const supportedNetworkIds = ['1', '5', '11155111'];\n    /* istanbul ignore next */\n    if (supportedNetworkIds.indexOf(currentNetworkID) === -1) {\n      return undefined;\n    }\n\n    const [etherscanTxResponse, etherscanTokenResponse] =\n      await handleTransactionFetch(\n        networkType,\n        address,\n        this.config.txHistoryLimit,\n        opt,\n      );\n\n    const normalizedTxs = etherscanTxResponse.result.map(\n      (tx: EtherscanTransactionMeta) =>\n        this.normalizeTx(tx, currentNetworkID, currentChainId),\n    );\n    const normalizedTokenTxs = etherscanTokenResponse.result.map(\n      (tx: EtherscanTransactionMeta) =>\n        this.normalizeTokenTx(tx, currentNetworkID, currentChainId),\n    );\n\n    const [updateRequired, allTxs] = this.etherscanTransactionStateReconciler(\n      [...normalizedTxs, ...normalizedTokenTxs],\n      transactions,\n    );\n\n    allTxs.sort((a, b) => (a.time < b.time ? -1 : 1));\n\n    let latestIncomingTxBlockNumber: string | undefined;\n    allTxs.forEach(async (tx) => {\n      /* istanbul ignore next */\n      if (\n        // Using fallback to networkID only when there is no chainId present. Should be removed when networkID is completely removed.\n        (tx.chainId === currentChainId ||\n          (!tx.chainId && tx.networkID === currentNetworkID)) &&\n        tx.transaction.to &&\n        tx.transaction.to.toLowerCase() === address.toLowerCase()\n      ) {\n        if (\n          tx.blockNumber &&\n          (!latestIncomingTxBlockNumber ||\n            parseInt(latestIncomingTxBlockNumber, 10) <\n              parseInt(tx.blockNumber, 10))\n        ) {\n          latestIncomingTxBlockNumber = tx.blockNumber;\n        }\n      }\n\n      /* istanbul ignore else */\n      if (tx.toSmartContract === undefined) {\n        // If not `to` is a contract deploy, if not `data` is send eth\n        if (\n          tx.transaction.to &&\n          (!tx.transaction.data || tx.transaction.data !== '0x')\n        ) {\n          const code = await query(this.ethQuery, 'getCode', [\n            tx.transaction.to,\n          ]);\n          tx.toSmartContract = isSmartContractCode(code);\n        } else {\n          tx.toSmartContract = false;\n        }\n      }\n    });\n\n    // Update state only if new transactions were fetched or\n    // the status or gas data of a transaction has changed\n    if (updateRequired) {\n      this.update({ transactions: this.trimTransactionsForState(allTxs) });\n    }\n    return latestIncomingTxBlockNumber;\n  }\n\n  /**\n   * Trim the amount of transactions that are set on the state. Checks\n   * if the length of the tx history is longer then desired persistence\n   * limit and then if it is removes the oldest confirmed or rejected tx.\n   * Pending or unapproved transactions will not be removed by this\n   * operation. For safety of presenting a fully functional transaction UI\n   * representation, this function will not break apart transactions with the\n   * same nonce, created on the same day, per network. Not accounting for transactions of the same\n   * nonce, same day and network combo can result in confusing or broken experiences\n   * in the UI. The transactions are then updated using the BaseController update.\n   *\n   * @param transactions - The transactions to be applied to the state.\n   * @returns The trimmed list of transactions.\n   */\n  private trimTransactionsForState(\n    transactions: TransactionMeta[],\n  ): TransactionMeta[] {\n    const nonceNetworkSet = new Set();\n    const txsToKeep = transactions.reverse().filter((tx) => {\n      const { chainId, networkID, status, transaction, time } = tx;\n      if (transaction) {\n        const key = `${transaction.nonce}-${chainId ?? networkID}-${new Date(\n          time,\n        ).toDateString()}`;\n        if (nonceNetworkSet.has(key)) {\n          return true;\n        } else if (\n          nonceNetworkSet.size < this.config.txHistoryLimit ||\n          !this.isFinalState(status)\n        ) {\n          nonceNetworkSet.add(key);\n          return true;\n        }\n      }\n      return false;\n    });\n    txsToKeep.reverse();\n    return txsToKeep;\n  }\n\n  /**\n   * Determines if the transaction is in a final state.\n   *\n   * @param status - The transaction status.\n   * @returns Whether the transaction is in a final state.\n   */\n  private isFinalState(status: TransactionStatus): boolean {\n    return (\n      status === TransactionStatus.rejected ||\n      status === TransactionStatus.confirmed ||\n      status === TransactionStatus.failed ||\n      status === TransactionStatus.cancelled\n    );\n  }\n\n  /**\n   * Method to verify the state of a transaction using the Blockchain as a source of truth.\n   *\n   * @param meta - The local transaction to verify on the blockchain.\n   * @returns A tuple containing the updated transaction, and whether or not an update was required.\n   */\n  private async blockchainTransactionStateReconciler(\n    meta: TransactionMeta,\n  ): Promise<[TransactionMeta, boolean]> {\n    const { status, transactionHash } = meta;\n    switch (status) {\n      case TransactionStatus.confirmed:\n        const txReceipt = await query(this.ethQuery, 'getTransactionReceipt', [\n          transactionHash,\n        ]);\n\n        if (!txReceipt) {\n          return [meta, false];\n        }\n\n        meta.verifiedOnBlockchain = true;\n        meta.transaction.gasUsed = txReceipt.gasUsed;\n\n        // According to the Web3 docs:\n        // TRUE if the transaction was successful, FALSE if the EVM reverted the transaction.\n        if (Number(txReceipt.status) === 0) {\n          const error: Error = new Error(\n            'Transaction failed. The transaction was reversed',\n          );\n          this.failTransaction(meta, error);\n          return [meta, false];\n        }\n\n        return [meta, true];\n      case TransactionStatus.submitted:\n        const txObj = await query(this.ethQuery, 'getTransactionByHash', [\n          transactionHash,\n        ]);\n\n        if (!txObj) {\n          const receiptShowsFailedStatus =\n            await this.checkTxReceiptStatusIsFailed(transactionHash);\n\n          // Case the txObj is evaluated as false, a second check will\n          // determine if the tx failed or it is pending or confirmed\n          if (receiptShowsFailedStatus) {\n            const error: Error = new Error(\n              'Transaction failed. The transaction was dropped or replaced by a new one',\n            );\n            this.failTransaction(meta, error);\n          }\n        }\n\n        /* istanbul ignore next */\n        if (txObj?.blockNumber) {\n          meta.status = TransactionStatus.confirmed;\n          this.hub.emit(`${meta.id}:confirmed`, meta);\n          return [meta, true];\n        }\n\n        return [meta, false];\n      default:\n        return [meta, false];\n    }\n  }\n\n  /**\n   * Method to check if a tx has failed according to their receipt\n   * According to the Web3 docs:\n   * TRUE if the transaction was successful, FALSE if the EVM reverted the transaction.\n   * The receipt is not available for pending transactions and returns null.\n   *\n   * @param txHash - The transaction hash.\n   * @returns Whether the transaction has failed.\n   */\n  private async checkTxReceiptStatusIsFailed(\n    txHash: string | undefined,\n  ): Promise<boolean> {\n    const txReceipt = await query(this.ethQuery, 'getTransactionReceipt', [\n      txHash,\n    ]);\n    if (!txReceipt) {\n      // Transaction is pending\n      return false;\n    }\n    return Number(txReceipt.status) === 0;\n  }\n\n  /**\n   * Method to verify the state of transactions using Etherscan as a source of truth.\n   *\n   * @param remoteTxs - Transactions to reconcile that are from a remote source.\n   * @param localTxs - Transactions to reconcile that are local.\n   * @returns A tuple containing a boolean indicating whether or not an update was required, and the updated transaction.\n   */\n  private etherscanTransactionStateReconciler(\n    remoteTxs: TransactionMeta[],\n    localTxs: TransactionMeta[],\n  ): [boolean, TransactionMeta[]] {\n    const updatedTxs: TransactionMeta[] = this.getUpdatedTransactions(\n      remoteTxs,\n      localTxs,\n    );\n\n    const newTxs: TransactionMeta[] = this.getNewTransactions(\n      remoteTxs,\n      localTxs,\n    );\n\n    const updatedLocalTxs = localTxs.map((tx: TransactionMeta) => {\n      const txIdx = updatedTxs.findIndex(\n        ({ transactionHash }) => transactionHash === tx.transactionHash,\n      );\n      return txIdx === -1 ? tx : updatedTxs[txIdx];\n    });\n\n    const updateRequired = newTxs.length > 0 || updatedLocalTxs.length > 0;\n\n    return [updateRequired, [...newTxs, ...updatedLocalTxs]];\n  }\n\n  /**\n   * Get all transactions that are in the remote transactions array\n   * but not in the local transactions array.\n   *\n   * @param remoteTxs - Array of transactions from remote source.\n   * @param localTxs - Array of transactions stored locally.\n   * @returns The new transactions.\n   */\n  private getNewTransactions(\n    remoteTxs: TransactionMeta[],\n    localTxs: TransactionMeta[],\n  ): TransactionMeta[] {\n    return remoteTxs.filter((tx) => {\n      const alreadyInTransactions = localTxs.find(\n        ({ transactionHash }) => transactionHash === tx.transactionHash,\n      );\n      return !alreadyInTransactions;\n    });\n  }\n\n  /**\n   * Get all the transactions that are locally outdated with respect\n   * to a remote source (etherscan or blockchain). The returned array\n   * contains the transactions with the updated data.\n   *\n   * @param remoteTxs - Array of transactions from remote source.\n   * @param localTxs - Array of transactions stored locally.\n   * @returns The updated transactions.\n   */\n  private getUpdatedTransactions(\n    remoteTxs: TransactionMeta[],\n    localTxs: TransactionMeta[],\n  ): TransactionMeta[] {\n    return remoteTxs.filter((remoteTx) => {\n      const isTxOutdated = localTxs.find((localTx) => {\n        return (\n          remoteTx.transactionHash === localTx.transactionHash &&\n          this.isTransactionOutdated(remoteTx, localTx)\n        );\n      });\n      return isTxOutdated;\n    });\n  }\n\n  /**\n   * Verifies if a local transaction is outdated with respect to the remote transaction.\n   *\n   * @param remoteTx - The remote transaction from Etherscan.\n   * @param localTx - The local transaction.\n   * @returns Whether the transaction is outdated.\n   */\n  private isTransactionOutdated(\n    remoteTx: TransactionMeta,\n    localTx: TransactionMeta,\n  ): boolean {\n    const statusOutdated = this.isStatusOutdated(\n      remoteTx.transactionHash,\n      localTx.transactionHash,\n      remoteTx.status,\n      localTx.status,\n    );\n    const gasDataOutdated = this.isGasDataOutdated(\n      remoteTx.transaction.gasUsed,\n      localTx.transaction.gasUsed,\n    );\n    return statusOutdated || gasDataOutdated;\n  }\n\n  /**\n   * Verifies if the status of a local transaction is outdated with respect to the remote transaction.\n   *\n   * @param remoteTxHash - Remote transaction hash.\n   * @param localTxHash - Local transaction hash.\n   * @param remoteTxStatus - Remote transaction status.\n   * @param localTxStatus - Local transaction status.\n   * @returns Whether the status is outdated.\n   */\n  private isStatusOutdated(\n    remoteTxHash: string | undefined,\n    localTxHash: string | undefined,\n    remoteTxStatus: TransactionStatus,\n    localTxStatus: TransactionStatus,\n  ): boolean {\n    return remoteTxHash === localTxHash && remoteTxStatus !== localTxStatus;\n  }\n\n  /**\n   * Verifies if the gas data of a local transaction is outdated with respect to the remote transaction.\n   *\n   * @param remoteGasUsed - Remote gas used in the transaction.\n   * @param localGasUsed - Local gas used in the transaction.\n   * @returns Whether the gas data is outdated.\n   */\n  private isGasDataOutdated(\n    remoteGasUsed: string | undefined,\n    localGasUsed: string | undefined,\n  ): boolean {\n    return remoteGasUsed !== localGasUsed;\n  }\n}\n\nexport default TransactionController;\n"]}
\ No newline at end of file
+{"version":3,"file":"TransactionController.js","sourceRoot":"","sources":["../src/TransactionController.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\nimport { addHexPrefix, bufferToHex } from 'ethereumjs-util';\nimport { errorCodes, ethErrors } from 'eth-rpc-errors';\nimport MethodRegistry from 'eth-method-registry';\nimport EthQuery from 'eth-query';\nimport Common from '@ethereumjs/common';\nimport { TransactionFactory, TypedTransaction } from '@ethereumjs/tx';\nimport { v1 as random } from 'uuid';\nimport { Mutex } from 'async-mutex';\nimport {\n  BaseController,\n  BaseConfig,\n  BaseState,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport type {\n  NetworkState,\n  NetworkController,\n} from '@metamask/network-controller';\nimport {\n  BNToHex,\n  fractionBN,\n  hexToBN,\n  safelyExecute,\n  query,\n  MAINNET,\n  RPC,\n} from '@metamask/controller-utils';\nimport {\n  AcceptResultCallbacks,\n  AddApprovalRequest,\n  AddResult,\n} from '@metamask/approval-controller';\nimport {\n  normalizeTransaction,\n  validateTransaction,\n  getIncreasedPriceFromExisting,\n  isEIP1559Transaction,\n  isGasPriceValue,\n  isFeeMarketEIP1559Values,\n  validateGasValues,\n  validateMinimumIncrease,\n  ESTIMATE_GAS_ERROR,\n} from './utils';\nimport { IncomingTransactionHelper } from './IncomingTransactionHelper';\nimport { EtherscanRemoteTransactionSource } from './EtherscanRemoteTransactionSource';\nimport {\n  Transaction,\n  TransactionMeta,\n  TransactionStatus,\n  WalletDevice,\n} from './types';\n\nconst HARDFORK = 'london';\n\n/**\n * @type Result\n * @property result - Promise resolving to a new transaction hash\n * @property transactionMeta - Meta information about this new transaction\n */\nexport interface Result {\n  result: Promise<string>;\n  transactionMeta: TransactionMeta;\n}\n\n/**\n * @type Fetch All Options\n * @property fromBlock - String containing a specific block decimal number\n * @property etherscanApiKey - API key to be used to fetch token transactions\n */\nexport interface FetchAllOptions {\n  fromBlock?: string;\n  etherscanApiKey?: string;\n}\n\nexport interface GasPriceValue {\n  gasPrice: string;\n}\n\nexport interface FeeMarketEIP1559Values {\n  maxFeePerGas: string;\n  maxPriorityFeePerGas: string;\n}\n\n/**\n * @type TransactionConfig\n *\n * Transaction controller configuration\n * @property interval - Polling interval used to fetch new currency rate\n * @property provider - Provider used to create a new underlying EthQuery instance\n * @property sign - Method used to sign transactions\n */\nexport interface TransactionConfig extends BaseConfig {\n  interval: number;\n  sign?: (transaction: Transaction, from: string) => Promise<any>;\n  txHistoryLimit: number;\n}\n\n/**\n * @type MethodData\n *\n * Method data registry object\n * @property registryMethod - Registry method raw string\n * @property parsedRegistryMethod - Registry method object, containing name and method arguments\n */\nexport interface MethodData {\n  registryMethod: string;\n  parsedRegistryMethod: Record<string, unknown>;\n}\n\n/**\n * @type TransactionState\n *\n * Transaction controller state\n * @property transactions - A list of TransactionMeta objects\n * @property methodData - Object containing all known method data information\n */\nexport interface TransactionState extends BaseState {\n  transactions: TransactionMeta[];\n  methodData: { [key: string]: MethodData };\n}\n\n/**\n * The name of the {@link TransactionController}.\n */\nconst controllerName = 'TransactionController';\n\n/**\n * The external actions available to the {@link TransactionController}.\n */\ntype AllowedActions = AddApprovalRequest;\n\n/**\n * The messenger of the {@link TransactionController}.\n */\nexport type TransactionControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  AllowedActions,\n  never,\n  AllowedActions['type'],\n  never\n>;\n\n/**\n * Multiplier used to determine a transaction's increased gas fee during cancellation\n */\nexport const CANCEL_RATE = 1.5;\n\n/**\n * Multiplier used to determine a transaction's increased gas fee during speed up\n */\nexport const SPEED_UP_RATE = 1.1;\n\n/**\n * Controller responsible for submitting and managing transactions.\n */\nexport class TransactionController extends BaseController<\n  TransactionConfig,\n  TransactionState\n> {\n  private ethQuery: any;\n\n  private registry: any;\n\n  private handle?: ReturnType<typeof setTimeout>;\n\n  private mutex = new Mutex();\n\n  private getNetworkState: () => NetworkState;\n\n  private messagingSystem: TransactionControllerMessenger;\n\n  private incomingTransactionHelper: IncomingTransactionHelper;\n\n  private failTransaction(transactionMeta: TransactionMeta, error: Error) {\n    const newTransactionMeta = {\n      ...transactionMeta,\n      error,\n      status: TransactionStatus.failed,\n    };\n    this.updateTransaction(newTransactionMeta);\n    this.hub.emit(`${transactionMeta.id}:finished`, newTransactionMeta);\n  }\n\n  private async registryLookup(fourBytePrefix: string): Promise<MethodData> {\n    const registryMethod = await this.registry.lookup(fourBytePrefix);\n    const parsedRegistryMethod = this.registry.parse(registryMethod);\n    return { registryMethod, parsedRegistryMethod };\n  }\n\n  /**\n   * EventEmitter instance used to listen to specific transactional events\n   */\n  hub = new EventEmitter();\n\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'TransactionController';\n\n  /**\n   * Method used to sign transactions\n   */\n  sign?: (\n    transaction: TypedTransaction,\n    from: string,\n  ) => Promise<TypedTransaction>;\n\n  /**\n   * Creates a TransactionController instance.\n   *\n   * @param options - The controller options.\n   * @param options.getNetworkState - Gets the state of the network controller.\n   * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.\n   * @param options.getProvider - Returns a provider for the current network.\n   * @param options.messenger - The controller messenger.\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(\n    {\n      getNetworkState,\n      onNetworkStateChange,\n      getProvider,\n      messenger,\n    }: {\n      getNetworkState: () => NetworkState;\n      onNetworkStateChange: (listener: (state: NetworkState) => void) => void;\n      getProvider: () => NetworkController['provider'];\n      messenger: TransactionControllerMessenger;\n    },\n    config?: Partial<TransactionConfig>,\n    state?: Partial<TransactionState>,\n  ) {\n    super(config, state);\n    this.defaultConfig = {\n      interval: 15000,\n      txHistoryLimit: 40,\n    };\n\n    this.defaultState = {\n      methodData: {},\n      transactions: [],\n    };\n    this.initialize();\n    const provider = getProvider();\n    this.getNetworkState = getNetworkState;\n    this.ethQuery = new EthQuery(provider);\n    this.registry = new MethodRegistry({ provider });\n    this.messagingSystem = messenger;\n    this.incomingTransactionHelper = new IncomingTransactionHelper({\n      getNetworkState,\n      getEthQuery: () => this.ethQuery,\n      transactionLimit: this.config.txHistoryLimit,\n      remoteTransactionSource: new EtherscanRemoteTransactionSource(),\n    });\n    onNetworkStateChange(() => {\n      const newProvider = getProvider();\n      this.ethQuery = new EthQuery(newProvider);\n      this.registry = new MethodRegistry({ provider: newProvider });\n    });\n    this.poll();\n  }\n\n  /**\n   * Starts a new polling interval.\n   *\n   * @param interval - The polling interval used to fetch new transaction statuses.\n   */\n  async poll(interval?: number): Promise<void> {\n    interval && this.configure({ interval }, false, false);\n    this.handle && clearTimeout(this.handle);\n    await safelyExecute(() => this.queryTransactionStatuses());\n    this.handle = setTimeout(() => {\n      this.poll(this.config.interval);\n    }, this.config.interval);\n  }\n\n  /**\n   * Handle new method data request.\n   *\n   * @param fourBytePrefix - The method prefix.\n   * @returns The method data object corresponding to the given signature prefix.\n   */\n  async handleMethodData(fourBytePrefix: string): Promise<MethodData> {\n    const releaseLock = await this.mutex.acquire();\n    try {\n      const { methodData } = this.state;\n      const knownMethod = Object.keys(methodData).find(\n        (knownFourBytePrefix) => fourBytePrefix === knownFourBytePrefix,\n      );\n      if (knownMethod) {\n        return methodData[fourBytePrefix];\n      }\n      const registry = await this.registryLookup(fourBytePrefix);\n      this.update({\n        methodData: { ...methodData, ...{ [fourBytePrefix]: registry } },\n      });\n      return registry;\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Add a new unapproved transaction to state. Parameters will be validated, a\n   * unique transaction id will be generated, and gas and gasPrice will be calculated\n   * if not provided. If A `<tx.id>:unapproved` hub event will be emitted once added.\n   *\n   * @param transaction - The transaction object to add.\n   * @param origin - The domain origin to append to the generated TransactionMeta.\n   * @param deviceConfirmedOn - An enum to indicate what device the transaction was confirmed to append to the generated TransactionMeta.\n   * @returns Object containing a promise resolving to the transaction hash if approved.\n   */\n  async addTransaction(\n    transaction: Transaction,\n    origin?: string,\n    deviceConfirmedOn?: WalletDevice,\n  ): Promise<Result> {\n    const { providerConfig, network } = this.getNetworkState();\n    const { transactions } = this.state;\n    transaction = normalizeTransaction(transaction);\n    validateTransaction(transaction);\n\n    const transactionMeta: TransactionMeta = {\n      id: random(),\n      networkID: network,\n      chainId: providerConfig.chainId,\n      origin,\n      status: TransactionStatus.unapproved as TransactionStatus.unapproved,\n      time: Date.now(),\n      transaction,\n      deviceConfirmedOn,\n      verifiedOnBlockchain: false,\n    };\n\n    try {\n      const { gas, estimateGasError } = await this.estimateGas(transaction);\n      transaction.gas = gas;\n      transaction.estimateGasError = estimateGasError;\n    } catch (error: any) {\n      this.failTransaction(transactionMeta, error);\n      return Promise.reject(error);\n    }\n\n    transactions.push(transactionMeta);\n    this.update({ transactions: this.trimTransactionsForState(transactions) });\n    this.hub.emit(`unapprovedTransaction`, transactionMeta);\n\n    return {\n      result: this.processApproval(transactionMeta),\n      transactionMeta,\n    };\n  }\n\n  prepareUnsignedEthTx(txParams: Record<string, unknown>): TypedTransaction {\n    return TransactionFactory.fromTxData(txParams, {\n      common: this.getCommonConfiguration(),\n      freeze: false,\n    });\n  }\n\n  /**\n   * `@ethereumjs/tx` uses `@ethereumjs/common` as a configuration tool for\n   * specifying which chain, network, hardfork and EIPs to support for\n   * a transaction. By referencing this configuration, and analyzing the fields\n   * specified in txParams, @ethereumjs/tx is able to determine which EIP-2718\n   * transaction type to use.\n   *\n   * @returns {Common} common configuration object\n   */\n\n  getCommonConfiguration(): Common {\n    const {\n      network: networkId,\n      providerConfig: { type: chain, chainId, nickname: name },\n    } = this.getNetworkState();\n\n    if (\n      chain !== RPC &&\n      chain !== 'linea-goerli' &&\n      chain !== 'linea-mainnet'\n    ) {\n      return new Common({ chain, hardfork: HARDFORK });\n    }\n\n    const customChainParams = {\n      name,\n      chainId: parseInt(chainId, undefined),\n      networkId: parseInt(networkId, undefined),\n    };\n\n    return Common.forCustomChain(MAINNET, customChainParams, HARDFORK);\n  }\n\n  /**\n   * Attempts to cancel a transaction based on its ID by setting its status to \"rejected\"\n   * and emitting a `<tx.id>:finished` hub event.\n   *\n   * @param transactionID - The ID of the transaction to cancel.\n   * @param gasValues - The gas values to use for the cancellation transation.\n   */\n  async stopTransaction(\n    transactionID: string,\n    gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n  ) {\n    if (gasValues) {\n      validateGasValues(gasValues);\n    }\n    const transactionMeta = this.state.transactions.find(\n      ({ id }) => id === transactionID,\n    );\n    if (!transactionMeta) {\n      return;\n    }\n\n    if (!this.sign) {\n      throw new Error('No sign method defined.');\n    }\n\n    // gasPrice (legacy non EIP1559)\n    const minGasPrice = getIncreasedPriceFromExisting(\n      transactionMeta.transaction.gasPrice,\n      CANCEL_RATE,\n    );\n\n    const gasPriceFromValues = isGasPriceValue(gasValues) && gasValues.gasPrice;\n\n    const newGasPrice =\n      (gasPriceFromValues &&\n        validateMinimumIncrease(gasPriceFromValues, minGasPrice)) ||\n      minGasPrice;\n\n    // maxFeePerGas (EIP1559)\n    const existingMaxFeePerGas = transactionMeta.transaction?.maxFeePerGas;\n    const minMaxFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxFeePerGas,\n      CANCEL_RATE,\n    );\n    const maxFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxFeePerGas;\n    const newMaxFeePerGas =\n      (maxFeePerGasValues &&\n        validateMinimumIncrease(maxFeePerGasValues, minMaxFeePerGas)) ||\n      (existingMaxFeePerGas && minMaxFeePerGas);\n\n    // maxPriorityFeePerGas (EIP1559)\n    const existingMaxPriorityFeePerGas =\n      transactionMeta.transaction?.maxPriorityFeePerGas;\n    const minMaxPriorityFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxPriorityFeePerGas,\n      CANCEL_RATE,\n    );\n    const maxPriorityFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxPriorityFeePerGas;\n    const newMaxPriorityFeePerGas =\n      (maxPriorityFeePerGasValues &&\n        validateMinimumIncrease(\n          maxPriorityFeePerGasValues,\n          minMaxPriorityFeePerGas,\n        )) ||\n      (existingMaxPriorityFeePerGas && minMaxPriorityFeePerGas);\n\n    const txParams =\n      newMaxFeePerGas && newMaxPriorityFeePerGas\n        ? {\n            from: transactionMeta.transaction.from,\n            gasLimit: transactionMeta.transaction.gas,\n            maxFeePerGas: newMaxFeePerGas,\n            maxPriorityFeePerGas: newMaxPriorityFeePerGas,\n            type: 2,\n            nonce: transactionMeta.transaction.nonce,\n            to: transactionMeta.transaction.from,\n            value: '0x0',\n          }\n        : {\n            from: transactionMeta.transaction.from,\n            gasLimit: transactionMeta.transaction.gas,\n            gasPrice: newGasPrice,\n            nonce: transactionMeta.transaction.nonce,\n            to: transactionMeta.transaction.from,\n            value: '0x0',\n          };\n\n    const unsignedEthTx = this.prepareUnsignedEthTx(txParams);\n\n    const signedTx = await this.sign(\n      unsignedEthTx,\n      transactionMeta.transaction.from,\n    );\n    const rawTransaction = bufferToHex(signedTx.serialize());\n    await query(this.ethQuery, 'sendRawTransaction', [rawTransaction]);\n    transactionMeta.status = TransactionStatus.cancelled;\n    this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n  }\n\n  /**\n   * Attempts to speed up a transaction increasing transaction gasPrice by ten percent.\n   *\n   * @param transactionID - The ID of the transaction to speed up.\n   * @param gasValues - The gas values to use for the speed up transation.\n   */\n  async speedUpTransaction(\n    transactionID: string,\n    gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n  ) {\n    if (gasValues) {\n      validateGasValues(gasValues);\n    }\n    const transactionMeta = this.state.transactions.find(\n      ({ id }) => id === transactionID,\n    );\n    /* istanbul ignore next */\n    if (!transactionMeta) {\n      return;\n    }\n\n    /* istanbul ignore next */\n    if (!this.sign) {\n      throw new Error('No sign method defined.');\n    }\n\n    const { transactions } = this.state;\n\n    // gasPrice (legacy non EIP1559)\n    const minGasPrice = getIncreasedPriceFromExisting(\n      transactionMeta.transaction.gasPrice,\n      SPEED_UP_RATE,\n    );\n\n    const gasPriceFromValues = isGasPriceValue(gasValues) && gasValues.gasPrice;\n\n    const newGasPrice =\n      (gasPriceFromValues &&\n        validateMinimumIncrease(gasPriceFromValues, minGasPrice)) ||\n      minGasPrice;\n\n    // maxFeePerGas (EIP1559)\n    const existingMaxFeePerGas = transactionMeta.transaction?.maxFeePerGas;\n    const minMaxFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxFeePerGas,\n      SPEED_UP_RATE,\n    );\n    const maxFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxFeePerGas;\n    const newMaxFeePerGas =\n      (maxFeePerGasValues &&\n        validateMinimumIncrease(maxFeePerGasValues, minMaxFeePerGas)) ||\n      (existingMaxFeePerGas && minMaxFeePerGas);\n\n    // maxPriorityFeePerGas (EIP1559)\n    const existingMaxPriorityFeePerGas =\n      transactionMeta.transaction?.maxPriorityFeePerGas;\n    const minMaxPriorityFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxPriorityFeePerGas,\n      SPEED_UP_RATE,\n    );\n    const maxPriorityFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxPriorityFeePerGas;\n    const newMaxPriorityFeePerGas =\n      (maxPriorityFeePerGasValues &&\n        validateMinimumIncrease(\n          maxPriorityFeePerGasValues,\n          minMaxPriorityFeePerGas,\n        )) ||\n      (existingMaxPriorityFeePerGas && minMaxPriorityFeePerGas);\n\n    const txParams =\n      newMaxFeePerGas && newMaxPriorityFeePerGas\n        ? {\n            ...transactionMeta.transaction,\n            gasLimit: transactionMeta.transaction.gas,\n            maxFeePerGas: newMaxFeePerGas,\n            maxPriorityFeePerGas: newMaxPriorityFeePerGas,\n            type: 2,\n          }\n        : {\n            ...transactionMeta.transaction,\n            gasLimit: transactionMeta.transaction.gas,\n            gasPrice: newGasPrice,\n          };\n\n    const unsignedEthTx = this.prepareUnsignedEthTx(txParams);\n\n    const signedTx = await this.sign(\n      unsignedEthTx,\n      transactionMeta.transaction.from,\n    );\n    const rawTransaction = bufferToHex(signedTx.serialize());\n    const transactionHash = await query(this.ethQuery, 'sendRawTransaction', [\n      rawTransaction,\n    ]);\n    const baseTransactionMeta = {\n      ...transactionMeta,\n      id: random(),\n      time: Date.now(),\n      transactionHash,\n    };\n    const newTransactionMeta =\n      newMaxFeePerGas && newMaxPriorityFeePerGas\n        ? {\n            ...baseTransactionMeta,\n            transaction: {\n              ...transactionMeta.transaction,\n              maxFeePerGas: newMaxFeePerGas,\n              maxPriorityFeePerGas: newMaxPriorityFeePerGas,\n            },\n          }\n        : {\n            ...baseTransactionMeta,\n            transaction: {\n              ...transactionMeta.transaction,\n              gasPrice: newGasPrice,\n            },\n          };\n    transactions.push(newTransactionMeta);\n    this.update({ transactions: this.trimTransactionsForState(transactions) });\n    this.hub.emit(`${transactionMeta.id}:speedup`, newTransactionMeta);\n  }\n\n  /**\n   * Estimates required gas for a given transaction.\n   *\n   * @param transaction - The transaction to estimate gas for.\n   * @returns The gas and gas price.\n   */\n  async estimateGas(transaction: Transaction) {\n    const estimatedTransaction = { ...transaction };\n    const {\n      gas,\n      gasPrice: providedGasPrice,\n      to,\n      value,\n      data,\n    } = estimatedTransaction;\n    const gasPrice =\n      typeof providedGasPrice === 'undefined'\n        ? await query(this.ethQuery, 'gasPrice')\n        : providedGasPrice;\n    const { isCustomNetwork } = this.getNetworkState();\n    // 1. If gas is already defined on the transaction, use it\n    if (typeof gas !== 'undefined') {\n      return { gas, gasPrice };\n    }\n    const { gasLimit } = await query(this.ethQuery, 'getBlockByNumber', [\n      'latest',\n      false,\n    ]);\n\n    // 2. If to is not defined or this is not a contract address, and there is no data use 0x5208 / 21000.\n    // If the newtwork is a custom network then bypass this check and fetch 'estimateGas'.\n    /* istanbul ignore next */\n    const code = to ? await query(this.ethQuery, 'getCode', [to]) : undefined;\n    /* istanbul ignore next */\n    if (\n      !isCustomNetwork &&\n      (!to || (to && !data && (!code || code === '0x')))\n    ) {\n      return { gas: '0x5208', gasPrice };\n    }\n\n    // if data, should be hex string format\n    estimatedTransaction.data = !data\n      ? data\n      : /* istanbul ignore next */ addHexPrefix(data);\n\n    // 3. If this is a contract address, safely estimate gas using RPC\n    estimatedTransaction.value =\n      typeof value === 'undefined' ? '0x0' : /* istanbul ignore next */ value;\n    const gasLimitBN = hexToBN(gasLimit);\n    estimatedTransaction.gas = BNToHex(fractionBN(gasLimitBN, 19, 20));\n\n    let gasHex;\n    let estimateGasError;\n    try {\n      gasHex = await query(this.ethQuery, 'estimateGas', [\n        estimatedTransaction,\n      ]);\n    } catch (error) {\n      estimateGasError = ESTIMATE_GAS_ERROR;\n    }\n    // 4. Pad estimated gas without exceeding the most recent block gasLimit. If the network is a\n    // a custom network then return the eth_estimateGas value.\n    const gasBN = hexToBN(gasHex);\n    const maxGasBN = gasLimitBN.muln(0.9);\n    const paddedGasBN = gasBN.muln(1.5);\n    /* istanbul ignore next */\n    if (gasBN.gt(maxGasBN) || isCustomNetwork) {\n      return { gas: addHexPrefix(gasHex), gasPrice, estimateGasError };\n    }\n\n    /* istanbul ignore next */\n    if (paddedGasBN.lt(maxGasBN)) {\n      return {\n        gas: addHexPrefix(BNToHex(paddedGasBN)),\n        gasPrice,\n        estimateGasError,\n      };\n    }\n    return { gas: addHexPrefix(BNToHex(maxGasBN)), gasPrice };\n  }\n\n  /**\n   * Check the status of submitted transactions on the network to determine whether they have\n   * been included in a block. Any that have been included in a block are marked as confirmed.\n   */\n  async queryTransactionStatuses() {\n    const { transactions } = this.state;\n    const { providerConfig, network: currentNetworkID } =\n      this.getNetworkState();\n    const { chainId: currentChainId } = providerConfig;\n    let gotUpdates = false;\n    await safelyExecute(() =>\n      Promise.all(\n        transactions.map(async (meta, index) => {\n          // Using fallback to networkID only when there is no chainId present.\n          // Should be removed when networkID is completely removed.\n          const txBelongsToCurrentChain =\n            meta.chainId === currentChainId ||\n            (!meta.chainId && meta.networkID === currentNetworkID);\n\n          if (!meta.verifiedOnBlockchain && txBelongsToCurrentChain) {\n            const [reconciledTx, updateRequired] =\n              await this.blockchainTransactionStateReconciler(meta);\n            if (updateRequired) {\n              transactions[index] = reconciledTx;\n              gotUpdates = updateRequired;\n            }\n          }\n        }),\n      ),\n    );\n\n    /* istanbul ignore else */\n    if (gotUpdates) {\n      this.update({\n        transactions: this.trimTransactionsForState(transactions),\n      });\n    }\n  }\n\n  /**\n   * Updates an existing transaction in state.\n   *\n   * @param transactionMeta - The new transaction to store in state.\n   */\n  updateTransaction(transactionMeta: TransactionMeta) {\n    const { transactions } = this.state;\n    transactionMeta.transaction = normalizeTransaction(\n      transactionMeta.transaction,\n    );\n    validateTransaction(transactionMeta.transaction);\n    const index = transactions.findIndex(({ id }) => transactionMeta.id === id);\n    transactions[index] = transactionMeta;\n    this.update({ transactions: this.trimTransactionsForState(transactions) });\n  }\n\n  /**\n   * Removes all transactions from state, optionally based on the current network.\n   *\n   * @param ignoreNetwork - Determines whether to wipe all transactions, or just those on the\n   * current network. If `true`, all transactions are wiped.\n   */\n  wipeTransactions(ignoreNetwork?: boolean) {\n    /* istanbul ignore next */\n    if (ignoreNetwork) {\n      this.update({ transactions: [] });\n      return;\n    }\n    const { providerConfig, network: currentNetworkID } =\n      this.getNetworkState();\n    const { chainId: currentChainId } = providerConfig;\n    const newTransactions = this.state.transactions.filter(\n      ({ networkID, chainId }) => {\n        // Using fallback to networkID only when there is no chainId present. Should be removed when networkID is completely removed.\n        const isCurrentNetwork =\n          chainId === currentChainId ||\n          (!chainId && networkID === currentNetworkID);\n        return !isCurrentNetwork;\n      },\n    );\n\n    this.update({\n      transactions: this.trimTransactionsForState(newTransactions),\n    });\n  }\n\n  /**\n   * Get transactions from Etherscan for the given address. By default all transactions are\n   * returned, but the `fromBlock` option can be given to filter just for transactions from a\n   * specific block onward.\n   *\n   * @param address - The address to fetch the transactions for.\n   * @param opt - Object containing optional data, fromBlock and Etherscan API key.\n   * @returns The block number of the latest incoming transaction.\n   */\n  async fetchAll(\n    address: string,\n    opt?: FetchAllOptions,\n  ): Promise<string | void> {\n    const { transactions: localTransactions } = this.state;\n\n    const { updateRequired, transactions, latestBlockNumber } =\n      await this.incomingTransactionHelper.reconcile({\n        address,\n        localTransactions,\n        fromBlock: opt?.fromBlock,\n        apiKey: opt?.etherscanApiKey,\n      });\n\n    if (updateRequired) {\n      this.update({\n        transactions: this.trimTransactionsForState(transactions),\n      });\n    }\n\n    return latestBlockNumber;\n  }\n\n  /**\n   * Trim the amount of transactions that are set on the state. Checks\n   * if the length of the tx history is longer then desired persistence\n   * limit and then if it is removes the oldest confirmed or rejected tx.\n   * Pending or unapproved transactions will not be removed by this\n   * operation. For safety of presenting a fully functional transaction UI\n   * representation, this function will not break apart transactions with the\n   * same nonce, created on the same day, per network. Not accounting for transactions of the same\n   * nonce, same day and network combo can result in confusing or broken experiences\n   * in the UI. The transactions are then updated using the BaseController update.\n   *\n   * @param transactions - The transactions to be applied to the state.\n   * @returns The trimmed list of transactions.\n   */\n  private trimTransactionsForState(\n    transactions: TransactionMeta[],\n  ): TransactionMeta[] {\n    const nonceNetworkSet = new Set();\n    const txsToKeep = transactions.reverse().filter((tx) => {\n      const { chainId, networkID, status, transaction, time } = tx;\n      if (transaction) {\n        const key = `${transaction.nonce}-${chainId ?? networkID}-${new Date(\n          time,\n        ).toDateString()}`;\n        if (nonceNetworkSet.has(key)) {\n          return true;\n        } else if (\n          nonceNetworkSet.size < this.config.txHistoryLimit ||\n          !this.isFinalState(status)\n        ) {\n          nonceNetworkSet.add(key);\n          return true;\n        }\n      }\n      return false;\n    });\n    txsToKeep.reverse();\n    return txsToKeep;\n  }\n\n  /**\n   * Determines if the transaction is in a final state.\n   *\n   * @param status - The transaction status.\n   * @returns Whether the transaction is in a final state.\n   */\n  private isFinalState(status: TransactionStatus): boolean {\n    return (\n      status === TransactionStatus.rejected ||\n      status === TransactionStatus.confirmed ||\n      status === TransactionStatus.failed ||\n      status === TransactionStatus.cancelled\n    );\n  }\n\n  /**\n   * Method to verify the state of a transaction using the Blockchain as a source of truth.\n   *\n   * @param meta - The local transaction to verify on the blockchain.\n   * @returns A tuple containing the updated transaction, and whether or not an update was required.\n   */\n  private async blockchainTransactionStateReconciler(\n    meta: TransactionMeta,\n  ): Promise<[TransactionMeta, boolean]> {\n    const { status, transactionHash } = meta;\n    switch (status) {\n      case TransactionStatus.confirmed:\n        const txReceipt = await query(this.ethQuery, 'getTransactionReceipt', [\n          transactionHash,\n        ]);\n\n        if (!txReceipt) {\n          return [meta, false];\n        }\n\n        meta.verifiedOnBlockchain = true;\n        meta.transaction.gasUsed = txReceipt.gasUsed;\n\n        // According to the Web3 docs:\n        // TRUE if the transaction was successful, FALSE if the EVM reverted the transaction.\n        if (Number(txReceipt.status) === 0) {\n          const error: Error = new Error(\n            'Transaction failed. The transaction was reversed',\n          );\n          this.failTransaction(meta, error);\n          return [meta, false];\n        }\n\n        return [meta, true];\n      case TransactionStatus.submitted:\n        const txObj = await query(this.ethQuery, 'getTransactionByHash', [\n          transactionHash,\n        ]);\n\n        if (!txObj) {\n          const receiptShowsFailedStatus =\n            await this.checkTxReceiptStatusIsFailed(transactionHash);\n\n          // Case the txObj is evaluated as false, a second check will\n          // determine if the tx failed or it is pending or confirmed\n          if (receiptShowsFailedStatus) {\n            const error: Error = new Error(\n              'Transaction failed. The transaction was dropped or replaced by a new one',\n            );\n            this.failTransaction(meta, error);\n          }\n        }\n\n        /* istanbul ignore next */\n        if (txObj?.blockNumber) {\n          meta.status = TransactionStatus.confirmed;\n          this.hub.emit(`${meta.id}:confirmed`, meta);\n          return [meta, true];\n        }\n\n        return [meta, false];\n      default:\n        return [meta, false];\n    }\n  }\n\n  /**\n   * Method to check if a tx has failed according to their receipt\n   * According to the Web3 docs:\n   * TRUE if the transaction was successful, FALSE if the EVM reverted the transaction.\n   * The receipt is not available for pending transactions and returns null.\n   *\n   * @param txHash - The transaction hash.\n   * @returns Whether the transaction has failed.\n   */\n  private async checkTxReceiptStatusIsFailed(\n    txHash: string | undefined,\n  ): Promise<boolean> {\n    const txReceipt = await query(this.ethQuery, 'getTransactionReceipt', [\n      txHash,\n    ]);\n    if (!txReceipt) {\n      // Transaction is pending\n      return false;\n    }\n    return Number(txReceipt.status) === 0;\n  }\n\n  private async processApproval(\n    transactionMeta: TransactionMeta,\n  ): Promise<string> {\n    const transactionId = transactionMeta.id;\n    let resultCallbacks: AcceptResultCallbacks | undefined;\n\n    try {\n      const acceptResult = await this.requestApproval(transactionMeta);\n      resultCallbacks = acceptResult.resultCallbacks;\n\n      const { meta, isCompleted } = this.isTransactionCompleted(transactionId);\n\n      if (meta && !isCompleted) {\n        await this.approveTransaction(transactionId);\n      }\n    } catch (error: any) {\n      const { meta, isCompleted } = this.isTransactionCompleted(transactionId);\n\n      if (meta && !isCompleted) {\n        if (error.code === errorCodes.provider.userRejectedRequest) {\n          this.cancelTransaction(transactionId);\n\n          throw ethErrors.provider.userRejectedRequest(\n            'User rejected the transaction',\n          );\n        } else {\n          this.failTransaction(meta, error);\n        }\n      }\n    }\n\n    const finalMeta = this.getTransaction(transactionId);\n\n    switch (finalMeta?.status) {\n      case TransactionStatus.failed:\n        resultCallbacks?.error(finalMeta.error);\n        throw ethErrors.rpc.internal(finalMeta.error.message);\n\n      case TransactionStatus.cancelled:\n        const cancelError = ethErrors.rpc.internal(\n          'User cancelled the transaction',\n        );\n\n        resultCallbacks?.error(cancelError);\n        throw cancelError;\n\n      case TransactionStatus.submitted:\n        resultCallbacks?.success();\n        return finalMeta.transactionHash as string;\n\n      default:\n        const internalError = ethErrors.rpc.internal(\n          `MetaMask Tx Signature: Unknown problem: ${JSON.stringify(\n            finalMeta || transactionId,\n          )}`,\n        );\n\n        resultCallbacks?.error(internalError);\n        throw internalError;\n    }\n  }\n\n  private async requestApproval(txMeta: TransactionMeta): Promise<AddResult> {\n    const id = this.getApprovalId(txMeta);\n    const { origin } = txMeta;\n    const type = 'transaction';\n    const requestData = { txId: txMeta.id };\n\n    return this.messagingSystem.call(\n      'ApprovalController:addRequest',\n      {\n        id,\n        origin: origin || 'metamask',\n        type,\n        requestData,\n        expectsResult: true,\n      },\n      true,\n    ) as Promise<AddResult>;\n  }\n\n  private getApprovalId(txMeta: TransactionMeta) {\n    return String(txMeta.id);\n  }\n\n  /**\n   * Approves a transaction and updates it's status in state. If this is not a\n   * retry transaction, a nonce will be generated. The transaction is signed\n   * using the sign configuration property, then published to the blockchain.\n   * A `<tx.id>:finished` hub event is fired after success or failure.\n   *\n   * @param transactionID - The ID of the transaction to approve.\n   */\n  private async approveTransaction(transactionID: string) {\n    const { transactions } = this.state;\n    const releaseLock = await this.mutex.acquire();\n    const { providerConfig } = this.getNetworkState();\n    const { chainId: currentChainId } = providerConfig;\n    const index = transactions.findIndex(({ id }) => transactionID === id);\n    const transactionMeta = transactions[index];\n    const { nonce } = transactionMeta.transaction;\n\n    try {\n      const { from } = transactionMeta.transaction;\n      if (!this.sign) {\n        releaseLock();\n        this.failTransaction(\n          transactionMeta,\n          new Error('No sign method defined.'),\n        );\n        return;\n      } else if (!currentChainId) {\n        releaseLock();\n        this.failTransaction(transactionMeta, new Error('No chainId defined.'));\n        return;\n      }\n\n      const chainId = parseInt(currentChainId, undefined);\n      const { approved: status } = TransactionStatus;\n\n      const txNonce =\n        nonce ||\n        (await query(this.ethQuery, 'getTransactionCount', [from, 'pending']));\n\n      transactionMeta.status = status;\n      transactionMeta.transaction.nonce = txNonce;\n      transactionMeta.transaction.chainId = chainId;\n\n      const baseTxParams = {\n        ...transactionMeta.transaction,\n        gasLimit: transactionMeta.transaction.gas,\n        chainId,\n        nonce: txNonce,\n        status,\n      };\n\n      const isEIP1559 = isEIP1559Transaction(transactionMeta.transaction);\n\n      const txParams = isEIP1559\n        ? {\n            ...baseTxParams,\n            maxFeePerGas: transactionMeta.transaction.maxFeePerGas,\n            maxPriorityFeePerGas:\n              transactionMeta.transaction.maxPriorityFeePerGas,\n            estimatedBaseFee: transactionMeta.transaction.estimatedBaseFee,\n            // specify type 2 if maxFeePerGas and maxPriorityFeePerGas are set\n            type: 2,\n          }\n        : baseTxParams;\n\n      // delete gasPrice if maxFeePerGas and maxPriorityFeePerGas are set\n      if (isEIP1559) {\n        delete txParams.gasPrice;\n      }\n\n      const unsignedEthTx = this.prepareUnsignedEthTx(txParams);\n      const signedTx = await this.sign(unsignedEthTx, from);\n      transactionMeta.status = TransactionStatus.signed;\n      this.updateTransaction(transactionMeta);\n      const rawTransaction = bufferToHex(signedTx.serialize());\n\n      transactionMeta.rawTransaction = rawTransaction;\n      this.updateTransaction(transactionMeta);\n      const transactionHash = await query(this.ethQuery, 'sendRawTransaction', [\n        rawTransaction,\n      ]);\n      transactionMeta.transactionHash = transactionHash;\n      transactionMeta.status = TransactionStatus.submitted;\n      this.updateTransaction(transactionMeta);\n      this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n    } catch (error: any) {\n      this.failTransaction(transactionMeta, error);\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Cancels a transaction based on its ID by setting its status to \"rejected\"\n   * and emitting a `<tx.id>:finished` hub event.\n   *\n   * @param transactionID - The ID of the transaction to cancel.\n   */\n  private cancelTransaction(transactionID: string) {\n    const transactionMeta = this.state.transactions.find(\n      ({ id }) => id === transactionID,\n    );\n    if (!transactionMeta) {\n      return;\n    }\n    transactionMeta.status = TransactionStatus.rejected;\n    this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n    const transactions = this.state.transactions.filter(\n      ({ id }) => id !== transactionID,\n    );\n    this.update({ transactions: this.trimTransactionsForState(transactions) });\n  }\n\n  /**\n   * Whether the transaction has at least completed all local processing.\n   *\n   * @param status - The transaction status.\n   * @returns Whether the transaction is in a final state.\n   */\n  private isLocalFinalState(status: TransactionStatus): boolean {\n    return [\n      TransactionStatus.cancelled,\n      TransactionStatus.confirmed,\n      TransactionStatus.failed,\n      TransactionStatus.rejected,\n      TransactionStatus.submitted,\n    ].includes(status);\n  }\n\n  private getTransaction(transactionID: string): TransactionMeta | undefined {\n    const { transactions } = this.state;\n    return transactions.find(({ id }) => id === transactionID);\n  }\n\n  private isTransactionCompleted(transactionid: string): {\n    meta?: TransactionMeta;\n    isCompleted: boolean;\n  } {\n    const transaction = this.getTransaction(transactionid);\n\n    if (!transaction) {\n      return { meta: undefined, isCompleted: false };\n    }\n\n    const isCompleted = this.isLocalFinalState(transaction.status);\n\n    return { meta: transaction, isCompleted };\n  }\n}\n\nexport default TransactionController;\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/etherscan.d.ts b/node_modules/@metamask/transaction-controller/dist/etherscan.d.ts
new file mode 100644
index 0000000..7c66ddd
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/etherscan.d.ts
@@ -0,0 +1,65 @@
+import { NetworkType } from '@metamask/controller-utils';
+export interface EtherscanTransactionMetaBase {
+    blockNumber: string;
+    blockHash: string;
+    confirmations: string;
+    contractAddress: string;
+    cumulativeGasUsed: string;
+    from: string;
+    gas: string;
+    gasPrice: string;
+    gasUsed: string;
+    hash: string;
+    nonce: string;
+    timeStamp: string;
+    to: string;
+    transactionIndex: string;
+    value: string;
+}
+export interface EtherscanTransactionMeta extends EtherscanTransactionMetaBase {
+    functionName: string;
+    input: string;
+    isError: string;
+    methodId: string;
+    txreceipt_status: string;
+}
+export interface EtherscanTokenTransactionMeta extends EtherscanTransactionMetaBase {
+    tokenDecimal: string;
+    tokenName: string;
+    tokenSymbol: string;
+}
+export interface EtherscanTransactionResponse<T extends EtherscanTransactionMetaBase> {
+    status: '0' | '1';
+    result: T[];
+}
+export interface EtherscanTransactionRequest {
+    address: string;
+    networkType: NetworkType;
+    limit: number;
+    fromBlock?: string;
+    apiKey?: string;
+}
+/**
+ * Retrieves transaction data from Etherscan.
+ *
+ * @param request - Configuration required to fetch transactions.
+ * @param request.address - Address to retrieve transactions for.
+ * @param request.networkType - Current network type used to determine the Etherscan subdomain.
+ * @param request.limit - Number of transactions to retrieve.
+ * @param request.apiKey - Etherscan API key.
+ * @param request.fromBlock - Block number to start fetching transactions from.
+ * @returns An Etherscan response object containing the request status and an array of token transaction data.
+ */
+export declare function fetchEtherscanTransactions({ address, networkType, limit, apiKey, fromBlock, }: EtherscanTransactionRequest): Promise<EtherscanTransactionResponse<EtherscanTransactionMeta>>;
+/**
+ * Retrieves token transaction data from Etherscan.
+ *
+ * @param request - Configuration required to fetch token transactions.
+ * @param request.address - Address to retrieve token transactions for.
+ * @param request.networkType - Current network type used to determine the Etherscan subdomain.
+ * @param request.limit - Number of token transactions to retrieve.
+ * @param request.apiKey - Etherscan API key.
+ * @param request.fromBlock - Block number to start fetching token transactions from.
+ * @returns An Etherscan response object containing the request status and an array of token transaction data.
+ */
+export declare function fetchEtherscanTokenTransactions({ address, networkType, limit, apiKey, fromBlock, }: EtherscanTransactionRequest): Promise<EtherscanTransactionResponse<EtherscanTokenTransactionMeta>>;
diff --git a/node_modules/@metamask/transaction-controller/dist/etherscan.js b/node_modules/@metamask/transaction-controller/dist/etherscan.js
new file mode 100644
index 0000000..169dd53
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/etherscan.js
@@ -0,0 +1,114 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.fetchEtherscanTokenTransactions = exports.fetchEtherscanTransactions = void 0;
+const controller_utils_1 = require("@metamask/controller-utils");
+/**
+ * Retrieves transaction data from Etherscan.
+ *
+ * @param request - Configuration required to fetch transactions.
+ * @param request.address - Address to retrieve transactions for.
+ * @param request.networkType - Current network type used to determine the Etherscan subdomain.
+ * @param request.limit - Number of transactions to retrieve.
+ * @param request.apiKey - Etherscan API key.
+ * @param request.fromBlock - Block number to start fetching transactions from.
+ * @returns An Etherscan response object containing the request status and an array of token transaction data.
+ */
+function fetchEtherscanTransactions({ address, networkType, limit, apiKey, fromBlock, }) {
+    return __awaiter(this, void 0, void 0, function* () {
+        return yield fetchTransactions('txlist', {
+            address,
+            networkType,
+            limit,
+            fromBlock,
+            apiKey,
+        });
+    });
+}
+exports.fetchEtherscanTransactions = fetchEtherscanTransactions;
+/**
+ * Retrieves token transaction data from Etherscan.
+ *
+ * @param request - Configuration required to fetch token transactions.
+ * @param request.address - Address to retrieve token transactions for.
+ * @param request.networkType - Current network type used to determine the Etherscan subdomain.
+ * @param request.limit - Number of token transactions to retrieve.
+ * @param request.apiKey - Etherscan API key.
+ * @param request.fromBlock - Block number to start fetching token transactions from.
+ * @returns An Etherscan response object containing the request status and an array of token transaction data.
+ */
+function fetchEtherscanTokenTransactions({ address, networkType, limit, apiKey, fromBlock, }) {
+    return __awaiter(this, void 0, void 0, function* () {
+        return yield fetchTransactions('tokentx', {
+            address,
+            networkType,
+            limit,
+            fromBlock,
+            apiKey,
+        });
+    });
+}
+exports.fetchEtherscanTokenTransactions = fetchEtherscanTokenTransactions;
+/**
+ * Retrieves transaction data from Etherscan from a specific endpoint.
+ *
+ * @param action - The Etherscan endpoint to use.
+ * @param options - Options bag.
+ * @param options.address - Address to retrieve transactions for.
+ * @param options.networkType - Current network type used to determine the Etherscan subdomain.
+ * @param options.limit - Number of transactions to retrieve.
+ * @param options.apiKey - Etherscan API key.
+ * @param options.fromBlock - Block number to start fetching transactions from.
+ * @returns An object containing the request status and an array of transaction data.
+ */
+function fetchTransactions(action, { address, networkType, limit, apiKey, fromBlock, }) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const urlParams = {
+            module: 'account',
+            address,
+            startBlock: fromBlock,
+            apikey: apiKey,
+            offset: limit.toString(),
+            order: 'desc',
+        };
+        const etherscanTxUrl = getEtherscanApiUrl(networkType, Object.assign(Object.assign({}, urlParams), { action }));
+        const response = (yield (0, controller_utils_1.handleFetch)(etherscanTxUrl));
+        if (response.status === '0' || response.result.length <= 0) {
+            return { status: response.status, result: [] };
+        }
+        return response;
+    });
+}
+/**
+ * Return a URL that can be used to fetch data from Etherscan.
+ *
+ * @param networkType - Network type of desired network.
+ * @param urlParams - The parameters used to construct the URL.
+ * @returns URL to access Etherscan data.
+ */
+function getEtherscanApiUrl(networkType, urlParams) {
+    let etherscanSubdomain = 'api';
+    if (networkType !== controller_utils_1.MAINNET) {
+        etherscanSubdomain = `api-${networkType}`;
+    }
+    const apiUrl = `https://${etherscanSubdomain}.etherscan.io`;
+    let url = `${apiUrl}/api?`;
+    for (const paramKey in urlParams) {
+        const value = urlParams[paramKey];
+        if (!value) {
+            continue;
+        }
+        url += `${paramKey}=${value}&`;
+    }
+    url += 'tag=latest&page=1';
+    return url;
+}
+//# sourceMappingURL=etherscan.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/etherscan.js.map b/node_modules/@metamask/transaction-controller/dist/etherscan.js.map
new file mode 100644
index 0000000..9320ce2
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/etherscan.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"etherscan.js","sourceRoot":"","sources":["../src/etherscan.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,iEAA+E;AAkD/E;;;;;;;;;;GAUG;AACH,SAAsB,0BAA0B,CAAC,EAC/C,OAAO,EACP,WAAW,EACX,KAAK,EACL,MAAM,EACN,SAAS,GACmB;;QAG5B,OAAO,MAAM,iBAAiB,CAAC,QAAQ,EAAE;YACvC,OAAO;YACP,WAAW;YACX,KAAK;YACL,SAAS;YACT,MAAM;SACP,CAAC,CAAC;IACL,CAAC;CAAA;AAhBD,gEAgBC;AAED;;;;;;;;;;GAUG;AACH,SAAsB,+BAA+B,CAAC,EACpD,OAAO,EACP,WAAW,EACX,KAAK,EACL,MAAM,EACN,SAAS,GACmB;;QAG5B,OAAO,MAAM,iBAAiB,CAAC,SAAS,EAAE;YACxC,OAAO;YACP,WAAW;YACX,KAAK;YACL,SAAS;YACT,MAAM;SACP,CAAC,CAAC;IACL,CAAC;CAAA;AAhBD,0EAgBC;AAED;;;;;;;;;;;GAWG;AACH,SAAe,iBAAiB,CAC9B,MAAc,EACd,EACE,OAAO,EACP,WAAW,EACX,KAAK,EACL,MAAM,EACN,SAAS,GAOV;;QAED,MAAM,SAAS,GAAG;YAChB,MAAM,EAAE,SAAS;YACjB,OAAO;YACP,UAAU,EAAE,SAAS;YACrB,MAAM,EAAE,MAAM;YACd,MAAM,EAAE,KAAK,CAAC,QAAQ,EAAE;YACxB,KAAK,EAAE,MAAM;SACd,CAAC;QAEF,MAAM,cAAc,GAAG,kBAAkB,CAAC,WAAW,kCAChD,SAAS,KACZ,MAAM,IACN,CAAC;QAEH,MAAM,QAAQ,GAAG,CAAC,MAAM,IAAA,8BAAW,EACjC,cAAc,CACf,CAAoC,CAAC;QAEtC,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE;YAC1D,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;SAChD;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;CAAA;AAED;;;;;;GAMG;AACH,SAAS,kBAAkB,CACzB,WAAmB,EACnB,SAA6C;IAE7C,IAAI,kBAAkB,GAAG,KAAK,CAAC;IAE/B,IAAI,WAAW,KAAK,0BAAO,EAAE;QAC3B,kBAAkB,GAAG,OAAO,WAAW,EAAE,CAAC;KAC3C;IAED,MAAM,MAAM,GAAG,WAAW,kBAAkB,eAAe,CAAC;IAC5D,IAAI,GAAG,GAAG,GAAG,MAAM,OAAO,CAAC;IAE3B,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;QAChC,MAAM,KAAK,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC;QAElC,IAAI,CAAC,KAAK,EAAE;YACV,SAAS;SACV;QAED,GAAG,IAAI,GAAG,QAAQ,IAAI,KAAK,GAAG,CAAC;KAChC;IAED,GAAG,IAAI,mBAAmB,CAAC;IAE3B,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["import { MAINNET, NetworkType, handleFetch } from '@metamask/controller-utils';\n\nexport interface EtherscanTransactionMetaBase {\n  blockNumber: string;\n  blockHash: string;\n  confirmations: string;\n  contractAddress: string;\n  cumulativeGasUsed: string;\n  from: string;\n  gas: string;\n  gasPrice: string;\n  gasUsed: string;\n  hash: string;\n  nonce: string;\n  timeStamp: string;\n  to: string;\n  transactionIndex: string;\n  value: string;\n}\n\nexport interface EtherscanTransactionMeta extends EtherscanTransactionMetaBase {\n  functionName: string;\n  input: string;\n  isError: string;\n  methodId: string;\n  txreceipt_status: string;\n}\n\nexport interface EtherscanTokenTransactionMeta\n  extends EtherscanTransactionMetaBase {\n  tokenDecimal: string;\n  tokenName: string;\n  tokenSymbol: string;\n}\n\nexport interface EtherscanTransactionResponse<\n  T extends EtherscanTransactionMetaBase,\n> {\n  status: '0' | '1';\n  result: T[];\n}\n\nexport interface EtherscanTransactionRequest {\n  address: string;\n  networkType: NetworkType;\n  limit: number;\n  fromBlock?: string;\n  apiKey?: string;\n}\n\n/**\n * Retrieves transaction data from Etherscan.\n *\n * @param request - Configuration required to fetch transactions.\n * @param request.address - Address to retrieve transactions for.\n * @param request.networkType - Current network type used to determine the Etherscan subdomain.\n * @param request.limit - Number of transactions to retrieve.\n * @param request.apiKey - Etherscan API key.\n * @param request.fromBlock - Block number to start fetching transactions from.\n * @returns An Etherscan response object containing the request status and an array of token transaction data.\n */\nexport async function fetchEtherscanTransactions({\n  address,\n  networkType,\n  limit,\n  apiKey,\n  fromBlock,\n}: EtherscanTransactionRequest): Promise<\n  EtherscanTransactionResponse<EtherscanTransactionMeta>\n> {\n  return await fetchTransactions('txlist', {\n    address,\n    networkType,\n    limit,\n    fromBlock,\n    apiKey,\n  });\n}\n\n/**\n * Retrieves token transaction data from Etherscan.\n *\n * @param request - Configuration required to fetch token transactions.\n * @param request.address - Address to retrieve token transactions for.\n * @param request.networkType - Current network type used to determine the Etherscan subdomain.\n * @param request.limit - Number of token transactions to retrieve.\n * @param request.apiKey - Etherscan API key.\n * @param request.fromBlock - Block number to start fetching token transactions from.\n * @returns An Etherscan response object containing the request status and an array of token transaction data.\n */\nexport async function fetchEtherscanTokenTransactions({\n  address,\n  networkType,\n  limit,\n  apiKey,\n  fromBlock,\n}: EtherscanTransactionRequest): Promise<\n  EtherscanTransactionResponse<EtherscanTokenTransactionMeta>\n> {\n  return await fetchTransactions('tokentx', {\n    address,\n    networkType,\n    limit,\n    fromBlock,\n    apiKey,\n  });\n}\n\n/**\n * Retrieves transaction data from Etherscan from a specific endpoint.\n *\n * @param action - The Etherscan endpoint to use.\n * @param options - Options bag.\n * @param options.address - Address to retrieve transactions for.\n * @param options.networkType - Current network type used to determine the Etherscan subdomain.\n * @param options.limit - Number of transactions to retrieve.\n * @param options.apiKey - Etherscan API key.\n * @param options.fromBlock - Block number to start fetching transactions from.\n * @returns An object containing the request status and an array of transaction data.\n */\nasync function fetchTransactions<T extends EtherscanTransactionMetaBase>(\n  action: string,\n  {\n    address,\n    networkType,\n    limit,\n    apiKey,\n    fromBlock,\n  }: {\n    address: string;\n    networkType: NetworkType;\n    limit: number;\n    fromBlock?: string;\n    apiKey?: string;\n  },\n): Promise<EtherscanTransactionResponse<T>> {\n  const urlParams = {\n    module: 'account',\n    address,\n    startBlock: fromBlock,\n    apikey: apiKey,\n    offset: limit.toString(),\n    order: 'desc',\n  };\n\n  const etherscanTxUrl = getEtherscanApiUrl(networkType, {\n    ...urlParams,\n    action,\n  });\n\n  const response = (await handleFetch(\n    etherscanTxUrl,\n  )) as EtherscanTransactionResponse<T>;\n\n  if (response.status === '0' || response.result.length <= 0) {\n    return { status: response.status, result: [] };\n  }\n\n  return response;\n}\n\n/**\n * Return a URL that can be used to fetch data from Etherscan.\n *\n * @param networkType - Network type of desired network.\n * @param urlParams - The parameters used to construct the URL.\n * @returns URL to access Etherscan data.\n */\nfunction getEtherscanApiUrl(\n  networkType: string,\n  urlParams: Record<string, string | undefined>,\n): string {\n  let etherscanSubdomain = 'api';\n\n  if (networkType !== MAINNET) {\n    etherscanSubdomain = `api-${networkType}`;\n  }\n\n  const apiUrl = `https://${etherscanSubdomain}.etherscan.io`;\n  let url = `${apiUrl}/api?`;\n\n  for (const paramKey in urlParams) {\n    const value = urlParams[paramKey];\n\n    if (!value) {\n      continue;\n    }\n\n    url += `${paramKey}=${value}&`;\n  }\n\n  url += 'tag=latest&page=1';\n\n  return url;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/index.d.ts b/node_modules/@metamask/transaction-controller/dist/index.d.ts
index def5ced..1817e69 100644
--- a/node_modules/@metamask/transaction-controller/dist/index.d.ts
+++ b/node_modules/@metamask/transaction-controller/dist/index.d.ts
@@ -1,2 +1,3 @@
 export * from './TransactionController';
 export { isEIP1559Transaction } from './utils';
+export * from './types';
diff --git a/node_modules/@metamask/transaction-controller/dist/index.js b/node_modules/@metamask/transaction-controller/dist/index.js
index a1c07c8..602f51c 100644
--- a/node_modules/@metamask/transaction-controller/dist/index.js
+++ b/node_modules/@metamask/transaction-controller/dist/index.js
@@ -18,4 +18,5 @@ exports.isEIP1559Transaction = void 0;
 __exportStar(require("./TransactionController"), exports);
 var utils_1 = require("./utils");
 Object.defineProperty(exports, "isEIP1559Transaction", { enumerable: true, get: function () { return utils_1.isEIP1559Transaction; } });
+__exportStar(require("./types"), exports);
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/index.js.map b/node_modules/@metamask/transaction-controller/dist/index.js.map
index a4460fa..f2836b8 100644
--- a/node_modules/@metamask/transaction-controller/dist/index.js.map
+++ b/node_modules/@metamask/transaction-controller/dist/index.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,0DAAwC;AACxC,iCAA+C;AAAtC,6GAAA,oBAAoB,OAAA","sourcesContent":["export * from './TransactionController';\nexport { isEIP1559Transaction } from './utils';\n"]}
\ No newline at end of file
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,0DAAwC;AACxC,iCAA+C;AAAtC,6GAAA,oBAAoB,OAAA;AAC7B,0CAAwB","sourcesContent":["export * from './TransactionController';\nexport { isEIP1559Transaction } from './utils';\nexport * from './types';\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/mocks/txsMock.d.ts b/node_modules/@metamask/transaction-controller/dist/mocks/txsMock.d.ts
deleted file mode 100644
index 649d313..0000000
--- a/node_modules/@metamask/transaction-controller/dist/mocks/txsMock.d.ts
+++ /dev/null
@@ -1,63 +0,0 @@
-import { TransactionMeta } from '../TransactionController';
-export declare const ethTxsMock: (ethTxHash: string) => ({
-    blockNumber: string;
-    confirmations: string;
-    contractAddress: string;
-    cumulativeGasUsed: string;
-    from: string;
-    gas: string;
-    gasPrice: string;
-    gasUsed: string;
-    hash: string;
-    input: string;
-    isError: string;
-    nonce: string;
-    timeStamp: string;
-    to: string;
-    transactionIndex: string;
-    txreceipt_status: string;
-    value: string;
-} | {
-    blockNumber: string;
-    confirmations: string;
-    contractAddress: string;
-    cumulativeGasUsed: string;
-    from: string;
-    gas: string;
-    gasPrice: string;
-    gasUsed: string;
-    hash: string;
-    input: string;
-    isError: string;
-    nonce: string;
-    timeStamp: string;
-    transactionIndex: string;
-    txreceipt_status: string;
-    value: string;
-    to?: undefined;
-})[];
-export declare const tokenTxsMock: (tokenTxHash: string) => {
-    blockNumber: string;
-    timeStamp: string;
-    hash: string;
-    nonce: string;
-    blockHash: string;
-    from: string;
-    contractAddress: string;
-    to: string;
-    value: string;
-    tokenName: string;
-    tokenSymbol: string;
-    tokenDecimal: string;
-    transactionIndex: string;
-    gas: string;
-    gasPrice: string;
-    gasUsed: string;
-    cumulativeGasUsed: string;
-    input: string;
-    confirmations: string;
-}[];
-export declare const txsInStateMock: (ethTxHash: string, tokenTxHash: string) => TransactionMeta[];
-export declare const txsInStateWithOutdatedStatusMock: (ethTxHash: string, tokenTxHash: string) => TransactionMeta[];
-export declare const txsInStateWithOutdatedGasDataMock: (ethTxHash: string, tokenTxHash: string) => TransactionMeta[];
-export declare const txsInStateWithOutdatedStatusAndGasDataMock: (ethTxHash: string, tokenTxHash: string) => TransactionMeta[];
diff --git a/node_modules/@metamask/transaction-controller/dist/mocks/txsMock.js b/node_modules/@metamask/transaction-controller/dist/mocks/txsMock.js
deleted file mode 100644
index 47cf349..0000000
--- a/node_modules/@metamask/transaction-controller/dist/mocks/txsMock.js
+++ /dev/null
@@ -1,515 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.txsInStateWithOutdatedStatusAndGasDataMock = exports.txsInStateWithOutdatedGasDataMock = exports.txsInStateWithOutdatedStatusMock = exports.txsInStateMock = exports.tokenTxsMock = exports.ethTxsMock = void 0;
-const TransactionController_1 = require("../TransactionController");
-const ethTxsMock = (ethTxHash) => [
-    {
-        blockNumber: '4535101',
-        confirmations: '10',
-        contractAddress: '',
-        cumulativeGasUsed: '120607',
-        from: '0xe46abaf75cfbff815c0b7ffed6f02b0760ea27f1',
-        gas: '335208',
-        gasPrice: '10000000000',
-        gasUsed: '21000',
-        hash: ethTxHash,
-        input: '0x',
-        isError: '0',
-        nonce: '9',
-        timeStamp: '1543596286',
-        to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        transactionIndex: '2',
-        txreceipt_status: '1',
-        value: '100000000000000000',
-    },
-    {
-        blockNumber: '4535108',
-        confirmations: '3',
-        contractAddress: '',
-        cumulativeGasUsed: '693910',
-        from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        gas: '335208',
-        gasPrice: '20000000000',
-        gasUsed: '21000',
-        hash: '0x342e9d73e10004af41d04973339fc7219dbadcbb5629730cfe65e9f9cb15ff92',
-        input: '0x',
-        isError: '0',
-        nonce: '0',
-        timeStamp: '1543596378',
-        to: '0xb2d191b6fe03c5b8a1ab249cfe88c37553357a23',
-        transactionIndex: '12',
-        txreceipt_status: '1',
-        value: '50000000000000000',
-    },
-    {
-        blockNumber: '4535105',
-        confirmations: '4',
-        contractAddress: '',
-        cumulativeGasUsed: '693910',
-        from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        gas: '335208',
-        gasPrice: '20000000000',
-        gasUsed: '21000',
-        hash: '0x342e9d73e10004af41d04973339fc7219dbadcbb5629730cfe65e9f9cb15ff91',
-        input: '0x',
-        isError: '0',
-        nonce: '1',
-        timeStamp: '1543596356',
-        transactionIndex: '13',
-        txreceipt_status: '1',
-        value: '50000000000000000',
-    },
-    {
-        blockNumber: '4535106',
-        confirmations: '4',
-        contractAddress: '',
-        cumulativeGasUsed: '693910',
-        from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        gas: '335208',
-        gasPrice: '20000000000',
-        gasUsed: '21000',
-        hash: '0x342e9d73e10004af41d04973139fc7219dbadcbb5629730cfe65e9f9cb15ff91',
-        input: '0x11',
-        isError: '0',
-        nonce: '3',
-        timeStamp: '1543596356',
-        to: '0xb2d191b6fe03c5b8a1ab249cfe88c37553357a23',
-        transactionIndex: '13',
-        txreceipt_status: '1',
-        value: '50000000000000000',
-    },
-];
-exports.ethTxsMock = ethTxsMock;
-const tokenTxsMock = (tokenTxHash) => [
-    {
-        blockNumber: '8222239',
-        timeStamp: '1564091067',
-        hash: tokenTxHash,
-        nonce: '2329',
-        blockHash: '0x3c30a9be9aea7be13caad419444140c11839d72e70479ec7e9c6d8bd08c533bc',
-        from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',
-        contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',
-        to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        value: '0',
-        tokenName: 'Sai Stablecoin v1.0',
-        tokenSymbol: 'SAI',
-        tokenDecimal: '18',
-        transactionIndex: '69',
-        gas: '624874',
-        gasPrice: '20000000000',
-        gasUsed: '21000',
-        cumulativeGasUsed: '3203881',
-        input: 'deprecated',
-        confirmations: '3659676',
-    },
-    {
-        blockNumber: '8222250',
-        timeStamp: '1564091247',
-        hash: '0xdcd1c8bee545d3f76d80b20a23ad44276ba2e376681228eb4570cf3518491279',
-        nonce: '2330',
-        blockHash: '0x16986dd66bedb20a5b846ec2b6c0ecaa62f1c4b51fac58c1326101fd9126dd82',
-        from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',
-        contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',
-        to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        value: '0',
-        tokenName: 'Sai Stablecoin v1.0',
-        tokenSymbol: 'SAI',
-        tokenDecimal: '18',
-        transactionIndex: '40',
-        gas: '594268',
-        gasPrice: '20000000000',
-        gasUsed: '579268',
-        cumulativeGasUsed: '2009011',
-        input: 'deprecated',
-        confirmations: '3659665',
-    },
-    {
-        blockNumber: '8223771',
-        timeStamp: '1564111652',
-        hash: '0x070369e6f560b0deca52e050ff1a961fa7b688bbec5cea08435921c9d9b0f52e',
-        nonce: '2333',
-        blockHash: '0x0aff8b36881be99df6d176d7c64c2171672c0483684a10c112d2c90fefe30a0a',
-        from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',
-        contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',
-        to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        value: '0',
-        tokenName: 'Sai Stablecoin v1.0',
-        tokenSymbol: 'SAI',
-        tokenDecimal: '18',
-        transactionIndex: '132',
-        gas: '583810',
-        gasPrice: '6000000000',
-        gasUsed: '568810',
-        cumulativeGasUsed: '6956245',
-        input: 'deprecated',
-        confirmations: '3658144',
-    },
-    {
-        blockNumber: '8224850',
-        timeStamp: '1564126442',
-        hash: '0x8ef20ec9597c8c2e945bcc76d2668e5d3bb088b081fe8c5b5af2e1cbd315a20f',
-        nonce: '31',
-        blockHash: '0xb80d4d861ecb7a3cb14e591c0aaeb226842d0267772affa2acc1a590c7535647',
-        from: '0x6c70e3563cef0c6835703bb2664c9f59a92353e4',
-        contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',
-        to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        value: '10000000000000000000',
-        tokenName: 'Sai Stablecoin v1.0',
-        tokenSymbol: 'SAI',
-        tokenDecimal: '18',
-        transactionIndex: '169',
-        gas: '78447',
-        gasPrice: '2000000000',
-        gasUsed: '52298',
-        cumulativeGasUsed: '7047823',
-        input: 'deprecated',
-        confirmations: '3657065',
-    },
-    {
-        blockNumber: '8228053',
-        timeStamp: '1564168901',
-        hash: '0xa0f2d7b558bb3cc28fa568f6feb8ed30eb28a01a674d7c0d4ae603fc691e6020',
-        nonce: '2368',
-        blockHash: '0x62c515ea049842c968ca67499f47a32a11394364d319d9c9cc0a0211652a7294',
-        from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',
-        contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',
-        to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        value: '0',
-        tokenName: 'Sai Stablecoin v1.0',
-        tokenSymbol: 'SAI',
-        tokenDecimal: '18',
-        transactionIndex: '43',
-        gas: '567156',
-        gasPrice: '3000000000',
-        gasUsed: '552156',
-        cumulativeGasUsed: '3048261',
-        input: 'deprecated',
-        confirmations: '3653862',
-    },
-    {
-        blockNumber: '8315335',
-        timeStamp: '1565339223',
-        hash: '0x464df60fe00b6dd04c9e8ab341d02af9b10a619d2fcd60fd2971f10edf12118f',
-        nonce: '206760',
-        blockHash: '0x98275388ef6708debe35ac7bf2e30143c9b1fd9e0e457ca03598fc1f4209e273',
-        from: '0x00cfbbaf7ddb3a1476767101c12a0162e241fbad',
-        contractAddress: '0x4dc3643dbc642b72c158e7f3d2ff232df61cb6ce',
-        to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        value: '100000000000000000',
-        tokenName: 'Amber',
-        tokenSymbol: 'AMB',
-        tokenDecimal: '18',
-        transactionIndex: '186',
-        gas: '60000',
-        gasPrice: '2000000000',
-        gasUsed: '52108',
-        cumulativeGasUsed: '7490707',
-        input: 'deprecated',
-        confirmations: '3566580',
-    },
-    {
-        blockNumber: '8350846',
-        timeStamp: '1565815049',
-        hash: '0xc0682327ad3efd56dfa33e8206b4e09efad4e419a6191076069d217e3ee2341f',
-        nonce: '2506',
-        blockHash: '0xd0aa3c0e319fdfeb21b0192cf77b9760b8668060a5977a5f10f8413531083afa',
-        from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',
-        contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',
-        to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        value: '4',
-        tokenName: 'Sai Stablecoin v1.0',
-        tokenSymbol: 'SAI',
-        tokenDecimal: '18',
-        transactionIndex: '48',
-        gas: '578737',
-        gasPrice: '3000000000',
-        gasUsed: '518737',
-        cumulativeGasUsed: '2848015',
-        input: 'deprecated',
-        confirmations: '3531069',
-    },
-    {
-        blockNumber: '8350859',
-        timeStamp: '1565815221',
-        hash: '0x989ea9f3ee576fa43957f44363e839adf1a4a397c3d8392a4f7cbbf7949fd0ae',
-        nonce: '2',
-        blockHash: '0xb9cf1d29c665c052e3831b5754903e539c5b0b1d33b8bcab6cd2d450764d601f',
-        from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',
-        to: '0x09cabec1ead1c0ba254b09efb3ee13841712be14',
-        value: '10000000000000000000',
-        tokenName: 'Sai Stablecoin v1.0',
-        tokenSymbol: 'SAI',
-        tokenDecimal: '18',
-        transactionIndex: '31',
-        gas: '60734',
-        gasPrice: '1000000000',
-        gasUsed: '54745',
-        cumulativeGasUsed: '7833857',
-        input: 'deprecated',
-        confirmations: '3531056',
-    },
-    {
-        blockNumber: '8679548',
-        timeStamp: '1570244087',
-        hash: '0xc0016b89b3b525b30d73f242653b0d80ec3ebf285376dff5bb52cef3261498b2',
-        nonce: '3',
-        blockHash: '0x1ceb2f8b83087f010773e2acf63d1526633c8a884bd1980f118a1bba576be69f',
-        from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',
-        to: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',
-        value: '0',
-        tokenName: 'Sai Stablecoin v1.0',
-        tokenSymbol: 'SAI',
-        tokenDecimal: '18',
-        transactionIndex: '56',
-        gas: '993379',
-        gasPrice: '1440000000',
-        gasUsed: '647253',
-        cumulativeGasUsed: '3562204',
-        input: 'deprecated',
-        confirmations: '3202367',
-    },
-    {
-        blockNumber: '8679548',
-        timeStamp: '1570244087',
-        hash: '0xc0016b89b3b525b30d73f242653b0d80ec3ebf285376dff5bb52cef3261498b2',
-        nonce: '3',
-        blockHash: '0x1ceb2f8b83087f010773e2acf63d1526633c8a884bd1980f118a1bba576be69f',
-        from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',
-        contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',
-        to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        value: '0',
-        tokenName: 'Sai Stablecoin v1.0',
-        tokenSymbol: 'SAI',
-        tokenDecimal: '18',
-        transactionIndex: '56',
-        gas: '993379',
-        gasPrice: '1440000000',
-        gasUsed: '647253',
-        cumulativeGasUsed: '3562204',
-        input: 'deprecated',
-        confirmations: '3202367',
-    },
-    {
-        blockNumber: '8694142',
-        timeStamp: '1570440625',
-        hash: '0xd8397138bb93d56e50d01e92a9eae99ebd3ae28844acdaa4663976a5501116cf',
-        nonce: '2837',
-        blockHash: '0xba45dd64e71e146066af9b6d2dd3bc5d72f4a3399148c155dced74c139fc3c51',
-        from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',
-        contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',
-        to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        value: '0',
-        tokenName: 'Sai Stablecoin v1.0',
-        tokenSymbol: 'SAI',
-        tokenDecimal: '18',
-        transactionIndex: '217',
-        gas: '600632',
-        gasPrice: '9000000000',
-        gasUsed: '570632',
-        cumulativeGasUsed: '9023725',
-        input: 'deprecated',
-        confirmations: '3187773',
-    },
-    {
-        blockNumber: '10877041',
-        timeStamp: '1600310867',
-        hash: '0xc8bd16b6b41b4c24849eb6869702e1489c808cb5b125b01f084e38fefcb5ea77',
-        nonce: '4',
-        blockHash: '0x7fa16a022bcf1f69c2d7adf6bd7d3f058e808eec5c66aaa910dfa8016a5333d1',
-        from: '0x090d4613473dee047c3f2706764f49e0821d256e',
-        contractAddress: '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984',
-        to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        value: '400000000000000000000',
-        tokenName: 'Uniswap',
-        tokenSymbol: 'UNI',
-        tokenDecimal: '18',
-        transactionIndex: '42',
-        gas: '90038',
-        gasPrice: '550000000000',
-        gasUsed: '81853',
-        cumulativeGasUsed: '3163540',
-        input: 'deprecated',
-        confirmations: '1004874',
-    },
-    {
-        blockNumber: '10877897',
-        timeStamp: '1600321973',
-        hash: '0xa7162489faef826ee77862ed5210b01726524f09428f69842118dad394842d62',
-        nonce: '6',
-        blockHash: '0xa74eb9d16f65f307dde4ce58c813c981b28f242edf1090ee2ac42caac9dccaca',
-        from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-        contractAddress: '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984',
-        to: '0x5e736f1f25992b2cad20ded179a52823d3d24b26',
-        value: '400000000000000000000',
-        tokenName: 'Uniswap',
-        tokenSymbol: 'UNI',
-        tokenDecimal: '18',
-        transactionIndex: '86',
-        gas: '60759',
-        gasPrice: '640000000000',
-        gasUsed: '25506',
-        cumulativeGasUsed: '4408393',
-        input: 'deprecated',
-        confirmations: '1004018',
-    },
-];
-exports.tokenTxsMock = tokenTxsMock;
-const txsInStateMock = (ethTxHash, tokenTxHash) => [
-    {
-        id: 'token-transaction-id',
-        chainId: '1',
-        status: TransactionController_1.TransactionStatus.confirmed,
-        time: 1615497996125,
-        transaction: {
-            from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-            data: '0x',
-            gas: '624874',
-            gasPrice: '20000000000',
-            gasUsed: '21000',
-            nonce: '0x12',
-            to: '0x881d40237659c251811cec9c364ef91dc08d300c',
-            value: '0x0',
-        },
-        transactionHash: tokenTxHash,
-        toSmartContract: true,
-    },
-    {
-        id: 'eth-transaction-id',
-        chainId: '1',
-        status: TransactionController_1.TransactionStatus.confirmed,
-        time: 1615497996125,
-        transaction: {
-            from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-            data: '0x',
-            gas: '0x51d68',
-            gasPrice: '0x2540be400',
-            gasUsed: '0x5208',
-            nonce: '0x12',
-            to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-            value: '100000000000000000',
-        },
-        transactionHash: ethTxHash,
-        toSmartContract: false,
-    },
-];
-exports.txsInStateMock = txsInStateMock;
-const txsInStateWithOutdatedStatusMock = (ethTxHash, tokenTxHash) => [
-    {
-        id: 'token-transaction-id',
-        chainId: '1',
-        status: TransactionController_1.TransactionStatus.rejected,
-        time: 1615497996125,
-        transaction: {
-            from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-            data: '0x',
-            gas: '624874',
-            gasPrice: '20000000000',
-            gasUsed: '21000',
-            nonce: '0x12',
-            to: '0x881d40237659c251811cec9c364ef91dc08d300c',
-            value: '0x0',
-        },
-        transactionHash: tokenTxHash,
-        toSmartContract: true,
-    },
-    {
-        id: 'eth-transaction-id',
-        chainId: '1',
-        status: TransactionController_1.TransactionStatus.rejected,
-        time: 1615497996125,
-        transaction: {
-            from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-            data: '0x',
-            gas: '0x51d68',
-            gasPrice: '0x2540be400',
-            gasUsed: '0x5208',
-            nonce: '0x12',
-            to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-            value: '100000000000000000',
-        },
-        transactionHash: ethTxHash,
-        toSmartContract: false,
-    },
-];
-exports.txsInStateWithOutdatedStatusMock = txsInStateWithOutdatedStatusMock;
-const txsInStateWithOutdatedGasDataMock = (ethTxHash, tokenTxHash) => [
-    {
-        id: 'token-transaction-id',
-        chainId: '1',
-        status: TransactionController_1.TransactionStatus.confirmed,
-        time: 1615497996125,
-        transaction: {
-            from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-            data: '0x',
-            gas: '624874',
-            gasPrice: '20000000000',
-            gasUsed: undefined,
-            nonce: '0x12',
-            to: '0x881d40237659c251811cec9c364ef91dc08d300c',
-            value: '0x0',
-        },
-        transactionHash: tokenTxHash,
-        toSmartContract: true,
-    },
-    {
-        id: 'eth-transaction-id',
-        chainId: '1',
-        status: TransactionController_1.TransactionStatus.confirmed,
-        time: 1615497996125,
-        transaction: {
-            from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-            data: '0x',
-            gas: '0x51d68',
-            gasPrice: '0x2540be400',
-            gasUsed: undefined,
-            nonce: '0x12',
-            to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-            value: '100000000000000000',
-        },
-        transactionHash: ethTxHash,
-        toSmartContract: false,
-    },
-];
-exports.txsInStateWithOutdatedGasDataMock = txsInStateWithOutdatedGasDataMock;
-const txsInStateWithOutdatedStatusAndGasDataMock = (ethTxHash, tokenTxHash) => [
-    {
-        id: 'token-transaction-id',
-        chainId: '1',
-        status: TransactionController_1.TransactionStatus.rejected,
-        time: 1615497996125,
-        transaction: {
-            from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-            data: '0x',
-            gas: '624874',
-            gasPrice: '20000000000',
-            gasUsed: undefined,
-            nonce: '0x12',
-            to: '0x881d40237659c251811cec9c364ef91dc08d300c',
-            value: '0x0',
-        },
-        transactionHash: tokenTxHash,
-        toSmartContract: true,
-    },
-    {
-        id: 'eth-transaction-id',
-        chainId: '1',
-        status: TransactionController_1.TransactionStatus.rejected,
-        time: 1615497996125,
-        transaction: {
-            from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-            data: '0x',
-            gas: '0x51d68',
-            gasPrice: '0x2540be400',
-            gasUsed: undefined,
-            nonce: '0x12',
-            to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',
-            value: '100000000000000000',
-        },
-        transactionHash: ethTxHash,
-        toSmartContract: false,
-    },
-];
-exports.txsInStateWithOutdatedStatusAndGasDataMock = txsInStateWithOutdatedStatusAndGasDataMock;
-//# sourceMappingURL=txsMock.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/mocks/txsMock.js.map b/node_modules/@metamask/transaction-controller/dist/mocks/txsMock.js.map
deleted file mode 100644
index f038698..0000000
--- a/node_modules/@metamask/transaction-controller/dist/mocks/txsMock.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"txsMock.js","sourceRoot":"","sources":["../../src/mocks/txsMock.ts"],"names":[],"mappings":"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","sourcesContent":["import { TransactionMeta, TransactionStatus } from '../TransactionController';\n\nexport const ethTxsMock = (ethTxHash: string) => [\n  {\n    blockNumber: '4535101',\n    confirmations: '10',\n    contractAddress: '',\n    cumulativeGasUsed: '120607',\n    from: '0xe46abaf75cfbff815c0b7ffed6f02b0760ea27f1',\n    gas: '335208',\n    gasPrice: '10000000000',\n    gasUsed: '21000',\n    hash: ethTxHash,\n    input: '0x',\n    isError: '0',\n    nonce: '9',\n    timeStamp: '1543596286',\n    to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    transactionIndex: '2',\n    txreceipt_status: '1',\n    value: '100000000000000000',\n  },\n  {\n    blockNumber: '4535108',\n    confirmations: '3',\n    contractAddress: '',\n    cumulativeGasUsed: '693910',\n    from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    gas: '335208',\n    gasPrice: '20000000000',\n    gasUsed: '21000',\n    hash: '0x342e9d73e10004af41d04973339fc7219dbadcbb5629730cfe65e9f9cb15ff92',\n    input: '0x',\n    isError: '0',\n    nonce: '0',\n    timeStamp: '1543596378',\n    to: '0xb2d191b6fe03c5b8a1ab249cfe88c37553357a23',\n    transactionIndex: '12',\n    txreceipt_status: '1',\n    value: '50000000000000000',\n  },\n  {\n    blockNumber: '4535105',\n    confirmations: '4',\n    contractAddress: '',\n    cumulativeGasUsed: '693910',\n    from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    gas: '335208',\n    gasPrice: '20000000000',\n    gasUsed: '21000',\n    hash: '0x342e9d73e10004af41d04973339fc7219dbadcbb5629730cfe65e9f9cb15ff91',\n    input: '0x',\n    isError: '0',\n    nonce: '1',\n    timeStamp: '1543596356',\n    transactionIndex: '13',\n    txreceipt_status: '1',\n    value: '50000000000000000',\n  },\n  {\n    blockNumber: '4535106',\n    confirmations: '4',\n    contractAddress: '',\n    cumulativeGasUsed: '693910',\n    from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    gas: '335208',\n    gasPrice: '20000000000',\n    gasUsed: '21000',\n    hash: '0x342e9d73e10004af41d04973139fc7219dbadcbb5629730cfe65e9f9cb15ff91',\n    input: '0x11',\n    isError: '0',\n    nonce: '3',\n    timeStamp: '1543596356',\n    to: '0xb2d191b6fe03c5b8a1ab249cfe88c37553357a23',\n    transactionIndex: '13',\n    txreceipt_status: '1',\n    value: '50000000000000000',\n  },\n];\n\nexport const tokenTxsMock = (tokenTxHash: string) => [\n  {\n    blockNumber: '8222239',\n    timeStamp: '1564091067',\n    hash: tokenTxHash,\n    nonce: '2329',\n    blockHash:\n      '0x3c30a9be9aea7be13caad419444140c11839d72e70479ec7e9c6d8bd08c533bc',\n    from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',\n    contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',\n    to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    value: '0',\n    tokenName: 'Sai Stablecoin v1.0',\n    tokenSymbol: 'SAI',\n    tokenDecimal: '18',\n    transactionIndex: '69',\n    gas: '624874',\n    gasPrice: '20000000000',\n    gasUsed: '21000',\n    cumulativeGasUsed: '3203881',\n    input: 'deprecated',\n    confirmations: '3659676',\n  },\n  {\n    blockNumber: '8222250',\n    timeStamp: '1564091247',\n    hash: '0xdcd1c8bee545d3f76d80b20a23ad44276ba2e376681228eb4570cf3518491279',\n    nonce: '2330',\n    blockHash:\n      '0x16986dd66bedb20a5b846ec2b6c0ecaa62f1c4b51fac58c1326101fd9126dd82',\n    from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',\n    contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',\n    to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    value: '0',\n    tokenName: 'Sai Stablecoin v1.0',\n    tokenSymbol: 'SAI',\n    tokenDecimal: '18',\n    transactionIndex: '40',\n    gas: '594268',\n    gasPrice: '20000000000',\n    gasUsed: '579268',\n    cumulativeGasUsed: '2009011',\n    input: 'deprecated',\n    confirmations: '3659665',\n  },\n  {\n    blockNumber: '8223771',\n    timeStamp: '1564111652',\n    hash: '0x070369e6f560b0deca52e050ff1a961fa7b688bbec5cea08435921c9d9b0f52e',\n    nonce: '2333',\n    blockHash:\n      '0x0aff8b36881be99df6d176d7c64c2171672c0483684a10c112d2c90fefe30a0a',\n    from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',\n    contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',\n    to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    value: '0',\n    tokenName: 'Sai Stablecoin v1.0',\n    tokenSymbol: 'SAI',\n    tokenDecimal: '18',\n    transactionIndex: '132',\n    gas: '583810',\n    gasPrice: '6000000000',\n    gasUsed: '568810',\n    cumulativeGasUsed: '6956245',\n    input: 'deprecated',\n    confirmations: '3658144',\n  },\n  {\n    blockNumber: '8224850',\n    timeStamp: '1564126442',\n    hash: '0x8ef20ec9597c8c2e945bcc76d2668e5d3bb088b081fe8c5b5af2e1cbd315a20f',\n    nonce: '31',\n    blockHash:\n      '0xb80d4d861ecb7a3cb14e591c0aaeb226842d0267772affa2acc1a590c7535647',\n    from: '0x6c70e3563cef0c6835703bb2664c9f59a92353e4',\n    contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',\n    to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    value: '10000000000000000000',\n    tokenName: 'Sai Stablecoin v1.0',\n    tokenSymbol: 'SAI',\n    tokenDecimal: '18',\n    transactionIndex: '169',\n    gas: '78447',\n    gasPrice: '2000000000',\n    gasUsed: '52298',\n    cumulativeGasUsed: '7047823',\n    input: 'deprecated',\n    confirmations: '3657065',\n  },\n  {\n    blockNumber: '8228053',\n    timeStamp: '1564168901',\n    hash: '0xa0f2d7b558bb3cc28fa568f6feb8ed30eb28a01a674d7c0d4ae603fc691e6020',\n    nonce: '2368',\n    blockHash:\n      '0x62c515ea049842c968ca67499f47a32a11394364d319d9c9cc0a0211652a7294',\n    from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',\n    contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',\n    to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    value: '0',\n    tokenName: 'Sai Stablecoin v1.0',\n    tokenSymbol: 'SAI',\n    tokenDecimal: '18',\n    transactionIndex: '43',\n    gas: '567156',\n    gasPrice: '3000000000',\n    gasUsed: '552156',\n    cumulativeGasUsed: '3048261',\n    input: 'deprecated',\n    confirmations: '3653862',\n  },\n  {\n    blockNumber: '8315335',\n    timeStamp: '1565339223',\n    hash: '0x464df60fe00b6dd04c9e8ab341d02af9b10a619d2fcd60fd2971f10edf12118f',\n    nonce: '206760',\n    blockHash:\n      '0x98275388ef6708debe35ac7bf2e30143c9b1fd9e0e457ca03598fc1f4209e273',\n    from: '0x00cfbbaf7ddb3a1476767101c12a0162e241fbad',\n    contractAddress: '0x4dc3643dbc642b72c158e7f3d2ff232df61cb6ce',\n    to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    value: '100000000000000000',\n    tokenName: 'Amber',\n    tokenSymbol: 'AMB',\n    tokenDecimal: '18',\n    transactionIndex: '186',\n    gas: '60000',\n    gasPrice: '2000000000',\n    gasUsed: '52108',\n    cumulativeGasUsed: '7490707',\n    input: 'deprecated',\n    confirmations: '3566580',\n  },\n  {\n    blockNumber: '8350846',\n    timeStamp: '1565815049',\n    hash: '0xc0682327ad3efd56dfa33e8206b4e09efad4e419a6191076069d217e3ee2341f',\n    nonce: '2506',\n    blockHash:\n      '0xd0aa3c0e319fdfeb21b0192cf77b9760b8668060a5977a5f10f8413531083afa',\n    from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',\n    contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',\n    to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    value: '4',\n    tokenName: 'Sai Stablecoin v1.0',\n    tokenSymbol: 'SAI',\n    tokenDecimal: '18',\n    transactionIndex: '48',\n    gas: '578737',\n    gasPrice: '3000000000',\n    gasUsed: '518737',\n    cumulativeGasUsed: '2848015',\n    input: 'deprecated',\n    confirmations: '3531069',\n  },\n  {\n    blockNumber: '8350859',\n    timeStamp: '1565815221',\n    hash: '0x989ea9f3ee576fa43957f44363e839adf1a4a397c3d8392a4f7cbbf7949fd0ae',\n    nonce: '2',\n    blockHash:\n      '0xb9cf1d29c665c052e3831b5754903e539c5b0b1d33b8bcab6cd2d450764d601f',\n    from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',\n    to: '0x09cabec1ead1c0ba254b09efb3ee13841712be14',\n    value: '10000000000000000000',\n    tokenName: 'Sai Stablecoin v1.0',\n    tokenSymbol: 'SAI',\n    tokenDecimal: '18',\n    transactionIndex: '31',\n    gas: '60734',\n    gasPrice: '1000000000',\n    gasUsed: '54745',\n    cumulativeGasUsed: '7833857',\n    input: 'deprecated',\n    confirmations: '3531056',\n  },\n  {\n    blockNumber: '8679548',\n    timeStamp: '1570244087',\n    hash: '0xc0016b89b3b525b30d73f242653b0d80ec3ebf285376dff5bb52cef3261498b2',\n    nonce: '3',\n    blockHash:\n      '0x1ceb2f8b83087f010773e2acf63d1526633c8a884bd1980f118a1bba576be69f',\n    from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',\n    to: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',\n    value: '0',\n    tokenName: 'Sai Stablecoin v1.0',\n    tokenSymbol: 'SAI',\n    tokenDecimal: '18',\n    transactionIndex: '56',\n    gas: '993379',\n    gasPrice: '1440000000',\n    gasUsed: '647253',\n    cumulativeGasUsed: '3562204',\n    input: 'deprecated',\n    confirmations: '3202367',\n  },\n  {\n    blockNumber: '8679548',\n    timeStamp: '1570244087',\n    hash: '0xc0016b89b3b525b30d73f242653b0d80ec3ebf285376dff5bb52cef3261498b2',\n    nonce: '3',\n    blockHash:\n      '0x1ceb2f8b83087f010773e2acf63d1526633c8a884bd1980f118a1bba576be69f',\n    from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',\n    contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',\n    to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    value: '0',\n    tokenName: 'Sai Stablecoin v1.0',\n    tokenSymbol: 'SAI',\n    tokenDecimal: '18',\n    transactionIndex: '56',\n    gas: '993379',\n    gasPrice: '1440000000',\n    gasUsed: '647253',\n    cumulativeGasUsed: '3562204',\n    input: 'deprecated',\n    confirmations: '3202367',\n  },\n  {\n    blockNumber: '8694142',\n    timeStamp: '1570440625',\n    hash: '0xd8397138bb93d56e50d01e92a9eae99ebd3ae28844acdaa4663976a5501116cf',\n    nonce: '2837',\n    blockHash:\n      '0xba45dd64e71e146066af9b6d2dd3bc5d72f4a3399148c155dced74c139fc3c51',\n    from: '0xdfa6edae2ec0cf1d4a60542422724a48195a5071',\n    contractAddress: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359',\n    to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    value: '0',\n    tokenName: 'Sai Stablecoin v1.0',\n    tokenSymbol: 'SAI',\n    tokenDecimal: '18',\n    transactionIndex: '217',\n    gas: '600632',\n    gasPrice: '9000000000',\n    gasUsed: '570632',\n    cumulativeGasUsed: '9023725',\n    input: 'deprecated',\n    confirmations: '3187773',\n  },\n  {\n    blockNumber: '10877041',\n    timeStamp: '1600310867',\n    hash: '0xc8bd16b6b41b4c24849eb6869702e1489c808cb5b125b01f084e38fefcb5ea77',\n    nonce: '4',\n    blockHash:\n      '0x7fa16a022bcf1f69c2d7adf6bd7d3f058e808eec5c66aaa910dfa8016a5333d1',\n    from: '0x090d4613473dee047c3f2706764f49e0821d256e',\n    contractAddress: '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984',\n    to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    value: '400000000000000000000',\n    tokenName: 'Uniswap',\n    tokenSymbol: 'UNI',\n    tokenDecimal: '18',\n    transactionIndex: '42',\n    gas: '90038',\n    gasPrice: '550000000000',\n    gasUsed: '81853',\n    cumulativeGasUsed: '3163540',\n    input: 'deprecated',\n    confirmations: '1004874',\n  },\n  {\n    blockNumber: '10877897',\n    timeStamp: '1600321973',\n    hash: '0xa7162489faef826ee77862ed5210b01726524f09428f69842118dad394842d62',\n    nonce: '6',\n    blockHash:\n      '0xa74eb9d16f65f307dde4ce58c813c981b28f242edf1090ee2ac42caac9dccaca',\n    from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n    contractAddress: '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984',\n    to: '0x5e736f1f25992b2cad20ded179a52823d3d24b26',\n    value: '400000000000000000000',\n    tokenName: 'Uniswap',\n    tokenSymbol: 'UNI',\n    tokenDecimal: '18',\n    transactionIndex: '86',\n    gas: '60759',\n    gasPrice: '640000000000',\n    gasUsed: '25506',\n    cumulativeGasUsed: '4408393',\n    input: 'deprecated',\n    confirmations: '1004018',\n  },\n];\n\nexport const txsInStateMock = (\n  ethTxHash: string,\n  tokenTxHash: string,\n): TransactionMeta[] => [\n  {\n    id: 'token-transaction-id',\n    chainId: '1',\n    status: TransactionStatus.confirmed,\n    time: 1615497996125,\n    transaction: {\n      from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n      data: '0x',\n      gas: '624874',\n      gasPrice: '20000000000',\n      gasUsed: '21000',\n      nonce: '0x12',\n      to: '0x881d40237659c251811cec9c364ef91dc08d300c',\n      value: '0x0',\n    },\n    transactionHash: tokenTxHash,\n    toSmartContract: true,\n  },\n  {\n    id: 'eth-transaction-id',\n    chainId: '1',\n    status: TransactionStatus.confirmed,\n    time: 1615497996125,\n    transaction: {\n      from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n      data: '0x',\n      gas: '0x51d68',\n      gasPrice: '0x2540be400',\n      gasUsed: '0x5208',\n      nonce: '0x12',\n      to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n      value: '100000000000000000',\n    },\n    transactionHash: ethTxHash,\n    toSmartContract: false,\n  },\n];\n\nexport const txsInStateWithOutdatedStatusMock = (\n  ethTxHash: string,\n  tokenTxHash: string,\n): TransactionMeta[] => [\n  {\n    id: 'token-transaction-id',\n    chainId: '1',\n    status: TransactionStatus.rejected,\n    time: 1615497996125,\n    transaction: {\n      from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n      data: '0x',\n      gas: '624874',\n      gasPrice: '20000000000',\n      gasUsed: '21000',\n      nonce: '0x12',\n      to: '0x881d40237659c251811cec9c364ef91dc08d300c',\n      value: '0x0',\n    },\n    transactionHash: tokenTxHash,\n    toSmartContract: true,\n  },\n  {\n    id: 'eth-transaction-id',\n    chainId: '1',\n    status: TransactionStatus.rejected,\n    time: 1615497996125,\n    transaction: {\n      from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n      data: '0x',\n      gas: '0x51d68',\n      gasPrice: '0x2540be400',\n      gasUsed: '0x5208',\n      nonce: '0x12',\n      to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n      value: '100000000000000000',\n    },\n    transactionHash: ethTxHash,\n    toSmartContract: false,\n  },\n];\n\nexport const txsInStateWithOutdatedGasDataMock = (\n  ethTxHash: string,\n  tokenTxHash: string,\n): TransactionMeta[] => [\n  {\n    id: 'token-transaction-id',\n    chainId: '1',\n    status: TransactionStatus.confirmed,\n    time: 1615497996125,\n    transaction: {\n      from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n      data: '0x',\n      gas: '624874',\n      gasPrice: '20000000000',\n      gasUsed: undefined,\n      nonce: '0x12',\n      to: '0x881d40237659c251811cec9c364ef91dc08d300c',\n      value: '0x0',\n    },\n    transactionHash: tokenTxHash,\n    toSmartContract: true,\n  },\n  {\n    id: 'eth-transaction-id',\n    chainId: '1',\n    status: TransactionStatus.confirmed,\n    time: 1615497996125,\n    transaction: {\n      from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n      data: '0x',\n      gas: '0x51d68',\n      gasPrice: '0x2540be400',\n      gasUsed: undefined,\n      nonce: '0x12',\n      to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n      value: '100000000000000000',\n    },\n    transactionHash: ethTxHash,\n    toSmartContract: false,\n  },\n];\n\nexport const txsInStateWithOutdatedStatusAndGasDataMock = (\n  ethTxHash: string,\n  tokenTxHash: string,\n): TransactionMeta[] => [\n  {\n    id: 'token-transaction-id',\n    chainId: '1',\n    status: TransactionStatus.rejected,\n    time: 1615497996125,\n    transaction: {\n      from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n      data: '0x',\n      gas: '624874',\n      gasPrice: '20000000000',\n      gasUsed: undefined,\n      nonce: '0x12',\n      to: '0x881d40237659c251811cec9c364ef91dc08d300c',\n      value: '0x0',\n    },\n    transactionHash: tokenTxHash,\n    toSmartContract: true,\n  },\n  {\n    id: 'eth-transaction-id',\n    chainId: '1',\n    status: TransactionStatus.rejected,\n    time: 1615497996125,\n    transaction: {\n      from: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n      data: '0x',\n      gas: '0x51d68',\n      gasPrice: '0x2540be400',\n      gasUsed: undefined,\n      nonce: '0x12',\n      to: '0x6bf137f335ea1b8f193b8f6ea92561a60d23a207',\n      value: '100000000000000000',\n    },\n    transactionHash: ethTxHash,\n    toSmartContract: false,\n  },\n];\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types.d.ts b/node_modules/@metamask/transaction-controller/dist/types.d.ts
new file mode 100644
index 0000000..20840dd
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types.d.ts
@@ -0,0 +1,109 @@
+import { NetworkType } from '@metamask/controller-utils';
+/**
+ * @type TransactionMeta
+ *
+ * TransactionMeta representation
+ * @property error - Synthesized error information for failed transactions
+ * @property id - Generated UUID associated with this transaction
+ * @property networkID - Network code as per EIP-155 for this transaction
+ * @property origin - Origin this transaction was sent from
+ * @property deviceConfirmedOn - string to indicate what device the transaction was confirmed
+ * @property rawTransaction - Hex representation of the underlying transaction
+ * @property status - String status of this transaction
+ * @property time - Timestamp associated with this transaction
+ * @property toSmartContract - Whether transaction recipient is a smart contract
+ * @property transaction - Underlying Transaction object
+ * @property transactionHash - Hash of a successful transaction
+ * @property blockNumber - Number of the block where the transaction has been included
+ */
+export declare type TransactionMeta = ({
+    status: Exclude<TransactionStatus, TransactionStatus.failed>;
+} & TransactionMetaBase) | ({
+    status: TransactionStatus.failed;
+    error: Error;
+} & TransactionMetaBase);
+declare type TransactionMetaBase = {
+    isTransfer?: boolean;
+    transferInformation?: {
+        symbol: string;
+        contractAddress: string;
+        decimals: number;
+    };
+    id: string;
+    networkID?: string;
+    chainId?: string;
+    origin?: string;
+    rawTransaction?: string;
+    time: number;
+    toSmartContract?: boolean;
+    transaction: Transaction;
+    transactionHash?: string;
+    blockNumber?: string;
+    deviceConfirmedOn?: WalletDevice;
+    verifiedOnBlockchain?: boolean;
+};
+/**
+ * The status of the transaction. Each status represents the state of the transaction internally
+ * in the wallet. Some of these correspond with the state of the transaction on the network, but
+ * some are wallet-specific.
+ */
+export declare enum TransactionStatus {
+    approved = "approved",
+    cancelled = "cancelled",
+    confirmed = "confirmed",
+    failed = "failed",
+    rejected = "rejected",
+    signed = "signed",
+    submitted = "submitted",
+    unapproved = "unapproved"
+}
+/**
+ * Options for wallet device.
+ */
+export declare enum WalletDevice {
+    MM_MOBILE = "metamask_mobile",
+    MM_EXTENSION = "metamask_extension",
+    OTHER = "other_device"
+}
+/**
+ * @type Transaction
+ *
+ * Transaction representation
+ * @property chainId - Network ID as per EIP-155
+ * @property data - Data to pass with this transaction
+ * @property from - Address to send this transaction from
+ * @property gas - Gas to send with this transaction
+ * @property gasPrice - Price of gas with this transaction
+ * @property gasUsed - Gas used in the transaction
+ * @property nonce - Unique number to prevent replay attacks
+ * @property to - Address to send this transaction to
+ * @property value - Value associated with this transaction
+ */
+export interface Transaction {
+    chainId?: number;
+    data?: string;
+    from: string;
+    gas?: string;
+    gasPrice?: string;
+    gasUsed?: string;
+    nonce?: string;
+    to?: string;
+    value?: string;
+    maxFeePerGas?: string;
+    maxPriorityFeePerGas?: string;
+    estimatedBaseFee?: string;
+    estimateGasError?: string;
+}
+export interface RemoteTransactionSourceRequest {
+    address: string;
+    networkType: NetworkType;
+    limit: number;
+    currentChainId: string;
+    currentNetworkId: string;
+    fromBlock?: string;
+    apiKey?: string;
+}
+export interface RemoteTransactionSource {
+    fetchTransactions: (request: RemoteTransactionSourceRequest) => Promise<TransactionMeta[]>;
+}
+export {};
diff --git a/node_modules/@metamask/transaction-controller/dist/types.js b/node_modules/@metamask/transaction-controller/dist/types.js
new file mode 100644
index 0000000..1cddb49
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types.js
@@ -0,0 +1,29 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.WalletDevice = exports.TransactionStatus = void 0;
+/**
+ * The status of the transaction. Each status represents the state of the transaction internally
+ * in the wallet. Some of these correspond with the state of the transaction on the network, but
+ * some are wallet-specific.
+ */
+var TransactionStatus;
+(function (TransactionStatus) {
+    TransactionStatus["approved"] = "approved";
+    TransactionStatus["cancelled"] = "cancelled";
+    TransactionStatus["confirmed"] = "confirmed";
+    TransactionStatus["failed"] = "failed";
+    TransactionStatus["rejected"] = "rejected";
+    TransactionStatus["signed"] = "signed";
+    TransactionStatus["submitted"] = "submitted";
+    TransactionStatus["unapproved"] = "unapproved";
+})(TransactionStatus = exports.TransactionStatus || (exports.TransactionStatus = {}));
+/**
+ * Options for wallet device.
+ */
+var WalletDevice;
+(function (WalletDevice) {
+    WalletDevice["MM_MOBILE"] = "metamask_mobile";
+    WalletDevice["MM_EXTENSION"] = "metamask_extension";
+    WalletDevice["OTHER"] = "other_device";
+})(WalletDevice = exports.WalletDevice || (exports.WalletDevice = {}));
+//# sourceMappingURL=types.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/types.js.map b/node_modules/@metamask/transaction-controller/dist/types.js.map
new file mode 100644
index 0000000..c747658
--- /dev/null
+++ b/node_modules/@metamask/transaction-controller/dist/types.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AA+CA;;;;GAIG;AACH,IAAY,iBASX;AATD,WAAY,iBAAiB;IAC3B,0CAAqB,CAAA;IACrB,4CAAuB,CAAA;IACvB,4CAAuB,CAAA;IACvB,sCAAiB,CAAA;IACjB,0CAAqB,CAAA;IACrB,sCAAiB,CAAA;IACjB,4CAAuB,CAAA;IACvB,8CAAyB,CAAA;AAC3B,CAAC,EATW,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QAS5B;AAED;;GAEG;AACH,IAAY,YAIX;AAJD,WAAY,YAAY;IACtB,6CAA6B,CAAA;IAC7B,mDAAmC,CAAA;IACnC,sCAAsB,CAAA;AACxB,CAAC,EAJW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAIvB","sourcesContent":["import { NetworkType } from '@metamask/controller-utils';\nimport { Hex } from '@metamask/utils';\n\n/**\n * @type TransactionMeta\n *\n * TransactionMeta representation\n * @property error - Synthesized error information for failed transactions\n * @property id - Generated UUID associated with this transaction\n * @property networkID - Network code as per EIP-155 for this transaction\n * @property origin - Origin this transaction was sent from\n * @property deviceConfirmedOn - string to indicate what device the transaction was confirmed\n * @property rawTransaction - Hex representation of the underlying transaction\n * @property status - String status of this transaction\n * @property time - Timestamp associated with this transaction\n * @property toSmartContract - Whether transaction recipient is a smart contract\n * @property transaction - Underlying Transaction object\n * @property transactionHash - Hash of a successful transaction\n * @property blockNumber - Number of the block where the transaction has been included\n */\nexport type TransactionMeta =\n  | ({\n      status: Exclude<TransactionStatus, TransactionStatus.failed>;\n    } & TransactionMetaBase)\n  | ({ status: TransactionStatus.failed; error: Error } & TransactionMetaBase);\n\ntype TransactionMetaBase = {\n  isTransfer?: boolean;\n  transferInformation?: {\n    symbol: string;\n    contractAddress: string;\n    decimals: number;\n  };\n  id: string;\n  networkID?: string;\n  chainId?: string;\n  origin?: string;\n  rawTransaction?: string;\n  time: number;\n  toSmartContract?: boolean;\n  transaction: Transaction;\n  transactionHash?: string;\n  blockNumber?: string;\n  deviceConfirmedOn?: WalletDevice;\n  verifiedOnBlockchain?: boolean;\n};\n\n/**\n * The status of the transaction. Each status represents the state of the transaction internally\n * in the wallet. Some of these correspond with the state of the transaction on the network, but\n * some are wallet-specific.\n */\nexport enum TransactionStatus {\n  approved = 'approved',\n  cancelled = 'cancelled',\n  confirmed = 'confirmed',\n  failed = 'failed',\n  rejected = 'rejected',\n  signed = 'signed',\n  submitted = 'submitted',\n  unapproved = 'unapproved',\n}\n\n/**\n * Options for wallet device.\n */\nexport enum WalletDevice {\n  MM_MOBILE = 'metamask_mobile',\n  MM_EXTENSION = 'metamask_extension',\n  OTHER = 'other_device',\n}\n\n/**\n * @type Transaction\n *\n * Transaction representation\n * @property chainId - Network ID as per EIP-155\n * @property data - Data to pass with this transaction\n * @property from - Address to send this transaction from\n * @property gas - Gas to send with this transaction\n * @property gasPrice - Price of gas with this transaction\n * @property gasUsed - Gas used in the transaction\n * @property nonce - Unique number to prevent replay attacks\n * @property to - Address to send this transaction to\n * @property value - Value associated with this transaction\n */\nexport interface Transaction {\n  chainId?: number;\n  data?: string;\n  from: string;\n  gas?: string;\n  gasPrice?: string;\n  gasUsed?: string;\n  nonce?: string;\n  to?: string;\n  value?: string;\n  maxFeePerGas?: string;\n  maxPriorityFeePerGas?: string;\n  estimatedBaseFee?: string;\n  estimateGasError?: string;\n}\n\nexport interface RemoteTransactionSourceRequest {\n  address: string;\n  networkType: NetworkType;\n  limit: number;\n  currentChainId: string;\n  currentNetworkId: string;\n  fromBlock?: string;\n  apiKey?: string;\n}\n\nexport interface RemoteTransactionSource {\n  fetchTransactions: (\n    request: RemoteTransactionSourceRequest,\n  ) => Promise<TransactionMeta[]>;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/transaction-controller/dist/utils.d.ts b/node_modules/@metamask/transaction-controller/dist/utils.d.ts
index e74f382..f7441ad 100644
--- a/node_modules/@metamask/transaction-controller/dist/utils.d.ts
+++ b/node_modules/@metamask/transaction-controller/dist/utils.d.ts
@@ -1,13 +1,6 @@
-import { Transaction, FetchAllOptions, GasPriceValue, FeeMarketEIP1559Values } from './TransactionController';
+import { GasPriceValue, FeeMarketEIP1559Values } from './TransactionController';
+import { Transaction } from './types';
 export declare const ESTIMATE_GAS_ERROR = "eth_estimateGas rpc method error";
-/**
- * Return a URL that can be used to fetch ETH transactions.
- *
- * @param networkType - Network type of desired network.
- * @param urlParams - The parameters used to construct the URL.
- * @returns URL to fetch the access the endpoint.
- */
-export declare function getEtherscanApiUrl(networkType: string, urlParams: any): string;
 /**
  * Normalizes properties on a Transaction object.
  *
@@ -30,20 +23,6 @@ export declare function validateTransaction(transaction: Transaction): void;
  * @returns Boolean that is true if the transaction is EIP-1559 (has maxFeePerGas and maxPriorityFeePerGas), otherwise returns false.
  */
 export declare const isEIP1559Transaction: (transaction: Transaction) => boolean;
-/**
- * Handles the fetch of incoming transactions.
- *
- * @param networkType - Network type of desired network.
- * @param address - Address to get the transactions from.
- * @param txHistoryLimit - The maximum number of transactions to fetch.
- * @param opt - Object that can contain fromBlock and Etherscan service API key.
- * @returns Responses for both ETH and ERC20 token transactions.
- */
-export declare function handleTransactionFetch(networkType: string, address: string, txHistoryLimit: number, opt?: FetchAllOptions): Promise<[{
-    [result: string]: [];
-}, {
-    [result: string]: [];
-}]>;
 export declare const validateGasValues: (gasValues: GasPriceValue | FeeMarketEIP1559Values) => void;
 export declare const isFeeMarketEIP1559Values: (gasValues?: GasPriceValue | FeeMarketEIP1559Values | undefined) => gasValues is FeeMarketEIP1559Values;
 export declare const isGasPriceValue: (gasValues?: GasPriceValue | FeeMarketEIP1559Values | undefined) => gasValues is GasPriceValue;
diff --git a/node_modules/@metamask/transaction-controller/dist/utils.js b/node_modules/@metamask/transaction-controller/dist/utils.js
index 6255013..95e7280 100644
--- a/node_modules/@metamask/transaction-controller/dist/utils.js
+++ b/node_modules/@metamask/transaction-controller/dist/utils.js
@@ -1,15 +1,6 @@
 "use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.validateMinimumIncrease = exports.getIncreasedPriceFromExisting = exports.getIncreasedPriceHex = exports.isGasPriceValue = exports.isFeeMarketEIP1559Values = exports.validateGasValues = exports.handleTransactionFetch = exports.isEIP1559Transaction = exports.validateTransaction = exports.normalizeTransaction = exports.getEtherscanApiUrl = exports.ESTIMATE_GAS_ERROR = void 0;
+exports.validateMinimumIncrease = exports.getIncreasedPriceFromExisting = exports.getIncreasedPriceHex = exports.isGasPriceValue = exports.isFeeMarketEIP1559Values = exports.validateGasValues = exports.isEIP1559Transaction = exports.validateTransaction = exports.normalizeTransaction = exports.ESTIMATE_GAS_ERROR = void 0;
 const ethereumjs_util_1 = require("ethereumjs-util");
 const controller_utils_1 = require("@metamask/controller-utils");
 exports.ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';
@@ -25,29 +16,6 @@ const NORMALIZERS = {
     maxPriorityFeePerGas: (maxPriorityFeePerGas) => (0, ethereumjs_util_1.addHexPrefix)(maxPriorityFeePerGas),
     estimatedBaseFee: (maxPriorityFeePerGas) => (0, ethereumjs_util_1.addHexPrefix)(maxPriorityFeePerGas),
 };
-/**
- * Return a URL that can be used to fetch ETH transactions.
- *
- * @param networkType - Network type of desired network.
- * @param urlParams - The parameters used to construct the URL.
- * @returns URL to fetch the access the endpoint.
- */
-function getEtherscanApiUrl(networkType, urlParams) {
-    let etherscanSubdomain = 'api';
-    if (networkType !== controller_utils_1.MAINNET) {
-        etherscanSubdomain = `api-${networkType}`;
-    }
-    const apiUrl = `https://${etherscanSubdomain}.etherscan.io`;
-    let url = `${apiUrl}/api?`;
-    for (const paramKey in urlParams) {
-        if (urlParams[paramKey]) {
-            url += `${paramKey}=${urlParams[paramKey]}&`;
-        }
-    }
-    url += 'tag=latest&page=1';
-    return url;
-}
-exports.getEtherscanApiUrl = getEtherscanApiUrl;
 /**
  * Normalizes properties on a Transaction object.
  *
@@ -121,50 +89,6 @@ const isEIP1559Transaction = (transaction) => {
         hasOwnProp(transaction, 'maxPriorityFeePerGas'));
 };
 exports.isEIP1559Transaction = isEIP1559Transaction;
-/**
- * Handles the fetch of incoming transactions.
- *
- * @param networkType - Network type of desired network.
- * @param address - Address to get the transactions from.
- * @param txHistoryLimit - The maximum number of transactions to fetch.
- * @param opt - Object that can contain fromBlock and Etherscan service API key.
- * @returns Responses for both ETH and ERC20 token transactions.
- */
-function handleTransactionFetch(networkType, address, txHistoryLimit, opt) {
-    return __awaiter(this, void 0, void 0, function* () {
-        // transactions
-        const urlParams = {
-            module: 'account',
-            address,
-            startBlock: opt === null || opt === void 0 ? void 0 : opt.fromBlock,
-            apikey: opt === null || opt === void 0 ? void 0 : opt.etherscanApiKey,
-            offset: txHistoryLimit.toString(),
-            order: 'desc',
-        };
-        const etherscanTxUrl = getEtherscanApiUrl(networkType, Object.assign(Object.assign({}, urlParams), { action: 'txlist' }));
-        const etherscanTxResponsePromise = (0, controller_utils_1.handleFetch)(etherscanTxUrl);
-        // tokens
-        const etherscanTokenUrl = getEtherscanApiUrl(networkType, Object.assign(Object.assign({}, urlParams), { action: 'tokentx' }));
-        const etherscanTokenResponsePromise = (0, controller_utils_1.handleFetch)(etherscanTokenUrl);
-        let [etherscanTxResponse, etherscanTokenResponse] = yield Promise.all([
-            etherscanTxResponsePromise,
-            etherscanTokenResponsePromise,
-        ]);
-        if (etherscanTxResponse.status === '0' ||
-            etherscanTxResponse.result.length <= 0) {
-            etherscanTxResponse = { status: etherscanTxResponse.status, result: [] };
-        }
-        if (etherscanTokenResponse.status === '0' ||
-            etherscanTokenResponse.result.length <= 0) {
-            etherscanTokenResponse = {
-                status: etherscanTokenResponse.status,
-                result: [],
-            };
-        }
-        return [etherscanTxResponse, etherscanTokenResponse];
-    });
-}
-exports.handleTransactionFetch = handleTransactionFetch;
 const validateGasValues = (gasValues) => {
     Object.keys(gasValues).forEach((key) => {
         const value = gasValues[key];
diff --git a/node_modules/@metamask/transaction-controller/dist/utils.js.map b/node_modules/@metamask/transaction-controller/dist/utils.js.map
index 08e5bb1..72a0ff2 100644
--- a/node_modules/@metamask/transaction-controller/dist/utils.js.map
+++ b/node_modules/@metamask/transaction-controller/dist/utils.js.map
@@ -1 +1 @@
-{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { addHexPrefix, isHexString } from 'ethereumjs-util';\nimport {\n  MAINNET,\n  convertHexToDecimal,\n  handleFetch,\n  isValidHexAddress,\n} from '@metamask/controller-utils';\nimport {\n  Transaction,\n  FetchAllOptions,\n  GasPriceValue,\n  FeeMarketEIP1559Values,\n} from './TransactionController';\n\nexport const ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';\n\nconst NORMALIZERS: { [param in keyof Transaction]: any } = {\n  data: (data: string) => addHexPrefix(data),\n  from: (from: string) => addHexPrefix(from).toLowerCase(),\n  gas: (gas: string) => addHexPrefix(gas),\n  gasPrice: (gasPrice: string) => addHexPrefix(gasPrice),\n  nonce: (nonce: string) => addHexPrefix(nonce),\n  to: (to: string) => addHexPrefix(to).toLowerCase(),\n  value: (value: string) => addHexPrefix(value),\n  maxFeePerGas: (maxFeePerGas: string) => addHexPrefix(maxFeePerGas),\n  maxPriorityFeePerGas: (maxPriorityFeePerGas: string) =>\n    addHexPrefix(maxPriorityFeePerGas),\n  estimatedBaseFee: (maxPriorityFeePerGas: string) =>\n    addHexPrefix(maxPriorityFeePerGas),\n};\n\n/**\n * Return a URL that can be used to fetch ETH transactions.\n *\n * @param networkType - Network type of desired network.\n * @param urlParams - The parameters used to construct the URL.\n * @returns URL to fetch the access the endpoint.\n */\nexport function getEtherscanApiUrl(\n  networkType: string,\n  urlParams: any,\n): string {\n  let etherscanSubdomain = 'api';\n  if (networkType !== MAINNET) {\n    etherscanSubdomain = `api-${networkType}`;\n  }\n  const apiUrl = `https://${etherscanSubdomain}.etherscan.io`;\n  let url = `${apiUrl}/api?`;\n\n  for (const paramKey in urlParams) {\n    if (urlParams[paramKey]) {\n      url += `${paramKey}=${urlParams[paramKey]}&`;\n    }\n  }\n  url += 'tag=latest&page=1';\n  return url;\n}\n\n/**\n * Normalizes properties on a Transaction object.\n *\n * @param transaction - Transaction object to normalize.\n * @returns Normalized Transaction object.\n */\nexport function normalizeTransaction(transaction: Transaction) {\n  const normalizedTransaction: Transaction = { from: '' };\n  let key: keyof Transaction;\n  for (key in NORMALIZERS) {\n    if (transaction[key as keyof Transaction]) {\n      normalizedTransaction[key] = NORMALIZERS[key](transaction[key]) as never;\n    }\n  }\n  return normalizedTransaction;\n}\n\n/**\n * Validates a Transaction object for required properties and throws in\n * the event of any validation error.\n *\n * @param transaction - Transaction object to validate.\n */\nexport function validateTransaction(transaction: Transaction) {\n  if (\n    !transaction.from ||\n    typeof transaction.from !== 'string' ||\n    !isValidHexAddress(transaction.from)\n  ) {\n    throw new Error(\n      `Invalid \"from\" address: ${transaction.from} must be a valid string.`,\n    );\n  }\n\n  if (transaction.to === '0x' || transaction.to === undefined) {\n    if (transaction.data) {\n      delete transaction.to;\n    } else {\n      throw new Error(\n        `Invalid \"to\" address: ${transaction.to} must be a valid string.`,\n      );\n    }\n  } else if (\n    transaction.to !== undefined &&\n    !isValidHexAddress(transaction.to)\n  ) {\n    throw new Error(\n      `Invalid \"to\" address: ${transaction.to} must be a valid string.`,\n    );\n  }\n\n  if (transaction.value !== undefined) {\n    const value = transaction.value.toString();\n    if (value.includes('-')) {\n      throw new Error(`Invalid \"value\": ${value} is not a positive number.`);\n    }\n\n    if (value.includes('.')) {\n      throw new Error(\n        `Invalid \"value\": ${value} number must be denominated in wei.`,\n      );\n    }\n    const intValue = parseInt(transaction.value, 10);\n    const isValid =\n      Number.isFinite(intValue) &&\n      !Number.isNaN(intValue) &&\n      !isNaN(Number(value)) &&\n      Number.isSafeInteger(intValue);\n    if (!isValid) {\n      throw new Error(\n        `Invalid \"value\": ${value} number must be a valid number.`,\n      );\n    }\n  }\n}\n\n/**\n * Checks if a transaction is EIP-1559 by checking for the existence of\n * maxFeePerGas and maxPriorityFeePerGas within its parameters.\n *\n * @param transaction - Transaction object to add.\n * @returns Boolean that is true if the transaction is EIP-1559 (has maxFeePerGas and maxPriorityFeePerGas), otherwise returns false.\n */\nexport const isEIP1559Transaction = (transaction: Transaction): boolean => {\n  const hasOwnProp = (obj: Transaction, key: string) =>\n    Object.prototype.hasOwnProperty.call(obj, key);\n  return (\n    hasOwnProp(transaction, 'maxFeePerGas') &&\n    hasOwnProp(transaction, 'maxPriorityFeePerGas')\n  );\n};\n\n/**\n * Handles the fetch of incoming transactions.\n *\n * @param networkType - Network type of desired network.\n * @param address - Address to get the transactions from.\n * @param txHistoryLimit - The maximum number of transactions to fetch.\n * @param opt - Object that can contain fromBlock and Etherscan service API key.\n * @returns Responses for both ETH and ERC20 token transactions.\n */\nexport async function handleTransactionFetch(\n  networkType: string,\n  address: string,\n  txHistoryLimit: number,\n  opt?: FetchAllOptions,\n): Promise<[{ [result: string]: [] }, { [result: string]: [] }]> {\n  // transactions\n  const urlParams = {\n    module: 'account',\n    address,\n    startBlock: opt?.fromBlock,\n    apikey: opt?.etherscanApiKey,\n    offset: txHistoryLimit.toString(),\n    order: 'desc',\n  };\n  const etherscanTxUrl = getEtherscanApiUrl(networkType, {\n    ...urlParams,\n    action: 'txlist',\n  });\n  const etherscanTxResponsePromise = handleFetch(etherscanTxUrl);\n\n  // tokens\n  const etherscanTokenUrl = getEtherscanApiUrl(networkType, {\n    ...urlParams,\n    action: 'tokentx',\n  });\n  const etherscanTokenResponsePromise = handleFetch(etherscanTokenUrl);\n\n  let [etherscanTxResponse, etherscanTokenResponse] = await Promise.all([\n    etherscanTxResponsePromise,\n    etherscanTokenResponsePromise,\n  ]);\n\n  if (\n    etherscanTxResponse.status === '0' ||\n    etherscanTxResponse.result.length <= 0\n  ) {\n    etherscanTxResponse = { status: etherscanTxResponse.status, result: [] };\n  }\n\n  if (\n    etherscanTokenResponse.status === '0' ||\n    etherscanTokenResponse.result.length <= 0\n  ) {\n    etherscanTokenResponse = {\n      status: etherscanTokenResponse.status,\n      result: [],\n    };\n  }\n\n  return [etherscanTxResponse, etherscanTokenResponse];\n}\n\nexport const validateGasValues = (\n  gasValues: GasPriceValue | FeeMarketEIP1559Values,\n) => {\n  Object.keys(gasValues).forEach((key) => {\n    const value = (gasValues as any)[key];\n    if (typeof value !== 'string' || !isHexString(value)) {\n      throw new TypeError(\n        `expected hex string for ${key} but received: ${value}`,\n      );\n    }\n  });\n};\n\nexport const isFeeMarketEIP1559Values = (\n  gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n): gasValues is FeeMarketEIP1559Values =>\n  (gasValues as FeeMarketEIP1559Values)?.maxFeePerGas !== undefined ||\n  (gasValues as FeeMarketEIP1559Values)?.maxPriorityFeePerGas !== undefined;\n\nexport const isGasPriceValue = (\n  gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n): gasValues is GasPriceValue =>\n  (gasValues as GasPriceValue)?.gasPrice !== undefined;\n\nexport const getIncreasedPriceHex = (value: number, rate: number): string =>\n  addHexPrefix(`${parseInt(`${value * rate}`, 10).toString(16)}`);\n\nexport const getIncreasedPriceFromExisting = (\n  value: string | undefined,\n  rate: number,\n): string => {\n  return getIncreasedPriceHex(convertHexToDecimal(value), rate);\n};\n\n/**\n * Validates that the proposed value is greater than or equal to the minimum value.\n *\n * @param proposed - The proposed value.\n * @param min - The minimum value.\n * @returns The proposed value.\n * @throws Will throw if the proposed value is too low.\n */\nexport function validateMinimumIncrease(proposed: string, min: string) {\n  const proposedDecimal = convertHexToDecimal(proposed);\n  const minDecimal = convertHexToDecimal(min);\n  if (proposedDecimal >= minDecimal) {\n    return proposed;\n  }\n  const errorMsg = `The proposed value: ${proposedDecimal} should meet or exceed the minimum value: ${minDecimal}`;\n  throw new Error(errorMsg);\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { addHexPrefix, isHexString } from 'ethereumjs-util';\nimport {\n  convertHexToDecimal,\n  isValidHexAddress,\n} from '@metamask/controller-utils';\nimport { GasPriceValue, FeeMarketEIP1559Values } from './TransactionController';\nimport { Transaction } from './types';\n\nexport const ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';\n\nconst NORMALIZERS: { [param in keyof Transaction]: any } = {\n  data: (data: string) => addHexPrefix(data),\n  from: (from: string) => addHexPrefix(from).toLowerCase(),\n  gas: (gas: string) => addHexPrefix(gas),\n  gasPrice: (gasPrice: string) => addHexPrefix(gasPrice),\n  nonce: (nonce: string) => addHexPrefix(nonce),\n  to: (to: string) => addHexPrefix(to).toLowerCase(),\n  value: (value: string) => addHexPrefix(value),\n  maxFeePerGas: (maxFeePerGas: string) => addHexPrefix(maxFeePerGas),\n  maxPriorityFeePerGas: (maxPriorityFeePerGas: string) =>\n    addHexPrefix(maxPriorityFeePerGas),\n  estimatedBaseFee: (maxPriorityFeePerGas: string) =>\n    addHexPrefix(maxPriorityFeePerGas),\n};\n\n/**\n * Normalizes properties on a Transaction object.\n *\n * @param transaction - Transaction object to normalize.\n * @returns Normalized Transaction object.\n */\nexport function normalizeTransaction(transaction: Transaction) {\n  const normalizedTransaction: Transaction = { from: '' };\n  let key: keyof Transaction;\n  for (key in NORMALIZERS) {\n    if (transaction[key as keyof Transaction]) {\n      normalizedTransaction[key] = NORMALIZERS[key](transaction[key]) as never;\n    }\n  }\n  return normalizedTransaction;\n}\n\n/**\n * Validates a Transaction object for required properties and throws in\n * the event of any validation error.\n *\n * @param transaction - Transaction object to validate.\n */\nexport function validateTransaction(transaction: Transaction) {\n  if (\n    !transaction.from ||\n    typeof transaction.from !== 'string' ||\n    !isValidHexAddress(transaction.from)\n  ) {\n    throw new Error(\n      `Invalid \"from\" address: ${transaction.from} must be a valid string.`,\n    );\n  }\n\n  if (transaction.to === '0x' || transaction.to === undefined) {\n    if (transaction.data) {\n      delete transaction.to;\n    } else {\n      throw new Error(\n        `Invalid \"to\" address: ${transaction.to} must be a valid string.`,\n      );\n    }\n  } else if (\n    transaction.to !== undefined &&\n    !isValidHexAddress(transaction.to)\n  ) {\n    throw new Error(\n      `Invalid \"to\" address: ${transaction.to} must be a valid string.`,\n    );\n  }\n\n  if (transaction.value !== undefined) {\n    const value = transaction.value.toString();\n    if (value.includes('-')) {\n      throw new Error(`Invalid \"value\": ${value} is not a positive number.`);\n    }\n\n    if (value.includes('.')) {\n      throw new Error(\n        `Invalid \"value\": ${value} number must be denominated in wei.`,\n      );\n    }\n    const intValue = parseInt(transaction.value, 10);\n    const isValid =\n      Number.isFinite(intValue) &&\n      !Number.isNaN(intValue) &&\n      !isNaN(Number(value)) &&\n      Number.isSafeInteger(intValue);\n    if (!isValid) {\n      throw new Error(\n        `Invalid \"value\": ${value} number must be a valid number.`,\n      );\n    }\n  }\n}\n\n/**\n * Checks if a transaction is EIP-1559 by checking for the existence of\n * maxFeePerGas and maxPriorityFeePerGas within its parameters.\n *\n * @param transaction - Transaction object to add.\n * @returns Boolean that is true if the transaction is EIP-1559 (has maxFeePerGas and maxPriorityFeePerGas), otherwise returns false.\n */\nexport const isEIP1559Transaction = (transaction: Transaction): boolean => {\n  const hasOwnProp = (obj: Transaction, key: string) =>\n    Object.prototype.hasOwnProperty.call(obj, key);\n  return (\n    hasOwnProp(transaction, 'maxFeePerGas') &&\n    hasOwnProp(transaction, 'maxPriorityFeePerGas')\n  );\n};\n\nexport const validateGasValues = (\n  gasValues: GasPriceValue | FeeMarketEIP1559Values,\n) => {\n  Object.keys(gasValues).forEach((key) => {\n    const value = (gasValues as any)[key];\n    if (typeof value !== 'string' || !isHexString(value)) {\n      throw new TypeError(\n        `expected hex string for ${key} but received: ${value}`,\n      );\n    }\n  });\n};\n\nexport const isFeeMarketEIP1559Values = (\n  gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n): gasValues is FeeMarketEIP1559Values =>\n  (gasValues as FeeMarketEIP1559Values)?.maxFeePerGas !== undefined ||\n  (gasValues as FeeMarketEIP1559Values)?.maxPriorityFeePerGas !== undefined;\n\nexport const isGasPriceValue = (\n  gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n): gasValues is GasPriceValue =>\n  (gasValues as GasPriceValue)?.gasPrice !== undefined;\n\nexport const getIncreasedPriceHex = (value: number, rate: number): string =>\n  addHexPrefix(`${parseInt(`${value * rate}`, 10).toString(16)}`);\n\nexport const getIncreasedPriceFromExisting = (\n  value: string | undefined,\n  rate: number,\n): string => {\n  return getIncreasedPriceHex(convertHexToDecimal(value), rate);\n};\n\n/**\n * Validates that the proposed value is greater than or equal to the minimum value.\n *\n * @param proposed - The proposed value.\n * @param min - The minimum value.\n * @returns The proposed value.\n * @throws Will throw if the proposed value is too low.\n */\nexport function validateMinimumIncrease(proposed: string, min: string) {\n  const proposedDecimal = convertHexToDecimal(proposed);\n  const minDecimal = convertHexToDecimal(min);\n  if (proposedDecimal >= minDecimal) {\n    return proposed;\n  }\n  const errorMsg = `The proposed value: ${proposedDecimal} should meet or exceed the minimum value: ${minDecimal}`;\n  throw new Error(errorMsg);\n}\n"]}
\ No newline at end of file
