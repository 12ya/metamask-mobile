diff --git a/node_modules/@metamask/preferences-controller/dist/PreferencesController.d.ts b/node_modules/@metamask/preferences-controller/dist/PreferencesController.d.ts
index 323a8e8..eed6dcc 100644
--- a/node_modules/@metamask/preferences-controller/dist/PreferencesController.d.ts
+++ b/node_modules/@metamask/preferences-controller/dist/PreferencesController.d.ts
@@ -35,7 +35,7 @@ export interface PreferencesState extends BaseState {
     selectedAddress: string;
     useTokenDetection: boolean;
     useNftDetection: boolean;
-    openSeaEnabled: boolean;
+    displayNftMedia: boolean;
     securityAlertsEnabled: boolean;
     isMultiAccountBalancesEnabled: boolean;
     disabledRpcMethodPreferences: {
@@ -43,6 +43,8 @@ export interface PreferencesState extends BaseState {
     };
     showTestNetworks: boolean;
     isIpfsGatewayEnabled: boolean;
+    securityAlertsEnabled: boolean;
+    showIncomingTransactions: {[hexChainId: string]: boolean};
 }
 /**
  * Controller that stores shared settings and exposes convenience methods
@@ -125,11 +127,11 @@ export declare class PreferencesController extends BaseController<BaseConfig, Pr
      */
     setUseNftDetection(useNftDetection: boolean): void;
     /**
-     * Toggle the opensea enabled setting.
+     * Toggle the display nft media enabled setting.
      *
-     * @param openSeaEnabled - Boolean indicating user preference on using OpenSea's API.
+     * @param displayNftMedia - Boolean indicating user preference on using web2 third parties.
      */
-    setOpenSeaEnabled(openSeaEnabled: boolean): void;
+    setDisplayNftMedia(displayNftMedia: boolean): void;
     /**
      * Toggle the security alert enabled setting.
      *
@@ -161,6 +163,11 @@ export declare class PreferencesController extends BaseController<BaseConfig, Pr
      * @param isIpfsGatewayEnabled - true to enable ipfs source
      */
     setIsIpfsGatewayEnabled(isIpfsGatewayEnabled: boolean): void;
+    setEnableNetworkIncomingTransactions(
+        chainId: string,
+        isIncomingTransactionNetworkEnable: boolean,
+    ):void;
+    
 }
 export default PreferencesController;
 //# sourceMappingURL=PreferencesController.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/preferences-controller/dist/PreferencesController.js b/node_modules/@metamask/preferences-controller/dist/PreferencesController.js
index 1a98ab0..e55cd3f 100644
--- a/node_modules/@metamask/preferences-controller/dist/PreferencesController.js
+++ b/node_modules/@metamask/preferences-controller/dist/PreferencesController.js
@@ -3,6 +3,29 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.PreferencesController = void 0;
 const base_controller_1 = require("@metamask/base-controller");
 const controller_utils_1 = require("@metamask/controller-utils");
+
+const ETHERSCAN_SUPPORTED_CHAIN_IDS = {
+                MAINNET: '0x1',
+                GOERLI: '0x5',
+                BSC: '0x38',
+                BSC_TESTNET: '0x61',
+                OPTIMISM: '0xa',
+                OPTIMISM_TESTNET: '0x1a4',
+                POLYGON: '0x89',
+                POLYGON_TESTNET: '0x13881',
+                AVALANCHE: '0xa86a',
+                AVALANCHE_TESTNET: '0xa869',
+                FANTOM: '0xfa',
+                FANTOM_TESTNET: '0xfa2',
+                SEPOLIA: '0xaa36a7',
+                LINEA_GOERLI: '0xe704',
+                LINEA_MAINNET: '0xe708',
+                MOONBEAM: '0x504',
+                MOONBEAM_TESTNET: '0x507',
+                MOONRIVER: '0x505',
+                GNOSIS: '0x64',
+              };
+    
 /**
  * Controller that stores shared settings and exposes convenience methods
  */
@@ -27,7 +50,7 @@ class PreferencesController extends base_controller_1.BaseController {
             selectedAddress: '',
             useTokenDetection: true,
             useNftDetection: false,
-            openSeaEnabled: false,
+            displayNftMedia: true,
             securityAlertsEnabled: false,
             isMultiAccountBalancesEnabled: true,
             disabledRpcMethodPreferences: {
@@ -35,6 +58,27 @@ class PreferencesController extends base_controller_1.BaseController {
             },
             showTestNetworks: false,
             isIpfsGatewayEnabled: true,
+            showIncomingTransactions: {
+                                [ETHERSCAN_SUPPORTED_CHAIN_IDS.MAINNET]: true,
+                                [ETHERSCAN_SUPPORTED_CHAIN_IDS.GOERLI]: true,
+                                [ETHERSCAN_SUPPORTED_CHAIN_IDS.BSC]: true,
+                                [ETHERSCAN_SUPPORTED_CHAIN_IDS.BSC_TESTNET]: true,
+                                [ETHERSCAN_SUPPORTED_CHAIN_IDS.OPTIMISM]: true,
+                                [ETHERSCAN_SUPPORTED_CHAIN_IDS.OPTIMISM_TESTNET]: true,
+                                [ETHERSCAN_SUPPORTED_CHAIN_IDS.POLYGON]: true,
+                                [ETHERSCAN_SUPPORTED_CHAIN_IDS.POLYGON_TESTNET]: true,
+                                [ETHERSCAN_SUPPORTED_CHAIN_IDS.AVALANCHE]: true,
+                                [ETHERSCAN_SUPPORTED_CHAIN_IDS.AVALANCHE_TESTNET]: true,
+                                [ETHERSCAN_SUPPORTED_CHAIN_IDS.FANTOM]: true,
+                                [ETHERSCAN_SUPPORTED_CHAIN_IDS.FANTOM_TESTNET]: true,
+                                [ETHERSCAN_SUPPORTED_CHAIN_IDS.SEPOLIA]: true,
+                                [ETHERSCAN_SUPPORTED_CHAIN_IDS.LINEA_GOERLI]: true,
+                                [ETHERSCAN_SUPPORTED_CHAIN_IDS.LINEA_MAINNET]: true,
+                                [ETHERSCAN_SUPPORTED_CHAIN_IDS.MOONBEAM]: true,
+                                [ETHERSCAN_SUPPORTED_CHAIN_IDS.MOONBEAM_TESTNET]: true,
+                                [ETHERSCAN_SUPPORTED_CHAIN_IDS.MOONRIVER]: true,
+                                [ETHERSCAN_SUPPORTED_CHAIN_IDS.GNOSIS]: true,
+                              }
         };
         this.initialize();
     }
@@ -67,11 +111,26 @@ class PreferencesController extends base_controller_1.BaseController {
     removeIdentity(address) {
         address = (0, controller_utils_1.toChecksumHexAddress)(address);
         const { identities } = this.state;
+
         if (!identities[address]) {
             return;
         }
         delete identities[address];
         this.update({ identities: Object.assign({}, identities) });
+
+        /**
+         * ======= PATCH INFORMATION =======
+         * Guard logic in case the identities
+         * object is empty.
+         * 
+         * This is done to help research the issue
+         * https://github.com/MetaMask/mobile-planning/issues/1507
+         */
+
+        if (Object.keys(identities).length === 0) {
+            throw new Error('PreferencesController: identities object is empty. No address can be assigned to selectedAddress');
+        }
+
         if (address === this.state.selectedAddress) {
             this.update({ selectedAddress: Object.keys(identities)[0] });
         }
@@ -107,6 +166,18 @@ class PreferencesController extends base_controller_1.BaseController {
      * @returns Newly-selected address after syncing.
      */
     syncIdentities(addresses) {
+        /**
+         * ======= PATCH INFORMATION =======
+         * Guard logic in case the identities
+         * array is empty.
+         * 
+         * This is done to help research the issue
+         * https://github.com/MetaMask/mobile-planning/issues/1507
+         */
+
+        if (addresses.length === 0) {
+            throw new Error('PreferencesController: addresses array is empty. No address can be assigned to selectedAddress');
+        }
         addresses = addresses.map((address) => (0, controller_utils_1.toChecksumHexAddress)(address));
         const { identities, lostIdentities } = this.state;
         const newlyLost = {};
@@ -151,6 +222,20 @@ class PreferencesController extends base_controller_1.BaseController {
         }, {});
         let { selectedAddress } = this.state;
         if (!Object.keys(identities).includes(selectedAddress)) {
+            
+            /**
+             * ======= PATCH INFORMATION =======
+             * Guard logic in case the identities
+             * object is empty.
+             * 
+             * This is done to help research the issue
+             * https://github.com/MetaMask/mobile-planning/issues/1507
+             */
+
+            if (Object.keys(identities).length === 0) {
+                throw new Error('PreferencesController: Identities array is empty. No address can be assigned to selectedAddress');
+            }
+
             selectedAddress = Object.keys(identities)[0];
         }
         this.update({ identities: Object.assign({}, identities), selectedAddress });
@@ -161,6 +246,17 @@ class PreferencesController extends base_controller_1.BaseController {
      * @param selectedAddress - Ethereum address.
      */
     setSelectedAddress(selectedAddress) {
+        /**
+         * ======= PATCH INFORMATION =======
+         * Guard logic in case selectedAddress
+         * is not a string.
+         * 
+         * This is done to help research the issue
+         * https://github.com/MetaMask/mobile-planning/issues/1507
+         */
+        if (typeof selectedAddress !== 'string') {
+            throw new Error('PreferencesController: Selected address must be a string. No address can be assigned to selectedAddress');
+        }
         this.update({ selectedAddress: (0, controller_utils_1.toChecksumHexAddress)(selectedAddress) });
     }
     /**
@@ -185,19 +281,19 @@ class PreferencesController extends base_controller_1.BaseController {
      * @param useNftDetection - Boolean indicating user preference on NFT detection.
      */
     setUseNftDetection(useNftDetection) {
-        if (useNftDetection && !this.state.openSeaEnabled) {
-            throw new Error('useNftDetection cannot be enabled if openSeaEnabled is false');
+        if (useNftDetection && !this.state.displayNftMedia) {
+            throw new Error('useNftDetection cannot be enabled if displayNftMedia is false');
         }
         this.update({ useNftDetection });
     }
     /**
-     * Toggle the opensea enabled setting.
+     * Toggle the display nft media enabled setting.
      *
-     * @param openSeaEnabled - Boolean indicating user preference on using OpenSea's API.
+     * @param displayNftMedia - Boolean indicating user preference on using web2 third parties.
      */
-    setOpenSeaEnabled(openSeaEnabled) {
-        this.update({ openSeaEnabled });
-        if (!openSeaEnabled) {
+    setDisplayNftMedia(displayNftMedia) {
+        this.update({ displayNftMedia });
+        if (!displayNftMedia) {
             this.update({ useNftDetection: false });
         }
     }
@@ -244,7 +340,25 @@ class PreferencesController extends base_controller_1.BaseController {
     setIsIpfsGatewayEnabled(isIpfsGatewayEnabled) {
         this.update({ isIpfsGatewayEnabled });
     }
+    /**
+     * A setter for the user allow to be fetched IPFS content
+     *
+     * @param chainId - On hexadecimal format to enable the incoming transaction network
+     * @param isIncomingTransactionNetworkEnable - true to enable incoming transactions
+     */
+    setEnableNetworkIncomingTransactions(
+            chainId,
+            isIncomingTransactionNetworkEnable,
+        ) {
+            this.update({
+              showIncomingTransactions: {
+                ...this.state.showIncomingTransactions,
+                [chainId]: isIncomingTransactionNetworkEnable,
+              },
+            });
+        }
 }
+exports.ETHERSCAN_SUPPORTED_CHAIN_IDS = ETHERSCAN_SUPPORTED_CHAIN_IDS;
 exports.PreferencesController = PreferencesController;
 exports.default = PreferencesController;
 //# sourceMappingURL=PreferencesController.js.map
\ No newline at end of file
