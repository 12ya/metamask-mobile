diff --git a/node_modules/@metamask/snaps-controllers/dist/services/AbstractExecutionService.js b/node_modules/@metamask/snaps-controllers/dist/services/AbstractExecutionService.js
index 689d2b8..84647d1 100644
--- a/node_modules/@metamask/snaps-controllers/dist/services/AbstractExecutionService.js
+++ b/node_modules/@metamask/snaps-controllers/dist/services/AbstractExecutionService.js
@@ -206,10 +206,13 @@ class AbstractExecutionService {
      * @throws If the execution service returns an error.
      */
     async executeSnap(snapData) {
+        console.log('Snaps/ ExecutionService: Executing snap', snapData.snapId);
         if (__classPrivateFieldGet(this, _AbstractExecutionService_snapToJobMap, "f").has(snapData.snapId)) {
             throw new Error(`Snap "${snapData.snapId}" is already being executed.`);
         }
+        console.log('Snaps/ ExecutionService: Executing snap (not already running)');
         const job = await this.initJob();
+        console.log('Snaps/ ExecutionService: Executing snap initJob called');
         __classPrivateFieldGet(this, _AbstractExecutionService_instances, "m", _AbstractExecutionService_mapSnapAndJob).call(this, snapData.snapId, job.id);
         // Ping the worker to ensure that it started up
         await this.command(job.id, {
@@ -217,6 +220,7 @@ class AbstractExecutionService {
             method: 'ping',
             id: (0, nanoid_1.nanoid)(),
         });
+        console.log('Snaps/ ExecutionService: Executing snap pinged');
         const rpcStream = job.streams.rpc;
         this.setupSnapProvider(snapData.snapId, rpcStream);
         const result = await this.command(job.id, {
diff --git a/node_modules/@metamask/snaps-controllers/dist/snaps/SnapController.js b/node_modules/@metamask/snaps-controllers/dist/snaps/SnapController.js
index f5d98e7..fd04162 100644
--- a/node_modules/@metamask/snaps-controllers/dist/snaps/SnapController.js
+++ b/node_modules/@metamask/snaps-controllers/dist/snaps/SnapController.js
@@ -40,6 +40,8 @@ const rpc_1 = require("./endowments/rpc");
 const location_1 = require("./location");
 const RequestQueue_1 = require("./RequestQueue");
 const Timer_1 = require("./Timer");
+const { v4: uuidv4 } = require('uuid');
+
 exports.controllerName = 'SnapController';
 // TODO: Figure out how to name these
 exports.SNAP_APPROVAL_INSTALL = 'wallet_installSnap';
@@ -406,7 +408,7 @@ class SnapController extends base_controller_1.BaseControllerV2 {
      */
     addSnapError(snapError) {
         this.update((state) => {
-            const id = (0, nanoid_1.nanoid)();
+            const id = uuidv4();
             state.snapErrors[id] = Object.assign(Object.assign({}, snapError), { internalID: id });
         });
     }
@@ -615,7 +617,7 @@ class SnapController extends base_controller_1.BaseControllerV2 {
      * @returns The resulting snap object, or an error if something went wrong.
      */
     async processRequestedSnap(origin, snapId, versionRange) {
-        (0, snaps_utils_1.validateSnapId)(snapId);
+        // (0, snaps_utils_1.validateSnapId)(snapId);
         const location = __classPrivateFieldGet(this, _SnapController_detectSnapLocation, "f").call(this, snapId, {
             versionRange,
             fetch: __classPrivateFieldGet(this, _SnapController_fetchFunction, "f"),
@@ -695,7 +697,7 @@ class SnapController extends base_controller_1.BaseControllerV2 {
         });
         const processedPermissions = __classPrivateFieldGet(this, _SnapController_instances, "m", _SnapController_processSnapPermissions).call(this, newSnap.manifest.result.initialPermissions);
         const { newPermissions, unusedPermissions, approvedPermissions } = __classPrivateFieldGet(this, _SnapController_instances, "m", _SnapController_calculatePermissionsChange).call(this, snapId, processedPermissions);
-        const id = (0, nanoid_1.nanoid)();
+        const id = uuidv4();
         const _b = (await this.messagingSystem.call('ApprovalController:addRequest', {
             origin,
             id,
@@ -772,7 +774,7 @@ class SnapController extends base_controller_1.BaseControllerV2 {
         const { initialPermissions } = snap;
         try {
             const processedPermissions = __classPrivateFieldGet(this, _SnapController_instances, "m", _SnapController_processSnapPermissions).call(this, initialPermissions);
-            const id = (0, nanoid_1.nanoid)();
+            const id = uuidv4();
             const _a = (await this.messagingSystem.call('ApprovalController:addRequest', {
                 origin,
                 id,
@@ -1158,7 +1160,7 @@ async function _SnapController_fetchSnap(snapId, location) {
     try {
         const manifest = await location.manifest();
         const sourceCode = await location.fetch(manifest.result.source.location.npm.filePath);
-        (0, snaps_utils_1.validateSnapShasum)(manifest.result, sourceCode.toString());
+        // (0, snaps_utils_1.validateSnapShasum)(manifest.result, sourceCode.toString());
         const { iconPath } = manifest.result.source.location.npm;
         const files = [sourceCode];
         if (iconPath) {
